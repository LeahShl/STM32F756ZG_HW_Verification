
HW_Verification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fde8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bc4  0800ffb8  0800ffb8  00010fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b7c  08012b7c  000141c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012b7c  08012b7c  00013b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b84  08012b84  000141c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012b84  08012b84  00013b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012b88  08012b88  00013b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08012b8c  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  08012c14  00014088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  08012cb4  00014128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00007d54  200001c8  08012d54  000141c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20007f1c  08012d54  00014f1c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000141c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e41d  00000000  00000000  000141f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000552a  00000000  00000000  00032615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001558  00000000  00000000  00037b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001104  00000000  00000000  00039098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003248b  00000000  00000000  0003a19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000244f6  00000000  00000000  0006c627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00101101  00000000  00000000  00090b1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00191c1e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005dd0  00000000  00000000  00191c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  00197a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c8 	.word	0x200001c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ffa0 	.word	0x0800ffa0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001cc 	.word	0x200001cc
 800020c:	0800ffa0 	.word	0x0800ffa0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	b087      	sub	sp, #28
 80005e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e2:	4b21      	ldr	r3, [pc, #132]	@ (8000668 <MX_GPIO_Init+0x8c>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a20      	ldr	r2, [pc, #128]	@ (8000668 <MX_GPIO_Init+0x8c>)
 80005e8:	f043 0304 	orr.w	r3, r3, #4
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000668 <MX_GPIO_Init+0x8c>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f003 0304 	and.w	r3, r3, #4
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000668 <MX_GPIO_Init+0x8c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	4a1a      	ldr	r2, [pc, #104]	@ (8000668 <MX_GPIO_Init+0x8c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6313      	str	r3, [r2, #48]	@ 0x30
 8000606:	4b18      	ldr	r3, [pc, #96]	@ (8000668 <MX_GPIO_Init+0x8c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	4b15      	ldr	r3, [pc, #84]	@ (8000668 <MX_GPIO_Init+0x8c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	4a14      	ldr	r2, [pc, #80]	@ (8000668 <MX_GPIO_Init+0x8c>)
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	6313      	str	r3, [r2, #48]	@ 0x30
 800061e:	4b12      	ldr	r3, [pc, #72]	@ (8000668 <MX_GPIO_Init+0x8c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800062a:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <MX_GPIO_Init+0x8c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4a0e      	ldr	r2, [pc, #56]	@ (8000668 <MX_GPIO_Init+0x8c>)
 8000630:	f043 0308 	orr.w	r3, r3, #8
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
 8000636:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <MX_GPIO_Init+0x8c>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000642:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <MX_GPIO_Init+0x8c>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	4a08      	ldr	r2, [pc, #32]	@ (8000668 <MX_GPIO_Init+0x8c>)
 8000648:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800064c:	6313      	str	r3, [r2, #48]	@ 0x30
 800064e:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <MX_GPIO_Init+0x8c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]

}
 800065a:	bf00      	nop
 800065c:	371c      	adds	r7, #28
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000670:	f000 fb93 	bl	8000d9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000674:	f000 f80a 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000678:	f7ff ffb0 	bl	80005dc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800067c:	f000 f9c6 	bl	8000a0c <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8000680:	f004 fa38 	bl	8004af4 <MX_LWIP_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 8000684:	f004 fb76 	bl	8004d74 <MX_LWIP_Process>
 8000688:	e7fc      	b.n	8000684 <main+0x18>
	...

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b094      	sub	sp, #80	@ 0x50
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	2230      	movs	r2, #48	@ 0x30
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f00e fddd 	bl	800f25a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	4b2a      	ldr	r3, [pc, #168]	@ (800075c <SystemClock_Config+0xd0>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b4:	4a29      	ldr	r2, [pc, #164]	@ (800075c <SystemClock_Config+0xd0>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80006bc:	4b27      	ldr	r3, [pc, #156]	@ (800075c <SystemClock_Config+0xd0>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	4b25      	ldr	r3, [pc, #148]	@ (8000760 <SystemClock_Config+0xd4>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a24      	ldr	r2, [pc, #144]	@ (8000760 <SystemClock_Config+0xd4>)
 80006ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b22      	ldr	r3, [pc, #136]	@ (8000760 <SystemClock_Config+0xd4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e0:	2302      	movs	r3, #2
 80006e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	2301      	movs	r3, #1
 80006e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e8:	2310      	movs	r3, #16
 80006ea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ec:	2302      	movs	r3, #2
 80006ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f0:	2300      	movs	r3, #0
 80006f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f4:	2308      	movs	r3, #8
 80006f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006f8:	23d8      	movs	r3, #216	@ 0xd8
 80006fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000700:	2302      	movs	r3, #2
 8000702:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000704:	f107 0320 	add.w	r3, r7, #32
 8000708:	4618      	mov	r0, r3
 800070a:	f002 f9b5 	bl	8002a78 <HAL_RCC_OscConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000714:	f000 f826 	bl	8000764 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000718:	f002 f95e 	bl	80029d8 <HAL_PWREx_EnableOverDrive>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000722:	f000 f81f 	bl	8000764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000726:	230f      	movs	r3, #15
 8000728:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072a:	2302      	movs	r3, #2
 800072c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000732:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000736:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000738:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800073c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	2107      	movs	r1, #7
 8000744:	4618      	mov	r0, r3
 8000746:	f002 fc3b 	bl	8002fc0 <HAL_RCC_ClockConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000750:	f000 f808 	bl	8000764 <Error_Handler>
  }
}
 8000754:	bf00      	nop
 8000756:	3750      	adds	r7, #80	@ 0x50
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000768:	b672      	cpsid	i
}
 800076a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <Error_Handler+0x8>

08000770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <HAL_MspInit+0x44>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077a:	4a0e      	ldr	r2, [pc, #56]	@ (80007b4 <HAL_MspInit+0x44>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000780:	6413      	str	r3, [r2, #64]	@ 0x40
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <HAL_MspInit+0x44>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <HAL_MspInit+0x44>)
 8000790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000792:	4a08      	ldr	r2, [pc, #32]	@ (80007b4 <HAL_MspInit+0x44>)
 8000794:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000798:	6453      	str	r3, [r2, #68]	@ 0x44
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <HAL_MspInit+0x44>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800079e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <NMI_Handler+0x4>

080007c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <HardFault_Handler+0x4>

080007c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <MemManage_Handler+0x4>

080007d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <BusFault_Handler+0x4>

080007d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <UsageFault_Handler+0x4>

080007e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800080e:	f000 fb01 	bl	8000e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800081c:	4802      	ldr	r0, [pc, #8]	@ (8000828 <USART3_IRQHandler+0x10>)
 800081e:	f003 f9f3 	bl	8003c08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200001e8 	.word	0x200001e8

0800082c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000830:	4802      	ldr	r0, [pc, #8]	@ (800083c <ETH_IRQHandler+0x10>)
 8000832:	f001 f839 	bl	80018a8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20004c50 	.word	0x20004c50

08000840 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000844:	4802      	ldr	r0, [pc, #8]	@ (8000850 <ETH_WKUP_IRQHandler+0x10>)
 8000846:	f001 f82f 	bl	80018a8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20004c50 	.word	0x20004c50

08000854 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return 1;
 8000858:	2301      	movs	r3, #1
}
 800085a:	4618      	mov	r0, r3
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <_kill>:

int _kill(int pid, int sig)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800086e:	4b05      	ldr	r3, [pc, #20]	@ (8000884 <_kill+0x20>)
 8000870:	2216      	movs	r2, #22
 8000872:	601a      	str	r2, [r3, #0]
  return -1;
 8000874:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000878:	4618      	mov	r0, r3
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	20007f0c 	.word	0x20007f0c

08000888 <_exit>:

void _exit (int status)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000890:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f7ff ffe5 	bl	8000864 <_kill>
  while (1) {}    /* Make sure we hang here */
 800089a:	bf00      	nop
 800089c:	e7fd      	b.n	800089a <_exit+0x12>

0800089e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b086      	sub	sp, #24
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	60f8      	str	r0, [r7, #12]
 80008a6:	60b9      	str	r1, [r7, #8]
 80008a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
 80008ae:	e00a      	b.n	80008c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008b0:	f3af 8000 	nop.w
 80008b4:	4601      	mov	r1, r0
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	1c5a      	adds	r2, r3, #1
 80008ba:	60ba      	str	r2, [r7, #8]
 80008bc:	b2ca      	uxtb	r2, r1
 80008be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	3301      	adds	r3, #1
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	697a      	ldr	r2, [r7, #20]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	dbf0      	blt.n	80008b0 <_read+0x12>
  }

  return len;
 80008ce:	687b      	ldr	r3, [r7, #4]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3718      	adds	r7, #24
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	e009      	b.n	80008fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	1c5a      	adds	r2, r3, #1
 80008ee:	60ba      	str	r2, [r7, #8]
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	3301      	adds	r3, #1
 80008fc:	617b      	str	r3, [r7, #20]
 80008fe:	697a      	ldr	r2, [r7, #20]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	429a      	cmp	r2, r3
 8000904:	dbf1      	blt.n	80008ea <_write+0x12>
  }
  return len;
 8000906:	687b      	ldr	r3, [r7, #4]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3718      	adds	r7, #24
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <_close>:

int _close(int file)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000918:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800091c:	4618      	mov	r0, r3
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000938:	605a      	str	r2, [r3, #4]
  return 0;
 800093a:	2300      	movs	r3, #0
}
 800093c:	4618      	mov	r0, r3
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <_isatty>:

int _isatty(int file)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000950:	2301      	movs	r3, #1
}
 8000952:	4618      	mov	r0, r3
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800095e:	b480      	push	{r7}
 8000960:	b085      	sub	sp, #20
 8000962:	af00      	add	r7, sp, #0
 8000964:	60f8      	str	r0, [r7, #12]
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800096a:	2300      	movs	r3, #0
}
 800096c:	4618      	mov	r0, r3
 800096e:	3714      	adds	r7, #20
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000978:	b480      	push	{r7}
 800097a:	b087      	sub	sp, #28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000980:	4a14      	ldr	r2, [pc, #80]	@ (80009d4 <_sbrk+0x5c>)
 8000982:	4b15      	ldr	r3, [pc, #84]	@ (80009d8 <_sbrk+0x60>)
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800098c:	4b13      	ldr	r3, [pc, #76]	@ (80009dc <_sbrk+0x64>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d102      	bne.n	800099a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000994:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <_sbrk+0x64>)
 8000996:	4a12      	ldr	r2, [pc, #72]	@ (80009e0 <_sbrk+0x68>)
 8000998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800099a:	4b10      	ldr	r3, [pc, #64]	@ (80009dc <_sbrk+0x64>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4413      	add	r3, r2
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d205      	bcs.n	80009b4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80009a8:	4b0e      	ldr	r3, [pc, #56]	@ (80009e4 <_sbrk+0x6c>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009b2:	e009      	b.n	80009c8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b4:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <_sbrk+0x64>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ba:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <_sbrk+0x64>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4413      	add	r3, r2
 80009c2:	4a06      	ldr	r2, [pc, #24]	@ (80009dc <_sbrk+0x64>)
 80009c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009c6:	68fb      	ldr	r3, [r7, #12]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	371c      	adds	r7, #28
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	20050000 	.word	0x20050000
 80009d8:	00000400 	.word	0x00000400
 80009dc:	200001e4 	.word	0x200001e4
 80009e0:	20007f20 	.word	0x20007f20
 80009e4:	20007f0c 	.word	0x20007f0c

080009e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <SystemInit+0x20>)
 80009ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009f2:	4a05      	ldr	r2, [pc, #20]	@ (8000a08 <SystemInit+0x20>)
 80009f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a10:	4b14      	ldr	r3, [pc, #80]	@ (8000a64 <MX_USART3_UART_Init+0x58>)
 8000a12:	4a15      	ldr	r2, [pc, #84]	@ (8000a68 <MX_USART3_UART_Init+0x5c>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a16:	4b13      	ldr	r3, [pc, #76]	@ (8000a64 <MX_USART3_UART_Init+0x58>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <MX_USART3_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	@ (8000a64 <MX_USART3_UART_Init+0x58>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <MX_USART3_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <MX_USART3_UART_Init+0x58>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <MX_USART3_UART_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <MX_USART3_UART_Init+0x58>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	@ (8000a64 <MX_USART3_UART_Init+0x58>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <MX_USART3_UART_Init+0x58>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a4e:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <MX_USART3_UART_Init+0x58>)
 8000a50:	f003 f88c 	bl	8003b6c <HAL_UART_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a5a:	f7ff fe83 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200001e8 	.word	0x200001e8
 8000a68:	40004800 	.word	0x40004800

08000a6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b0aa      	sub	sp, #168	@ 0xa8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	2284      	movs	r2, #132	@ 0x84
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f00e fbe4 	bl	800f25a <memset>
  if(uartHandle->Instance==USART3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a26      	ldr	r2, [pc, #152]	@ (8000b30 <HAL_UART_MspInit+0xc4>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d144      	bne.n	8000b26 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000aa0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aa6:	f107 0310 	add.w	r3, r7, #16
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f002 fc6e 	bl	800338c <HAL_RCCEx_PeriphCLKConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ab6:	f7ff fe55 	bl	8000764 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000aba:	4b1e      	ldr	r3, [pc, #120]	@ (8000b34 <HAL_UART_MspInit+0xc8>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abe:	4a1d      	ldr	r2, [pc, #116]	@ (8000b34 <HAL_UART_MspInit+0xc8>)
 8000ac0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b34 <HAL_UART_MspInit+0xc8>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad2:	4b18      	ldr	r3, [pc, #96]	@ (8000b34 <HAL_UART_MspInit+0xc8>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a17      	ldr	r2, [pc, #92]	@ (8000b34 <HAL_UART_MspInit+0xc8>)
 8000ad8:	f043 0308 	orr.w	r3, r3, #8
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <HAL_UART_MspInit+0xc8>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0308 	and.w	r3, r3, #8
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000aea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000aee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b04:	2307      	movs	r3, #7
 8000b06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b0a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4809      	ldr	r0, [pc, #36]	@ (8000b38 <HAL_UART_MspInit+0xcc>)
 8000b12:	f001 fdb5 	bl	8002680 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2027      	movs	r0, #39	@ 0x27
 8000b1c:	f000 fa99 	bl	8001052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b20:	2027      	movs	r0, #39	@ 0x27
 8000b22:	f000 fab2 	bl	800108a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000b26:	bf00      	nop
 8000b28:	37a8      	adds	r7, #168	@ 0xa8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40004800 	.word	0x40004800
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020c00 	.word	0x40020c00

08000b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b40:	f7ff ff52 	bl	80009e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b44:	480c      	ldr	r0, [pc, #48]	@ (8000b78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b46:	490d      	ldr	r1, [pc, #52]	@ (8000b7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b48:	4a0d      	ldr	r2, [pc, #52]	@ (8000b80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b4c:	e002      	b.n	8000b54 <LoopCopyDataInit>

08000b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b52:	3304      	adds	r3, #4

08000b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b58:	d3f9      	bcc.n	8000b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b60:	e001      	b.n	8000b66 <LoopFillZerobss>

08000b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b64:	3204      	adds	r2, #4

08000b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b68:	d3fb      	bcc.n	8000b62 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000b6a:	f00e fbc5 	bl	800f2f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6e:	f7ff fd7d 	bl	800066c <main>
  bx  lr    
 8000b72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b74:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b7c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000b80:	08012b8c 	.word	0x08012b8c
  ldr r2, =_sbss
 8000b84:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8000b88:	20007f1c 	.word	0x20007f1c

08000b8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b8c:	e7fe      	b.n	8000b8c <ADC_IRQHandler>

08000b8e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
 8000b96:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d00b      	beq.n	8000bb6 <LAN8742_RegisterBusIO+0x28>
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d007      	beq.n	8000bb6 <LAN8742_RegisterBusIO+0x28>
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d003      	beq.n	8000bb6 <LAN8742_RegisterBusIO+0x28>
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	691b      	ldr	r3, [r3, #16]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d102      	bne.n	8000bbc <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bba:	e014      	b.n	8000be6 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685a      	ldr	r2, [r3, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	68da      	ldr	r2, [r3, #12]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	689a      	ldr	r2, [r3, #8]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	691a      	ldr	r2, [r3, #16]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b086      	sub	sp, #24
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d139      	bne.n	8000c82 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d002      	beq.n	8000c1c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2220      	movs	r2, #32
 8000c20:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	e01c      	b.n	8000c62 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	695b      	ldr	r3, [r3, #20]
 8000c2c:	f107 020c 	add.w	r2, r7, #12
 8000c30:	2112      	movs	r1, #18
 8000c32:	6978      	ldr	r0, [r7, #20]
 8000c34:	4798      	blx	r3
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	da03      	bge.n	8000c44 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000c3c:	f06f 0304 	mvn.w	r3, #4
 8000c40:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000c42:	e00b      	b.n	8000c5c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f003 031f 	and.w	r3, r3, #31
 8000c4a:	697a      	ldr	r2, [r7, #20]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d105      	bne.n	8000c5c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
         break;
 8000c5a:	e005      	b.n	8000c68 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	2b1f      	cmp	r3, #31
 8000c66:	d9df      	bls.n	8000c28 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b1f      	cmp	r3, #31
 8000c6e:	d902      	bls.n	8000c76 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000c70:	f06f 0302 	mvn.w	r3, #2
 8000c74:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d102      	bne.n	8000c82 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2201      	movs	r2, #1
 8000c80:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000c82:	693b      	ldr	r3, [r7, #16]
 }
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	695b      	ldr	r3, [r3, #20]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	6810      	ldr	r0, [r2, #0]
 8000ca0:	f107 020c 	add.w	r2, r7, #12
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	4798      	blx	r3
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	da02      	bge.n	8000cb4 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000cae:	f06f 0304 	mvn.w	r3, #4
 8000cb2:	e06e      	b.n	8000d92 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	695b      	ldr	r3, [r3, #20]
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	6810      	ldr	r0, [r2, #0]
 8000cbc:	f107 020c 	add.w	r2, r7, #12
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	4798      	blx	r3
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	da02      	bge.n	8000cd0 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000cca:	f06f 0304 	mvn.w	r3, #4
 8000cce:	e060      	b.n	8000d92 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f003 0304 	and.w	r3, r3, #4
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d101      	bne.n	8000cde <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e059      	b.n	8000d92 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	6810      	ldr	r0, [r2, #0]
 8000ce6:	f107 020c 	add.w	r2, r7, #12
 8000cea:	2100      	movs	r1, #0
 8000cec:	4798      	blx	r3
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	da02      	bge.n	8000cfa <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000cf4:	f06f 0304 	mvn.w	r3, #4
 8000cf8:	e04b      	b.n	8000d92 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d11b      	bne.n	8000d3c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d006      	beq.n	8000d1c <LAN8742_GetLinkState+0x90>
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	e03a      	b.n	8000d92 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000d26:	2303      	movs	r3, #3
 8000d28:	e033      	b.n	8000d92 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000d34:	2304      	movs	r3, #4
 8000d36:	e02c      	b.n	8000d92 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000d38:	2305      	movs	r3, #5
 8000d3a:	e02a      	b.n	8000d92 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	695b      	ldr	r3, [r3, #20]
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	6810      	ldr	r0, [r2, #0]
 8000d44:	f107 020c 	add.w	r2, r7, #12
 8000d48:	211f      	movs	r1, #31
 8000d4a:	4798      	blx	r3
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	da02      	bge.n	8000d58 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000d52:	f06f 0304 	mvn.w	r3, #4
 8000d56:	e01c      	b.n	8000d92 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000d62:	2306      	movs	r3, #6
 8000d64:	e015      	b.n	8000d92 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	f003 031c 	and.w	r3, r3, #28
 8000d6c:	2b18      	cmp	r3, #24
 8000d6e:	d101      	bne.n	8000d74 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000d70:	2302      	movs	r3, #2
 8000d72:	e00e      	b.n	8000d92 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f003 031c 	and.w	r3, r3, #28
 8000d7a:	2b08      	cmp	r3, #8
 8000d7c:	d101      	bne.n	8000d82 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e007      	b.n	8000d92 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	f003 031c 	and.w	r3, r3, #28
 8000d88:	2b14      	cmp	r3, #20
 8000d8a:	d101      	bne.n	8000d90 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	e000      	b.n	8000d92 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000d90:	2305      	movs	r3, #5
    }
  }
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d9e:	2003      	movs	r0, #3
 8000da0:	f000 f94c 	bl	800103c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da4:	200f      	movs	r0, #15
 8000da6:	f000 f805 	bl	8000db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000daa:	f7ff fce1 	bl	8000770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dbc:	4b12      	ldr	r3, [pc, #72]	@ (8000e08 <HAL_InitTick+0x54>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4b12      	ldr	r3, [pc, #72]	@ (8000e0c <HAL_InitTick+0x58>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 f967 	bl	80010a6 <HAL_SYSTICK_Config>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e00e      	b.n	8000e00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b0f      	cmp	r3, #15
 8000de6:	d80a      	bhi.n	8000dfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de8:	2200      	movs	r2, #0
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000df0:	f000 f92f 	bl	8001052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df4:	4a06      	ldr	r2, [pc, #24]	@ (8000e10 <HAL_InitTick+0x5c>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e000      	b.n	8000e00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	20000004 	.word	0x20000004

08000e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e18:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <HAL_IncTick+0x20>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <HAL_IncTick+0x24>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4413      	add	r3, r2
 8000e24:	4a04      	ldr	r2, [pc, #16]	@ (8000e38 <HAL_IncTick+0x24>)
 8000e26:	6013      	str	r3, [r2, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000008 	.word	0x20000008
 8000e38:	20000270 	.word	0x20000270

08000e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e40:	4b03      	ldr	r3, [pc, #12]	@ (8000e50 <HAL_GetTick+0x14>)
 8000e42:	681b      	ldr	r3, [r3, #0]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000270 	.word	0x20000270

08000e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e5c:	f7ff ffee 	bl	8000e3c <HAL_GetTick>
 8000e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e6c:	d005      	beq.n	8000e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e98 <HAL_Delay+0x44>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	461a      	mov	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4413      	add	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e7a:	bf00      	nop
 8000e7c:	f7ff ffde 	bl	8000e3c <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d8f7      	bhi.n	8000e7c <HAL_Delay+0x28>
  {
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000008 	.word	0x20000008

08000e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eac:	4b0b      	ldr	r3, [pc, #44]	@ (8000edc <__NVIC_SetPriorityGrouping+0x40>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ec4:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eca:	4a04      	ldr	r2, [pc, #16]	@ (8000edc <__NVIC_SetPriorityGrouping+0x40>)
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	60d3      	str	r3, [r2, #12]
}
 8000ed0:	bf00      	nop
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000ed00 	.word	0xe000ed00
 8000ee0:	05fa0000 	.word	0x05fa0000

08000ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee8:	4b04      	ldr	r3, [pc, #16]	@ (8000efc <__NVIC_GetPriorityGrouping+0x18>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	0a1b      	lsrs	r3, r3, #8
 8000eee:	f003 0307 	and.w	r3, r3, #7
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	db0b      	blt.n	8000f2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	f003 021f 	and.w	r2, r3, #31
 8000f18:	4907      	ldr	r1, [pc, #28]	@ (8000f38 <__NVIC_EnableIRQ+0x38>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	095b      	lsrs	r3, r3, #5
 8000f20:	2001      	movs	r0, #1
 8000f22:	fa00 f202 	lsl.w	r2, r0, r2
 8000f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000e100 	.word	0xe000e100

08000f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	db0a      	blt.n	8000f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	490c      	ldr	r1, [pc, #48]	@ (8000f88 <__NVIC_SetPriority+0x4c>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	0112      	lsls	r2, r2, #4
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	440b      	add	r3, r1
 8000f60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f64:	e00a      	b.n	8000f7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4908      	ldr	r1, [pc, #32]	@ (8000f8c <__NVIC_SetPriority+0x50>)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	3b04      	subs	r3, #4
 8000f74:	0112      	lsls	r2, r2, #4
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	440b      	add	r3, r1
 8000f7a:	761a      	strb	r2, [r3, #24]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000e100 	.word	0xe000e100
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	@ 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	bf28      	it	cs
 8000fae:	2304      	movcs	r3, #4
 8000fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	2b06      	cmp	r3, #6
 8000fb8:	d902      	bls.n	8000fc0 <NVIC_EncodePriority+0x30>
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3b03      	subs	r3, #3
 8000fbe:	e000      	b.n	8000fc2 <NVIC_EncodePriority+0x32>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	43d9      	mvns	r1, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	4313      	orrs	r3, r2
         );
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3724      	adds	r7, #36	@ 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3b01      	subs	r3, #1
 8001004:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001008:	d301      	bcc.n	800100e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100a:	2301      	movs	r3, #1
 800100c:	e00f      	b.n	800102e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800100e:	4a0a      	ldr	r2, [pc, #40]	@ (8001038 <SysTick_Config+0x40>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001016:	210f      	movs	r1, #15
 8001018:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800101c:	f7ff ff8e 	bl	8000f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001020:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <SysTick_Config+0x40>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001026:	4b04      	ldr	r3, [pc, #16]	@ (8001038 <SysTick_Config+0x40>)
 8001028:	2207      	movs	r2, #7
 800102a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	e000e010 	.word	0xe000e010

0800103c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ff29 	bl	8000e9c <__NVIC_SetPriorityGrouping>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
 800105e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001064:	f7ff ff3e 	bl	8000ee4 <__NVIC_GetPriorityGrouping>
 8001068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	68b9      	ldr	r1, [r7, #8]
 800106e:	6978      	ldr	r0, [r7, #20]
 8001070:	f7ff ff8e 	bl	8000f90 <NVIC_EncodePriority>
 8001074:	4602      	mov	r2, r0
 8001076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107a:	4611      	mov	r1, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff5d 	bl	8000f3c <__NVIC_SetPriority>
}
 8001082:	bf00      	nop
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff31 	bl	8000f00 <__NVIC_EnableIRQ>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ffa2 	bl	8000ff8 <SysTick_Config>
 80010b4:	4603      	mov	r3, r0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b084      	sub	sp, #16
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010cc:	f7ff feb6 	bl	8000e3c <HAL_GetTick>
 80010d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d008      	beq.n	80010f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2280      	movs	r2, #128	@ 0x80
 80010e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e052      	b.n	8001196 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f022 0216 	bic.w	r2, r2, #22
 80010fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	695a      	ldr	r2, [r3, #20]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800110e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001114:	2b00      	cmp	r3, #0
 8001116:	d103      	bne.n	8001120 <HAL_DMA_Abort+0x62>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800111c:	2b00      	cmp	r3, #0
 800111e:	d007      	beq.n	8001130 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 0208 	bic.w	r2, r2, #8
 800112e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 0201 	bic.w	r2, r2, #1
 800113e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001140:	e013      	b.n	800116a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001142:	f7ff fe7b 	bl	8000e3c <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b05      	cmp	r3, #5
 800114e:	d90c      	bls.n	800116a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2220      	movs	r2, #32
 8001154:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2203      	movs	r2, #3
 800115a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e015      	b.n	8001196 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1e4      	bne.n	8001142 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800117c:	223f      	movs	r2, #63	@ 0x3f
 800117e:	409a      	lsls	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d004      	beq.n	80011bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2280      	movs	r2, #128	@ 0x80
 80011b6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e00c      	b.n	80011d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2205      	movs	r2, #5
 80011c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f022 0201 	bic.w	r2, r2, #1
 80011d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e086      	b.n	8001304 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d106      	bne.n	800120e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2220      	movs	r2, #32
 8001204:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f003 ffa3 	bl	8005154 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	4b3f      	ldr	r3, [pc, #252]	@ (800130c <HAL_ETH_Init+0x128>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001212:	4a3e      	ldr	r2, [pc, #248]	@ (800130c <HAL_ETH_Init+0x128>)
 8001214:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001218:	6453      	str	r3, [r2, #68]	@ 0x44
 800121a:	4b3c      	ldr	r3, [pc, #240]	@ (800130c <HAL_ETH_Init+0x128>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001226:	4b3a      	ldr	r3, [pc, #232]	@ (8001310 <HAL_ETH_Init+0x12c>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	4a39      	ldr	r2, [pc, #228]	@ (8001310 <HAL_ETH_Init+0x12c>)
 800122c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001230:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001232:	4b37      	ldr	r3, [pc, #220]	@ (8001310 <HAL_ETH_Init+0x12c>)
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	4935      	ldr	r1, [pc, #212]	@ (8001310 <HAL_ETH_Init+0x12c>)
 800123c:	4313      	orrs	r3, r2
 800123e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001240:	4b33      	ldr	r3, [pc, #204]	@ (8001310 <HAL_ETH_Init+0x12c>)
 8001242:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	6812      	ldr	r2, [r2, #0]
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800125a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800125c:	f7ff fdee 	bl	8000e3c <HAL_GetTick>
 8001260:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001262:	e011      	b.n	8001288 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001264:	f7ff fdea 	bl	8000e3c <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001272:	d909      	bls.n	8001288 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2204      	movs	r2, #4
 8001278:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	22e0      	movs	r2, #224	@ 0xe0
 8001280:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e03d      	b.n	8001304 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1e4      	bne.n	8001264 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 ff34 	bl	8002108 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f000 ffdf 	bl	8002264 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f001 f835 	bl	8002316 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	461a      	mov	r2, r3
 80012b2:	2100      	movs	r1, #0
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 ff9d 	bl	80021f4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80012c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001314 <HAL_ETH_Init+0x130>)
 80012d8:	430b      	orrs	r3, r1
 80012da:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80012ee:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2210      	movs	r2, #16
 80012fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40023800 	.word	0x40023800
 8001310:	40013800 	.word	0x40013800
 8001314:	00020060 	.word	0x00020060

08001318 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001326:	2b10      	cmp	r3, #16
 8001328:	d15f      	bne.n	80013ea <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2220      	movs	r2, #32
 800132e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2201      	movs	r2, #1
 8001336:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2204      	movs	r2, #4
 800133c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 fa2e 	bl	80017a0 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800134c:	2001      	movs	r0, #1
 800134e:	f7ff fd81 	bl	8000e54 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	6812      	ldr	r2, [r2, #0]
 8001368:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800136c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001370:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	6812      	ldr	r2, [r2, #0]
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001388:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 fd58 	bl	8001e40 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 0208 	orr.w	r2, r2, #8
 800139e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013a8:	2001      	movs	r0, #1
 80013aa:	f7ff fd53 	bl	8000e54 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f042 0204 	orr.w	r2, r2, #4
 80013c4:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013ce:	69d9      	ldr	r1, [r3, #28]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b07      	ldr	r3, [pc, #28]	@ (80013f4 <HAL_ETH_Start_IT+0xdc>)
 80013d6:	430b      	orrs	r3, r1
 80013d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013dc:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2240      	movs	r2, #64	@ 0x40
 80013e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e000      	b.n	80013ec <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
  }
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	0001a0c1 	.word	0x0001a0c1

080013f8 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001406:	2b40      	cmp	r3, #64	@ 0x40
 8001408:	d16e      	bne.n	80014e8 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2220      	movs	r2, #32
 800140e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800141a:	69d9      	ldr	r1, [r3, #28]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b34      	ldr	r3, [pc, #208]	@ (80014f4 <HAL_ETH_Stop_IT+0xfc>)
 8001422:	400b      	ands	r3, r1
 8001424:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001428:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	6812      	ldr	r2, [r2, #0]
 8001438:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800143c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001440:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	6812      	ldr	r2, [r2, #0]
 8001450:	f023 0302 	bic.w	r3, r3, #2
 8001454:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001458:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 0204 	bic.w	r2, r2, #4
 8001468:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001472:	2001      	movs	r0, #1
 8001474:	f7ff fcee 	bl	8000e54 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f000 fcdd 	bl	8001e40 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 0208 	bic.w	r2, r2, #8
 8001494:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800149e:	2001      	movs	r0, #1
 80014a0:	f7ff fcd8 	bl	8000e54 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	e00e      	b.n	80014d0 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	697a      	ldr	r2, [r7, #20]
 80014b6:	3212      	adds	r2, #18
 80014b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014bc:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	d9ed      	bls.n	80014b2 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2210      	movs	r2, #16
 80014e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	e000      	b.n	80014ea <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
  }
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	fffe5f3e 	.word	0xfffe5f3e

080014f8 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d109      	bne.n	800151e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001510:	f043 0201 	orr.w	r2, r3, #1
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e07c      	b.n	8001618 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001524:	2b40      	cmp	r3, #64	@ 0x40
 8001526:	d176      	bne.n	8001616 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001528:	2200      	movs	r2, #0
 800152a:	68b9      	ldr	r1, [r7, #8]
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f000 ff61 	bl	80023f4 <ETH_Prepare_Tx_Descriptors>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d009      	beq.n	800154c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800153e:	f043 0202 	orr.w	r2, r3, #2
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e065      	b.n	8001618 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800154c:	f3bf 8f4f 	dsb	sy
}
 8001550:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	3206      	adds	r2, #6
 800155a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001564:	1c5a      	adds	r2, r3, #1
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	629a      	str	r2, [r3, #40]	@ 0x28
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800156e:	2b03      	cmp	r3, #3
 8001570:	d904      	bls.n	800157c <HAL_ETH_Transmit+0x84>
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001576:	1f1a      	subs	r2, r3, #4
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	3106      	adds	r1, #6
 8001588:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800158c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001590:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001592:	f7ff fc53 	bl	8000e3c <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001598:	e037      	b.n	800160a <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d011      	beq.n	80015d0 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015b2:	f043 0208 	orr.w	r2, r3, #8
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015c4:	695a      	ldr	r2, [r3, #20]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e023      	b.n	8001618 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80015d6:	d018      	beq.n	800160a <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80015d8:	f7ff fc30 	bl	8000e3c <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d302      	bcc.n	80015ee <HAL_ETH_Transmit+0xf6>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10d      	bne.n	800160a <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015f4:	f043 0204 	orr.w	r2, r3, #4
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001604:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e006      	b.n	8001618 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	dbc3      	blt.n	800159a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	e000      	b.n	8001618 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
  }
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800162e:	2300      	movs	r3, #0
 8001630:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d109      	bne.n	800164c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800163e:	f043 0201 	orr.w	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0a4      	b.n	8001796 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001652:	2b40      	cmp	r3, #64	@ 0x40
 8001654:	d001      	beq.n	800165a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e09d      	b.n	8001796 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800165e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	3212      	adds	r2, #18
 8001666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800166a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001670:	f1c3 0304 	rsb	r3, r3, #4
 8001674:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001676:	e066      	b.n	8001746 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001680:	2b00      	cmp	r3, #0
 8001682:	d007      	beq.n	8001694 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	69da      	ldr	r2, [r3, #28]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	699a      	ldr	r2, [r3, #24]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800169c:	2b00      	cmp	r3, #0
 800169e:	d103      	bne.n	80016a8 <HAL_ETH_ReadData+0x88>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d03c      	beq.n	8001722 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	0c1b      	lsrs	r3, r3, #16
 80016c6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80016ca:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80016e0:	2301      	movs	r3, #1
 80016e2:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80016fc:	461a      	mov	r2, r3
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	b29b      	uxth	r3, r3
 8001702:	f003 fef9 	bl	80054f8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	441a      	add	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	2200      	movs	r2, #0
 8001720:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3301      	adds	r3, #1
 8001726:	61fb      	str	r3, [r7, #28]
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	2b03      	cmp	r3, #3
 800172c:	d902      	bls.n	8001734 <HAL_ETH_ReadData+0x114>
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3b04      	subs	r3, #4
 8001732:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69fa      	ldr	r2, [r7, #28]
 8001738:	3212      	adds	r2, #18
 800173a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800173e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	3301      	adds	r3, #1
 8001744:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800174a:	2b00      	cmp	r3, #0
 800174c:	db06      	blt.n	800175c <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	429a      	cmp	r2, r3
 8001754:	d202      	bcs.n	800175c <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8001756:	7cfb      	ldrb	r3, [r7, #19]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d08d      	beq.n	8001678 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	441a      	add	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800176c:	2b00      	cmp	r3, #0
 800176e:	d002      	beq.n	8001776 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 f815 	bl	80017a0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69fa      	ldr	r2, [r7, #28]
 800177a:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800177c:	7cfb      	ldrb	r3, [r7, #19]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d108      	bne.n	8001794 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	e000      	b.n	8001796 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
}
 8001796:	4618      	mov	r0, r3
 8001798:	3720      	adds	r7, #32
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80017ac:	2301      	movs	r3, #1
 80017ae:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80017b4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69fa      	ldr	r2, [r7, #28]
 80017ba:	3212      	adds	r2, #18
 80017bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80017c6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80017c8:	e042      	b.n	8001850 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d112      	bne.n	80017f8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80017d2:	f107 0308 	add.w	r3, r7, #8
 80017d6:	4618      	mov	r0, r3
 80017d8:	f003 fe5e 	bl	8005498 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d102      	bne.n	80017e8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	74fb      	strb	r3, [r7, #19]
 80017e6:	e007      	b.n	80017f8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	461a      	mov	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	461a      	mov	r2, r3
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80017f8:	7cfb      	ldrb	r3, [r7, #19]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d028      	beq.n	8001850 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001802:	2b00      	cmp	r3, #0
 8001804:	d106      	bne.n	8001814 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	695a      	ldr	r2, [r3, #20]
 800180a:	4b26      	ldr	r3, [pc, #152]	@ (80018a4 <ETH_UpdateDescriptor+0x104>)
 800180c:	4313      	orrs	r3, r2
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	6053      	str	r3, [r2, #4]
 8001812:	e005      	b.n	8001820 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	3301      	adds	r3, #1
 8001830:	61fb      	str	r3, [r7, #28]
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	2b03      	cmp	r3, #3
 8001836:	d902      	bls.n	800183e <ETH_UpdateDescriptor+0x9e>
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	3b04      	subs	r3, #4
 800183c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69fa      	ldr	r2, [r7, #28]
 8001842:	3212      	adds	r2, #18
 8001844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001848:	617b      	str	r3, [r7, #20]
      desccount--;
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	3b01      	subs	r3, #1
 800184e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d002      	beq.n	800185c <ETH_UpdateDescriptor+0xbc>
 8001856:	7cfb      	ldrb	r3, [r7, #19]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1b6      	bne.n	80017ca <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	429a      	cmp	r2, r3
 8001864:	d01a      	beq.n	800189c <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3303      	adds	r3, #3
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001870:	f3bf 8f5f 	dmb	sy
}
 8001874:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6919      	ldr	r1, [r3, #16]
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	18ca      	adds	r2, r1, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800188e:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 800189c:	bf00      	nop
 800189e:	3720      	adds	r7, #32
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	80004000 	.word	0x80004000

080018a8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018b6:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80018d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001a00 <HAL_ETH_IRQHandler+0x158>)
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00e      	beq.n	80018fe <HAL_ETH_IRQHandler+0x56>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d009      	beq.n	80018fe <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018f2:	461a      	mov	r2, r3
 80018f4:	4b43      	ldr	r3, [pc, #268]	@ (8001a04 <HAL_ETH_IRQHandler+0x15c>)
 80018f6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 f891 	bl	8001a20 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00f      	beq.n	8001928 <HAL_ETH_IRQHandler+0x80>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00a      	beq.n	8001928 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800191a:	461a      	mov	r2, r3
 800191c:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001920:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f872 	bl	8001a0c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d042      	beq.n	80019b8 <HAL_ETH_IRQHandler+0x110>
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d03d      	beq.n	80019b8 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001942:	f043 0208 	orr.w	r2, r3, #8
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d01a      	beq.n	800198c <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800195e:	695a      	ldr	r2, [r3, #20]
 8001960:	4b29      	ldr	r3, [pc, #164]	@ (8001a08 <HAL_ETH_IRQHandler+0x160>)
 8001962:	4013      	ands	r3, r2
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 800197c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001980:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	22e0      	movs	r2, #224	@ 0xe0
 8001986:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800198a:	e012      	b.n	80019b2 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001994:	695a      	ldr	r2, [r3, #20]
 8001996:	f248 6380 	movw	r3, #34432	@ 0x8680
 800199a:	4013      	ands	r3, r2
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019aa:	461a      	mov	r2, r3
 80019ac:	f248 6380 	movw	r3, #34432	@ 0x8680
 80019b0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f83e 	bl	8001a34 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00e      	beq.n	80019e0 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f838 	bl	8001a48 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d006      	beq.n	80019f8 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80019ea:	4b05      	ldr	r3, [pc, #20]	@ (8001a00 <HAL_ETH_IRQHandler+0x158>)
 80019ec:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80019f0:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f832 	bl	8001a5c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80019f8:	bf00      	nop
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40013c00 	.word	0x40013c00
 8001a04:	00010040 	.word	0x00010040
 8001a08:	007e2000 	.word	0x007e2000

08001a0c <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
 8001a7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f003 031c 	and.w	r3, r3, #28
 8001a8c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	02db      	lsls	r3, r3, #11
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	019b      	lsls	r3, r3, #6
 8001a9e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	f023 0302 	bic.w	r3, r3, #2
 8001aae:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001ac0:	f7ff f9bc 	bl	8000e3c <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ac6:	e00d      	b.n	8001ae4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001ac8:	f7ff f9b8 	bl	8000e3c <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ad6:	d301      	bcc.n	8001adc <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e010      	b.n	8001afe <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1ec      	bne.n	8001ac8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	461a      	mov	r2, r3
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	60f8      	str	r0, [r7, #12]
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
 8001b12:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f003 031c 	and.w	r3, r3, #28
 8001b22:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	02db      	lsls	r3, r3, #11
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	019b      	lsls	r3, r3, #6
 8001b34:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f043 0302 	orr.w	r3, r3, #2
 8001b44:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b60:	f7ff f96c 	bl	8000e3c <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b66:	e00d      	b.n	8001b84 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001b68:	f7ff f968 	bl	8000e3c <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b76:	d301      	bcc.n	8001b7c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e009      	b.n	8001b90 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1ec      	bne.n	8001b68 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e0e6      	b.n	8001d7a <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0310 	and.w	r3, r3, #16
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	bf14      	ite	ne
 8001bba:	2301      	movne	r3, #1
 8001bbc:	2300      	moveq	r3, #0
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bf0c      	ite	eq
 8001be4:	2301      	moveq	r3, #1
 8001be6:	2300      	movne	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	461a      	mov	r2, r3
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	bf14      	ite	ne
 8001c00:	2301      	movne	r3, #1
 8001c02:	2300      	moveq	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	bf0c      	ite	eq
 8001c1a:	2301      	moveq	r3, #1
 8001c1c:	2300      	movne	r3, #0
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	461a      	mov	r2, r3
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	bf14      	ite	ne
 8001c34:	2301      	movne	r3, #1
 8001c36:	2300      	moveq	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	bf0c      	ite	eq
 8001c6a:	2301      	moveq	r3, #1
 8001c6c:	2300      	movne	r3, #0
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	461a      	mov	r2, r3
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	bf0c      	ite	eq
 8001c84:	2301      	moveq	r3, #1
 8001c86:	2300      	movne	r3, #0
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	bf14      	ite	ne
 8001c9e:	2301      	movne	r3, #1
 8001ca0:	2300      	moveq	r3, #0
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	bf14      	ite	ne
 8001cc6:	2301      	movne	r3, #1
 8001cc8:	2300      	moveq	r3, #0
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	461a      	mov	r2, r3
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	bf14      	ite	ne
 8001ce0:	2301      	movne	r3, #1
 8001ce2:	2300      	moveq	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	bf14      	ite	ne
 8001cfa:	2301      	movne	r3, #1
 8001cfc:	2300      	moveq	r3, #0
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	461a      	mov	r2, r3
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	bf0c      	ite	eq
 8001d16:	2301      	moveq	r3, #1
 8001d18:	2300      	movne	r3, #0
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	0c1b      	lsrs	r3, r3, #16
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	bf14      	ite	ne
 8001d4e:	2301      	movne	r3, #1
 8001d50:	2300      	moveq	r3, #0
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	461a      	mov	r2, r3
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	bf14      	ite	ne
 8001d6a:	2301      	movne	r3, #1
 8001d6c:	2300      	moveq	r3, #0
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e00b      	b.n	8001db2 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001da0:	2b10      	cmp	r3, #16
 8001da2:	d105      	bne.n	8001db0 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001da4:	6839      	ldr	r1, [r7, #0]
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f870 	bl	8001e8c <ETH_SetMACConfig>

    return HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	e000      	b.n	8001db2 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
  }
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f023 031c 	bic.w	r3, r3, #28
 8001dd2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001dd4:	f001 faa6 	bl	8003324 <HAL_RCC_GetHCLKFreq>
 8001dd8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	4a14      	ldr	r2, [pc, #80]	@ (8001e30 <HAL_ETH_SetMDIOClockRange+0x74>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d804      	bhi.n	8001dec <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f043 0308 	orr.w	r3, r3, #8
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	e019      	b.n	8001e20 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	4a11      	ldr	r2, [pc, #68]	@ (8001e34 <HAL_ETH_SetMDIOClockRange+0x78>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d204      	bcs.n	8001dfe <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f043 030c 	orr.w	r3, r3, #12
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	e010      	b.n	8001e20 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	4a0d      	ldr	r2, [pc, #52]	@ (8001e38 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d90c      	bls.n	8001e20 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	4a0c      	ldr	r2, [pc, #48]	@ (8001e3c <HAL_ETH_SetMDIOClockRange+0x80>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d804      	bhi.n	8001e18 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f043 0304 	orr.w	r3, r3, #4
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	e003      	b.n	8001e20 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f043 0310 	orr.w	r3, r3, #16
 8001e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	611a      	str	r2, [r3, #16]
}
 8001e28:	bf00      	nop
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	02160ebf 	.word	0x02160ebf
 8001e34:	03938700 	.word	0x03938700
 8001e38:	05f5e0ff 	.word	0x05f5e0ff
 8001e3c:	08f0d17f 	.word	0x08f0d17f

08001e40 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6812      	ldr	r2, [r2, #0]
 8001e5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e5e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e62:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e70:	2001      	movs	r0, #1
 8001e72:	f7fe ffef 	bl	8000e54 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e80:	6193      	str	r3, [r2, #24]
}
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4b53      	ldr	r3, [pc, #332]	@ (8001ff0 <ETH_SetMACConfig+0x164>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	7b9b      	ldrb	r3, [r3, #14]
 8001eaa:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	7c12      	ldrb	r2, [r2, #16]
 8001eb0:	2a00      	cmp	r2, #0
 8001eb2:	d102      	bne.n	8001eba <ETH_SetMACConfig+0x2e>
 8001eb4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001eb8:	e000      	b.n	8001ebc <ETH_SetMACConfig+0x30>
 8001eba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001ebc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	7c52      	ldrb	r2, [r2, #17]
 8001ec2:	2a00      	cmp	r2, #0
 8001ec4:	d102      	bne.n	8001ecc <ETH_SetMACConfig+0x40>
 8001ec6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001eca:	e000      	b.n	8001ece <ETH_SetMACConfig+0x42>
 8001ecc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ece:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ed4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	7fdb      	ldrb	r3, [r3, #31]
 8001eda:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001edc:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ee2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	7f92      	ldrb	r2, [r2, #30]
 8001ee8:	2a00      	cmp	r2, #0
 8001eea:	d102      	bne.n	8001ef2 <ETH_SetMACConfig+0x66>
 8001eec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ef0:	e000      	b.n	8001ef4 <ETH_SetMACConfig+0x68>
 8001ef2:	2200      	movs	r2, #0
                        macconf->Speed |
 8001ef4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	7f1b      	ldrb	r3, [r3, #28]
 8001efa:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001efc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f02:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	791b      	ldrb	r3, [r3, #4]
 8001f08:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001f0a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001f12:	2a00      	cmp	r2, #0
 8001f14:	d102      	bne.n	8001f1c <ETH_SetMACConfig+0x90>
 8001f16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f1a:	e000      	b.n	8001f1e <ETH_SetMACConfig+0x92>
 8001f1c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f1e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	7bdb      	ldrb	r3, [r3, #15]
 8001f24:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f26:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f2c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001f34:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001f36:	4313      	orrs	r3, r2
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f4e:	2001      	movs	r0, #1
 8001f50:	f7fe ff80 	bl	8000e54 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f72:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001f7a:	2a00      	cmp	r2, #0
 8001f7c:	d101      	bne.n	8001f82 <ETH_SetMACConfig+0xf6>
 8001f7e:	2280      	movs	r2, #128	@ 0x80
 8001f80:	e000      	b.n	8001f84 <ETH_SetMACConfig+0xf8>
 8001f82:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f84:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f8a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001f92:	2a01      	cmp	r2, #1
 8001f94:	d101      	bne.n	8001f9a <ETH_SetMACConfig+0x10e>
 8001f96:	2208      	movs	r2, #8
 8001f98:	e000      	b.n	8001f9c <ETH_SetMACConfig+0x110>
 8001f9a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001f9c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001fa4:	2a01      	cmp	r2, #1
 8001fa6:	d101      	bne.n	8001fac <ETH_SetMACConfig+0x120>
 8001fa8:	2204      	movs	r2, #4
 8001faa:	e000      	b.n	8001fae <ETH_SetMACConfig+0x122>
 8001fac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001fae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001fb6:	2a01      	cmp	r2, #1
 8001fb8:	d101      	bne.n	8001fbe <ETH_SetMACConfig+0x132>
 8001fba:	2202      	movs	r2, #2
 8001fbc:	e000      	b.n	8001fc0 <ETH_SetMACConfig+0x134>
 8001fbe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fd8:	2001      	movs	r0, #1
 8001fda:	f7fe ff3b 	bl	8000e54 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	619a      	str	r2, [r3, #24]
}
 8001fe6:	bf00      	nop
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	fd20810f 	.word	0xfd20810f

08001ff4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	4b3d      	ldr	r3, [pc, #244]	@ (8002104 <ETH_SetDMAConfig+0x110>)
 800200e:	4013      	ands	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	7b1b      	ldrb	r3, [r3, #12]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d102      	bne.n	8002020 <ETH_SetDMAConfig+0x2c>
 800201a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800201e:	e000      	b.n	8002022 <ETH_SetDMAConfig+0x2e>
 8002020:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	7b5b      	ldrb	r3, [r3, #13]
 8002026:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002028:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	7f52      	ldrb	r2, [r2, #29]
 800202e:	2a00      	cmp	r2, #0
 8002030:	d102      	bne.n	8002038 <ETH_SetDMAConfig+0x44>
 8002032:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002036:	e000      	b.n	800203a <ETH_SetDMAConfig+0x46>
 8002038:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800203a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	7b9b      	ldrb	r3, [r3, #14]
 8002040:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002042:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002048:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	7f1b      	ldrb	r3, [r3, #28]
 800204e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002050:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	7f9b      	ldrb	r3, [r3, #30]
 8002056:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002058:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800205e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002066:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002068:	4313      	orrs	r3, r2
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4313      	orrs	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002078:	461a      	mov	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800208a:	2001      	movs	r0, #1
 800208c:	f7fe fee2 	bl	8000e54 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002098:	461a      	mov	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	791b      	ldrb	r3, [r3, #4]
 80020a2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020a8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80020ae:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80020b4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80020bc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80020be:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020c6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020cc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6812      	ldr	r2, [r2, #0]
 80020d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020da:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020e8:	2001      	movs	r0, #1
 80020ea:	f7fe feb3 	bl	8000e54 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020f6:	461a      	mov	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6013      	str	r3, [r2, #0]
}
 80020fc:	bf00      	nop
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	f8de3f23 	.word	0xf8de3f23

08002108 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b0a6      	sub	sp, #152	@ 0x98
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002110:	2301      	movs	r3, #1
 8002112:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002116:	2301      	movs	r3, #1
 8002118:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800211c:	2300      	movs	r3, #0
 800211e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002120:	2300      	movs	r3, #0
 8002122:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002126:	2301      	movs	r3, #1
 8002128:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800212c:	2300      	movs	r3, #0
 800212e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002132:	2301      	movs	r3, #1
 8002134:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002138:	2301      	movs	r3, #1
 800213a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800213e:	2300      	movs	r3, #0
 8002140:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800214a:	2300      	movs	r3, #0
 800214c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002154:	2300      	movs	r3, #0
 8002156:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002158:	2300      	movs	r3, #0
 800215a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800215e:	2300      	movs	r3, #0
 8002160:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002164:	2300      	movs	r3, #0
 8002166:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800216a:	2300      	movs	r3, #0
 800216c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002170:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002174:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002176:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800217a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800217c:	2300      	movs	r3, #0
 800217e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002182:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002186:	4619      	mov	r1, r3
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7ff fe7f 	bl	8001e8c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800218e:	2301      	movs	r3, #1
 8002190:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002192:	2301      	movs	r3, #1
 8002194:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002196:	2301      	movs	r3, #1
 8002198:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800219c:	2301      	movs	r3, #1
 800219e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80021b0:	2300      	movs	r3, #0
 80021b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80021b4:	2301      	movs	r3, #1
 80021b6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80021ba:	2301      	movs	r3, #1
 80021bc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80021be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021c2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80021c4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80021c8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80021ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021ce:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80021d0:	2301      	movs	r3, #1
 80021d2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80021da:	2300      	movs	r3, #0
 80021dc:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80021de:	f107 0308 	add.w	r3, r7, #8
 80021e2:	4619      	mov	r1, r3
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff ff05 	bl	8001ff4 <ETH_SetDMAConfig>
}
 80021ea:	bf00      	nop
 80021ec:	3798      	adds	r7, #152	@ 0x98
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3305      	adds	r3, #5
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	021b      	lsls	r3, r3, #8
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	3204      	adds	r2, #4
 800220c:	7812      	ldrb	r2, [r2, #0]
 800220e:	4313      	orrs	r3, r2
 8002210:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	4b11      	ldr	r3, [pc, #68]	@ (800225c <ETH_MACAddressConfig+0x68>)
 8002216:	4413      	add	r3, r2
 8002218:	461a      	mov	r2, r3
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3303      	adds	r3, #3
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	061a      	lsls	r2, r3, #24
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3302      	adds	r3, #2
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	041b      	lsls	r3, r3, #16
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3301      	adds	r3, #1
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	021b      	lsls	r3, r3, #8
 8002238:	4313      	orrs	r3, r2
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	7812      	ldrb	r2, [r2, #0]
 800223e:	4313      	orrs	r3, r2
 8002240:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <ETH_MACAddressConfig+0x6c>)
 8002246:	4413      	add	r3, r2
 8002248:	461a      	mov	r2, r3
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	6013      	str	r3, [r2, #0]
}
 800224e:	bf00      	nop
 8002250:	371c      	adds	r7, #28
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40028040 	.word	0x40028040
 8002260:	40028044 	.word	0x40028044

08002264 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800226c:	2300      	movs	r3, #0
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	e03e      	b.n	80022f0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68d9      	ldr	r1, [r3, #12]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	440b      	add	r3, r1
 8002282:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2200      	movs	r2, #0
 800228e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2200      	movs	r2, #0
 8002294:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2200      	movs	r2, #0
 800229a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800229c:	68b9      	ldr	r1, [r7, #8]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	3206      	adds	r2, #6
 80022a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d80c      	bhi.n	80022d4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68d9      	ldr	r1, [r3, #12]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1c5a      	adds	r2, r3, #1
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	440b      	add	r3, r1
 80022cc:	461a      	mov	r2, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	e004      	b.n	80022de <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	461a      	mov	r2, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	3301      	adds	r3, #1
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d9bd      	bls.n	8002272 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002308:	611a      	str	r2, [r3, #16]
}
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002316:	b480      	push	{r7}
 8002318:	b085      	sub	sp, #20
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	e048      	b.n	80023b6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6919      	ldr	r1, [r3, #16]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	440b      	add	r3, r1
 8002334:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2200      	movs	r2, #0
 8002340:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2200      	movs	r2, #0
 8002346:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2200      	movs	r2, #0
 800234c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2200      	movs	r2, #0
 8002352:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2200      	movs	r2, #0
 8002358:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002360:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800237a:	68b9      	ldr	r1, [r7, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	3212      	adds	r2, #18
 8002382:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2b02      	cmp	r3, #2
 800238a:	d80c      	bhi.n	80023a6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6919      	ldr	r1, [r3, #16]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	440b      	add	r3, r1
 800239e:	461a      	mov	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	60da      	str	r2, [r3, #12]
 80023a4:	e004      	b.n	80023b0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	461a      	mov	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	3301      	adds	r3, #1
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d9b3      	bls.n	8002324 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023e6:	60da      	str	r2, [r3, #12]
}
 80023e8:	bf00      	nop
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b091      	sub	sp, #68	@ 0x44
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	3318      	adds	r3, #24
 8002404:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800240c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002418:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800241a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800241e:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002426:	2300      	movs	r3, #0
 8002428:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800242a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002432:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002436:	d007      	beq.n	8002448 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800243a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800243c:	3304      	adds	r3, #4
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002448:	2302      	movs	r3, #2
 800244a:	e111      	b.n	8002670 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 800244c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800244e:	3301      	adds	r3, #1
 8002450:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800245c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	4b86      	ldr	r3, [pc, #536]	@ (800267c <ETH_Prepare_Tx_Descriptors+0x288>)
 8002462:	4013      	ands	r3, r2
 8002464:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002466:	6852      	ldr	r2, [r2, #4]
 8002468:	431a      	orrs	r2, r3
 800246a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d008      	beq.n	800248c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800247a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	431a      	orrs	r2, r3
 8002488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800248a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	431a      	orrs	r2, r3
 80024a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d005      	beq.n	80024c2 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80024b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80024be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80024c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80024ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024cc:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80024ce:	e082      	b.n	80025d6 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80024d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80024d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024da:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d006      	beq.n	80024f0 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80024ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	e005      	b.n	80024fc <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80024f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fa:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80024fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024fe:	3301      	adds	r3, #1
 8002500:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002504:	2b03      	cmp	r3, #3
 8002506:	d902      	bls.n	800250e <ETH_Prepare_Tx_Descriptors+0x11a>
 8002508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800250a:	3b04      	subs	r3, #4
 800250c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800250e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002510:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002516:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002520:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002524:	d007      	beq.n	8002536 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800252a:	3304      	adds	r3, #4
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d029      	beq.n	800258a <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8002536:	6a3b      	ldr	r3, [r7, #32]
 8002538:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800253a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800253e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002542:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002544:	2300      	movs	r3, #0
 8002546:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002548:	e019      	b.n	800257e <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 800254a:	f3bf 8f5f 	dmb	sy
}
 800254e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800255a:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800255c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800255e:	3301      	adds	r3, #1
 8002560:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002564:	2b03      	cmp	r3, #3
 8002566:	d902      	bls.n	800256e <ETH_Prepare_Tx_Descriptors+0x17a>
 8002568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800256a:	3b04      	subs	r3, #4
 800256c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002576:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800257a:	3301      	adds	r3, #1
 800257c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800257e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002582:	429a      	cmp	r2, r3
 8002584:	d3e1      	bcc.n	800254a <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8002586:	2302      	movs	r3, #2
 8002588:	e072      	b.n	8002670 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800258a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002594:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002598:	3301      	adds	r3, #1
 800259a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800259c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80025a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025aa:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80025ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	4b32      	ldr	r3, [pc, #200]	@ (800267c <ETH_Prepare_Tx_Descriptors+0x288>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025b6:	6852      	ldr	r2, [r2, #4]
 80025b8:	431a      	orrs	r2, r3
 80025ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025bc:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80025be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c0:	3301      	adds	r3, #1
 80025c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80025c4:	f3bf 8f5f 	dmb	sy
}
 80025c8:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80025ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80025d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d4:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80025d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f47f af78 	bne.w	80024d0 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d006      	beq.n	80025f4 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80025ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	e005      	b.n	8002600 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80025fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fe:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800260a:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260e:	6a3a      	ldr	r2, [r7, #32]
 8002610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002614:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002616:	f3bf 8f5f 	dmb	sy
}
 800261a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800261c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002626:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800262c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800262e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002630:	3304      	adds	r3, #4
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800263c:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800263e:	f3ef 8310 	mrs	r3, PRIMASK
 8002642:	613b      	str	r3, [r7, #16]
  return(result);
 8002644:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002646:	61fb      	str	r3, [r7, #28]
 8002648:	2301      	movs	r3, #1
 800264a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f383 8810 	msr	PRIMASK, r3
}
 8002652:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002656:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800265a:	4413      	add	r3, r2
 800265c:	1c5a      	adds	r2, r3, #1
 800265e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002660:	629a      	str	r2, [r3, #40]	@ 0x28
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	f383 8810 	msr	PRIMASK, r3
}
 800266c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3744      	adds	r7, #68	@ 0x44
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	ffffe000 	.word	0xffffe000

08002680 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002680:	b480      	push	{r7}
 8002682:	b089      	sub	sp, #36	@ 0x24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002692:	2300      	movs	r3, #0
 8002694:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002696:	2300      	movs	r3, #0
 8002698:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	e175      	b.n	800298c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80026a0:	2201      	movs	r2, #1
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	4013      	ands	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	f040 8164 	bne.w	8002986 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d005      	beq.n	80026d6 <HAL_GPIO_Init+0x56>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d130      	bne.n	8002738 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	2203      	movs	r2, #3
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800270c:	2201      	movs	r2, #1
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	091b      	lsrs	r3, r3, #4
 8002722:	f003 0201 	and.w	r2, r3, #1
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 0303 	and.w	r3, r3, #3
 8002740:	2b03      	cmp	r3, #3
 8002742:	d017      	beq.n	8002774 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	2203      	movs	r2, #3
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d123      	bne.n	80027c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	08da      	lsrs	r2, r3, #3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3208      	adds	r2, #8
 8002788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800278c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	220f      	movs	r2, #15
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	08da      	lsrs	r2, r3, #3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3208      	adds	r2, #8
 80027c2:	69b9      	ldr	r1, [r7, #24]
 80027c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	2203      	movs	r2, #3
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 0203 	and.w	r2, r3, #3
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 80be 	beq.w	8002986 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280a:	4b66      	ldr	r3, [pc, #408]	@ (80029a4 <HAL_GPIO_Init+0x324>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280e:	4a65      	ldr	r2, [pc, #404]	@ (80029a4 <HAL_GPIO_Init+0x324>)
 8002810:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002814:	6453      	str	r3, [r2, #68]	@ 0x44
 8002816:	4b63      	ldr	r3, [pc, #396]	@ (80029a4 <HAL_GPIO_Init+0x324>)
 8002818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002822:	4a61      	ldr	r2, [pc, #388]	@ (80029a8 <HAL_GPIO_Init+0x328>)
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	089b      	lsrs	r3, r3, #2
 8002828:	3302      	adds	r3, #2
 800282a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	220f      	movs	r2, #15
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43db      	mvns	r3, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4013      	ands	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a58      	ldr	r2, [pc, #352]	@ (80029ac <HAL_GPIO_Init+0x32c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d037      	beq.n	80028be <HAL_GPIO_Init+0x23e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a57      	ldr	r2, [pc, #348]	@ (80029b0 <HAL_GPIO_Init+0x330>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d031      	beq.n	80028ba <HAL_GPIO_Init+0x23a>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a56      	ldr	r2, [pc, #344]	@ (80029b4 <HAL_GPIO_Init+0x334>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d02b      	beq.n	80028b6 <HAL_GPIO_Init+0x236>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a55      	ldr	r2, [pc, #340]	@ (80029b8 <HAL_GPIO_Init+0x338>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d025      	beq.n	80028b2 <HAL_GPIO_Init+0x232>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a54      	ldr	r2, [pc, #336]	@ (80029bc <HAL_GPIO_Init+0x33c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d01f      	beq.n	80028ae <HAL_GPIO_Init+0x22e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a53      	ldr	r2, [pc, #332]	@ (80029c0 <HAL_GPIO_Init+0x340>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d019      	beq.n	80028aa <HAL_GPIO_Init+0x22a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a52      	ldr	r2, [pc, #328]	@ (80029c4 <HAL_GPIO_Init+0x344>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d013      	beq.n	80028a6 <HAL_GPIO_Init+0x226>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a51      	ldr	r2, [pc, #324]	@ (80029c8 <HAL_GPIO_Init+0x348>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00d      	beq.n	80028a2 <HAL_GPIO_Init+0x222>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a50      	ldr	r2, [pc, #320]	@ (80029cc <HAL_GPIO_Init+0x34c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d007      	beq.n	800289e <HAL_GPIO_Init+0x21e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a4f      	ldr	r2, [pc, #316]	@ (80029d0 <HAL_GPIO_Init+0x350>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d101      	bne.n	800289a <HAL_GPIO_Init+0x21a>
 8002896:	2309      	movs	r3, #9
 8002898:	e012      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 800289a:	230a      	movs	r3, #10
 800289c:	e010      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 800289e:	2308      	movs	r3, #8
 80028a0:	e00e      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028a2:	2307      	movs	r3, #7
 80028a4:	e00c      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028a6:	2306      	movs	r3, #6
 80028a8:	e00a      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028aa:	2305      	movs	r3, #5
 80028ac:	e008      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028ae:	2304      	movs	r3, #4
 80028b0:	e006      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028b2:	2303      	movs	r3, #3
 80028b4:	e004      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e002      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028be:	2300      	movs	r3, #0
 80028c0:	69fa      	ldr	r2, [r7, #28]
 80028c2:	f002 0203 	and.w	r2, r2, #3
 80028c6:	0092      	lsls	r2, r2, #2
 80028c8:	4093      	lsls	r3, r2
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80028d0:	4935      	ldr	r1, [pc, #212]	@ (80029a8 <HAL_GPIO_Init+0x328>)
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	089b      	lsrs	r3, r3, #2
 80028d6:	3302      	adds	r3, #2
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028de:	4b3d      	ldr	r3, [pc, #244]	@ (80029d4 <HAL_GPIO_Init+0x354>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002902:	4a34      	ldr	r2, [pc, #208]	@ (80029d4 <HAL_GPIO_Init+0x354>)
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002908:	4b32      	ldr	r3, [pc, #200]	@ (80029d4 <HAL_GPIO_Init+0x354>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	43db      	mvns	r3, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800292c:	4a29      	ldr	r2, [pc, #164]	@ (80029d4 <HAL_GPIO_Init+0x354>)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002932:	4b28      	ldr	r3, [pc, #160]	@ (80029d4 <HAL_GPIO_Init+0x354>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	43db      	mvns	r3, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4013      	ands	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002956:	4a1f      	ldr	r2, [pc, #124]	@ (80029d4 <HAL_GPIO_Init+0x354>)
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800295c:	4b1d      	ldr	r3, [pc, #116]	@ (80029d4 <HAL_GPIO_Init+0x354>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002980:	4a14      	ldr	r2, [pc, #80]	@ (80029d4 <HAL_GPIO_Init+0x354>)
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3301      	adds	r3, #1
 800298a:	61fb      	str	r3, [r7, #28]
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	2b0f      	cmp	r3, #15
 8002990:	f67f ae86 	bls.w	80026a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002994:	bf00      	nop
 8002996:	bf00      	nop
 8002998:	3724      	adds	r7, #36	@ 0x24
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40013800 	.word	0x40013800
 80029ac:	40020000 	.word	0x40020000
 80029b0:	40020400 	.word	0x40020400
 80029b4:	40020800 	.word	0x40020800
 80029b8:	40020c00 	.word	0x40020c00
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40021400 	.word	0x40021400
 80029c4:	40021800 	.word	0x40021800
 80029c8:	40021c00 	.word	0x40021c00
 80029cc:	40022000 	.word	0x40022000
 80029d0:	40022400 	.word	0x40022400
 80029d4:	40013c00 	.word	0x40013c00

080029d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80029de:	2300      	movs	r3, #0
 80029e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80029e2:	4b23      	ldr	r3, [pc, #140]	@ (8002a70 <HAL_PWREx_EnableOverDrive+0x98>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e6:	4a22      	ldr	r2, [pc, #136]	@ (8002a70 <HAL_PWREx_EnableOverDrive+0x98>)
 80029e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ee:	4b20      	ldr	r3, [pc, #128]	@ (8002a70 <HAL_PWREx_EnableOverDrive+0x98>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80029fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002a74 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a1d      	ldr	r2, [pc, #116]	@ (8002a74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a04:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a06:	f7fe fa19 	bl	8000e3c <HAL_GetTick>
 8002a0a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a0c:	e009      	b.n	8002a22 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a0e:	f7fe fa15 	bl	8000e3c <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a1c:	d901      	bls.n	8002a22 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e022      	b.n	8002a68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a22:	4b14      	ldr	r3, [pc, #80]	@ (8002a74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a2e:	d1ee      	bne.n	8002a0e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a30:	4b10      	ldr	r3, [pc, #64]	@ (8002a74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a0f      	ldr	r2, [pc, #60]	@ (8002a74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a3a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a3c:	f7fe f9fe 	bl	8000e3c <HAL_GetTick>
 8002a40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a42:	e009      	b.n	8002a58 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a44:	f7fe f9fa 	bl	8000e3c <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a52:	d901      	bls.n	8002a58 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e007      	b.n	8002a68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a58:	4b06      	ldr	r3, [pc, #24]	@ (8002a74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a64:	d1ee      	bne.n	8002a44 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40023800 	.word	0x40023800
 8002a74:	40007000 	.word	0x40007000

08002a78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a80:	2300      	movs	r3, #0
 8002a82:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e291      	b.n	8002fb2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 8087 	beq.w	8002baa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a9c:	4b96      	ldr	r3, [pc, #600]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 030c 	and.w	r3, r3, #12
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d00c      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aa8:	4b93      	ldr	r3, [pc, #588]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 030c 	and.w	r3, r3, #12
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d112      	bne.n	8002ada <HAL_RCC_OscConfig+0x62>
 8002ab4:	4b90      	ldr	r3, [pc, #576]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002abc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ac0:	d10b      	bne.n	8002ada <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac2:	4b8d      	ldr	r3, [pc, #564]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d06c      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x130>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d168      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e26b      	b.n	8002fb2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ae2:	d106      	bne.n	8002af2 <HAL_RCC_OscConfig+0x7a>
 8002ae4:	4b84      	ldr	r3, [pc, #528]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a83      	ldr	r2, [pc, #524]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002aea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	e02e      	b.n	8002b50 <HAL_RCC_OscConfig+0xd8>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCC_OscConfig+0x9c>
 8002afa:	4b7f      	ldr	r3, [pc, #508]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a7e      	ldr	r2, [pc, #504]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002b00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	4b7c      	ldr	r3, [pc, #496]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a7b      	ldr	r2, [pc, #492]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002b0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	e01d      	b.n	8002b50 <HAL_RCC_OscConfig+0xd8>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b1c:	d10c      	bne.n	8002b38 <HAL_RCC_OscConfig+0xc0>
 8002b1e:	4b76      	ldr	r3, [pc, #472]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a75      	ldr	r2, [pc, #468]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002b24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	4b73      	ldr	r3, [pc, #460]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a72      	ldr	r2, [pc, #456]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	e00b      	b.n	8002b50 <HAL_RCC_OscConfig+0xd8>
 8002b38:	4b6f      	ldr	r3, [pc, #444]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a6e      	ldr	r2, [pc, #440]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002b3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	4b6c      	ldr	r3, [pc, #432]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a6b      	ldr	r2, [pc, #428]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002b4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d013      	beq.n	8002b80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7fe f970 	bl	8000e3c <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b60:	f7fe f96c 	bl	8000e3c <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b64      	cmp	r3, #100	@ 0x64
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e21f      	b.n	8002fb2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b72:	4b61      	ldr	r3, [pc, #388]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0xe8>
 8002b7e:	e014      	b.n	8002baa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b80:	f7fe f95c 	bl	8000e3c <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b88:	f7fe f958 	bl	8000e3c <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b64      	cmp	r3, #100	@ 0x64
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e20b      	b.n	8002fb2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b9a:	4b57      	ldr	r3, [pc, #348]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0x110>
 8002ba6:	e000      	b.n	8002baa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d069      	beq.n	8002c8a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bb6:	4b50      	ldr	r3, [pc, #320]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 030c 	and.w	r3, r3, #12
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00b      	beq.n	8002bda <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bc2:	4b4d      	ldr	r3, [pc, #308]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d11c      	bne.n	8002c08 <HAL_RCC_OscConfig+0x190>
 8002bce:	4b4a      	ldr	r3, [pc, #296]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d116      	bne.n	8002c08 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bda:	4b47      	ldr	r3, [pc, #284]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d005      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x17a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d001      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e1df      	b.n	8002fb2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf2:	4b41      	ldr	r3, [pc, #260]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	493d      	ldr	r1, [pc, #244]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c06:	e040      	b.n	8002c8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d023      	beq.n	8002c58 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c10:	4b39      	ldr	r3, [pc, #228]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a38      	ldr	r2, [pc, #224]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7fe f90e 	bl	8000e3c <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c24:	f7fe f90a 	bl	8000e3c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e1bd      	b.n	8002fb2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c36:	4b30      	ldr	r3, [pc, #192]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c42:	4b2d      	ldr	r3, [pc, #180]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	4929      	ldr	r1, [pc, #164]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	600b      	str	r3, [r1, #0]
 8002c56:	e018      	b.n	8002c8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c58:	4b27      	ldr	r3, [pc, #156]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a26      	ldr	r2, [pc, #152]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c64:	f7fe f8ea 	bl	8000e3c <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c6c:	f7fe f8e6 	bl	8000e3c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e199      	b.n	8002fb2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d038      	beq.n	8002d08 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d019      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c9e:	4b16      	ldr	r3, [pc, #88]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002ca0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ca2:	4a15      	ldr	r2, [pc, #84]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002caa:	f7fe f8c7 	bl	8000e3c <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb2:	f7fe f8c3 	bl	8000e3c <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e176      	b.n	8002fb2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002cc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0f0      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x23a>
 8002cd0:	e01a      	b.n	8002d08 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cd2:	4b09      	ldr	r3, [pc, #36]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cd6:	4a08      	ldr	r2, [pc, #32]	@ (8002cf8 <HAL_RCC_OscConfig+0x280>)
 8002cd8:	f023 0301 	bic.w	r3, r3, #1
 8002cdc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cde:	f7fe f8ad 	bl	8000e3c <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce4:	e00a      	b.n	8002cfc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce6:	f7fe f8a9 	bl	8000e3c <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d903      	bls.n	8002cfc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e15c      	b.n	8002fb2 <HAL_RCC_OscConfig+0x53a>
 8002cf8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cfc:	4b91      	ldr	r3, [pc, #580]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002cfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1ee      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80a4 	beq.w	8002e5e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d16:	4b8b      	ldr	r3, [pc, #556]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10d      	bne.n	8002d3e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d22:	4b88      	ldr	r3, [pc, #544]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d26:	4a87      	ldr	r2, [pc, #540]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002d28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d2e:	4b85      	ldr	r3, [pc, #532]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d36:	60bb      	str	r3, [r7, #8]
 8002d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d3e:	4b82      	ldr	r3, [pc, #520]	@ (8002f48 <HAL_RCC_OscConfig+0x4d0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d118      	bne.n	8002d7c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d4a:	4b7f      	ldr	r3, [pc, #508]	@ (8002f48 <HAL_RCC_OscConfig+0x4d0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a7e      	ldr	r2, [pc, #504]	@ (8002f48 <HAL_RCC_OscConfig+0x4d0>)
 8002d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d56:	f7fe f871 	bl	8000e3c <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d5e:	f7fe f86d 	bl	8000e3c <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b64      	cmp	r3, #100	@ 0x64
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e120      	b.n	8002fb2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d70:	4b75      	ldr	r3, [pc, #468]	@ (8002f48 <HAL_RCC_OscConfig+0x4d0>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0f0      	beq.n	8002d5e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d106      	bne.n	8002d92 <HAL_RCC_OscConfig+0x31a>
 8002d84:	4b6f      	ldr	r3, [pc, #444]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d88:	4a6e      	ldr	r2, [pc, #440]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002d8a:	f043 0301 	orr.w	r3, r3, #1
 8002d8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d90:	e02d      	b.n	8002dee <HAL_RCC_OscConfig+0x376>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10c      	bne.n	8002db4 <HAL_RCC_OscConfig+0x33c>
 8002d9a:	4b6a      	ldr	r3, [pc, #424]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d9e:	4a69      	ldr	r2, [pc, #420]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002da0:	f023 0301 	bic.w	r3, r3, #1
 8002da4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002da6:	4b67      	ldr	r3, [pc, #412]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002daa:	4a66      	ldr	r2, [pc, #408]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002dac:	f023 0304 	bic.w	r3, r3, #4
 8002db0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002db2:	e01c      	b.n	8002dee <HAL_RCC_OscConfig+0x376>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2b05      	cmp	r3, #5
 8002dba:	d10c      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x35e>
 8002dbc:	4b61      	ldr	r3, [pc, #388]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc0:	4a60      	ldr	r2, [pc, #384]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002dc2:	f043 0304 	orr.w	r3, r3, #4
 8002dc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dc8:	4b5e      	ldr	r3, [pc, #376]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dcc:	4a5d      	ldr	r2, [pc, #372]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dd4:	e00b      	b.n	8002dee <HAL_RCC_OscConfig+0x376>
 8002dd6:	4b5b      	ldr	r3, [pc, #364]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dda:	4a5a      	ldr	r2, [pc, #360]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002ddc:	f023 0301 	bic.w	r3, r3, #1
 8002de0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002de2:	4b58      	ldr	r3, [pc, #352]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de6:	4a57      	ldr	r2, [pc, #348]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002de8:	f023 0304 	bic.w	r3, r3, #4
 8002dec:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d015      	beq.n	8002e22 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df6:	f7fe f821 	bl	8000e3c <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dfc:	e00a      	b.n	8002e14 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfe:	f7fe f81d 	bl	8000e3c <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e0ce      	b.n	8002fb2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e14:	4b4b      	ldr	r3, [pc, #300]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0ee      	beq.n	8002dfe <HAL_RCC_OscConfig+0x386>
 8002e20:	e014      	b.n	8002e4c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e22:	f7fe f80b 	bl	8000e3c <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e28:	e00a      	b.n	8002e40 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2a:	f7fe f807 	bl	8000e3c <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e0b8      	b.n	8002fb2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e40:	4b40      	ldr	r3, [pc, #256]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1ee      	bne.n	8002e2a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e4c:	7dfb      	ldrb	r3, [r7, #23]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d105      	bne.n	8002e5e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e52:	4b3c      	ldr	r3, [pc, #240]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e56:	4a3b      	ldr	r2, [pc, #236]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002e58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e5c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 80a4 	beq.w	8002fb0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e68:	4b36      	ldr	r3, [pc, #216]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 030c 	and.w	r3, r3, #12
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d06b      	beq.n	8002f4c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d149      	bne.n	8002f10 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e7c:	4b31      	ldr	r3, [pc, #196]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a30      	ldr	r2, [pc, #192]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002e82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7fd ffd8 	bl	8000e3c <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e90:	f7fd ffd4 	bl	8000e3c <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e087      	b.n	8002fb2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea2:	4b28      	ldr	r3, [pc, #160]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69da      	ldr	r2, [r3, #28]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ebc:	019b      	lsls	r3, r3, #6
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec4:	085b      	lsrs	r3, r3, #1
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	041b      	lsls	r3, r3, #16
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed0:	061b      	lsls	r3, r3, #24
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	4a1b      	ldr	r2, [pc, #108]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002ed6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002eda:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002edc:	4b19      	ldr	r3, [pc, #100]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a18      	ldr	r2, [pc, #96]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002ee2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee8:	f7fd ffa8 	bl	8000e3c <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef0:	f7fd ffa4 	bl	8000e3c <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e057      	b.n	8002fb2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f02:	4b10      	ldr	r3, [pc, #64]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x478>
 8002f0e:	e04f      	b.n	8002fb0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f10:	4b0c      	ldr	r3, [pc, #48]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a0b      	ldr	r2, [pc, #44]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002f16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1c:	f7fd ff8e 	bl	8000e3c <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f24:	f7fd ff8a 	bl	8000e3c <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e03d      	b.n	8002fb2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f36:	4b03      	ldr	r3, [pc, #12]	@ (8002f44 <HAL_RCC_OscConfig+0x4cc>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x4ac>
 8002f42:	e035      	b.n	8002fb0 <HAL_RCC_OscConfig+0x538>
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002fbc <HAL_RCC_OscConfig+0x544>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d028      	beq.n	8002fac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d121      	bne.n	8002fac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d11a      	bne.n	8002fac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f82:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d111      	bne.n	8002fac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f92:	085b      	lsrs	r3, r3, #1
 8002f94:	3b01      	subs	r3, #1
 8002f96:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d107      	bne.n	8002fac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d001      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e000      	b.n	8002fb2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40023800 	.word	0x40023800

08002fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0d0      	b.n	800317a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd8:	4b6a      	ldr	r3, [pc, #424]	@ (8003184 <HAL_RCC_ClockConfig+0x1c4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 030f 	and.w	r3, r3, #15
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d910      	bls.n	8003008 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe6:	4b67      	ldr	r3, [pc, #412]	@ (8003184 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f023 020f 	bic.w	r2, r3, #15
 8002fee:	4965      	ldr	r1, [pc, #404]	@ (8003184 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff6:	4b63      	ldr	r3, [pc, #396]	@ (8003184 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d001      	beq.n	8003008 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0b8      	b.n	800317a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d020      	beq.n	8003056 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d005      	beq.n	800302c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003020:	4b59      	ldr	r3, [pc, #356]	@ (8003188 <HAL_RCC_ClockConfig+0x1c8>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	4a58      	ldr	r2, [pc, #352]	@ (8003188 <HAL_RCC_ClockConfig+0x1c8>)
 8003026:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800302a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b00      	cmp	r3, #0
 8003036:	d005      	beq.n	8003044 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003038:	4b53      	ldr	r3, [pc, #332]	@ (8003188 <HAL_RCC_ClockConfig+0x1c8>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	4a52      	ldr	r2, [pc, #328]	@ (8003188 <HAL_RCC_ClockConfig+0x1c8>)
 800303e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003042:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003044:	4b50      	ldr	r3, [pc, #320]	@ (8003188 <HAL_RCC_ClockConfig+0x1c8>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	494d      	ldr	r1, [pc, #308]	@ (8003188 <HAL_RCC_ClockConfig+0x1c8>)
 8003052:	4313      	orrs	r3, r2
 8003054:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d040      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d107      	bne.n	800307a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306a:	4b47      	ldr	r3, [pc, #284]	@ (8003188 <HAL_RCC_ClockConfig+0x1c8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d115      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e07f      	b.n	800317a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d107      	bne.n	8003092 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003082:	4b41      	ldr	r3, [pc, #260]	@ (8003188 <HAL_RCC_ClockConfig+0x1c8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d109      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e073      	b.n	800317a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003092:	4b3d      	ldr	r3, [pc, #244]	@ (8003188 <HAL_RCC_ClockConfig+0x1c8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e06b      	b.n	800317a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030a2:	4b39      	ldr	r3, [pc, #228]	@ (8003188 <HAL_RCC_ClockConfig+0x1c8>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f023 0203 	bic.w	r2, r3, #3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	4936      	ldr	r1, [pc, #216]	@ (8003188 <HAL_RCC_ClockConfig+0x1c8>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030b4:	f7fd fec2 	bl	8000e3c <HAL_GetTick>
 80030b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ba:	e00a      	b.n	80030d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030bc:	f7fd febe 	bl	8000e3c <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e053      	b.n	800317a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d2:	4b2d      	ldr	r3, [pc, #180]	@ (8003188 <HAL_RCC_ClockConfig+0x1c8>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 020c 	and.w	r2, r3, #12
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d1eb      	bne.n	80030bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030e4:	4b27      	ldr	r3, [pc, #156]	@ (8003184 <HAL_RCC_ClockConfig+0x1c4>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 030f 	and.w	r3, r3, #15
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d210      	bcs.n	8003114 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f2:	4b24      	ldr	r3, [pc, #144]	@ (8003184 <HAL_RCC_ClockConfig+0x1c4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 020f 	bic.w	r2, r3, #15
 80030fa:	4922      	ldr	r1, [pc, #136]	@ (8003184 <HAL_RCC_ClockConfig+0x1c4>)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	4313      	orrs	r3, r2
 8003100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003102:	4b20      	ldr	r3, [pc, #128]	@ (8003184 <HAL_RCC_ClockConfig+0x1c4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	d001      	beq.n	8003114 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e032      	b.n	800317a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d008      	beq.n	8003132 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003120:	4b19      	ldr	r3, [pc, #100]	@ (8003188 <HAL_RCC_ClockConfig+0x1c8>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	4916      	ldr	r1, [pc, #88]	@ (8003188 <HAL_RCC_ClockConfig+0x1c8>)
 800312e:	4313      	orrs	r3, r2
 8003130:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b00      	cmp	r3, #0
 800313c:	d009      	beq.n	8003152 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800313e:	4b12      	ldr	r3, [pc, #72]	@ (8003188 <HAL_RCC_ClockConfig+0x1c8>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	490e      	ldr	r1, [pc, #56]	@ (8003188 <HAL_RCC_ClockConfig+0x1c8>)
 800314e:	4313      	orrs	r3, r2
 8003150:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003152:	f000 f821 	bl	8003198 <HAL_RCC_GetSysClockFreq>
 8003156:	4602      	mov	r2, r0
 8003158:	4b0b      	ldr	r3, [pc, #44]	@ (8003188 <HAL_RCC_ClockConfig+0x1c8>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	091b      	lsrs	r3, r3, #4
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	490a      	ldr	r1, [pc, #40]	@ (800318c <HAL_RCC_ClockConfig+0x1cc>)
 8003164:	5ccb      	ldrb	r3, [r1, r3]
 8003166:	fa22 f303 	lsr.w	r3, r2, r3
 800316a:	4a09      	ldr	r2, [pc, #36]	@ (8003190 <HAL_RCC_ClockConfig+0x1d0>)
 800316c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800316e:	4b09      	ldr	r3, [pc, #36]	@ (8003194 <HAL_RCC_ClockConfig+0x1d4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7fd fe1e 	bl	8000db4 <HAL_InitTick>

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40023c00 	.word	0x40023c00
 8003188:	40023800 	.word	0x40023800
 800318c:	08012998 	.word	0x08012998
 8003190:	20000000 	.word	0x20000000
 8003194:	20000004 	.word	0x20000004

08003198 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800319c:	b090      	sub	sp, #64	@ 0x40
 800319e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80031a0:	2300      	movs	r3, #0
 80031a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80031a4:	2300      	movs	r3, #0
 80031a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031a8:	2300      	movs	r3, #0
 80031aa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80031ac:	2300      	movs	r3, #0
 80031ae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031b0:	4b59      	ldr	r3, [pc, #356]	@ (8003318 <HAL_RCC_GetSysClockFreq+0x180>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 030c 	and.w	r3, r3, #12
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d00d      	beq.n	80031d8 <HAL_RCC_GetSysClockFreq+0x40>
 80031bc:	2b08      	cmp	r3, #8
 80031be:	f200 80a1 	bhi.w	8003304 <HAL_RCC_GetSysClockFreq+0x16c>
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <HAL_RCC_GetSysClockFreq+0x34>
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d003      	beq.n	80031d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80031ca:	e09b      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031cc:	4b53      	ldr	r3, [pc, #332]	@ (800331c <HAL_RCC_GetSysClockFreq+0x184>)
 80031ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031d0:	e09b      	b.n	800330a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031d2:	4b53      	ldr	r3, [pc, #332]	@ (8003320 <HAL_RCC_GetSysClockFreq+0x188>)
 80031d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031d6:	e098      	b.n	800330a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031d8:	4b4f      	ldr	r3, [pc, #316]	@ (8003318 <HAL_RCC_GetSysClockFreq+0x180>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80031e2:	4b4d      	ldr	r3, [pc, #308]	@ (8003318 <HAL_RCC_GetSysClockFreq+0x180>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d028      	beq.n	8003240 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ee:	4b4a      	ldr	r3, [pc, #296]	@ (8003318 <HAL_RCC_GetSysClockFreq+0x180>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	099b      	lsrs	r3, r3, #6
 80031f4:	2200      	movs	r2, #0
 80031f6:	623b      	str	r3, [r7, #32]
 80031f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003200:	2100      	movs	r1, #0
 8003202:	4b47      	ldr	r3, [pc, #284]	@ (8003320 <HAL_RCC_GetSysClockFreq+0x188>)
 8003204:	fb03 f201 	mul.w	r2, r3, r1
 8003208:	2300      	movs	r3, #0
 800320a:	fb00 f303 	mul.w	r3, r0, r3
 800320e:	4413      	add	r3, r2
 8003210:	4a43      	ldr	r2, [pc, #268]	@ (8003320 <HAL_RCC_GetSysClockFreq+0x188>)
 8003212:	fba0 1202 	umull	r1, r2, r0, r2
 8003216:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003218:	460a      	mov	r2, r1
 800321a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800321c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800321e:	4413      	add	r3, r2
 8003220:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003224:	2200      	movs	r2, #0
 8003226:	61bb      	str	r3, [r7, #24]
 8003228:	61fa      	str	r2, [r7, #28]
 800322a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800322e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003232:	f7fd f83d 	bl	80002b0 <__aeabi_uldivmod>
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	4613      	mov	r3, r2
 800323c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800323e:	e053      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003240:	4b35      	ldr	r3, [pc, #212]	@ (8003318 <HAL_RCC_GetSysClockFreq+0x180>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	099b      	lsrs	r3, r3, #6
 8003246:	2200      	movs	r2, #0
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	617a      	str	r2, [r7, #20]
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003252:	f04f 0b00 	mov.w	fp, #0
 8003256:	4652      	mov	r2, sl
 8003258:	465b      	mov	r3, fp
 800325a:	f04f 0000 	mov.w	r0, #0
 800325e:	f04f 0100 	mov.w	r1, #0
 8003262:	0159      	lsls	r1, r3, #5
 8003264:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003268:	0150      	lsls	r0, r2, #5
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	ebb2 080a 	subs.w	r8, r2, sl
 8003272:	eb63 090b 	sbc.w	r9, r3, fp
 8003276:	f04f 0200 	mov.w	r2, #0
 800327a:	f04f 0300 	mov.w	r3, #0
 800327e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003282:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003286:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800328a:	ebb2 0408 	subs.w	r4, r2, r8
 800328e:	eb63 0509 	sbc.w	r5, r3, r9
 8003292:	f04f 0200 	mov.w	r2, #0
 8003296:	f04f 0300 	mov.w	r3, #0
 800329a:	00eb      	lsls	r3, r5, #3
 800329c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032a0:	00e2      	lsls	r2, r4, #3
 80032a2:	4614      	mov	r4, r2
 80032a4:	461d      	mov	r5, r3
 80032a6:	eb14 030a 	adds.w	r3, r4, sl
 80032aa:	603b      	str	r3, [r7, #0]
 80032ac:	eb45 030b 	adc.w	r3, r5, fp
 80032b0:	607b      	str	r3, [r7, #4]
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032be:	4629      	mov	r1, r5
 80032c0:	028b      	lsls	r3, r1, #10
 80032c2:	4621      	mov	r1, r4
 80032c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032c8:	4621      	mov	r1, r4
 80032ca:	028a      	lsls	r2, r1, #10
 80032cc:	4610      	mov	r0, r2
 80032ce:	4619      	mov	r1, r3
 80032d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032d2:	2200      	movs	r2, #0
 80032d4:	60bb      	str	r3, [r7, #8]
 80032d6:	60fa      	str	r2, [r7, #12]
 80032d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032dc:	f7fc ffe8 	bl	80002b0 <__aeabi_uldivmod>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4613      	mov	r3, r2
 80032e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80032e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003318 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	0c1b      	lsrs	r3, r3, #16
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	3301      	adds	r3, #1
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80032f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80032fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003300:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003302:	e002      	b.n	800330a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003304:	4b05      	ldr	r3, [pc, #20]	@ (800331c <HAL_RCC_GetSysClockFreq+0x184>)
 8003306:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003308:	bf00      	nop
    }
  }
  return sysclockfreq;
 800330a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800330c:	4618      	mov	r0, r3
 800330e:	3740      	adds	r7, #64	@ 0x40
 8003310:	46bd      	mov	sp, r7
 8003312:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003316:	bf00      	nop
 8003318:	40023800 	.word	0x40023800
 800331c:	00f42400 	.word	0x00f42400
 8003320:	017d7840 	.word	0x017d7840

08003324 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003328:	4b03      	ldr	r3, [pc, #12]	@ (8003338 <HAL_RCC_GetHCLKFreq+0x14>)
 800332a:	681b      	ldr	r3, [r3, #0]
}
 800332c:	4618      	mov	r0, r3
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	20000000 	.word	0x20000000

0800333c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003340:	f7ff fff0 	bl	8003324 <HAL_RCC_GetHCLKFreq>
 8003344:	4602      	mov	r2, r0
 8003346:	4b05      	ldr	r3, [pc, #20]	@ (800335c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	0a9b      	lsrs	r3, r3, #10
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	4903      	ldr	r1, [pc, #12]	@ (8003360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003352:	5ccb      	ldrb	r3, [r1, r3]
 8003354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003358:	4618      	mov	r0, r3
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40023800 	.word	0x40023800
 8003360:	080129a8 	.word	0x080129a8

08003364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003368:	f7ff ffdc 	bl	8003324 <HAL_RCC_GetHCLKFreq>
 800336c:	4602      	mov	r2, r0
 800336e:	4b05      	ldr	r3, [pc, #20]	@ (8003384 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	0b5b      	lsrs	r3, r3, #13
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	4903      	ldr	r1, [pc, #12]	@ (8003388 <HAL_RCC_GetPCLK2Freq+0x24>)
 800337a:	5ccb      	ldrb	r3, [r1, r3]
 800337c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003380:	4618      	mov	r0, r3
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40023800 	.word	0x40023800
 8003388:	080129a8 	.word	0x080129a8

0800338c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003398:	2300      	movs	r3, #0
 800339a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800339c:	2300      	movs	r3, #0
 800339e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d012      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033b4:	4b69      	ldr	r3, [pc, #420]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	4a68      	ldr	r2, [pc, #416]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ba:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80033be:	6093      	str	r3, [r2, #8]
 80033c0:	4b66      	ldr	r3, [pc, #408]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033c8:	4964      	ldr	r1, [pc, #400]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80033d6:	2301      	movs	r3, #1
 80033d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d017      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033e6:	4b5d      	ldr	r3, [pc, #372]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033ec:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f4:	4959      	ldr	r1, [pc, #356]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003400:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003404:	d101      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003406:	2301      	movs	r3, #1
 8003408:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003412:	2301      	movs	r3, #1
 8003414:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d017      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003422:	4b4e      	ldr	r3, [pc, #312]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003424:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003428:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003430:	494a      	ldr	r1, [pc, #296]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003440:	d101      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003442:	2301      	movs	r3, #1
 8003444:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800344e:	2301      	movs	r3, #1
 8003450:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800345e:	2301      	movs	r3, #1
 8003460:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 808b 	beq.w	8003586 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003470:	4b3a      	ldr	r3, [pc, #232]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003474:	4a39      	ldr	r2, [pc, #228]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003476:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800347a:	6413      	str	r3, [r2, #64]	@ 0x40
 800347c:	4b37      	ldr	r3, [pc, #220]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800347e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003488:	4b35      	ldr	r3, [pc, #212]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a34      	ldr	r2, [pc, #208]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800348e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003492:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003494:	f7fd fcd2 	bl	8000e3c <HAL_GetTick>
 8003498:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800349c:	f7fd fcce 	bl	8000e3c <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b64      	cmp	r3, #100	@ 0x64
 80034a8:	d901      	bls.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e357      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034ba:	4b28      	ldr	r3, [pc, #160]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d035      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d02e      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034d8:	4b20      	ldr	r3, [pc, #128]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034e2:	4b1e      	ldr	r3, [pc, #120]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e6:	4a1d      	ldr	r2, [pc, #116]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034ec:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034ee:	4b1b      	ldr	r3, [pc, #108]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f2:	4a1a      	ldr	r2, [pc, #104]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034f8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80034fa:	4a18      	ldr	r2, [pc, #96]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003500:	4b16      	ldr	r3, [pc, #88]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b01      	cmp	r3, #1
 800350a:	d114      	bne.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350c:	f7fd fc96 	bl	8000e3c <HAL_GetTick>
 8003510:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003512:	e00a      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003514:	f7fd fc92 	bl	8000e3c <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003522:	4293      	cmp	r3, r2
 8003524:	d901      	bls.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e319      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800352a:	4b0c      	ldr	r3, [pc, #48]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0ee      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800353e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003542:	d111      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003544:	4b05      	ldr	r3, [pc, #20]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003550:	4b04      	ldr	r3, [pc, #16]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003552:	400b      	ands	r3, r1
 8003554:	4901      	ldr	r1, [pc, #4]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003556:	4313      	orrs	r3, r2
 8003558:	608b      	str	r3, [r1, #8]
 800355a:	e00b      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800355c:	40023800 	.word	0x40023800
 8003560:	40007000 	.word	0x40007000
 8003564:	0ffffcff 	.word	0x0ffffcff
 8003568:	4baa      	ldr	r3, [pc, #680]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	4aa9      	ldr	r2, [pc, #676]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800356e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003572:	6093      	str	r3, [r2, #8]
 8003574:	4ba7      	ldr	r3, [pc, #668]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003576:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003580:	49a4      	ldr	r1, [pc, #656]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003582:	4313      	orrs	r3, r2
 8003584:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0310 	and.w	r3, r3, #16
 800358e:	2b00      	cmp	r3, #0
 8003590:	d010      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003592:	4ba0      	ldr	r3, [pc, #640]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003594:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003598:	4a9e      	ldr	r2, [pc, #632]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800359a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800359e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80035a2:	4b9c      	ldr	r3, [pc, #624]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ac:	4999      	ldr	r1, [pc, #612]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00a      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035c0:	4b94      	ldr	r3, [pc, #592]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035ce:	4991      	ldr	r1, [pc, #580]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035e2:	4b8c      	ldr	r3, [pc, #560]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035f0:	4988      	ldr	r1, [pc, #544]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00a      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003604:	4b83      	ldr	r3, [pc, #524]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800360a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003612:	4980      	ldr	r1, [pc, #512]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003626:	4b7b      	ldr	r3, [pc, #492]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800362c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003634:	4977      	ldr	r1, [pc, #476]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003648:	4b72      	ldr	r3, [pc, #456]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800364a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800364e:	f023 0203 	bic.w	r2, r3, #3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003656:	496f      	ldr	r1, [pc, #444]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800366a:	4b6a      	ldr	r3, [pc, #424]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800366c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003670:	f023 020c 	bic.w	r2, r3, #12
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003678:	4966      	ldr	r1, [pc, #408]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00a      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800368c:	4b61      	ldr	r3, [pc, #388]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800368e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003692:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800369a:	495e      	ldr	r1, [pc, #376]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00a      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036ae:	4b59      	ldr	r3, [pc, #356]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036bc:	4955      	ldr	r1, [pc, #340]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00a      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036d0:	4b50      	ldr	r3, [pc, #320]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036de:	494d      	ldr	r1, [pc, #308]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00a      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80036f2:	4b48      	ldr	r3, [pc, #288]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036f8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003700:	4944      	ldr	r1, [pc, #272]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003702:	4313      	orrs	r3, r2
 8003704:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00a      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003714:	4b3f      	ldr	r3, [pc, #252]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800371a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003722:	493c      	ldr	r1, [pc, #240]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00a      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003736:	4b37      	ldr	r3, [pc, #220]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800373c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003744:	4933      	ldr	r1, [pc, #204]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003758:	4b2e      	ldr	r3, [pc, #184]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800375a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800375e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003766:	492b      	ldr	r1, [pc, #172]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003768:	4313      	orrs	r3, r2
 800376a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d011      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800377a:	4b26      	ldr	r3, [pc, #152]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800377c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003780:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003788:	4922      	ldr	r1, [pc, #136]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800378a:	4313      	orrs	r3, r2
 800378c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003794:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003798:	d101      	bne.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800379a:	2301      	movs	r3, #1
 800379c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80037aa:	2301      	movs	r3, #1
 80037ac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037ba:	4b16      	ldr	r3, [pc, #88]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037c8:	4912      	ldr	r1, [pc, #72]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00b      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037ec:	4909      	ldr	r1, [pc, #36]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d006      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 80d9 	beq.w	80039ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003808:	4b02      	ldr	r3, [pc, #8]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a01      	ldr	r2, [pc, #4]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800380e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003812:	e001      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003814:	40023800 	.word	0x40023800
 8003818:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800381a:	f7fd fb0f 	bl	8000e3c <HAL_GetTick>
 800381e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003820:	e008      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003822:	f7fd fb0b 	bl	8000e3c <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b64      	cmp	r3, #100	@ 0x64
 800382e:	d901      	bls.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e194      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003834:	4b6c      	ldr	r3, [pc, #432]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1f0      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	d021      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003850:	2b00      	cmp	r3, #0
 8003852:	d11d      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003854:	4b64      	ldr	r3, [pc, #400]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003856:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800385a:	0c1b      	lsrs	r3, r3, #16
 800385c:	f003 0303 	and.w	r3, r3, #3
 8003860:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003862:	4b61      	ldr	r3, [pc, #388]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003864:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003868:	0e1b      	lsrs	r3, r3, #24
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	019a      	lsls	r2, r3, #6
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	041b      	lsls	r3, r3, #16
 800387a:	431a      	orrs	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	061b      	lsls	r3, r3, #24
 8003880:	431a      	orrs	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	071b      	lsls	r3, r3, #28
 8003888:	4957      	ldr	r1, [pc, #348]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800388a:	4313      	orrs	r3, r2
 800388c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d004      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038a4:	d00a      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d02e      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038ba:	d129      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038bc:	4b4a      	ldr	r3, [pc, #296]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038c2:	0c1b      	lsrs	r3, r3, #16
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038ca:	4b47      	ldr	r3, [pc, #284]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038d0:	0f1b      	lsrs	r3, r3, #28
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	019a      	lsls	r2, r3, #6
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	041b      	lsls	r3, r3, #16
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	061b      	lsls	r3, r3, #24
 80038ea:	431a      	orrs	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	071b      	lsls	r3, r3, #28
 80038f0:	493d      	ldr	r1, [pc, #244]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80038f8:	4b3b      	ldr	r3, [pc, #236]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038fe:	f023 021f 	bic.w	r2, r3, #31
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003906:	3b01      	subs	r3, #1
 8003908:	4937      	ldr	r1, [pc, #220]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d01d      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800391c:	4b32      	ldr	r3, [pc, #200]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800391e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003922:	0e1b      	lsrs	r3, r3, #24
 8003924:	f003 030f 	and.w	r3, r3, #15
 8003928:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800392a:	4b2f      	ldr	r3, [pc, #188]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800392c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003930:	0f1b      	lsrs	r3, r3, #28
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	019a      	lsls	r2, r3, #6
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	041b      	lsls	r3, r3, #16
 8003944:	431a      	orrs	r2, r3
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	061b      	lsls	r3, r3, #24
 800394a:	431a      	orrs	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	071b      	lsls	r3, r3, #28
 8003950:	4925      	ldr	r1, [pc, #148]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d011      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	019a      	lsls	r2, r3, #6
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	041b      	lsls	r3, r3, #16
 8003970:	431a      	orrs	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	061b      	lsls	r3, r3, #24
 8003978:	431a      	orrs	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	071b      	lsls	r3, r3, #28
 8003980:	4919      	ldr	r1, [pc, #100]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003988:	4b17      	ldr	r3, [pc, #92]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a16      	ldr	r2, [pc, #88]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800398e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003992:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003994:	f7fd fa52 	bl	8000e3c <HAL_GetTick>
 8003998:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800399c:	f7fd fa4e 	bl	8000e3c <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b64      	cmp	r3, #100	@ 0x64
 80039a8:	d901      	bls.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e0d7      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039ae:	4b0e      	ldr	r3, [pc, #56]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0f0      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	f040 80cd 	bne.w	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80039c2:	4b09      	ldr	r3, [pc, #36]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a08      	ldr	r2, [pc, #32]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ce:	f7fd fa35 	bl	8000e3c <HAL_GetTick>
 80039d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039d4:	e00a      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039d6:	f7fd fa31 	bl	8000e3c <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b64      	cmp	r3, #100	@ 0x64
 80039e2:	d903      	bls.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e0ba      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80039e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039ec:	4b5e      	ldr	r3, [pc, #376]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039f8:	d0ed      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d009      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d02e      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d12a      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a22:	4b51      	ldr	r3, [pc, #324]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a28:	0c1b      	lsrs	r3, r3, #16
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a30:	4b4d      	ldr	r3, [pc, #308]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a36:	0f1b      	lsrs	r3, r3, #28
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	019a      	lsls	r2, r3, #6
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	041b      	lsls	r3, r3, #16
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	061b      	lsls	r3, r3, #24
 8003a50:	431a      	orrs	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	071b      	lsls	r3, r3, #28
 8003a56:	4944      	ldr	r1, [pc, #272]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a5e:	4b42      	ldr	r3, [pc, #264]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a64:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	021b      	lsls	r3, r3, #8
 8003a70:	493d      	ldr	r1, [pc, #244]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d022      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a8c:	d11d      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a8e:	4b36      	ldr	r3, [pc, #216]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a94:	0e1b      	lsrs	r3, r3, #24
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a9c:	4b32      	ldr	r3, [pc, #200]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa2:	0f1b      	lsrs	r3, r3, #28
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	019a      	lsls	r2, r3, #6
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	041b      	lsls	r3, r3, #16
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	061b      	lsls	r3, r3, #24
 8003abc:	431a      	orrs	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	071b      	lsls	r3, r3, #28
 8003ac2:	4929      	ldr	r1, [pc, #164]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d028      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ad6:	4b24      	ldr	r3, [pc, #144]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003adc:	0e1b      	lsrs	r3, r3, #24
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ae4:	4b20      	ldr	r3, [pc, #128]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aea:	0c1b      	lsrs	r3, r3, #16
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	019a      	lsls	r2, r3, #6
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	041b      	lsls	r3, r3, #16
 8003afc:	431a      	orrs	r2, r3
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	061b      	lsls	r3, r3, #24
 8003b02:	431a      	orrs	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	071b      	lsls	r3, r3, #28
 8003b0a:	4917      	ldr	r1, [pc, #92]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b12:	4b15      	ldr	r3, [pc, #84]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b20:	4911      	ldr	r1, [pc, #68]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b28:	4b0f      	ldr	r3, [pc, #60]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a0e      	ldr	r2, [pc, #56]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b34:	f7fd f982 	bl	8000e3c <HAL_GetTick>
 8003b38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b3c:	f7fd f97e 	bl	8000e3c <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b64      	cmp	r3, #100	@ 0x64
 8003b48:	d901      	bls.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e007      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b4e:	4b06      	ldr	r3, [pc, #24]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b5a:	d1ef      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3720      	adds	r7, #32
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800

08003b6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e040      	b.n	8003c00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d106      	bne.n	8003b94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7fc ff6c 	bl	8000a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2224      	movs	r2, #36	@ 0x24
 8003b98:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0201 	bic.w	r2, r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fd98 	bl	80046e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 fb31 	bl	8004220 <UART_SetConfig>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d101      	bne.n	8003bc8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e01b      	b.n	8003c00 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003be6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0201 	orr.w	r2, r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 fe17 	bl	800482c <UART_CheckIdleState>
 8003bfe:	4603      	mov	r3, r0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b0ba      	sub	sp, #232	@ 0xe8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003c32:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003c36:	4013      	ands	r3, r2
 8003c38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003c3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d115      	bne.n	8003c70 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c48:	f003 0320 	and.w	r3, r3, #32
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00f      	beq.n	8003c70 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c54:	f003 0320 	and.w	r3, r3, #32
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d009      	beq.n	8003c70 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 82b1 	beq.w	80041c8 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	4798      	blx	r3
      }
      return;
 8003c6e:	e2ab      	b.n	80041c8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 8117 	beq.w	8003ea8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003c8a:	4b85      	ldr	r3, [pc, #532]	@ (8003ea0 <HAL_UART_IRQHandler+0x298>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 810a 	beq.w	8003ea8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d011      	beq.n	8003cc4 <HAL_UART_IRQHandler+0xbc>
 8003ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00b      	beq.n	8003cc4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cba:	f043 0201 	orr.w	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d011      	beq.n	8003cf4 <HAL_UART_IRQHandler+0xec>
 8003cd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00b      	beq.n	8003cf4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cea:	f043 0204 	orr.w	r2, r3, #4
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d011      	beq.n	8003d24 <HAL_UART_IRQHandler+0x11c>
 8003d00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00b      	beq.n	8003d24 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2204      	movs	r2, #4
 8003d12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d1a:	f043 0202 	orr.w	r2, r3, #2
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d28:	f003 0308 	and.w	r3, r3, #8
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d017      	beq.n	8003d60 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d34:	f003 0320 	and.w	r3, r3, #32
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d105      	bne.n	8003d48 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d40:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00b      	beq.n	8003d60 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2208      	movs	r2, #8
 8003d4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d56:	f043 0208 	orr.w	r2, r3, #8
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d012      	beq.n	8003d92 <HAL_UART_IRQHandler+0x18a>
 8003d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00c      	beq.n	8003d92 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d88:	f043 0220 	orr.w	r2, r3, #32
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 8217 	beq.w	80041cc <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00d      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dae:	f003 0320 	and.w	r3, r3, #32
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d007      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dcc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dda:	2b40      	cmp	r3, #64	@ 0x40
 8003ddc:	d005      	beq.n	8003dea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003dde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003de2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d04f      	beq.n	8003e8a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fde2 	bl	80049b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dfa:	2b40      	cmp	r3, #64	@ 0x40
 8003dfc:	d141      	bne.n	8003e82 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3308      	adds	r3, #8
 8003e04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e0c:	e853 3f00 	ldrex	r3, [r3]
 8003e10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003e14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	3308      	adds	r3, #8
 8003e26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003e2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003e2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003e36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003e3a:	e841 2300 	strex	r3, r2, [r1]
 8003e3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003e42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1d9      	bne.n	8003dfe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d013      	beq.n	8003e7a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e56:	4a13      	ldr	r2, [pc, #76]	@ (8003ea4 <HAL_UART_IRQHandler+0x29c>)
 8003e58:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fd f99d 	bl	800119e <HAL_DMA_Abort_IT>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d017      	beq.n	8003e9a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003e74:	4610      	mov	r0, r2
 8003e76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e78:	e00f      	b.n	8003e9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f9ba 	bl	80041f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e80:	e00b      	b.n	8003e9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f9b6 	bl	80041f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e88:	e007      	b.n	8003e9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f9b2 	bl	80041f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003e98:	e198      	b.n	80041cc <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e9a:	bf00      	nop
    return;
 8003e9c:	e196      	b.n	80041cc <HAL_UART_IRQHandler+0x5c4>
 8003e9e:	bf00      	nop
 8003ea0:	04000120 	.word	0x04000120
 8003ea4:	08004a7d 	.word	0x08004a7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	f040 8166 	bne.w	800417e <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eb6:	f003 0310 	and.w	r3, r3, #16
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 815f 	beq.w	800417e <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ec4:	f003 0310 	and.w	r3, r3, #16
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 8158 	beq.w	800417e <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2210      	movs	r2, #16
 8003ed4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee0:	2b40      	cmp	r3, #64	@ 0x40
 8003ee2:	f040 80d0 	bne.w	8004086 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ef2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 80ab 	beq.w	8004052 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003f02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f06:	429a      	cmp	r2, r3
 8003f08:	f080 80a3 	bcs.w	8004052 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f12:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f20:	f000 8086 	beq.w	8004030 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f30:	e853 3f00 	ldrex	r3, [r3]
 8003f34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003f38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003f4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f52:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f56:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003f5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f5e:	e841 2300 	strex	r3, r2, [r1]
 8003f62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003f66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1da      	bne.n	8003f24 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3308      	adds	r3, #8
 8003f74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f78:	e853 3f00 	ldrex	r3, [r3]
 8003f7c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003f7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f80:	f023 0301 	bic.w	r3, r3, #1
 8003f84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3308      	adds	r3, #8
 8003f8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f92:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f96:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f98:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f9e:	e841 2300 	strex	r3, r2, [r1]
 8003fa2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003fa4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1e1      	bne.n	8003f6e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3308      	adds	r3, #8
 8003fb0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fb4:	e853 3f00 	ldrex	r3, [r3]
 8003fb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003fba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3308      	adds	r3, #8
 8003fca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003fce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003fd0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003fd4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003fdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e3      	bne.n	8003faa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ffe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004000:	f023 0310 	bic.w	r3, r3, #16
 8004004:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	461a      	mov	r2, r3
 800400e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004012:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004014:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004016:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004018:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800401a:	e841 2300 	strex	r3, r2, [r1]
 800401e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004020:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1e4      	bne.n	8003ff0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800402a:	4618      	mov	r0, r3
 800402c:	f7fd f847 	bl	80010be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004042:	b29b      	uxth	r3, r3
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	b29b      	uxth	r3, r3
 8004048:	4619      	mov	r1, r3
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f8dc 	bl	8004208 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004050:	e0be      	b.n	80041d0 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004058:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800405c:	429a      	cmp	r2, r3
 800405e:	f040 80b7 	bne.w	80041d0 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800406c:	f040 80b0 	bne.w	80041d0 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800407c:	4619      	mov	r1, r3
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f8c2 	bl	8004208 <HAL_UARTEx_RxEventCallback>
      return;
 8004084:	e0a4      	b.n	80041d0 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004092:	b29b      	uxth	r3, r3
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 8096 	beq.w	80041d4 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 80040a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 8091 	beq.w	80041d4 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ba:	e853 3f00 	ldrex	r3, [r3]
 80040be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	461a      	mov	r2, r3
 80040d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80040d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80040d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040dc:	e841 2300 	strex	r3, r2, [r1]
 80040e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1e4      	bne.n	80040b2 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	3308      	adds	r3, #8
 80040ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f2:	e853 3f00 	ldrex	r3, [r3]
 80040f6:	623b      	str	r3, [r7, #32]
   return(result);
 80040f8:	6a3b      	ldr	r3, [r7, #32]
 80040fa:	f023 0301 	bic.w	r3, r3, #1
 80040fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3308      	adds	r3, #8
 8004108:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800410c:	633a      	str	r2, [r7, #48]	@ 0x30
 800410e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004110:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004112:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004114:	e841 2300 	strex	r3, r2, [r1]
 8004118:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800411a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1e3      	bne.n	80040e8 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2220      	movs	r2, #32
 8004124:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	e853 3f00 	ldrex	r3, [r3]
 8004140:	60fb      	str	r3, [r7, #12]
   return(result);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f023 0310 	bic.w	r3, r3, #16
 8004148:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004156:	61fb      	str	r3, [r7, #28]
 8004158:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415a:	69b9      	ldr	r1, [r7, #24]
 800415c:	69fa      	ldr	r2, [r7, #28]
 800415e:	e841 2300 	strex	r3, r2, [r1]
 8004162:	617b      	str	r3, [r7, #20]
   return(result);
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1e4      	bne.n	8004134 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2202      	movs	r2, #2
 800416e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004170:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004174:	4619      	mov	r1, r3
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f846 	bl	8004208 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800417c:	e02a      	b.n	80041d4 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800417e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00e      	beq.n	80041a8 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800418a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800418e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004192:	2b00      	cmp	r3, #0
 8004194:	d008      	beq.n	80041a8 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800419a:	2b00      	cmp	r3, #0
 800419c:	d01c      	beq.n	80041d8 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	4798      	blx	r3
    }
    return;
 80041a6:	e017      	b.n	80041d8 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80041a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d012      	beq.n	80041da <HAL_UART_IRQHandler+0x5d2>
 80041b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00c      	beq.n	80041da <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 fc6d 	bl	8004aa0 <UART_EndTransmit_IT>
    return;
 80041c6:	e008      	b.n	80041da <HAL_UART_IRQHandler+0x5d2>
      return;
 80041c8:	bf00      	nop
 80041ca:	e006      	b.n	80041da <HAL_UART_IRQHandler+0x5d2>
    return;
 80041cc:	bf00      	nop
 80041ce:	e004      	b.n	80041da <HAL_UART_IRQHandler+0x5d2>
      return;
 80041d0:	bf00      	nop
 80041d2:	e002      	b.n	80041da <HAL_UART_IRQHandler+0x5d2>
      return;
 80041d4:	bf00      	nop
 80041d6:	e000      	b.n	80041da <HAL_UART_IRQHandler+0x5d2>
    return;
 80041d8:	bf00      	nop
  }

}
 80041da:	37e8      	adds	r7, #232	@ 0xe8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	460b      	mov	r3, r1
 8004212:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b088      	sub	sp, #32
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004228:	2300      	movs	r3, #0
 800422a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	431a      	orrs	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4ba6      	ldr	r3, [pc, #664]	@ (80044e4 <UART_SetConfig+0x2c4>)
 800424c:	4013      	ands	r3, r2
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6812      	ldr	r2, [r2, #0]
 8004252:	6979      	ldr	r1, [r7, #20]
 8004254:	430b      	orrs	r3, r1
 8004256:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	430a      	orrs	r2, r1
 8004290:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a94      	ldr	r2, [pc, #592]	@ (80044e8 <UART_SetConfig+0x2c8>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d120      	bne.n	80042de <UART_SetConfig+0xbe>
 800429c:	4b93      	ldr	r3, [pc, #588]	@ (80044ec <UART_SetConfig+0x2cc>)
 800429e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	2b03      	cmp	r3, #3
 80042a8:	d816      	bhi.n	80042d8 <UART_SetConfig+0xb8>
 80042aa:	a201      	add	r2, pc, #4	@ (adr r2, 80042b0 <UART_SetConfig+0x90>)
 80042ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b0:	080042c1 	.word	0x080042c1
 80042b4:	080042cd 	.word	0x080042cd
 80042b8:	080042c7 	.word	0x080042c7
 80042bc:	080042d3 	.word	0x080042d3
 80042c0:	2301      	movs	r3, #1
 80042c2:	77fb      	strb	r3, [r7, #31]
 80042c4:	e150      	b.n	8004568 <UART_SetConfig+0x348>
 80042c6:	2302      	movs	r3, #2
 80042c8:	77fb      	strb	r3, [r7, #31]
 80042ca:	e14d      	b.n	8004568 <UART_SetConfig+0x348>
 80042cc:	2304      	movs	r3, #4
 80042ce:	77fb      	strb	r3, [r7, #31]
 80042d0:	e14a      	b.n	8004568 <UART_SetConfig+0x348>
 80042d2:	2308      	movs	r3, #8
 80042d4:	77fb      	strb	r3, [r7, #31]
 80042d6:	e147      	b.n	8004568 <UART_SetConfig+0x348>
 80042d8:	2310      	movs	r3, #16
 80042da:	77fb      	strb	r3, [r7, #31]
 80042dc:	e144      	b.n	8004568 <UART_SetConfig+0x348>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a83      	ldr	r2, [pc, #524]	@ (80044f0 <UART_SetConfig+0x2d0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d132      	bne.n	800434e <UART_SetConfig+0x12e>
 80042e8:	4b80      	ldr	r3, [pc, #512]	@ (80044ec <UART_SetConfig+0x2cc>)
 80042ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ee:	f003 030c 	and.w	r3, r3, #12
 80042f2:	2b0c      	cmp	r3, #12
 80042f4:	d828      	bhi.n	8004348 <UART_SetConfig+0x128>
 80042f6:	a201      	add	r2, pc, #4	@ (adr r2, 80042fc <UART_SetConfig+0xdc>)
 80042f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fc:	08004331 	.word	0x08004331
 8004300:	08004349 	.word	0x08004349
 8004304:	08004349 	.word	0x08004349
 8004308:	08004349 	.word	0x08004349
 800430c:	0800433d 	.word	0x0800433d
 8004310:	08004349 	.word	0x08004349
 8004314:	08004349 	.word	0x08004349
 8004318:	08004349 	.word	0x08004349
 800431c:	08004337 	.word	0x08004337
 8004320:	08004349 	.word	0x08004349
 8004324:	08004349 	.word	0x08004349
 8004328:	08004349 	.word	0x08004349
 800432c:	08004343 	.word	0x08004343
 8004330:	2300      	movs	r3, #0
 8004332:	77fb      	strb	r3, [r7, #31]
 8004334:	e118      	b.n	8004568 <UART_SetConfig+0x348>
 8004336:	2302      	movs	r3, #2
 8004338:	77fb      	strb	r3, [r7, #31]
 800433a:	e115      	b.n	8004568 <UART_SetConfig+0x348>
 800433c:	2304      	movs	r3, #4
 800433e:	77fb      	strb	r3, [r7, #31]
 8004340:	e112      	b.n	8004568 <UART_SetConfig+0x348>
 8004342:	2308      	movs	r3, #8
 8004344:	77fb      	strb	r3, [r7, #31]
 8004346:	e10f      	b.n	8004568 <UART_SetConfig+0x348>
 8004348:	2310      	movs	r3, #16
 800434a:	77fb      	strb	r3, [r7, #31]
 800434c:	e10c      	b.n	8004568 <UART_SetConfig+0x348>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a68      	ldr	r2, [pc, #416]	@ (80044f4 <UART_SetConfig+0x2d4>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d120      	bne.n	800439a <UART_SetConfig+0x17a>
 8004358:	4b64      	ldr	r3, [pc, #400]	@ (80044ec <UART_SetConfig+0x2cc>)
 800435a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800435e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004362:	2b30      	cmp	r3, #48	@ 0x30
 8004364:	d013      	beq.n	800438e <UART_SetConfig+0x16e>
 8004366:	2b30      	cmp	r3, #48	@ 0x30
 8004368:	d814      	bhi.n	8004394 <UART_SetConfig+0x174>
 800436a:	2b20      	cmp	r3, #32
 800436c:	d009      	beq.n	8004382 <UART_SetConfig+0x162>
 800436e:	2b20      	cmp	r3, #32
 8004370:	d810      	bhi.n	8004394 <UART_SetConfig+0x174>
 8004372:	2b00      	cmp	r3, #0
 8004374:	d002      	beq.n	800437c <UART_SetConfig+0x15c>
 8004376:	2b10      	cmp	r3, #16
 8004378:	d006      	beq.n	8004388 <UART_SetConfig+0x168>
 800437a:	e00b      	b.n	8004394 <UART_SetConfig+0x174>
 800437c:	2300      	movs	r3, #0
 800437e:	77fb      	strb	r3, [r7, #31]
 8004380:	e0f2      	b.n	8004568 <UART_SetConfig+0x348>
 8004382:	2302      	movs	r3, #2
 8004384:	77fb      	strb	r3, [r7, #31]
 8004386:	e0ef      	b.n	8004568 <UART_SetConfig+0x348>
 8004388:	2304      	movs	r3, #4
 800438a:	77fb      	strb	r3, [r7, #31]
 800438c:	e0ec      	b.n	8004568 <UART_SetConfig+0x348>
 800438e:	2308      	movs	r3, #8
 8004390:	77fb      	strb	r3, [r7, #31]
 8004392:	e0e9      	b.n	8004568 <UART_SetConfig+0x348>
 8004394:	2310      	movs	r3, #16
 8004396:	77fb      	strb	r3, [r7, #31]
 8004398:	e0e6      	b.n	8004568 <UART_SetConfig+0x348>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a56      	ldr	r2, [pc, #344]	@ (80044f8 <UART_SetConfig+0x2d8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d120      	bne.n	80043e6 <UART_SetConfig+0x1c6>
 80043a4:	4b51      	ldr	r3, [pc, #324]	@ (80044ec <UART_SetConfig+0x2cc>)
 80043a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80043ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80043b0:	d013      	beq.n	80043da <UART_SetConfig+0x1ba>
 80043b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80043b4:	d814      	bhi.n	80043e0 <UART_SetConfig+0x1c0>
 80043b6:	2b80      	cmp	r3, #128	@ 0x80
 80043b8:	d009      	beq.n	80043ce <UART_SetConfig+0x1ae>
 80043ba:	2b80      	cmp	r3, #128	@ 0x80
 80043bc:	d810      	bhi.n	80043e0 <UART_SetConfig+0x1c0>
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d002      	beq.n	80043c8 <UART_SetConfig+0x1a8>
 80043c2:	2b40      	cmp	r3, #64	@ 0x40
 80043c4:	d006      	beq.n	80043d4 <UART_SetConfig+0x1b4>
 80043c6:	e00b      	b.n	80043e0 <UART_SetConfig+0x1c0>
 80043c8:	2300      	movs	r3, #0
 80043ca:	77fb      	strb	r3, [r7, #31]
 80043cc:	e0cc      	b.n	8004568 <UART_SetConfig+0x348>
 80043ce:	2302      	movs	r3, #2
 80043d0:	77fb      	strb	r3, [r7, #31]
 80043d2:	e0c9      	b.n	8004568 <UART_SetConfig+0x348>
 80043d4:	2304      	movs	r3, #4
 80043d6:	77fb      	strb	r3, [r7, #31]
 80043d8:	e0c6      	b.n	8004568 <UART_SetConfig+0x348>
 80043da:	2308      	movs	r3, #8
 80043dc:	77fb      	strb	r3, [r7, #31]
 80043de:	e0c3      	b.n	8004568 <UART_SetConfig+0x348>
 80043e0:	2310      	movs	r3, #16
 80043e2:	77fb      	strb	r3, [r7, #31]
 80043e4:	e0c0      	b.n	8004568 <UART_SetConfig+0x348>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a44      	ldr	r2, [pc, #272]	@ (80044fc <UART_SetConfig+0x2dc>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d125      	bne.n	800443c <UART_SetConfig+0x21c>
 80043f0:	4b3e      	ldr	r3, [pc, #248]	@ (80044ec <UART_SetConfig+0x2cc>)
 80043f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043fe:	d017      	beq.n	8004430 <UART_SetConfig+0x210>
 8004400:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004404:	d817      	bhi.n	8004436 <UART_SetConfig+0x216>
 8004406:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800440a:	d00b      	beq.n	8004424 <UART_SetConfig+0x204>
 800440c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004410:	d811      	bhi.n	8004436 <UART_SetConfig+0x216>
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <UART_SetConfig+0x1fe>
 8004416:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800441a:	d006      	beq.n	800442a <UART_SetConfig+0x20a>
 800441c:	e00b      	b.n	8004436 <UART_SetConfig+0x216>
 800441e:	2300      	movs	r3, #0
 8004420:	77fb      	strb	r3, [r7, #31]
 8004422:	e0a1      	b.n	8004568 <UART_SetConfig+0x348>
 8004424:	2302      	movs	r3, #2
 8004426:	77fb      	strb	r3, [r7, #31]
 8004428:	e09e      	b.n	8004568 <UART_SetConfig+0x348>
 800442a:	2304      	movs	r3, #4
 800442c:	77fb      	strb	r3, [r7, #31]
 800442e:	e09b      	b.n	8004568 <UART_SetConfig+0x348>
 8004430:	2308      	movs	r3, #8
 8004432:	77fb      	strb	r3, [r7, #31]
 8004434:	e098      	b.n	8004568 <UART_SetConfig+0x348>
 8004436:	2310      	movs	r3, #16
 8004438:	77fb      	strb	r3, [r7, #31]
 800443a:	e095      	b.n	8004568 <UART_SetConfig+0x348>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a2f      	ldr	r2, [pc, #188]	@ (8004500 <UART_SetConfig+0x2e0>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d125      	bne.n	8004492 <UART_SetConfig+0x272>
 8004446:	4b29      	ldr	r3, [pc, #164]	@ (80044ec <UART_SetConfig+0x2cc>)
 8004448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800444c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004450:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004454:	d017      	beq.n	8004486 <UART_SetConfig+0x266>
 8004456:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800445a:	d817      	bhi.n	800448c <UART_SetConfig+0x26c>
 800445c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004460:	d00b      	beq.n	800447a <UART_SetConfig+0x25a>
 8004462:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004466:	d811      	bhi.n	800448c <UART_SetConfig+0x26c>
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <UART_SetConfig+0x254>
 800446c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004470:	d006      	beq.n	8004480 <UART_SetConfig+0x260>
 8004472:	e00b      	b.n	800448c <UART_SetConfig+0x26c>
 8004474:	2301      	movs	r3, #1
 8004476:	77fb      	strb	r3, [r7, #31]
 8004478:	e076      	b.n	8004568 <UART_SetConfig+0x348>
 800447a:	2302      	movs	r3, #2
 800447c:	77fb      	strb	r3, [r7, #31]
 800447e:	e073      	b.n	8004568 <UART_SetConfig+0x348>
 8004480:	2304      	movs	r3, #4
 8004482:	77fb      	strb	r3, [r7, #31]
 8004484:	e070      	b.n	8004568 <UART_SetConfig+0x348>
 8004486:	2308      	movs	r3, #8
 8004488:	77fb      	strb	r3, [r7, #31]
 800448a:	e06d      	b.n	8004568 <UART_SetConfig+0x348>
 800448c:	2310      	movs	r3, #16
 800448e:	77fb      	strb	r3, [r7, #31]
 8004490:	e06a      	b.n	8004568 <UART_SetConfig+0x348>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a1b      	ldr	r2, [pc, #108]	@ (8004504 <UART_SetConfig+0x2e4>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d138      	bne.n	800450e <UART_SetConfig+0x2ee>
 800449c:	4b13      	ldr	r3, [pc, #76]	@ (80044ec <UART_SetConfig+0x2cc>)
 800449e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044a2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80044a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80044aa:	d017      	beq.n	80044dc <UART_SetConfig+0x2bc>
 80044ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80044b0:	d82a      	bhi.n	8004508 <UART_SetConfig+0x2e8>
 80044b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044b6:	d00b      	beq.n	80044d0 <UART_SetConfig+0x2b0>
 80044b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044bc:	d824      	bhi.n	8004508 <UART_SetConfig+0x2e8>
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <UART_SetConfig+0x2aa>
 80044c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044c6:	d006      	beq.n	80044d6 <UART_SetConfig+0x2b6>
 80044c8:	e01e      	b.n	8004508 <UART_SetConfig+0x2e8>
 80044ca:	2300      	movs	r3, #0
 80044cc:	77fb      	strb	r3, [r7, #31]
 80044ce:	e04b      	b.n	8004568 <UART_SetConfig+0x348>
 80044d0:	2302      	movs	r3, #2
 80044d2:	77fb      	strb	r3, [r7, #31]
 80044d4:	e048      	b.n	8004568 <UART_SetConfig+0x348>
 80044d6:	2304      	movs	r3, #4
 80044d8:	77fb      	strb	r3, [r7, #31]
 80044da:	e045      	b.n	8004568 <UART_SetConfig+0x348>
 80044dc:	2308      	movs	r3, #8
 80044de:	77fb      	strb	r3, [r7, #31]
 80044e0:	e042      	b.n	8004568 <UART_SetConfig+0x348>
 80044e2:	bf00      	nop
 80044e4:	efff69f3 	.word	0xefff69f3
 80044e8:	40011000 	.word	0x40011000
 80044ec:	40023800 	.word	0x40023800
 80044f0:	40004400 	.word	0x40004400
 80044f4:	40004800 	.word	0x40004800
 80044f8:	40004c00 	.word	0x40004c00
 80044fc:	40005000 	.word	0x40005000
 8004500:	40011400 	.word	0x40011400
 8004504:	40007800 	.word	0x40007800
 8004508:	2310      	movs	r3, #16
 800450a:	77fb      	strb	r3, [r7, #31]
 800450c:	e02c      	b.n	8004568 <UART_SetConfig+0x348>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a72      	ldr	r2, [pc, #456]	@ (80046dc <UART_SetConfig+0x4bc>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d125      	bne.n	8004564 <UART_SetConfig+0x344>
 8004518:	4b71      	ldr	r3, [pc, #452]	@ (80046e0 <UART_SetConfig+0x4c0>)
 800451a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800451e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004522:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004526:	d017      	beq.n	8004558 <UART_SetConfig+0x338>
 8004528:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800452c:	d817      	bhi.n	800455e <UART_SetConfig+0x33e>
 800452e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004532:	d00b      	beq.n	800454c <UART_SetConfig+0x32c>
 8004534:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004538:	d811      	bhi.n	800455e <UART_SetConfig+0x33e>
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <UART_SetConfig+0x326>
 800453e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004542:	d006      	beq.n	8004552 <UART_SetConfig+0x332>
 8004544:	e00b      	b.n	800455e <UART_SetConfig+0x33e>
 8004546:	2300      	movs	r3, #0
 8004548:	77fb      	strb	r3, [r7, #31]
 800454a:	e00d      	b.n	8004568 <UART_SetConfig+0x348>
 800454c:	2302      	movs	r3, #2
 800454e:	77fb      	strb	r3, [r7, #31]
 8004550:	e00a      	b.n	8004568 <UART_SetConfig+0x348>
 8004552:	2304      	movs	r3, #4
 8004554:	77fb      	strb	r3, [r7, #31]
 8004556:	e007      	b.n	8004568 <UART_SetConfig+0x348>
 8004558:	2308      	movs	r3, #8
 800455a:	77fb      	strb	r3, [r7, #31]
 800455c:	e004      	b.n	8004568 <UART_SetConfig+0x348>
 800455e:	2310      	movs	r3, #16
 8004560:	77fb      	strb	r3, [r7, #31]
 8004562:	e001      	b.n	8004568 <UART_SetConfig+0x348>
 8004564:	2310      	movs	r3, #16
 8004566:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004570:	d15b      	bne.n	800462a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004572:	7ffb      	ldrb	r3, [r7, #31]
 8004574:	2b08      	cmp	r3, #8
 8004576:	d828      	bhi.n	80045ca <UART_SetConfig+0x3aa>
 8004578:	a201      	add	r2, pc, #4	@ (adr r2, 8004580 <UART_SetConfig+0x360>)
 800457a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457e:	bf00      	nop
 8004580:	080045a5 	.word	0x080045a5
 8004584:	080045ad 	.word	0x080045ad
 8004588:	080045b5 	.word	0x080045b5
 800458c:	080045cb 	.word	0x080045cb
 8004590:	080045bb 	.word	0x080045bb
 8004594:	080045cb 	.word	0x080045cb
 8004598:	080045cb 	.word	0x080045cb
 800459c:	080045cb 	.word	0x080045cb
 80045a0:	080045c3 	.word	0x080045c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045a4:	f7fe feca 	bl	800333c <HAL_RCC_GetPCLK1Freq>
 80045a8:	61b8      	str	r0, [r7, #24]
        break;
 80045aa:	e013      	b.n	80045d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045ac:	f7fe feda 	bl	8003364 <HAL_RCC_GetPCLK2Freq>
 80045b0:	61b8      	str	r0, [r7, #24]
        break;
 80045b2:	e00f      	b.n	80045d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045b4:	4b4b      	ldr	r3, [pc, #300]	@ (80046e4 <UART_SetConfig+0x4c4>)
 80045b6:	61bb      	str	r3, [r7, #24]
        break;
 80045b8:	e00c      	b.n	80045d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ba:	f7fe fded 	bl	8003198 <HAL_RCC_GetSysClockFreq>
 80045be:	61b8      	str	r0, [r7, #24]
        break;
 80045c0:	e008      	b.n	80045d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045c6:	61bb      	str	r3, [r7, #24]
        break;
 80045c8:	e004      	b.n	80045d4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	77bb      	strb	r3, [r7, #30]
        break;
 80045d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d074      	beq.n	80046c4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	005a      	lsls	r2, r3, #1
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	085b      	lsrs	r3, r3, #1
 80045e4:	441a      	add	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	2b0f      	cmp	r3, #15
 80045f4:	d916      	bls.n	8004624 <UART_SetConfig+0x404>
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045fc:	d212      	bcs.n	8004624 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	b29b      	uxth	r3, r3
 8004602:	f023 030f 	bic.w	r3, r3, #15
 8004606:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	085b      	lsrs	r3, r3, #1
 800460c:	b29b      	uxth	r3, r3
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	b29a      	uxth	r2, r3
 8004614:	89fb      	ldrh	r3, [r7, #14]
 8004616:	4313      	orrs	r3, r2
 8004618:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	89fa      	ldrh	r2, [r7, #14]
 8004620:	60da      	str	r2, [r3, #12]
 8004622:	e04f      	b.n	80046c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	77bb      	strb	r3, [r7, #30]
 8004628:	e04c      	b.n	80046c4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800462a:	7ffb      	ldrb	r3, [r7, #31]
 800462c:	2b08      	cmp	r3, #8
 800462e:	d828      	bhi.n	8004682 <UART_SetConfig+0x462>
 8004630:	a201      	add	r2, pc, #4	@ (adr r2, 8004638 <UART_SetConfig+0x418>)
 8004632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004636:	bf00      	nop
 8004638:	0800465d 	.word	0x0800465d
 800463c:	08004665 	.word	0x08004665
 8004640:	0800466d 	.word	0x0800466d
 8004644:	08004683 	.word	0x08004683
 8004648:	08004673 	.word	0x08004673
 800464c:	08004683 	.word	0x08004683
 8004650:	08004683 	.word	0x08004683
 8004654:	08004683 	.word	0x08004683
 8004658:	0800467b 	.word	0x0800467b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800465c:	f7fe fe6e 	bl	800333c <HAL_RCC_GetPCLK1Freq>
 8004660:	61b8      	str	r0, [r7, #24]
        break;
 8004662:	e013      	b.n	800468c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004664:	f7fe fe7e 	bl	8003364 <HAL_RCC_GetPCLK2Freq>
 8004668:	61b8      	str	r0, [r7, #24]
        break;
 800466a:	e00f      	b.n	800468c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800466c:	4b1d      	ldr	r3, [pc, #116]	@ (80046e4 <UART_SetConfig+0x4c4>)
 800466e:	61bb      	str	r3, [r7, #24]
        break;
 8004670:	e00c      	b.n	800468c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004672:	f7fe fd91 	bl	8003198 <HAL_RCC_GetSysClockFreq>
 8004676:	61b8      	str	r0, [r7, #24]
        break;
 8004678:	e008      	b.n	800468c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800467a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800467e:	61bb      	str	r3, [r7, #24]
        break;
 8004680:	e004      	b.n	800468c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004682:	2300      	movs	r3, #0
 8004684:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	77bb      	strb	r3, [r7, #30]
        break;
 800468a:	bf00      	nop
    }

    if (pclk != 0U)
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d018      	beq.n	80046c4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	085a      	lsrs	r2, r3, #1
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	441a      	add	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	2b0f      	cmp	r3, #15
 80046aa:	d909      	bls.n	80046c0 <UART_SetConfig+0x4a0>
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046b2:	d205      	bcs.n	80046c0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	60da      	str	r2, [r3, #12]
 80046be:	e001      	b.n	80046c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80046d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3720      	adds	r7, #32
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40007c00 	.word	0x40007c00
 80046e0:	40023800 	.word	0x40023800
 80046e4:	00f42400 	.word	0x00f42400

080046e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f4:	f003 0308 	and.w	r3, r3, #8
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00a      	beq.n	8004712 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00a      	beq.n	8004734 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00a      	beq.n	8004756 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475a:	f003 0304 	and.w	r3, r3, #4
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477c:	f003 0310 	and.w	r3, r3, #16
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479e:	f003 0320 	and.w	r3, r3, #32
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d01a      	beq.n	80047fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047e6:	d10a      	bne.n	80047fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	605a      	str	r2, [r3, #4]
  }
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b08c      	sub	sp, #48	@ 0x30
 8004830:	af02      	add	r7, sp, #8
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800483c:	f7fc fafe 	bl	8000e3c <HAL_GetTick>
 8004840:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b08      	cmp	r3, #8
 800484e:	d12e      	bne.n	80048ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004850:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004858:	2200      	movs	r2, #0
 800485a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f83b 	bl	80048da <UART_WaitOnFlagUntilTimeout>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d021      	beq.n	80048ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	e853 3f00 	ldrex	r3, [r3]
 8004876:	60fb      	str	r3, [r7, #12]
   return(result);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800487e:	623b      	str	r3, [r7, #32]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	461a      	mov	r2, r3
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	61fb      	str	r3, [r7, #28]
 800488a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488c:	69b9      	ldr	r1, [r7, #24]
 800488e:	69fa      	ldr	r2, [r7, #28]
 8004890:	e841 2300 	strex	r3, r2, [r1]
 8004894:	617b      	str	r3, [r7, #20]
   return(result);
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1e6      	bne.n	800486a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2220      	movs	r2, #32
 80048a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e011      	b.n	80048d2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2220      	movs	r2, #32
 80048b2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3728      	adds	r7, #40	@ 0x28
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b084      	sub	sp, #16
 80048de:	af00      	add	r7, sp, #0
 80048e0:	60f8      	str	r0, [r7, #12]
 80048e2:	60b9      	str	r1, [r7, #8]
 80048e4:	603b      	str	r3, [r7, #0]
 80048e6:	4613      	mov	r3, r2
 80048e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ea:	e04f      	b.n	800498c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048f2:	d04b      	beq.n	800498c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f4:	f7fc faa2 	bl	8000e3c <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	429a      	cmp	r2, r3
 8004902:	d302      	bcc.n	800490a <UART_WaitOnFlagUntilTimeout+0x30>
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e04e      	b.n	80049ac <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	d037      	beq.n	800498c <UART_WaitOnFlagUntilTimeout+0xb2>
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b80      	cmp	r3, #128	@ 0x80
 8004920:	d034      	beq.n	800498c <UART_WaitOnFlagUntilTimeout+0xb2>
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	2b40      	cmp	r3, #64	@ 0x40
 8004926:	d031      	beq.n	800498c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	2b08      	cmp	r3, #8
 8004934:	d110      	bne.n	8004958 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2208      	movs	r2, #8
 800493c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 f838 	bl	80049b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2208      	movs	r2, #8
 8004948:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e029      	b.n	80049ac <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004962:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004966:	d111      	bne.n	800498c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004970:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 f81e 	bl	80049b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2220      	movs	r2, #32
 800497c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e00f      	b.n	80049ac <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	69da      	ldr	r2, [r3, #28]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	4013      	ands	r3, r2
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	429a      	cmp	r2, r3
 800499a:	bf0c      	ite	eq
 800499c:	2301      	moveq	r3, #1
 800499e:	2300      	movne	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	461a      	mov	r2, r3
 80049a4:	79fb      	ldrb	r3, [r7, #7]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d0a0      	beq.n	80048ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b095      	sub	sp, #84	@ 0x54
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049c4:	e853 3f00 	ldrex	r3, [r3]
 80049c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	461a      	mov	r2, r3
 80049d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049da:	643b      	str	r3, [r7, #64]	@ 0x40
 80049dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049e2:	e841 2300 	strex	r3, r2, [r1]
 80049e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1e6      	bne.n	80049bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3308      	adds	r3, #8
 80049f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	e853 3f00 	ldrex	r3, [r3]
 80049fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	f023 0301 	bic.w	r3, r3, #1
 8004a04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	3308      	adds	r3, #8
 8004a0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a16:	e841 2300 	strex	r3, r2, [r1]
 8004a1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1e5      	bne.n	80049ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d118      	bne.n	8004a5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	e853 3f00 	ldrex	r3, [r3]
 8004a36:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f023 0310 	bic.w	r3, r3, #16
 8004a3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	461a      	mov	r2, r3
 8004a46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a48:	61bb      	str	r3, [r7, #24]
 8004a4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4c:	6979      	ldr	r1, [r7, #20]
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	e841 2300 	strex	r3, r2, [r1]
 8004a54:	613b      	str	r3, [r7, #16]
   return(result);
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1e6      	bne.n	8004a2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004a70:	bf00      	nop
 8004a72:	3754      	adds	r7, #84	@ 0x54
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f7ff fbae 	bl	80041f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a98:	bf00      	nop
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b088      	sub	sp, #32
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	e853 3f00 	ldrex	r3, [r3]
 8004ab4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004abc:	61fb      	str	r3, [r7, #28]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	61bb      	str	r3, [r7, #24]
 8004ac8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aca:	6979      	ldr	r1, [r7, #20]
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	e841 2300 	strex	r3, r2, [r1]
 8004ad2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1e6      	bne.n	8004aa8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2220      	movs	r2, #32
 8004ade:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7ff fb7a 	bl	80041e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004aec:	bf00      	nop
 8004aee:	3720      	adds	r7, #32
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8004afa:	4b87      	ldr	r3, [pc, #540]	@ (8004d18 <MX_LWIP_Init+0x224>)
 8004afc:	220a      	movs	r2, #10
 8004afe:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 8004b00:	4b85      	ldr	r3, [pc, #532]	@ (8004d18 <MX_LWIP_Init+0x224>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8004b06:	4b84      	ldr	r3, [pc, #528]	@ (8004d18 <MX_LWIP_Init+0x224>)
 8004b08:	2201      	movs	r2, #1
 8004b0a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 8004b0c:	4b82      	ldr	r3, [pc, #520]	@ (8004d18 <MX_LWIP_Init+0x224>)
 8004b0e:	2264      	movs	r2, #100	@ 0x64
 8004b10:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004b12:	4b82      	ldr	r3, [pc, #520]	@ (8004d1c <MX_LWIP_Init+0x228>)
 8004b14:	22ff      	movs	r2, #255	@ 0xff
 8004b16:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004b18:	4b80      	ldr	r3, [pc, #512]	@ (8004d1c <MX_LWIP_Init+0x228>)
 8004b1a:	22ff      	movs	r2, #255	@ 0xff
 8004b1c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004b1e:	4b7f      	ldr	r3, [pc, #508]	@ (8004d1c <MX_LWIP_Init+0x228>)
 8004b20:	22ff      	movs	r2, #255	@ 0xff
 8004b22:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004b24:	4b7d      	ldr	r3, [pc, #500]	@ (8004d1c <MX_LWIP_Init+0x228>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 8004b2a:	4b7d      	ldr	r3, [pc, #500]	@ (8004d20 <MX_LWIP_Init+0x22c>)
 8004b2c:	220a      	movs	r2, #10
 8004b2e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8004b30:	4b7b      	ldr	r3, [pc, #492]	@ (8004d20 <MX_LWIP_Init+0x22c>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8004b36:	4b7a      	ldr	r3, [pc, #488]	@ (8004d20 <MX_LWIP_Init+0x22c>)
 8004b38:	2201      	movs	r2, #1
 8004b3a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 101;
 8004b3c:	4b78      	ldr	r3, [pc, #480]	@ (8004d20 <MX_LWIP_Init+0x22c>)
 8004b3e:	2265      	movs	r2, #101	@ 0x65
 8004b40:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8004b42:	f000 fd4a 	bl	80055da <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004b46:	4b74      	ldr	r3, [pc, #464]	@ (8004d18 <MX_LWIP_Init+0x224>)
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	061a      	lsls	r2, r3, #24
 8004b4c:	4b72      	ldr	r3, [pc, #456]	@ (8004d18 <MX_LWIP_Init+0x224>)
 8004b4e:	785b      	ldrb	r3, [r3, #1]
 8004b50:	041b      	lsls	r3, r3, #16
 8004b52:	431a      	orrs	r2, r3
 8004b54:	4b70      	ldr	r3, [pc, #448]	@ (8004d18 <MX_LWIP_Init+0x224>)
 8004b56:	789b      	ldrb	r3, [r3, #2]
 8004b58:	021b      	lsls	r3, r3, #8
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	4a6e      	ldr	r2, [pc, #440]	@ (8004d18 <MX_LWIP_Init+0x224>)
 8004b5e:	78d2      	ldrb	r2, [r2, #3]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	061a      	lsls	r2, r3, #24
 8004b64:	4b6c      	ldr	r3, [pc, #432]	@ (8004d18 <MX_LWIP_Init+0x224>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	0619      	lsls	r1, r3, #24
 8004b6a:	4b6b      	ldr	r3, [pc, #428]	@ (8004d18 <MX_LWIP_Init+0x224>)
 8004b6c:	785b      	ldrb	r3, [r3, #1]
 8004b6e:	041b      	lsls	r3, r3, #16
 8004b70:	4319      	orrs	r1, r3
 8004b72:	4b69      	ldr	r3, [pc, #420]	@ (8004d18 <MX_LWIP_Init+0x224>)
 8004b74:	789b      	ldrb	r3, [r3, #2]
 8004b76:	021b      	lsls	r3, r3, #8
 8004b78:	430b      	orrs	r3, r1
 8004b7a:	4967      	ldr	r1, [pc, #412]	@ (8004d18 <MX_LWIP_Init+0x224>)
 8004b7c:	78c9      	ldrb	r1, [r1, #3]
 8004b7e:	430b      	orrs	r3, r1
 8004b80:	021b      	lsls	r3, r3, #8
 8004b82:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004b86:	431a      	orrs	r2, r3
 8004b88:	4b63      	ldr	r3, [pc, #396]	@ (8004d18 <MX_LWIP_Init+0x224>)
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	0619      	lsls	r1, r3, #24
 8004b8e:	4b62      	ldr	r3, [pc, #392]	@ (8004d18 <MX_LWIP_Init+0x224>)
 8004b90:	785b      	ldrb	r3, [r3, #1]
 8004b92:	041b      	lsls	r3, r3, #16
 8004b94:	4319      	orrs	r1, r3
 8004b96:	4b60      	ldr	r3, [pc, #384]	@ (8004d18 <MX_LWIP_Init+0x224>)
 8004b98:	789b      	ldrb	r3, [r3, #2]
 8004b9a:	021b      	lsls	r3, r3, #8
 8004b9c:	430b      	orrs	r3, r1
 8004b9e:	495e      	ldr	r1, [pc, #376]	@ (8004d18 <MX_LWIP_Init+0x224>)
 8004ba0:	78c9      	ldrb	r1, [r1, #3]
 8004ba2:	430b      	orrs	r3, r1
 8004ba4:	0a1b      	lsrs	r3, r3, #8
 8004ba6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004baa:	431a      	orrs	r2, r3
 8004bac:	4b5a      	ldr	r3, [pc, #360]	@ (8004d18 <MX_LWIP_Init+0x224>)
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	0619      	lsls	r1, r3, #24
 8004bb2:	4b59      	ldr	r3, [pc, #356]	@ (8004d18 <MX_LWIP_Init+0x224>)
 8004bb4:	785b      	ldrb	r3, [r3, #1]
 8004bb6:	041b      	lsls	r3, r3, #16
 8004bb8:	4319      	orrs	r1, r3
 8004bba:	4b57      	ldr	r3, [pc, #348]	@ (8004d18 <MX_LWIP_Init+0x224>)
 8004bbc:	789b      	ldrb	r3, [r3, #2]
 8004bbe:	021b      	lsls	r3, r3, #8
 8004bc0:	430b      	orrs	r3, r1
 8004bc2:	4955      	ldr	r1, [pc, #340]	@ (8004d18 <MX_LWIP_Init+0x224>)
 8004bc4:	78c9      	ldrb	r1, [r1, #3]
 8004bc6:	430b      	orrs	r3, r1
 8004bc8:	0e1b      	lsrs	r3, r3, #24
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	4a55      	ldr	r2, [pc, #340]	@ (8004d24 <MX_LWIP_Init+0x230>)
 8004bce:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004bd0:	4b52      	ldr	r3, [pc, #328]	@ (8004d1c <MX_LWIP_Init+0x228>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	061a      	lsls	r2, r3, #24
 8004bd6:	4b51      	ldr	r3, [pc, #324]	@ (8004d1c <MX_LWIP_Init+0x228>)
 8004bd8:	785b      	ldrb	r3, [r3, #1]
 8004bda:	041b      	lsls	r3, r3, #16
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	4b4f      	ldr	r3, [pc, #316]	@ (8004d1c <MX_LWIP_Init+0x228>)
 8004be0:	789b      	ldrb	r3, [r3, #2]
 8004be2:	021b      	lsls	r3, r3, #8
 8004be4:	4313      	orrs	r3, r2
 8004be6:	4a4d      	ldr	r2, [pc, #308]	@ (8004d1c <MX_LWIP_Init+0x228>)
 8004be8:	78d2      	ldrb	r2, [r2, #3]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	061a      	lsls	r2, r3, #24
 8004bee:	4b4b      	ldr	r3, [pc, #300]	@ (8004d1c <MX_LWIP_Init+0x228>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	0619      	lsls	r1, r3, #24
 8004bf4:	4b49      	ldr	r3, [pc, #292]	@ (8004d1c <MX_LWIP_Init+0x228>)
 8004bf6:	785b      	ldrb	r3, [r3, #1]
 8004bf8:	041b      	lsls	r3, r3, #16
 8004bfa:	4319      	orrs	r1, r3
 8004bfc:	4b47      	ldr	r3, [pc, #284]	@ (8004d1c <MX_LWIP_Init+0x228>)
 8004bfe:	789b      	ldrb	r3, [r3, #2]
 8004c00:	021b      	lsls	r3, r3, #8
 8004c02:	430b      	orrs	r3, r1
 8004c04:	4945      	ldr	r1, [pc, #276]	@ (8004d1c <MX_LWIP_Init+0x228>)
 8004c06:	78c9      	ldrb	r1, [r1, #3]
 8004c08:	430b      	orrs	r3, r1
 8004c0a:	021b      	lsls	r3, r3, #8
 8004c0c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004c10:	431a      	orrs	r2, r3
 8004c12:	4b42      	ldr	r3, [pc, #264]	@ (8004d1c <MX_LWIP_Init+0x228>)
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	0619      	lsls	r1, r3, #24
 8004c18:	4b40      	ldr	r3, [pc, #256]	@ (8004d1c <MX_LWIP_Init+0x228>)
 8004c1a:	785b      	ldrb	r3, [r3, #1]
 8004c1c:	041b      	lsls	r3, r3, #16
 8004c1e:	4319      	orrs	r1, r3
 8004c20:	4b3e      	ldr	r3, [pc, #248]	@ (8004d1c <MX_LWIP_Init+0x228>)
 8004c22:	789b      	ldrb	r3, [r3, #2]
 8004c24:	021b      	lsls	r3, r3, #8
 8004c26:	430b      	orrs	r3, r1
 8004c28:	493c      	ldr	r1, [pc, #240]	@ (8004d1c <MX_LWIP_Init+0x228>)
 8004c2a:	78c9      	ldrb	r1, [r1, #3]
 8004c2c:	430b      	orrs	r3, r1
 8004c2e:	0a1b      	lsrs	r3, r3, #8
 8004c30:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004c34:	431a      	orrs	r2, r3
 8004c36:	4b39      	ldr	r3, [pc, #228]	@ (8004d1c <MX_LWIP_Init+0x228>)
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	0619      	lsls	r1, r3, #24
 8004c3c:	4b37      	ldr	r3, [pc, #220]	@ (8004d1c <MX_LWIP_Init+0x228>)
 8004c3e:	785b      	ldrb	r3, [r3, #1]
 8004c40:	041b      	lsls	r3, r3, #16
 8004c42:	4319      	orrs	r1, r3
 8004c44:	4b35      	ldr	r3, [pc, #212]	@ (8004d1c <MX_LWIP_Init+0x228>)
 8004c46:	789b      	ldrb	r3, [r3, #2]
 8004c48:	021b      	lsls	r3, r3, #8
 8004c4a:	430b      	orrs	r3, r1
 8004c4c:	4933      	ldr	r1, [pc, #204]	@ (8004d1c <MX_LWIP_Init+0x228>)
 8004c4e:	78c9      	ldrb	r1, [r1, #3]
 8004c50:	430b      	orrs	r3, r1
 8004c52:	0e1b      	lsrs	r3, r3, #24
 8004c54:	4313      	orrs	r3, r2
 8004c56:	4a34      	ldr	r2, [pc, #208]	@ (8004d28 <MX_LWIP_Init+0x234>)
 8004c58:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004c5a:	4b31      	ldr	r3, [pc, #196]	@ (8004d20 <MX_LWIP_Init+0x22c>)
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	061a      	lsls	r2, r3, #24
 8004c60:	4b2f      	ldr	r3, [pc, #188]	@ (8004d20 <MX_LWIP_Init+0x22c>)
 8004c62:	785b      	ldrb	r3, [r3, #1]
 8004c64:	041b      	lsls	r3, r3, #16
 8004c66:	431a      	orrs	r2, r3
 8004c68:	4b2d      	ldr	r3, [pc, #180]	@ (8004d20 <MX_LWIP_Init+0x22c>)
 8004c6a:	789b      	ldrb	r3, [r3, #2]
 8004c6c:	021b      	lsls	r3, r3, #8
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	4a2b      	ldr	r2, [pc, #172]	@ (8004d20 <MX_LWIP_Init+0x22c>)
 8004c72:	78d2      	ldrb	r2, [r2, #3]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	061a      	lsls	r2, r3, #24
 8004c78:	4b29      	ldr	r3, [pc, #164]	@ (8004d20 <MX_LWIP_Init+0x22c>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	0619      	lsls	r1, r3, #24
 8004c7e:	4b28      	ldr	r3, [pc, #160]	@ (8004d20 <MX_LWIP_Init+0x22c>)
 8004c80:	785b      	ldrb	r3, [r3, #1]
 8004c82:	041b      	lsls	r3, r3, #16
 8004c84:	4319      	orrs	r1, r3
 8004c86:	4b26      	ldr	r3, [pc, #152]	@ (8004d20 <MX_LWIP_Init+0x22c>)
 8004c88:	789b      	ldrb	r3, [r3, #2]
 8004c8a:	021b      	lsls	r3, r3, #8
 8004c8c:	430b      	orrs	r3, r1
 8004c8e:	4924      	ldr	r1, [pc, #144]	@ (8004d20 <MX_LWIP_Init+0x22c>)
 8004c90:	78c9      	ldrb	r1, [r1, #3]
 8004c92:	430b      	orrs	r3, r1
 8004c94:	021b      	lsls	r3, r3, #8
 8004c96:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	4b20      	ldr	r3, [pc, #128]	@ (8004d20 <MX_LWIP_Init+0x22c>)
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	0619      	lsls	r1, r3, #24
 8004ca2:	4b1f      	ldr	r3, [pc, #124]	@ (8004d20 <MX_LWIP_Init+0x22c>)
 8004ca4:	785b      	ldrb	r3, [r3, #1]
 8004ca6:	041b      	lsls	r3, r3, #16
 8004ca8:	4319      	orrs	r1, r3
 8004caa:	4b1d      	ldr	r3, [pc, #116]	@ (8004d20 <MX_LWIP_Init+0x22c>)
 8004cac:	789b      	ldrb	r3, [r3, #2]
 8004cae:	021b      	lsls	r3, r3, #8
 8004cb0:	430b      	orrs	r3, r1
 8004cb2:	491b      	ldr	r1, [pc, #108]	@ (8004d20 <MX_LWIP_Init+0x22c>)
 8004cb4:	78c9      	ldrb	r1, [r1, #3]
 8004cb6:	430b      	orrs	r3, r1
 8004cb8:	0a1b      	lsrs	r3, r3, #8
 8004cba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	4b17      	ldr	r3, [pc, #92]	@ (8004d20 <MX_LWIP_Init+0x22c>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	0619      	lsls	r1, r3, #24
 8004cc6:	4b16      	ldr	r3, [pc, #88]	@ (8004d20 <MX_LWIP_Init+0x22c>)
 8004cc8:	785b      	ldrb	r3, [r3, #1]
 8004cca:	041b      	lsls	r3, r3, #16
 8004ccc:	4319      	orrs	r1, r3
 8004cce:	4b14      	ldr	r3, [pc, #80]	@ (8004d20 <MX_LWIP_Init+0x22c>)
 8004cd0:	789b      	ldrb	r3, [r3, #2]
 8004cd2:	021b      	lsls	r3, r3, #8
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	4912      	ldr	r1, [pc, #72]	@ (8004d20 <MX_LWIP_Init+0x22c>)
 8004cd8:	78c9      	ldrb	r1, [r1, #3]
 8004cda:	430b      	orrs	r3, r1
 8004cdc:	0e1b      	lsrs	r3, r3, #24
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	4a12      	ldr	r2, [pc, #72]	@ (8004d2c <MX_LWIP_Init+0x238>)
 8004ce2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004ce4:	4b12      	ldr	r3, [pc, #72]	@ (8004d30 <MX_LWIP_Init+0x23c>)
 8004ce6:	9302      	str	r3, [sp, #8]
 8004ce8:	4b12      	ldr	r3, [pc, #72]	@ (8004d34 <MX_LWIP_Init+0x240>)
 8004cea:	9301      	str	r3, [sp, #4]
 8004cec:	2300      	movs	r3, #0
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8004d2c <MX_LWIP_Init+0x238>)
 8004cf2:	4a0d      	ldr	r2, [pc, #52]	@ (8004d28 <MX_LWIP_Init+0x234>)
 8004cf4:	490b      	ldr	r1, [pc, #44]	@ (8004d24 <MX_LWIP_Init+0x230>)
 8004cf6:	4810      	ldr	r0, [pc, #64]	@ (8004d38 <MX_LWIP_Init+0x244>)
 8004cf8:	f001 f956 	bl	8005fa8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004cfc:	480e      	ldr	r0, [pc, #56]	@ (8004d38 <MX_LWIP_Init+0x244>)
 8004cfe:	f001 fb05 	bl	800630c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8004d02:	480d      	ldr	r0, [pc, #52]	@ (8004d38 <MX_LWIP_Init+0x244>)
 8004d04:	f001 fb12 	bl	800632c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004d08:	490c      	ldr	r1, [pc, #48]	@ (8004d3c <MX_LWIP_Init+0x248>)
 8004d0a:	480b      	ldr	r0, [pc, #44]	@ (8004d38 <MX_LWIP_Init+0x244>)
 8004d0c:	f001 fc10 	bl	8006530 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004d10:	bf00      	nop
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	200002b8 	.word	0x200002b8
 8004d1c:	200002bc 	.word	0x200002bc
 8004d20:	200002c0 	.word	0x200002c0
 8004d24:	200002ac 	.word	0x200002ac
 8004d28:	200002b0 	.word	0x200002b0
 8004d2c:	200002b4 	.word	0x200002b4
 8004d30:	0800ede5 	.word	0x0800ede5
 8004d34:	080050b5 	.word	0x080050b5
 8004d38:	20000278 	.word	0x20000278
 8004d3c:	08004d91 	.word	0x08004d91

08004d40 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8004d48:	f7fc f878 	bl	8000e3c <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	4b08      	ldr	r3, [pc, #32]	@ (8004d70 <Ethernet_Link_Periodic_Handle+0x30>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b63      	cmp	r3, #99	@ 0x63
 8004d56:	d907      	bls.n	8004d68 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8004d58:	f7fc f870 	bl	8000e3c <HAL_GetTick>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	4a04      	ldr	r2, [pc, #16]	@ (8004d70 <Ethernet_Link_Periodic_Handle+0x30>)
 8004d60:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fb0c 	bl	8005380 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8004d68:	bf00      	nop
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	20000274 	.word	0x20000274

08004d74 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004d78:	4804      	ldr	r0, [pc, #16]	@ (8004d8c <MX_LWIP_Process+0x18>)
 8004d7a:	f000 f97b 	bl	8005074 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8004d7e:	f007 fc45 	bl	800c60c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8004d82:	4802      	ldr	r0, [pc, #8]	@ (8004d8c <MX_LWIP_Process+0x18>)
 8004d84:	f7ff ffdc 	bl	8004d40 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004d88:	bf00      	nop
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	20000278 	.word	0x20000278

08004d90 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <SCB_InvalidateDCache_by_Addr>:
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8004db6:	2320      	movs	r3, #32
 8004db8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004dba:	f3bf 8f4f 	dsb	sy
}
 8004dbe:	bf00      	nop
    while (op_size > 0) {
 8004dc0:	e00b      	b.n	8004dda <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8004dc2:	4a0d      	ldr	r2, [pc, #52]	@ (8004df8 <SCB_InvalidateDCache_by_Addr+0x54>)
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	4413      	add	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	dcf0      	bgt.n	8004dc2 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8004de0:	f3bf 8f4f 	dsb	sy
}
 8004de4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004de6:	f3bf 8f6f 	isb	sy
}
 8004dea:	bf00      	nop
}
 8004dec:	bf00      	nop
 8004dee:	371c      	adds	r7, #28
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	e000ed00 	.word	0xe000ed00

08004dfc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004e04:	2300      	movs	r3, #0
 8004e06:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004e08:	4b44      	ldr	r3, [pc, #272]	@ (8004f1c <low_level_init+0x120>)
 8004e0a:	4a45      	ldr	r2, [pc, #276]	@ (8004f20 <low_level_init+0x124>)
 8004e0c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004e12:	2380      	movs	r3, #128	@ 0x80
 8004e14:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004e16:	23e1      	movs	r3, #225	@ 0xe1
 8004e18:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004e22:	2300      	movs	r3, #0
 8004e24:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004e26:	4a3d      	ldr	r2, [pc, #244]	@ (8004f1c <low_level_init+0x120>)
 8004e28:	f107 0308 	add.w	r3, r7, #8
 8004e2c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004e2e:	4b3b      	ldr	r3, [pc, #236]	@ (8004f1c <low_level_init+0x120>)
 8004e30:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004e34:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004e36:	4b39      	ldr	r3, [pc, #228]	@ (8004f1c <low_level_init+0x120>)
 8004e38:	4a3a      	ldr	r2, [pc, #232]	@ (8004f24 <low_level_init+0x128>)
 8004e3a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004e3c:	4b37      	ldr	r3, [pc, #220]	@ (8004f1c <low_level_init+0x120>)
 8004e3e:	4a3a      	ldr	r2, [pc, #232]	@ (8004f28 <low_level_init+0x12c>)
 8004e40:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004e42:	4b36      	ldr	r3, [pc, #216]	@ (8004f1c <low_level_init+0x120>)
 8004e44:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004e48:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004e4a:	4834      	ldr	r0, [pc, #208]	@ (8004f1c <low_level_init+0x120>)
 8004e4c:	f7fc f9ca 	bl	80011e4 <HAL_ETH_Init>
 8004e50:	4603      	mov	r3, r0
 8004e52:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004e54:	2238      	movs	r2, #56	@ 0x38
 8004e56:	2100      	movs	r1, #0
 8004e58:	4834      	ldr	r0, [pc, #208]	@ (8004f2c <low_level_init+0x130>)
 8004e5a:	f00a f9fe 	bl	800f25a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004e5e:	4b33      	ldr	r3, [pc, #204]	@ (8004f2c <low_level_init+0x130>)
 8004e60:	2221      	movs	r2, #33	@ 0x21
 8004e62:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004e64:	4b31      	ldr	r3, [pc, #196]	@ (8004f2c <low_level_init+0x130>)
 8004e66:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8004e6a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004e6c:	4b2f      	ldr	r3, [pc, #188]	@ (8004f2c <low_level_init+0x130>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004e72:	482f      	ldr	r0, [pc, #188]	@ (8004f30 <low_level_init+0x134>)
 8004e74:	f000 ff60 	bl	8005d38 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2206      	movs	r2, #6
 8004e7c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004e80:	4b26      	ldr	r3, [pc, #152]	@ (8004f1c <low_level_init+0x120>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	781a      	ldrb	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004e8c:	4b23      	ldr	r3, [pc, #140]	@ (8004f1c <low_level_init+0x120>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	785a      	ldrb	r2, [r3, #1]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004e98:	4b20      	ldr	r3, [pc, #128]	@ (8004f1c <low_level_init+0x120>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	789a      	ldrb	r2, [r3, #2]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8004f1c <low_level_init+0x120>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	78da      	ldrb	r2, [r3, #3]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8004f1c <low_level_init+0x120>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	791a      	ldrb	r2, [r3, #4]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004ebc:	4b17      	ldr	r3, [pc, #92]	@ (8004f1c <low_level_init+0x120>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	795a      	ldrb	r2, [r3, #5]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004ece:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004ed6:	f043 030a 	orr.w	r3, r3, #10
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004ee2:	4914      	ldr	r1, [pc, #80]	@ (8004f34 <low_level_init+0x138>)
 8004ee4:	4814      	ldr	r0, [pc, #80]	@ (8004f38 <low_level_init+0x13c>)
 8004ee6:	f7fb fe52 	bl	8000b8e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8004eea:	4813      	ldr	r0, [pc, #76]	@ (8004f38 <low_level_init+0x13c>)
 8004eec:	f7fb fe81 	bl	8000bf2 <LAN8742_Init>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d006      	beq.n	8004f04 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f001 faea 	bl	80064d0 <netif_set_link_down>
    netif_set_down(netif);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f001 fa81 	bl	8006404 <netif_set_down>
 8004f02:	e008      	b.n	8004f16 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d103      	bne.n	8004f12 <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fa38 	bl	8005380 <ethernet_link_check_state>
 8004f10:	e001      	b.n	8004f16 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 8004f12:	f7fb fc27 	bl	8000764 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	20004c50 	.word	0x20004c50
 8004f20:	40028000 	.word	0x40028000
 8004f24:	20000128 	.word	0x20000128
 8004f28:	20000088 	.word	0x20000088
 8004f2c:	20004d00 	.word	0x20004d00
 8004f30:	080129b0 	.word	0x080129b0
 8004f34:	2000000c 	.word	0x2000000c
 8004f38:	20004d38 	.word	0x20004d38

08004f3c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b092      	sub	sp, #72	@ 0x48
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004f54:	f107 030c 	add.w	r3, r7, #12
 8004f58:	2230      	movs	r2, #48	@ 0x30
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f00a f97c 	bl	800f25a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004f62:	f107 030c 	add.w	r3, r7, #12
 8004f66:	2230      	movs	r2, #48	@ 0x30
 8004f68:	2100      	movs	r1, #0
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f00a f975 	bl	800f25a <memset>

  for(q = p; q != NULL; q = q->next)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f74:	e045      	b.n	8005002 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004f76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f78:	2b03      	cmp	r3, #3
 8004f7a:	d902      	bls.n	8004f82 <low_level_output+0x46>
      return ERR_IF;
 8004f7c:	f06f 030b 	mvn.w	r3, #11
 8004f80:	e055      	b.n	800502e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8004f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f84:	6859      	ldr	r1, [r3, #4]
 8004f86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f88:	4613      	mov	r3, r2
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	3348      	adds	r3, #72	@ 0x48
 8004f92:	443b      	add	r3, r7
 8004f94:	3b3c      	subs	r3, #60	@ 0x3c
 8004f96:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004f98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f9a:	895b      	ldrh	r3, [r3, #10]
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	4413      	add	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	3348      	adds	r3, #72	@ 0x48
 8004faa:	443b      	add	r3, r7
 8004fac:	3b38      	subs	r3, #56	@ 0x38
 8004fae:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004fb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d011      	beq.n	8004fda <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004fb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fb8:	1e5a      	subs	r2, r3, #1
 8004fba:	f107 000c 	add.w	r0, r7, #12
 8004fbe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	440b      	add	r3, r1
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	18c1      	adds	r1, r0, r3
 8004fca:	4613      	mov	r3, r2
 8004fcc:	005b      	lsls	r3, r3, #1
 8004fce:	4413      	add	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	3348      	adds	r3, #72	@ 0x48
 8004fd4:	443b      	add	r3, r7
 8004fd6:	3b34      	subs	r3, #52	@ 0x34
 8004fd8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004fda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d109      	bne.n	8004ff6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004fe2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	4413      	add	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	3348      	adds	r3, #72	@ 0x48
 8004fee:	443b      	add	r3, r7
 8004ff0:	3b34      	subs	r3, #52	@ 0x34
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004ff6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8004ffc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	643b      	str	r3, [r7, #64]	@ 0x40
 8005002:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1b6      	bne.n	8004f76 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	891b      	ldrh	r3, [r3, #8]
 800500c:	461a      	mov	r2, r3
 800500e:	4b0a      	ldr	r3, [pc, #40]	@ (8005038 <low_level_output+0xfc>)
 8005010:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005012:	4a09      	ldr	r2, [pc, #36]	@ (8005038 <low_level_output+0xfc>)
 8005014:	f107 030c 	add.w	r3, r7, #12
 8005018:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800501a:	4a07      	ldr	r2, [pc, #28]	@ (8005038 <low_level_output+0xfc>)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8005020:	2214      	movs	r2, #20
 8005022:	4905      	ldr	r1, [pc, #20]	@ (8005038 <low_level_output+0xfc>)
 8005024:	4805      	ldr	r0, [pc, #20]	@ (800503c <low_level_output+0x100>)
 8005026:	f7fc fa67 	bl	80014f8 <HAL_ETH_Transmit>

  return errval;
 800502a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800502e:	4618      	mov	r0, r3
 8005030:	3748      	adds	r7, #72	@ 0x48
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	20004d00 	.word	0x20004d00
 800503c:	20004c50 	.word	0x20004c50

08005040 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005048:	2300      	movs	r3, #0
 800504a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800504c:	4b07      	ldr	r3, [pc, #28]	@ (800506c <low_level_input+0x2c>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d105      	bne.n	8005060 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005054:	f107 030c 	add.w	r3, r7, #12
 8005058:	4619      	mov	r1, r3
 800505a:	4805      	ldr	r0, [pc, #20]	@ (8005070 <low_level_input+0x30>)
 800505c:	f7fc fae0 	bl	8001620 <HAL_ETH_ReadData>
  }

  return p;
 8005060:	68fb      	ldr	r3, [r7, #12]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	20004c4c 	.word	0x20004c4c
 8005070:	20004c50 	.word	0x20004c50

08005074 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800507c:	2300      	movs	r3, #0
 800507e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7ff ffdd 	bl	8005040 <low_level_input>
 8005086:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	4798      	blx	r3
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f001 fdc6 	bl	8006c30 <pbuf_free>
      }
    }
  } while(p!=NULL);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1ea      	bne.n	8005080 <ethernetif_input+0xc>
}
 80050aa:	bf00      	nop
 80050ac:	bf00      	nop
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d106      	bne.n	80050d0 <ethernetif_init+0x1c>
 80050c2:	4b0e      	ldr	r3, [pc, #56]	@ (80050fc <ethernetif_init+0x48>)
 80050c4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80050c8:	490d      	ldr	r1, [pc, #52]	@ (8005100 <ethernetif_init+0x4c>)
 80050ca:	480e      	ldr	r0, [pc, #56]	@ (8005104 <ethernetif_init+0x50>)
 80050cc:	f00a f860 	bl	800f190 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2273      	movs	r2, #115	@ 0x73
 80050d4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2274      	movs	r2, #116	@ 0x74
 80050dc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a09      	ldr	r2, [pc, #36]	@ (8005108 <ethernetif_init+0x54>)
 80050e4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a08      	ldr	r2, [pc, #32]	@ (800510c <ethernetif_init+0x58>)
 80050ea:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7ff fe85 	bl	8004dfc <low_level_init>

  return ERR_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	0800ffb8 	.word	0x0800ffb8
 8005100:	0800ffd4 	.word	0x0800ffd4
 8005104:	0800ffe4 	.word	0x0800ffe4
 8005108:	0800d29d 	.word	0x0800d29d
 800510c:	08004f3d 	.word	0x08004f3d

08005110 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800511c:	68f9      	ldr	r1, [r7, #12]
 800511e:	4807      	ldr	r0, [pc, #28]	@ (800513c <pbuf_free_custom+0x2c>)
 8005120:	f000 feec 	bl	8005efc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005124:	4b06      	ldr	r3, [pc, #24]	@ (8005140 <pbuf_free_custom+0x30>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d102      	bne.n	8005132 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800512c:	4b04      	ldr	r3, [pc, #16]	@ (8005140 <pbuf_free_custom+0x30>)
 800512e:	2200      	movs	r2, #0
 8005130:	701a      	strb	r2, [r3, #0]
  }
}
 8005132:	bf00      	nop
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	080129b0 	.word	0x080129b0
 8005140:	20004c4c 	.word	0x20004c4c

08005144 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005148:	f7fb fe78 	bl	8000e3c <HAL_GetTick>
 800514c:	4603      	mov	r3, r0
}
 800514e:	4618      	mov	r0, r3
 8005150:	bd80      	pop	{r7, pc}
	...

08005154 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b08e      	sub	sp, #56	@ 0x38
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800515c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005160:	2200      	movs	r2, #0
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	605a      	str	r2, [r3, #4]
 8005166:	609a      	str	r2, [r3, #8]
 8005168:	60da      	str	r2, [r3, #12]
 800516a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a56      	ldr	r2, [pc, #344]	@ (80052cc <HAL_ETH_MspInit+0x178>)
 8005172:	4293      	cmp	r3, r2
 8005174:	f040 80a6 	bne.w	80052c4 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005178:	4b55      	ldr	r3, [pc, #340]	@ (80052d0 <HAL_ETH_MspInit+0x17c>)
 800517a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800517c:	4a54      	ldr	r2, [pc, #336]	@ (80052d0 <HAL_ETH_MspInit+0x17c>)
 800517e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005182:	6313      	str	r3, [r2, #48]	@ 0x30
 8005184:	4b52      	ldr	r3, [pc, #328]	@ (80052d0 <HAL_ETH_MspInit+0x17c>)
 8005186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005188:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800518c:	623b      	str	r3, [r7, #32]
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	4b4f      	ldr	r3, [pc, #316]	@ (80052d0 <HAL_ETH_MspInit+0x17c>)
 8005192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005194:	4a4e      	ldr	r2, [pc, #312]	@ (80052d0 <HAL_ETH_MspInit+0x17c>)
 8005196:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800519a:	6313      	str	r3, [r2, #48]	@ 0x30
 800519c:	4b4c      	ldr	r3, [pc, #304]	@ (80052d0 <HAL_ETH_MspInit+0x17c>)
 800519e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80051a4:	61fb      	str	r3, [r7, #28]
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	4b49      	ldr	r3, [pc, #292]	@ (80052d0 <HAL_ETH_MspInit+0x17c>)
 80051aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ac:	4a48      	ldr	r2, [pc, #288]	@ (80052d0 <HAL_ETH_MspInit+0x17c>)
 80051ae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80051b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80051b4:	4b46      	ldr	r3, [pc, #280]	@ (80052d0 <HAL_ETH_MspInit+0x17c>)
 80051b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051bc:	61bb      	str	r3, [r7, #24]
 80051be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051c0:	4b43      	ldr	r3, [pc, #268]	@ (80052d0 <HAL_ETH_MspInit+0x17c>)
 80051c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c4:	4a42      	ldr	r2, [pc, #264]	@ (80052d0 <HAL_ETH_MspInit+0x17c>)
 80051c6:	f043 0304 	orr.w	r3, r3, #4
 80051ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80051cc:	4b40      	ldr	r3, [pc, #256]	@ (80052d0 <HAL_ETH_MspInit+0x17c>)
 80051ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	617b      	str	r3, [r7, #20]
 80051d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051d8:	4b3d      	ldr	r3, [pc, #244]	@ (80052d0 <HAL_ETH_MspInit+0x17c>)
 80051da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051dc:	4a3c      	ldr	r2, [pc, #240]	@ (80052d0 <HAL_ETH_MspInit+0x17c>)
 80051de:	f043 0301 	orr.w	r3, r3, #1
 80051e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80051e4:	4b3a      	ldr	r3, [pc, #232]	@ (80052d0 <HAL_ETH_MspInit+0x17c>)
 80051e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	613b      	str	r3, [r7, #16]
 80051ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051f0:	4b37      	ldr	r3, [pc, #220]	@ (80052d0 <HAL_ETH_MspInit+0x17c>)
 80051f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f4:	4a36      	ldr	r2, [pc, #216]	@ (80052d0 <HAL_ETH_MspInit+0x17c>)
 80051f6:	f043 0302 	orr.w	r3, r3, #2
 80051fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80051fc:	4b34      	ldr	r3, [pc, #208]	@ (80052d0 <HAL_ETH_MspInit+0x17c>)
 80051fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005208:	4b31      	ldr	r3, [pc, #196]	@ (80052d0 <HAL_ETH_MspInit+0x17c>)
 800520a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800520c:	4a30      	ldr	r2, [pc, #192]	@ (80052d0 <HAL_ETH_MspInit+0x17c>)
 800520e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005212:	6313      	str	r3, [r2, #48]	@ 0x30
 8005214:	4b2e      	ldr	r3, [pc, #184]	@ (80052d0 <HAL_ETH_MspInit+0x17c>)
 8005216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800521c:	60bb      	str	r3, [r7, #8]
 800521e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005220:	2332      	movs	r3, #50	@ 0x32
 8005222:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005224:	2302      	movs	r3, #2
 8005226:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005228:	2300      	movs	r3, #0
 800522a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800522c:	2303      	movs	r3, #3
 800522e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005230:	230b      	movs	r3, #11
 8005232:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005234:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005238:	4619      	mov	r1, r3
 800523a:	4826      	ldr	r0, [pc, #152]	@ (80052d4 <HAL_ETH_MspInit+0x180>)
 800523c:	f7fd fa20 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005240:	2386      	movs	r3, #134	@ 0x86
 8005242:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005244:	2302      	movs	r3, #2
 8005246:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005248:	2300      	movs	r3, #0
 800524a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800524c:	2303      	movs	r3, #3
 800524e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005250:	230b      	movs	r3, #11
 8005252:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005254:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005258:	4619      	mov	r1, r3
 800525a:	481f      	ldr	r0, [pc, #124]	@ (80052d8 <HAL_ETH_MspInit+0x184>)
 800525c:	f7fd fa10 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005260:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005264:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005266:	2302      	movs	r3, #2
 8005268:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800526a:	2300      	movs	r3, #0
 800526c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800526e:	2303      	movs	r3, #3
 8005270:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005272:	230b      	movs	r3, #11
 8005274:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005276:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800527a:	4619      	mov	r1, r3
 800527c:	4817      	ldr	r0, [pc, #92]	@ (80052dc <HAL_ETH_MspInit+0x188>)
 800527e:	f7fd f9ff 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8005282:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8005286:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005288:	2302      	movs	r3, #2
 800528a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800528c:	2300      	movs	r3, #0
 800528e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005290:	2303      	movs	r3, #3
 8005292:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005294:	230b      	movs	r3, #11
 8005296:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005298:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800529c:	4619      	mov	r1, r3
 800529e:	4810      	ldr	r0, [pc, #64]	@ (80052e0 <HAL_ETH_MspInit+0x18c>)
 80052a0:	f7fd f9ee 	bl	8002680 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80052a4:	2200      	movs	r2, #0
 80052a6:	2100      	movs	r1, #0
 80052a8:	203d      	movs	r0, #61	@ 0x3d
 80052aa:	f7fb fed2 	bl	8001052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80052ae:	203d      	movs	r0, #61	@ 0x3d
 80052b0:	f7fb feeb 	bl	800108a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 80052b4:	2200      	movs	r2, #0
 80052b6:	2100      	movs	r1, #0
 80052b8:	203e      	movs	r0, #62	@ 0x3e
 80052ba:	f7fb feca 	bl	8001052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 80052be:	203e      	movs	r0, #62	@ 0x3e
 80052c0:	f7fb fee3 	bl	800108a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80052c4:	bf00      	nop
 80052c6:	3738      	adds	r7, #56	@ 0x38
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	40028000 	.word	0x40028000
 80052d0:	40023800 	.word	0x40023800
 80052d4:	40020800 	.word	0x40020800
 80052d8:	40020000 	.word	0x40020000
 80052dc:	40020400 	.word	0x40020400
 80052e0:	40021800 	.word	0x40021800

080052e4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80052e8:	4802      	ldr	r0, [pc, #8]	@ (80052f4 <ETH_PHY_IO_Init+0x10>)
 80052ea:	f7fc fd67 	bl	8001dbc <HAL_ETH_SetMDIOClockRange>

  return 0;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	20004c50 	.word	0x20004c50

080052f8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
  return 0;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	68f9      	ldr	r1, [r7, #12]
 800531a:	4807      	ldr	r0, [pc, #28]	@ (8005338 <ETH_PHY_IO_ReadReg+0x30>)
 800531c:	f7fc fba8 	bl	8001a70 <HAL_ETH_ReadPHYRegister>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d002      	beq.n	800532c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005326:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800532a:	e000      	b.n	800532e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	20004c50 	.word	0x20004c50

0800533c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	68f9      	ldr	r1, [r7, #12]
 800534e:	4807      	ldr	r0, [pc, #28]	@ (800536c <ETH_PHY_IO_WriteReg+0x30>)
 8005350:	f7fc fbd9 	bl	8001b06 <HAL_ETH_WritePHYRegister>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d002      	beq.n	8005360 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800535a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800535e:	e000      	b.n	8005362 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20004c50 	.word	0x20004c50

08005370 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005374:	f7fb fd62 	bl	8000e3c <HAL_GetTick>
 8005378:	4603      	mov	r3, r0
}
 800537a:	4618      	mov	r0, r3
 800537c:	bd80      	pop	{r7, pc}
	...

08005380 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b0a0      	sub	sp, #128	@ 0x80
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005388:	f107 030c 	add.w	r3, r7, #12
 800538c:	2264      	movs	r2, #100	@ 0x64
 800538e:	2100      	movs	r1, #0
 8005390:	4618      	mov	r0, r3
 8005392:	f009 ff62 	bl	800f25a <memset>
  int32_t PHYLinkState = 0;
 8005396:	2300      	movs	r3, #0
 8005398:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800539a:	2300      	movs	r3, #0
 800539c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800539e:	2300      	movs	r3, #0
 80053a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053a2:	2300      	movs	r3, #0
 80053a4:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80053a6:	483a      	ldr	r0, [pc, #232]	@ (8005490 <ethernet_link_check_state+0x110>)
 80053a8:	f7fb fc70 	bl	8000c8c <LAN8742_GetLinkState>
 80053ac:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80053b4:	089b      	lsrs	r3, r3, #2
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00c      	beq.n	80053da <ethernet_link_check_state+0x5a>
 80053c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	dc09      	bgt.n	80053da <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 80053c6:	4833      	ldr	r0, [pc, #204]	@ (8005494 <ethernet_link_check_state+0x114>)
 80053c8:	f7fc f816 	bl	80013f8 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f001 f819 	bl	8006404 <netif_set_down>
    netif_set_link_down(netif);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f001 f87c 	bl	80064d0 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80053d8:	e055      	b.n	8005486 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d14e      	bne.n	8005486 <ethernet_link_check_state+0x106>
 80053e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	dd4b      	ble.n	8005486 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80053ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053f0:	3b02      	subs	r3, #2
 80053f2:	2b03      	cmp	r3, #3
 80053f4:	d82a      	bhi.n	800544c <ethernet_link_check_state+0xcc>
 80053f6:	a201      	add	r2, pc, #4	@ (adr r2, 80053fc <ethernet_link_check_state+0x7c>)
 80053f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fc:	0800540d 	.word	0x0800540d
 8005400:	0800541f 	.word	0x0800541f
 8005404:	0800542f 	.word	0x0800542f
 8005408:	0800543f 	.word	0x0800543f
      duplex = ETH_FULLDUPLEX_MODE;
 800540c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005410:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005412:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005416:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005418:	2301      	movs	r3, #1
 800541a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800541c:	e017      	b.n	800544e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800541e:	2300      	movs	r3, #0
 8005420:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005422:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005426:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005428:	2301      	movs	r3, #1
 800542a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800542c:	e00f      	b.n	800544e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800542e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005432:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005434:	2300      	movs	r3, #0
 8005436:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005438:	2301      	movs	r3, #1
 800543a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800543c:	e007      	b.n	800544e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800543e:	2300      	movs	r3, #0
 8005440:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005442:	2300      	movs	r3, #0
 8005444:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005446:	2301      	movs	r3, #1
 8005448:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800544a:	e000      	b.n	800544e <ethernet_link_check_state+0xce>
      break;
 800544c:	bf00      	nop
    if(linkchanged)
 800544e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005450:	2b00      	cmp	r3, #0
 8005452:	d018      	beq.n	8005486 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005454:	f107 030c 	add.w	r3, r7, #12
 8005458:	4619      	mov	r1, r3
 800545a:	480e      	ldr	r0, [pc, #56]	@ (8005494 <ethernet_link_check_state+0x114>)
 800545c:	f7fc fb9c 	bl	8001b98 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005460:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005462:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8005464:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005466:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005468:	f107 030c 	add.w	r3, r7, #12
 800546c:	4619      	mov	r1, r3
 800546e:	4809      	ldr	r0, [pc, #36]	@ (8005494 <ethernet_link_check_state+0x114>)
 8005470:	f7fc fc89 	bl	8001d86 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8005474:	4807      	ldr	r0, [pc, #28]	@ (8005494 <ethernet_link_check_state+0x114>)
 8005476:	f7fb ff4f 	bl	8001318 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 ff56 	bl	800632c <netif_set_up>
      netif_set_link_up(netif);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fff1 	bl	8006468 <netif_set_link_up>
}
 8005486:	bf00      	nop
 8005488:	3780      	adds	r7, #128	@ 0x80
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	20004d38 	.word	0x20004d38
 8005494:	20004c50 	.word	0x20004c50

08005498 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af02      	add	r7, sp, #8
 800549e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80054a0:	4812      	ldr	r0, [pc, #72]	@ (80054ec <HAL_ETH_RxAllocateCallback+0x54>)
 80054a2:	f000 fcbd 	bl	8005e20 <memp_malloc_pool>
 80054a6:	60f8      	str	r0, [r7, #12]
  if (p)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d014      	beq.n	80054d8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f103 0220 	add.w	r2, r3, #32
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4a0d      	ldr	r2, [pc, #52]	@ (80054f0 <HAL_ETH_RxAllocateCallback+0x58>)
 80054bc:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80054c6:	9201      	str	r2, [sp, #4]
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2241      	movs	r2, #65	@ 0x41
 80054ce:	2100      	movs	r1, #0
 80054d0:	2000      	movs	r0, #0
 80054d2:	f001 f9f3 	bl	80068bc <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80054d6:	e005      	b.n	80054e4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80054d8:	4b06      	ldr	r3, [pc, #24]	@ (80054f4 <HAL_ETH_RxAllocateCallback+0x5c>)
 80054da:	2201      	movs	r2, #1
 80054dc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]
}
 80054e4:	bf00      	nop
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	080129b0 	.word	0x080129b0
 80054f0:	08005111 	.word	0x08005111
 80054f4:	20004c4c 	.word	0x20004c4c

080054f8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b088      	sub	sp, #32
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
 8005504:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800550e:	2300      	movs	r3, #0
 8005510:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	3b20      	subs	r3, #32
 8005516:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	2200      	movs	r2, #0
 800551c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	2200      	movs	r2, #0
 8005522:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	887a      	ldrh	r2, [r7, #2]
 8005528:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d103      	bne.n	800553a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	69fa      	ldr	r2, [r7, #28]
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	e003      	b.n	8005542 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	69fa      	ldr	r2, [r7, #28]
 8005540:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	69fa      	ldr	r2, [r7, #28]
 8005546:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	61fb      	str	r3, [r7, #28]
 800554e:	e009      	b.n	8005564 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	891a      	ldrh	r2, [r3, #8]
 8005554:	887b      	ldrh	r3, [r7, #2]
 8005556:	4413      	add	r3, r2
 8005558:	b29a      	uxth	r2, r3
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	61fb      	str	r3, [r7, #28]
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1f2      	bne.n	8005550 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800556a:	887b      	ldrh	r3, [r7, #2]
 800556c:	4619      	mov	r1, r3
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7ff fc18 	bl	8004da4 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005574:	bf00      	nop
 8005576:	3720      	adds	r7, #32
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	4603      	mov	r3, r0
 8005584:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800558a:	021b      	lsls	r3, r3, #8
 800558c:	b21a      	sxth	r2, r3
 800558e:	88fb      	ldrh	r3, [r7, #6]
 8005590:	0a1b      	lsrs	r3, r3, #8
 8005592:	b29b      	uxth	r3, r3
 8005594:	b21b      	sxth	r3, r3
 8005596:	4313      	orrs	r3, r2
 8005598:	b21b      	sxth	r3, r3
 800559a:	b29b      	uxth	r3, r3
}
 800559c:	4618      	mov	r0, r3
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	061a      	lsls	r2, r3, #24
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	021b      	lsls	r3, r3, #8
 80055b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80055bc:	431a      	orrs	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	0a1b      	lsrs	r3, r3, #8
 80055c2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	0e1b      	lsrs	r3, r3, #24
 80055cc:	4313      	orrs	r3, r2
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b082      	sub	sp, #8
 80055de:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80055e0:	2300      	movs	r3, #0
 80055e2:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80055e4:	f000 f8d4 	bl	8005790 <mem_init>
  memp_init();
 80055e8:	f000 fbd6 	bl	8005d98 <memp_init>
  pbuf_init();
  netif_init();
 80055ec:	f000 fcd4 	bl	8005f98 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80055f0:	f007 f84e 	bl	800c690 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80055f4:	f001 fdaa 	bl	800714c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80055f8:	f006 ffc0 	bl	800c57c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80055fc:	bf00      	nop
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	4603      	mov	r3, r0
 800560c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800560e:	4b05      	ldr	r3, [pc, #20]	@ (8005624 <ptr_to_mem+0x20>)
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	88fb      	ldrh	r3, [r7, #6]
 8005614:	4413      	add	r3, r2
}
 8005616:	4618      	mov	r0, r3
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	20004d70 	.word	0x20004d70

08005628 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005630:	4b05      	ldr	r3, [pc, #20]	@ (8005648 <mem_to_ptr+0x20>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	b29b      	uxth	r3, r3
}
 800563a:	4618      	mov	r0, r3
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	20004d70 	.word	0x20004d70

0800564c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800564c:	b590      	push	{r4, r7, lr}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005654:	4b45      	ldr	r3, [pc, #276]	@ (800576c <plug_holes+0x120>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	429a      	cmp	r2, r3
 800565c:	d206      	bcs.n	800566c <plug_holes+0x20>
 800565e:	4b44      	ldr	r3, [pc, #272]	@ (8005770 <plug_holes+0x124>)
 8005660:	f240 12df 	movw	r2, #479	@ 0x1df
 8005664:	4943      	ldr	r1, [pc, #268]	@ (8005774 <plug_holes+0x128>)
 8005666:	4844      	ldr	r0, [pc, #272]	@ (8005778 <plug_holes+0x12c>)
 8005668:	f009 fd92 	bl	800f190 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800566c:	4b43      	ldr	r3, [pc, #268]	@ (800577c <plug_holes+0x130>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	429a      	cmp	r2, r3
 8005674:	d306      	bcc.n	8005684 <plug_holes+0x38>
 8005676:	4b3e      	ldr	r3, [pc, #248]	@ (8005770 <plug_holes+0x124>)
 8005678:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800567c:	4940      	ldr	r1, [pc, #256]	@ (8005780 <plug_holes+0x134>)
 800567e:	483e      	ldr	r0, [pc, #248]	@ (8005778 <plug_holes+0x12c>)
 8005680:	f009 fd86 	bl	800f190 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	791b      	ldrb	r3, [r3, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d006      	beq.n	800569a <plug_holes+0x4e>
 800568c:	4b38      	ldr	r3, [pc, #224]	@ (8005770 <plug_holes+0x124>)
 800568e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8005692:	493c      	ldr	r1, [pc, #240]	@ (8005784 <plug_holes+0x138>)
 8005694:	4838      	ldr	r0, [pc, #224]	@ (8005778 <plug_holes+0x12c>)
 8005696:	f009 fd7b 	bl	800f190 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	881b      	ldrh	r3, [r3, #0]
 800569e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80056a2:	d906      	bls.n	80056b2 <plug_holes+0x66>
 80056a4:	4b32      	ldr	r3, [pc, #200]	@ (8005770 <plug_holes+0x124>)
 80056a6:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80056aa:	4937      	ldr	r1, [pc, #220]	@ (8005788 <plug_holes+0x13c>)
 80056ac:	4832      	ldr	r0, [pc, #200]	@ (8005778 <plug_holes+0x12c>)
 80056ae:	f009 fd6f 	bl	800f190 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7ff ffa4 	bl	8005604 <ptr_to_mem>
 80056bc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d024      	beq.n	8005710 <plug_holes+0xc4>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	791b      	ldrb	r3, [r3, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d120      	bne.n	8005710 <plug_holes+0xc4>
 80056ce:	4b2b      	ldr	r3, [pc, #172]	@ (800577c <plug_holes+0x130>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d01b      	beq.n	8005710 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80056d8:	4b2c      	ldr	r3, [pc, #176]	@ (800578c <plug_holes+0x140>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d102      	bne.n	80056e8 <plug_holes+0x9c>
      lfree = mem;
 80056e2:	4a2a      	ldr	r2, [pc, #168]	@ (800578c <plug_holes+0x140>)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	881a      	ldrh	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80056f8:	d00a      	beq.n	8005710 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	4618      	mov	r0, r3
 8005700:	f7ff ff80 	bl	8005604 <ptr_to_mem>
 8005704:	4604      	mov	r4, r0
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7ff ff8e 	bl	8005628 <mem_to_ptr>
 800570c:	4603      	mov	r3, r0
 800570e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	885b      	ldrh	r3, [r3, #2]
 8005714:	4618      	mov	r0, r3
 8005716:	f7ff ff75 	bl	8005604 <ptr_to_mem>
 800571a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	429a      	cmp	r2, r3
 8005722:	d01f      	beq.n	8005764 <plug_holes+0x118>
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	791b      	ldrb	r3, [r3, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d11b      	bne.n	8005764 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800572c:	4b17      	ldr	r3, [pc, #92]	@ (800578c <plug_holes+0x140>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	429a      	cmp	r2, r3
 8005734:	d102      	bne.n	800573c <plug_holes+0xf0>
      lfree = pmem;
 8005736:	4a15      	ldr	r2, [pc, #84]	@ (800578c <plug_holes+0x140>)
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	881a      	ldrh	r2, [r3, #0]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	881b      	ldrh	r3, [r3, #0]
 8005748:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800574c:	d00a      	beq.n	8005764 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	4618      	mov	r0, r3
 8005754:	f7ff ff56 	bl	8005604 <ptr_to_mem>
 8005758:	4604      	mov	r4, r0
 800575a:	68b8      	ldr	r0, [r7, #8]
 800575c:	f7ff ff64 	bl	8005628 <mem_to_ptr>
 8005760:	4603      	mov	r3, r0
 8005762:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005764:	bf00      	nop
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	bd90      	pop	{r4, r7, pc}
 800576c:	20004d70 	.word	0x20004d70
 8005770:	0801000c 	.word	0x0801000c
 8005774:	0801003c 	.word	0x0801003c
 8005778:	08010054 	.word	0x08010054
 800577c:	20004d74 	.word	0x20004d74
 8005780:	0801007c 	.word	0x0801007c
 8005784:	08010098 	.word	0x08010098
 8005788:	080100b4 	.word	0x080100b4
 800578c:	20004d78 	.word	0x20004d78

08005790 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005796:	4b16      	ldr	r3, [pc, #88]	@ (80057f0 <mem_init+0x60>)
 8005798:	4a16      	ldr	r2, [pc, #88]	@ (80057f4 <mem_init+0x64>)
 800579a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800579c:	4b14      	ldr	r3, [pc, #80]	@ (80057f0 <mem_init+0x60>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80057a8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80057b6:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 80057ba:	f7ff ff23 	bl	8005604 <ptr_to_mem>
 80057be:	4603      	mov	r3, r0
 80057c0:	4a0d      	ldr	r2, [pc, #52]	@ (80057f8 <mem_init+0x68>)
 80057c2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80057c4:	4b0c      	ldr	r3, [pc, #48]	@ (80057f8 <mem_init+0x68>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2201      	movs	r2, #1
 80057ca:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80057cc:	4b0a      	ldr	r3, [pc, #40]	@ (80057f8 <mem_init+0x68>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80057d4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80057d6:	4b08      	ldr	r3, [pc, #32]	@ (80057f8 <mem_init+0x68>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80057de:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80057e0:	4b03      	ldr	r3, [pc, #12]	@ (80057f0 <mem_init+0x60>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a05      	ldr	r2, [pc, #20]	@ (80057fc <mem_init+0x6c>)
 80057e6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80057e8:	bf00      	nop
 80057ea:	3708      	adds	r7, #8
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	20004d70 	.word	0x20004d70
 80057f4:	20048000 	.word	0x20048000
 80057f8:	20004d74 	.word	0x20004d74
 80057fc:	20004d78 	.word	0x20004d78

08005800 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7ff ff0d 	bl	8005628 <mem_to_ptr>
 800580e:	4603      	mov	r3, r0
 8005810:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f7ff fef4 	bl	8005604 <ptr_to_mem>
 800581c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	885b      	ldrh	r3, [r3, #2]
 8005822:	4618      	mov	r0, r3
 8005824:	f7ff feee 	bl	8005604 <ptr_to_mem>
 8005828:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005832:	d818      	bhi.n	8005866 <mem_link_valid+0x66>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	885b      	ldrh	r3, [r3, #2]
 8005838:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800583c:	d813      	bhi.n	8005866 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005842:	8afa      	ldrh	r2, [r7, #22]
 8005844:	429a      	cmp	r2, r3
 8005846:	d004      	beq.n	8005852 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	8afa      	ldrh	r2, [r7, #22]
 800584e:	429a      	cmp	r2, r3
 8005850:	d109      	bne.n	8005866 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005852:	4b08      	ldr	r3, [pc, #32]	@ (8005874 <mem_link_valid+0x74>)
 8005854:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	429a      	cmp	r2, r3
 800585a:	d006      	beq.n	800586a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	885b      	ldrh	r3, [r3, #2]
 8005860:	8afa      	ldrh	r2, [r7, #22]
 8005862:	429a      	cmp	r2, r3
 8005864:	d001      	beq.n	800586a <mem_link_valid+0x6a>
    return 0;
 8005866:	2300      	movs	r3, #0
 8005868:	e000      	b.n	800586c <mem_link_valid+0x6c>
  }
  return 1;
 800586a:	2301      	movs	r3, #1
}
 800586c:	4618      	mov	r0, r3
 800586e:	3718      	adds	r7, #24
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	20004d74 	.word	0x20004d74

08005878 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d04c      	beq.n	8005920 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f003 0303 	and.w	r3, r3, #3
 800588c:	2b00      	cmp	r3, #0
 800588e:	d007      	beq.n	80058a0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005890:	4b25      	ldr	r3, [pc, #148]	@ (8005928 <mem_free+0xb0>)
 8005892:	f240 2273 	movw	r2, #627	@ 0x273
 8005896:	4925      	ldr	r1, [pc, #148]	@ (800592c <mem_free+0xb4>)
 8005898:	4825      	ldr	r0, [pc, #148]	@ (8005930 <mem_free+0xb8>)
 800589a:	f009 fc79 	bl	800f190 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800589e:	e040      	b.n	8005922 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	3b08      	subs	r3, #8
 80058a4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80058a6:	4b23      	ldr	r3, [pc, #140]	@ (8005934 <mem_free+0xbc>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d306      	bcc.n	80058be <mem_free+0x46>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f103 020c 	add.w	r2, r3, #12
 80058b6:	4b20      	ldr	r3, [pc, #128]	@ (8005938 <mem_free+0xc0>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d907      	bls.n	80058ce <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80058be:	4b1a      	ldr	r3, [pc, #104]	@ (8005928 <mem_free+0xb0>)
 80058c0:	f240 227f 	movw	r2, #639	@ 0x27f
 80058c4:	491d      	ldr	r1, [pc, #116]	@ (800593c <mem_free+0xc4>)
 80058c6:	481a      	ldr	r0, [pc, #104]	@ (8005930 <mem_free+0xb8>)
 80058c8:	f009 fc62 	bl	800f190 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80058cc:	e029      	b.n	8005922 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	791b      	ldrb	r3, [r3, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d107      	bne.n	80058e6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80058d6:	4b14      	ldr	r3, [pc, #80]	@ (8005928 <mem_free+0xb0>)
 80058d8:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80058dc:	4918      	ldr	r1, [pc, #96]	@ (8005940 <mem_free+0xc8>)
 80058de:	4814      	ldr	r0, [pc, #80]	@ (8005930 <mem_free+0xb8>)
 80058e0:	f009 fc56 	bl	800f190 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80058e4:	e01d      	b.n	8005922 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f7ff ff8a 	bl	8005800 <mem_link_valid>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d107      	bne.n	8005902 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80058f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005928 <mem_free+0xb0>)
 80058f4:	f240 2295 	movw	r2, #661	@ 0x295
 80058f8:	4912      	ldr	r1, [pc, #72]	@ (8005944 <mem_free+0xcc>)
 80058fa:	480d      	ldr	r0, [pc, #52]	@ (8005930 <mem_free+0xb8>)
 80058fc:	f009 fc48 	bl	800f190 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005900:	e00f      	b.n	8005922 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005908:	4b0f      	ldr	r3, [pc, #60]	@ (8005948 <mem_free+0xd0>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	429a      	cmp	r2, r3
 8005910:	d202      	bcs.n	8005918 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005912:	4a0d      	ldr	r2, [pc, #52]	@ (8005948 <mem_free+0xd0>)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f7ff fe97 	bl	800564c <plug_holes>
 800591e:	e000      	b.n	8005922 <mem_free+0xaa>
    return;
 8005920:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	0801000c 	.word	0x0801000c
 800592c:	080100e0 	.word	0x080100e0
 8005930:	08010054 	.word	0x08010054
 8005934:	20004d70 	.word	0x20004d70
 8005938:	20004d74 	.word	0x20004d74
 800593c:	08010104 	.word	0x08010104
 8005940:	08010120 	.word	0x08010120
 8005944:	08010148 	.word	0x08010148
 8005948:	20004d78 	.word	0x20004d78

0800594c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b088      	sub	sp, #32
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	460b      	mov	r3, r1
 8005956:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005958:	887b      	ldrh	r3, [r7, #2]
 800595a:	3303      	adds	r3, #3
 800595c:	b29b      	uxth	r3, r3
 800595e:	f023 0303 	bic.w	r3, r3, #3
 8005962:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005964:	8bfb      	ldrh	r3, [r7, #30]
 8005966:	2b0b      	cmp	r3, #11
 8005968:	d801      	bhi.n	800596e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800596a:	230c      	movs	r3, #12
 800596c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800596e:	8bfb      	ldrh	r3, [r7, #30]
 8005970:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005974:	d803      	bhi.n	800597e <mem_trim+0x32>
 8005976:	8bfa      	ldrh	r2, [r7, #30]
 8005978:	887b      	ldrh	r3, [r7, #2]
 800597a:	429a      	cmp	r2, r3
 800597c:	d201      	bcs.n	8005982 <mem_trim+0x36>
    return NULL;
 800597e:	2300      	movs	r3, #0
 8005980:	e0cc      	b.n	8005b1c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005982:	4b68      	ldr	r3, [pc, #416]	@ (8005b24 <mem_trim+0x1d8>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	429a      	cmp	r2, r3
 800598a:	d304      	bcc.n	8005996 <mem_trim+0x4a>
 800598c:	4b66      	ldr	r3, [pc, #408]	@ (8005b28 <mem_trim+0x1dc>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	429a      	cmp	r2, r3
 8005994:	d306      	bcc.n	80059a4 <mem_trim+0x58>
 8005996:	4b65      	ldr	r3, [pc, #404]	@ (8005b2c <mem_trim+0x1e0>)
 8005998:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800599c:	4964      	ldr	r1, [pc, #400]	@ (8005b30 <mem_trim+0x1e4>)
 800599e:	4865      	ldr	r0, [pc, #404]	@ (8005b34 <mem_trim+0x1e8>)
 80059a0:	f009 fbf6 	bl	800f190 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80059a4:	4b5f      	ldr	r3, [pc, #380]	@ (8005b24 <mem_trim+0x1d8>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d304      	bcc.n	80059b8 <mem_trim+0x6c>
 80059ae:	4b5e      	ldr	r3, [pc, #376]	@ (8005b28 <mem_trim+0x1dc>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d301      	bcc.n	80059bc <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	e0af      	b.n	8005b1c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3b08      	subs	r3, #8
 80059c0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80059c2:	69b8      	ldr	r0, [r7, #24]
 80059c4:	f7ff fe30 	bl	8005628 <mem_to_ptr>
 80059c8:	4603      	mov	r3, r0
 80059ca:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	881a      	ldrh	r2, [r3, #0]
 80059d0:	8afb      	ldrh	r3, [r7, #22]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	3b08      	subs	r3, #8
 80059d8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80059da:	8bfa      	ldrh	r2, [r7, #30]
 80059dc:	8abb      	ldrh	r3, [r7, #20]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d906      	bls.n	80059f0 <mem_trim+0xa4>
 80059e2:	4b52      	ldr	r3, [pc, #328]	@ (8005b2c <mem_trim+0x1e0>)
 80059e4:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80059e8:	4953      	ldr	r1, [pc, #332]	@ (8005b38 <mem_trim+0x1ec>)
 80059ea:	4852      	ldr	r0, [pc, #328]	@ (8005b34 <mem_trim+0x1e8>)
 80059ec:	f009 fbd0 	bl	800f190 <iprintf>
  if (newsize > size) {
 80059f0:	8bfa      	ldrh	r2, [r7, #30]
 80059f2:	8abb      	ldrh	r3, [r7, #20]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d901      	bls.n	80059fc <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80059f8:	2300      	movs	r3, #0
 80059fa:	e08f      	b.n	8005b1c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80059fc:	8bfa      	ldrh	r2, [r7, #30]
 80059fe:	8abb      	ldrh	r3, [r7, #20]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d101      	bne.n	8005a08 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	e089      	b.n	8005b1c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7ff fdf9 	bl	8005604 <ptr_to_mem>
 8005a12:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	791b      	ldrb	r3, [r3, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d13f      	bne.n	8005a9c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	881b      	ldrh	r3, [r3, #0]
 8005a20:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005a24:	d106      	bne.n	8005a34 <mem_trim+0xe8>
 8005a26:	4b41      	ldr	r3, [pc, #260]	@ (8005b2c <mem_trim+0x1e0>)
 8005a28:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8005a2c:	4943      	ldr	r1, [pc, #268]	@ (8005b3c <mem_trim+0x1f0>)
 8005a2e:	4841      	ldr	r0, [pc, #260]	@ (8005b34 <mem_trim+0x1e8>)
 8005a30:	f009 fbae 	bl	800f190 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005a3a:	8afa      	ldrh	r2, [r7, #22]
 8005a3c:	8bfb      	ldrh	r3, [r7, #30]
 8005a3e:	4413      	add	r3, r2
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	3308      	adds	r3, #8
 8005a44:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005a46:	4b3e      	ldr	r3, [pc, #248]	@ (8005b40 <mem_trim+0x1f4>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d106      	bne.n	8005a5e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005a50:	89fb      	ldrh	r3, [r7, #14]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7ff fdd6 	bl	8005604 <ptr_to_mem>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	4a39      	ldr	r2, [pc, #228]	@ (8005b40 <mem_trim+0x1f4>)
 8005a5c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005a5e:	89fb      	ldrh	r3, [r7, #14]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7ff fdcf 	bl	8005604 <ptr_to_mem>
 8005a66:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	89ba      	ldrh	r2, [r7, #12]
 8005a72:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	8afa      	ldrh	r2, [r7, #22]
 8005a78:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	89fa      	ldrh	r2, [r7, #14]
 8005a7e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005a88:	d047      	beq.n	8005b1a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	881b      	ldrh	r3, [r3, #0]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7ff fdb8 	bl	8005604 <ptr_to_mem>
 8005a94:	4602      	mov	r2, r0
 8005a96:	89fb      	ldrh	r3, [r7, #14]
 8005a98:	8053      	strh	r3, [r2, #2]
 8005a9a:	e03e      	b.n	8005b1a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005a9c:	8bfb      	ldrh	r3, [r7, #30]
 8005a9e:	f103 0214 	add.w	r2, r3, #20
 8005aa2:	8abb      	ldrh	r3, [r7, #20]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d838      	bhi.n	8005b1a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005aa8:	8afa      	ldrh	r2, [r7, #22]
 8005aaa:	8bfb      	ldrh	r3, [r7, #30]
 8005aac:	4413      	add	r3, r2
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	3308      	adds	r3, #8
 8005ab2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005abc:	d106      	bne.n	8005acc <mem_trim+0x180>
 8005abe:	4b1b      	ldr	r3, [pc, #108]	@ (8005b2c <mem_trim+0x1e0>)
 8005ac0:	f240 3216 	movw	r2, #790	@ 0x316
 8005ac4:	491d      	ldr	r1, [pc, #116]	@ (8005b3c <mem_trim+0x1f0>)
 8005ac6:	481b      	ldr	r0, [pc, #108]	@ (8005b34 <mem_trim+0x1e8>)
 8005ac8:	f009 fb62 	bl	800f190 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005acc:	89fb      	ldrh	r3, [r7, #14]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7ff fd98 	bl	8005604 <ptr_to_mem>
 8005ad4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8005b40 <mem_trim+0x1f4>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d202      	bcs.n	8005ae6 <mem_trim+0x19a>
      lfree = mem2;
 8005ae0:	4a17      	ldr	r2, [pc, #92]	@ (8005b40 <mem_trim+0x1f4>)
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	881a      	ldrh	r2, [r3, #0]
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	8afa      	ldrh	r2, [r7, #22]
 8005af8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	89fa      	ldrh	r2, [r7, #14]
 8005afe:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005b08:	d007      	beq.n	8005b1a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	881b      	ldrh	r3, [r3, #0]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7ff fd78 	bl	8005604 <ptr_to_mem>
 8005b14:	4602      	mov	r2, r0
 8005b16:	89fb      	ldrh	r3, [r7, #14]
 8005b18:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005b1a:	687b      	ldr	r3, [r7, #4]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3720      	adds	r7, #32
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	20004d70 	.word	0x20004d70
 8005b28:	20004d74 	.word	0x20004d74
 8005b2c:	0801000c 	.word	0x0801000c
 8005b30:	0801017c 	.word	0x0801017c
 8005b34:	08010054 	.word	0x08010054
 8005b38:	08010194 	.word	0x08010194
 8005b3c:	080101b4 	.word	0x080101b4
 8005b40:	20004d78 	.word	0x20004d78

08005b44 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b088      	sub	sp, #32
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005b4e:	88fb      	ldrh	r3, [r7, #6]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <mem_malloc+0x14>
    return NULL;
 8005b54:	2300      	movs	r3, #0
 8005b56:	e0d9      	b.n	8005d0c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005b58:	88fb      	ldrh	r3, [r7, #6]
 8005b5a:	3303      	adds	r3, #3
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	f023 0303 	bic.w	r3, r3, #3
 8005b62:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005b64:	8bbb      	ldrh	r3, [r7, #28]
 8005b66:	2b0b      	cmp	r3, #11
 8005b68:	d801      	bhi.n	8005b6e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005b6a:	230c      	movs	r3, #12
 8005b6c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005b6e:	8bbb      	ldrh	r3, [r7, #28]
 8005b70:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005b74:	d803      	bhi.n	8005b7e <mem_malloc+0x3a>
 8005b76:	8bba      	ldrh	r2, [r7, #28]
 8005b78:	88fb      	ldrh	r3, [r7, #6]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d201      	bcs.n	8005b82 <mem_malloc+0x3e>
    return NULL;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	e0c4      	b.n	8005d0c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005b82:	4b64      	ldr	r3, [pc, #400]	@ (8005d14 <mem_malloc+0x1d0>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff fd4e 	bl	8005628 <mem_to_ptr>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	83fb      	strh	r3, [r7, #30]
 8005b90:	e0b4      	b.n	8005cfc <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005b92:	8bfb      	ldrh	r3, [r7, #30]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7ff fd35 	bl	8005604 <ptr_to_mem>
 8005b9a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	791b      	ldrb	r3, [r3, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f040 80a4 	bne.w	8005cee <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	461a      	mov	r2, r3
 8005bac:	8bfb      	ldrh	r3, [r7, #30]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	f1a3 0208 	sub.w	r2, r3, #8
 8005bb4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	f0c0 8099 	bcc.w	8005cee <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	8bfb      	ldrh	r3, [r7, #30]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	f1a3 0208 	sub.w	r2, r3, #8
 8005bca:	8bbb      	ldrh	r3, [r7, #28]
 8005bcc:	3314      	adds	r3, #20
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d333      	bcc.n	8005c3a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005bd2:	8bfa      	ldrh	r2, [r7, #30]
 8005bd4:	8bbb      	ldrh	r3, [r7, #28]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	3308      	adds	r3, #8
 8005bdc:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005bde:	8a7b      	ldrh	r3, [r7, #18]
 8005be0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005be4:	d106      	bne.n	8005bf4 <mem_malloc+0xb0>
 8005be6:	4b4c      	ldr	r3, [pc, #304]	@ (8005d18 <mem_malloc+0x1d4>)
 8005be8:	f240 3287 	movw	r2, #903	@ 0x387
 8005bec:	494b      	ldr	r1, [pc, #300]	@ (8005d1c <mem_malloc+0x1d8>)
 8005bee:	484c      	ldr	r0, [pc, #304]	@ (8005d20 <mem_malloc+0x1dc>)
 8005bf0:	f009 face 	bl	800f190 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005bf4:	8a7b      	ldrh	r3, [r7, #18]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7ff fd04 	bl	8005604 <ptr_to_mem>
 8005bfc:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	881a      	ldrh	r2, [r3, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	8bfa      	ldrh	r2, [r7, #30]
 8005c10:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	8a7a      	ldrh	r2, [r7, #18]
 8005c16:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005c26:	d00b      	beq.n	8005c40 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	881b      	ldrh	r3, [r3, #0]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7ff fce9 	bl	8005604 <ptr_to_mem>
 8005c32:	4602      	mov	r2, r0
 8005c34:	8a7b      	ldrh	r3, [r7, #18]
 8005c36:	8053      	strh	r3, [r2, #2]
 8005c38:	e002      	b.n	8005c40 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005c40:	4b34      	ldr	r3, [pc, #208]	@ (8005d14 <mem_malloc+0x1d0>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d127      	bne.n	8005c9a <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005c4a:	4b32      	ldr	r3, [pc, #200]	@ (8005d14 <mem_malloc+0x1d0>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005c50:	e005      	b.n	8005c5e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7ff fcd4 	bl	8005604 <ptr_to_mem>
 8005c5c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	791b      	ldrb	r3, [r3, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d004      	beq.n	8005c70 <mem_malloc+0x12c>
 8005c66:	4b2f      	ldr	r3, [pc, #188]	@ (8005d24 <mem_malloc+0x1e0>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	69ba      	ldr	r2, [r7, #24]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d1f0      	bne.n	8005c52 <mem_malloc+0x10e>
          }
          lfree = cur;
 8005c70:	4a28      	ldr	r2, [pc, #160]	@ (8005d14 <mem_malloc+0x1d0>)
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005c76:	4b27      	ldr	r3, [pc, #156]	@ (8005d14 <mem_malloc+0x1d0>)
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	4b2a      	ldr	r3, [pc, #168]	@ (8005d24 <mem_malloc+0x1e0>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d00b      	beq.n	8005c9a <mem_malloc+0x156>
 8005c82:	4b24      	ldr	r3, [pc, #144]	@ (8005d14 <mem_malloc+0x1d0>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	791b      	ldrb	r3, [r3, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d006      	beq.n	8005c9a <mem_malloc+0x156>
 8005c8c:	4b22      	ldr	r3, [pc, #136]	@ (8005d18 <mem_malloc+0x1d4>)
 8005c8e:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8005c92:	4925      	ldr	r1, [pc, #148]	@ (8005d28 <mem_malloc+0x1e4>)
 8005c94:	4822      	ldr	r0, [pc, #136]	@ (8005d20 <mem_malloc+0x1dc>)
 8005c96:	f009 fa7b 	bl	800f190 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005c9a:	8bba      	ldrh	r2, [r7, #28]
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	3308      	adds	r3, #8
 8005ca2:	4a20      	ldr	r2, [pc, #128]	@ (8005d24 <mem_malloc+0x1e0>)
 8005ca4:	6812      	ldr	r2, [r2, #0]
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d906      	bls.n	8005cb8 <mem_malloc+0x174>
 8005caa:	4b1b      	ldr	r3, [pc, #108]	@ (8005d18 <mem_malloc+0x1d4>)
 8005cac:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8005cb0:	491e      	ldr	r1, [pc, #120]	@ (8005d2c <mem_malloc+0x1e8>)
 8005cb2:	481b      	ldr	r0, [pc, #108]	@ (8005d20 <mem_malloc+0x1dc>)
 8005cb4:	f009 fa6c 	bl	800f190 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d006      	beq.n	8005cd0 <mem_malloc+0x18c>
 8005cc2:	4b15      	ldr	r3, [pc, #84]	@ (8005d18 <mem_malloc+0x1d4>)
 8005cc4:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8005cc8:	4919      	ldr	r1, [pc, #100]	@ (8005d30 <mem_malloc+0x1ec>)
 8005cca:	4815      	ldr	r0, [pc, #84]	@ (8005d20 <mem_malloc+0x1dc>)
 8005ccc:	f009 fa60 	bl	800f190 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f003 0303 	and.w	r3, r3, #3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d006      	beq.n	8005ce8 <mem_malloc+0x1a4>
 8005cda:	4b0f      	ldr	r3, [pc, #60]	@ (8005d18 <mem_malloc+0x1d4>)
 8005cdc:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8005ce0:	4914      	ldr	r1, [pc, #80]	@ (8005d34 <mem_malloc+0x1f0>)
 8005ce2:	480f      	ldr	r0, [pc, #60]	@ (8005d20 <mem_malloc+0x1dc>)
 8005ce4:	f009 fa54 	bl	800f190 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	3308      	adds	r3, #8
 8005cec:	e00e      	b.n	8005d0c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005cee:	8bfb      	ldrh	r3, [r7, #30]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7ff fc87 	bl	8005604 <ptr_to_mem>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005cfc:	8bfa      	ldrh	r2, [r7, #30]
 8005cfe:	8bbb      	ldrh	r3, [r7, #28]
 8005d00:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8005d04:	429a      	cmp	r2, r3
 8005d06:	f4ff af44 	bcc.w	8005b92 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3720      	adds	r7, #32
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	20004d78 	.word	0x20004d78
 8005d18:	0801000c 	.word	0x0801000c
 8005d1c:	080101b4 	.word	0x080101b4
 8005d20:	08010054 	.word	0x08010054
 8005d24:	20004d74 	.word	0x20004d74
 8005d28:	080101c8 	.word	0x080101c8
 8005d2c:	080101e4 	.word	0x080101e4
 8005d30:	08010214 	.word	0x08010214
 8005d34:	08010244 	.word	0x08010244

08005d38 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	2200      	movs	r2, #0
 8005d46:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	3303      	adds	r3, #3
 8005d4e:	f023 0303 	bic.w	r3, r3, #3
 8005d52:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005d54:	2300      	movs	r3, #0
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	e011      	b.n	8005d7e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	68ba      	ldr	r2, [r7, #8]
 8005d6a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	881b      	ldrh	r3, [r3, #0]
 8005d70:	461a      	mov	r2, r3
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	4413      	add	r3, r2
 8005d76:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	60fb      	str	r3, [r7, #12]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	885b      	ldrh	r3, [r3, #2]
 8005d82:	461a      	mov	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4293      	cmp	r3, r2
 8005d88:	dbe7      	blt.n	8005d5a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005d8a:	bf00      	nop
 8005d8c:	bf00      	nop
 8005d8e:	3714      	adds	r7, #20
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005d9e:	2300      	movs	r3, #0
 8005da0:	80fb      	strh	r3, [r7, #6]
 8005da2:	e009      	b.n	8005db8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005da4:	88fb      	ldrh	r3, [r7, #6]
 8005da6:	4a08      	ldr	r2, [pc, #32]	@ (8005dc8 <memp_init+0x30>)
 8005da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7ff ffc3 	bl	8005d38 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005db2:	88fb      	ldrh	r3, [r7, #6]
 8005db4:	3301      	adds	r3, #1
 8005db6:	80fb      	strh	r3, [r7, #6]
 8005db8:	88fb      	ldrh	r3, [r7, #6]
 8005dba:	2b08      	cmp	r3, #8
 8005dbc:	d9f2      	bls.n	8005da4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005dbe:	bf00      	nop
 8005dc0:	bf00      	nop
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	08012a28 	.word	0x08012a28

08005dcc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d012      	beq.n	8005e08 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	6812      	ldr	r2, [r2, #0]
 8005dea:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f003 0303 	and.w	r3, r3, #3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d006      	beq.n	8005e04 <do_memp_malloc_pool+0x38>
 8005df6:	4b07      	ldr	r3, [pc, #28]	@ (8005e14 <do_memp_malloc_pool+0x48>)
 8005df8:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8005dfc:	4906      	ldr	r1, [pc, #24]	@ (8005e18 <do_memp_malloc_pool+0x4c>)
 8005dfe:	4807      	ldr	r0, [pc, #28]	@ (8005e1c <do_memp_malloc_pool+0x50>)
 8005e00:	f009 f9c6 	bl	800f190 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	e000      	b.n	8005e0a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	08010268 	.word	0x08010268
 8005e18:	08010298 	.word	0x08010298
 8005e1c:	080102bc 	.word	0x080102bc

08005e20 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d106      	bne.n	8005e3c <memp_malloc_pool+0x1c>
 8005e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8005e58 <memp_malloc_pool+0x38>)
 8005e30:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8005e34:	4909      	ldr	r1, [pc, #36]	@ (8005e5c <memp_malloc_pool+0x3c>)
 8005e36:	480a      	ldr	r0, [pc, #40]	@ (8005e60 <memp_malloc_pool+0x40>)
 8005e38:	f009 f9aa 	bl	800f190 <iprintf>
  if (desc == NULL) {
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <memp_malloc_pool+0x26>
    return NULL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	e003      	b.n	8005e4e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7ff ffc0 	bl	8005dcc <do_memp_malloc_pool>
 8005e4c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	08010268 	.word	0x08010268
 8005e5c:	080102e4 	.word	0x080102e4
 8005e60:	080102bc 	.word	0x080102bc

08005e64 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005e6e:	79fb      	ldrb	r3, [r7, #7]
 8005e70:	2b08      	cmp	r3, #8
 8005e72:	d908      	bls.n	8005e86 <memp_malloc+0x22>
 8005e74:	4b0a      	ldr	r3, [pc, #40]	@ (8005ea0 <memp_malloc+0x3c>)
 8005e76:	f240 1257 	movw	r2, #343	@ 0x157
 8005e7a:	490a      	ldr	r1, [pc, #40]	@ (8005ea4 <memp_malloc+0x40>)
 8005e7c:	480a      	ldr	r0, [pc, #40]	@ (8005ea8 <memp_malloc+0x44>)
 8005e7e:	f009 f987 	bl	800f190 <iprintf>
 8005e82:	2300      	movs	r3, #0
 8005e84:	e008      	b.n	8005e98 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005e86:	79fb      	ldrb	r3, [r7, #7]
 8005e88:	4a08      	ldr	r2, [pc, #32]	@ (8005eac <memp_malloc+0x48>)
 8005e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7ff ff9c 	bl	8005dcc <do_memp_malloc_pool>
 8005e94:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005e96:	68fb      	ldr	r3, [r7, #12]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	08010268 	.word	0x08010268
 8005ea4:	080102f8 	.word	0x080102f8
 8005ea8:	080102bc 	.word	0x080102bc
 8005eac:	08012a28 	.word	0x08012a28

08005eb0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	f003 0303 	and.w	r3, r3, #3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d006      	beq.n	8005ed2 <do_memp_free_pool+0x22>
 8005ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ef0 <do_memp_free_pool+0x40>)
 8005ec6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8005eca:	490a      	ldr	r1, [pc, #40]	@ (8005ef4 <do_memp_free_pool+0x44>)
 8005ecc:	480a      	ldr	r0, [pc, #40]	@ (8005ef8 <do_memp_free_pool+0x48>)
 8005ece:	f009 f95f 	bl	800f190 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005ee8:	bf00      	nop
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	08010268 	.word	0x08010268
 8005ef4:	08010318 	.word	0x08010318
 8005ef8:	080102bc 	.word	0x080102bc

08005efc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d106      	bne.n	8005f1a <memp_free_pool+0x1e>
 8005f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f38 <memp_free_pool+0x3c>)
 8005f0e:	f240 1295 	movw	r2, #405	@ 0x195
 8005f12:	490a      	ldr	r1, [pc, #40]	@ (8005f3c <memp_free_pool+0x40>)
 8005f14:	480a      	ldr	r0, [pc, #40]	@ (8005f40 <memp_free_pool+0x44>)
 8005f16:	f009 f93b 	bl	800f190 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d007      	beq.n	8005f30 <memp_free_pool+0x34>
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d004      	beq.n	8005f30 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8005f26:	6839      	ldr	r1, [r7, #0]
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff ffc1 	bl	8005eb0 <do_memp_free_pool>
 8005f2e:	e000      	b.n	8005f32 <memp_free_pool+0x36>
    return;
 8005f30:	bf00      	nop
}
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	08010268 	.word	0x08010268
 8005f3c:	080102e4 	.word	0x080102e4
 8005f40:	080102bc 	.word	0x080102bc

08005f44 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	6039      	str	r1, [r7, #0]
 8005f4e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005f50:	79fb      	ldrb	r3, [r7, #7]
 8005f52:	2b08      	cmp	r3, #8
 8005f54:	d907      	bls.n	8005f66 <memp_free+0x22>
 8005f56:	4b0c      	ldr	r3, [pc, #48]	@ (8005f88 <memp_free+0x44>)
 8005f58:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8005f5c:	490b      	ldr	r1, [pc, #44]	@ (8005f8c <memp_free+0x48>)
 8005f5e:	480c      	ldr	r0, [pc, #48]	@ (8005f90 <memp_free+0x4c>)
 8005f60:	f009 f916 	bl	800f190 <iprintf>
 8005f64:	e00c      	b.n	8005f80 <memp_free+0x3c>

  if (mem == NULL) {
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d008      	beq.n	8005f7e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005f6c:	79fb      	ldrb	r3, [r7, #7]
 8005f6e:	4a09      	ldr	r2, [pc, #36]	@ (8005f94 <memp_free+0x50>)
 8005f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f74:	6839      	ldr	r1, [r7, #0]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7ff ff9a 	bl	8005eb0 <do_memp_free_pool>
 8005f7c:	e000      	b.n	8005f80 <memp_free+0x3c>
    return;
 8005f7e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	08010268 	.word	0x08010268
 8005f8c:	08010338 	.word	0x08010338
 8005f90:	080102bc 	.word	0x080102bc
 8005f94:	08012a28 	.word	0x08012a28

08005f98 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005f9c:	bf00      	nop
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
	...

08005fa8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
 8005fb4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d108      	bne.n	8005fce <netif_add+0x26>
 8005fbc:	4b57      	ldr	r3, [pc, #348]	@ (800611c <netif_add+0x174>)
 8005fbe:	f240 1227 	movw	r2, #295	@ 0x127
 8005fc2:	4957      	ldr	r1, [pc, #348]	@ (8006120 <netif_add+0x178>)
 8005fc4:	4857      	ldr	r0, [pc, #348]	@ (8006124 <netif_add+0x17c>)
 8005fc6:	f009 f8e3 	bl	800f190 <iprintf>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	e0a2      	b.n	8006114 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d108      	bne.n	8005fe6 <netif_add+0x3e>
 8005fd4:	4b51      	ldr	r3, [pc, #324]	@ (800611c <netif_add+0x174>)
 8005fd6:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8005fda:	4953      	ldr	r1, [pc, #332]	@ (8006128 <netif_add+0x180>)
 8005fdc:	4851      	ldr	r0, [pc, #324]	@ (8006124 <netif_add+0x17c>)
 8005fde:	f009 f8d7 	bl	800f190 <iprintf>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	e096      	b.n	8006114 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005fec:	4b4f      	ldr	r3, [pc, #316]	@ (800612c <netif_add+0x184>)
 8005fee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005ff6:	4b4d      	ldr	r3, [pc, #308]	@ (800612c <netif_add+0x184>)
 8005ff8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006000:	4b4a      	ldr	r3, [pc, #296]	@ (800612c <netif_add+0x184>)
 8006002:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	4a45      	ldr	r2, [pc, #276]	@ (8006130 <netif_add+0x188>)
 800601a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6a3a      	ldr	r2, [r7, #32]
 8006034:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006036:	4b3f      	ldr	r3, [pc, #252]	@ (8006134 <netif_add+0x18c>)
 8006038:	781a      	ldrb	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006044:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	68b9      	ldr	r1, [r7, #8]
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 f913 	bl	8006278 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	4798      	blx	r3
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <netif_add+0xba>
    return NULL;
 800605e:	2300      	movs	r3, #0
 8006060:	e058      	b.n	8006114 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006068:	2bff      	cmp	r3, #255	@ 0xff
 800606a:	d103      	bne.n	8006074 <netif_add+0xcc>
        netif->num = 0;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8006074:	2300      	movs	r3, #0
 8006076:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006078:	4b2f      	ldr	r3, [pc, #188]	@ (8006138 <netif_add+0x190>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	617b      	str	r3, [r7, #20]
 800607e:	e02b      	b.n	80060d8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	429a      	cmp	r2, r3
 8006086:	d106      	bne.n	8006096 <netif_add+0xee>
 8006088:	4b24      	ldr	r3, [pc, #144]	@ (800611c <netif_add+0x174>)
 800608a:	f240 128b 	movw	r2, #395	@ 0x18b
 800608e:	492b      	ldr	r1, [pc, #172]	@ (800613c <netif_add+0x194>)
 8006090:	4824      	ldr	r0, [pc, #144]	@ (8006124 <netif_add+0x17c>)
 8006092:	f009 f87d 	bl	800f190 <iprintf>
        num_netifs++;
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	3301      	adds	r3, #1
 800609a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	2bff      	cmp	r3, #255	@ 0xff
 80060a0:	dd06      	ble.n	80060b0 <netif_add+0x108>
 80060a2:	4b1e      	ldr	r3, [pc, #120]	@ (800611c <netif_add+0x174>)
 80060a4:	f240 128d 	movw	r2, #397	@ 0x18d
 80060a8:	4925      	ldr	r1, [pc, #148]	@ (8006140 <netif_add+0x198>)
 80060aa:	481e      	ldr	r0, [pc, #120]	@ (8006124 <netif_add+0x17c>)
 80060ac:	f009 f870 	bl	800f190 <iprintf>
        if (netif2->num == netif->num) {
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80060bc:	429a      	cmp	r2, r3
 80060be:	d108      	bne.n	80060d2 <netif_add+0x12a>
          netif->num++;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80060c6:	3301      	adds	r3, #1
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 80060d0:	e005      	b.n	80060de <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	617b      	str	r3, [r7, #20]
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1d0      	bne.n	8006080 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1be      	bne.n	8006062 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80060ea:	2bfe      	cmp	r3, #254	@ 0xfe
 80060ec:	d103      	bne.n	80060f6 <netif_add+0x14e>
    netif_num = 0;
 80060ee:	4b11      	ldr	r3, [pc, #68]	@ (8006134 <netif_add+0x18c>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	701a      	strb	r2, [r3, #0]
 80060f4:	e006      	b.n	8006104 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80060fc:	3301      	adds	r3, #1
 80060fe:	b2da      	uxtb	r2, r3
 8006100:	4b0c      	ldr	r3, [pc, #48]	@ (8006134 <netif_add+0x18c>)
 8006102:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006104:	4b0c      	ldr	r3, [pc, #48]	@ (8006138 <netif_add+0x190>)
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800610c:	4a0a      	ldr	r2, [pc, #40]	@ (8006138 <netif_add+0x190>)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8006112:	68fb      	ldr	r3, [r7, #12]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3718      	adds	r7, #24
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	08010354 	.word	0x08010354
 8006120:	080103e8 	.word	0x080103e8
 8006124:	080103a4 	.word	0x080103a4
 8006128:	08010404 	.word	0x08010404
 800612c:	08012a8c 	.word	0x08012a8c
 8006130:	08006553 	.word	0x08006553
 8006134:	20007c70 	.word	0x20007c70
 8006138:	20007c68 	.word	0x20007c68
 800613c:	08010428 	.word	0x08010428
 8006140:	0801043c 	.word	0x0801043c

08006144 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800614e:	6839      	ldr	r1, [r7, #0]
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f002 fb45 	bl	80087e0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8006156:	6839      	ldr	r1, [r7, #0]
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f006 fc23 	bl	800c9a4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800615e:	bf00      	nop
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
	...

08006168 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d106      	bne.n	8006188 <netif_do_set_ipaddr+0x20>
 800617a:	4b1d      	ldr	r3, [pc, #116]	@ (80061f0 <netif_do_set_ipaddr+0x88>)
 800617c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8006180:	491c      	ldr	r1, [pc, #112]	@ (80061f4 <netif_do_set_ipaddr+0x8c>)
 8006182:	481d      	ldr	r0, [pc, #116]	@ (80061f8 <netif_do_set_ipaddr+0x90>)
 8006184:	f009 f804 	bl	800f190 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d106      	bne.n	800619c <netif_do_set_ipaddr+0x34>
 800618e:	4b18      	ldr	r3, [pc, #96]	@ (80061f0 <netif_do_set_ipaddr+0x88>)
 8006190:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8006194:	4917      	ldr	r1, [pc, #92]	@ (80061f4 <netif_do_set_ipaddr+0x8c>)
 8006196:	4818      	ldr	r0, [pc, #96]	@ (80061f8 <netif_do_set_ipaddr+0x90>)
 8006198:	f008 fffa 	bl	800f190 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	3304      	adds	r3, #4
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d01c      	beq.n	80061e4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	3304      	adds	r3, #4
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80061ba:	f107 0314 	add.w	r3, r7, #20
 80061be:	4619      	mov	r1, r3
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7ff ffbf 	bl	8006144 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d002      	beq.n	80061d2 <netif_do_set_ipaddr+0x6a>
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	e000      	b.n	80061d4 <netif_do_set_ipaddr+0x6c>
 80061d2:	2300      	movs	r3, #0
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80061d8:	2101      	movs	r1, #1
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f000 f8d2 	bl	8006384 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80061e0:	2301      	movs	r3, #1
 80061e2:	e000      	b.n	80061e6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3718      	adds	r7, #24
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	08010354 	.word	0x08010354
 80061f4:	0801046c 	.word	0x0801046c
 80061f8:	080103a4 	.word	0x080103a4

080061fc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	3308      	adds	r3, #8
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	429a      	cmp	r2, r3
 8006214:	d00a      	beq.n	800622c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d002      	beq.n	8006222 <netif_do_set_netmask+0x26>
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	e000      	b.n	8006224 <netif_do_set_netmask+0x28>
 8006222:	2300      	movs	r3, #0
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006228:	2301      	movs	r3, #1
 800622a:	e000      	b.n	800622e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800623a:	b480      	push	{r7}
 800623c:	b085      	sub	sp, #20
 800623e:	af00      	add	r7, sp, #0
 8006240:	60f8      	str	r0, [r7, #12]
 8006242:	60b9      	str	r1, [r7, #8]
 8006244:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	330c      	adds	r3, #12
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	429a      	cmp	r2, r3
 8006252:	d00a      	beq.n	800626a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d002      	beq.n	8006260 <netif_do_set_gw+0x26>
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	e000      	b.n	8006262 <netif_do_set_gw+0x28>
 8006260:	2300      	movs	r3, #0
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8006266:	2301      	movs	r3, #1
 8006268:	e000      	b.n	800626c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b088      	sub	sp, #32
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
 8006284:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8006286:	2300      	movs	r3, #0
 8006288:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800628a:	2300      	movs	r3, #0
 800628c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006294:	4b1c      	ldr	r3, [pc, #112]	@ (8006308 <netif_set_addr+0x90>)
 8006296:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800629e:	4b1a      	ldr	r3, [pc, #104]	@ (8006308 <netif_set_addr+0x90>)
 80062a0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d101      	bne.n	80062ac <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80062a8:	4b17      	ldr	r3, [pc, #92]	@ (8006308 <netif_set_addr+0x90>)
 80062aa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <netif_set_addr+0x42>
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <netif_set_addr+0x46>
 80062ba:	2301      	movs	r3, #1
 80062bc:	e000      	b.n	80062c0 <netif_set_addr+0x48>
 80062be:	2300      	movs	r3, #0
 80062c0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d006      	beq.n	80062d6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80062c8:	f107 0310 	add.w	r3, r7, #16
 80062cc:	461a      	mov	r2, r3
 80062ce:	68b9      	ldr	r1, [r7, #8]
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f7ff ff49 	bl	8006168 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80062d6:	69fa      	ldr	r2, [r7, #28]
 80062d8:	6879      	ldr	r1, [r7, #4]
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f7ff ff8e 	bl	80061fc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	6839      	ldr	r1, [r7, #0]
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f7ff ffa8 	bl	800623a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d106      	bne.n	80062fe <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80062f0:	f107 0310 	add.w	r3, r7, #16
 80062f4:	461a      	mov	r2, r3
 80062f6:	68b9      	ldr	r1, [r7, #8]
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f7ff ff35 	bl	8006168 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80062fe:	bf00      	nop
 8006300:	3720      	adds	r7, #32
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	08012a8c 	.word	0x08012a8c

0800630c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006314:	4a04      	ldr	r2, [pc, #16]	@ (8006328 <netif_set_default+0x1c>)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800631a:	bf00      	nop
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	20007c6c 	.word	0x20007c6c

0800632c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d107      	bne.n	800634a <netif_set_up+0x1e>
 800633a:	4b0f      	ldr	r3, [pc, #60]	@ (8006378 <netif_set_up+0x4c>)
 800633c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8006340:	490e      	ldr	r1, [pc, #56]	@ (800637c <netif_set_up+0x50>)
 8006342:	480f      	ldr	r0, [pc, #60]	@ (8006380 <netif_set_up+0x54>)
 8006344:	f008 ff24 	bl	800f190 <iprintf>
 8006348:	e013      	b.n	8006372 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10c      	bne.n	8006372 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800635e:	f043 0301 	orr.w	r3, r3, #1
 8006362:	b2da      	uxtb	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800636a:	2103      	movs	r1, #3
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 f809 	bl	8006384 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	08010354 	.word	0x08010354
 800637c:	080104dc 	.word	0x080104dc
 8006380:	080103a4 	.word	0x080103a4

08006384 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	460b      	mov	r3, r1
 800638e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d106      	bne.n	80063a4 <netif_issue_reports+0x20>
 8006396:	4b18      	ldr	r3, [pc, #96]	@ (80063f8 <netif_issue_reports+0x74>)
 8006398:	f240 326d 	movw	r2, #877	@ 0x36d
 800639c:	4917      	ldr	r1, [pc, #92]	@ (80063fc <netif_issue_reports+0x78>)
 800639e:	4818      	ldr	r0, [pc, #96]	@ (8006400 <netif_issue_reports+0x7c>)
 80063a0:	f008 fef6 	bl	800f190 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80063aa:	f003 0304 	and.w	r3, r3, #4
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d01e      	beq.n	80063f0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80063b8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d017      	beq.n	80063f0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80063c0:	78fb      	ldrb	r3, [r7, #3]
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d013      	beq.n	80063f2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	3304      	adds	r3, #4
 80063ce:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00e      	beq.n	80063f2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80063da:	f003 0308 	and.w	r3, r3, #8
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d007      	beq.n	80063f2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	3304      	adds	r3, #4
 80063e6:	4619      	mov	r1, r3
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f007 fa45 	bl	800d878 <etharp_request>
 80063ee:	e000      	b.n	80063f2 <netif_issue_reports+0x6e>
    return;
 80063f0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	08010354 	.word	0x08010354
 80063fc:	080104f8 	.word	0x080104f8
 8006400:	080103a4 	.word	0x080103a4

08006404 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d107      	bne.n	8006422 <netif_set_down+0x1e>
 8006412:	4b12      	ldr	r3, [pc, #72]	@ (800645c <netif_set_down+0x58>)
 8006414:	f240 329b 	movw	r2, #923	@ 0x39b
 8006418:	4911      	ldr	r1, [pc, #68]	@ (8006460 <netif_set_down+0x5c>)
 800641a:	4812      	ldr	r0, [pc, #72]	@ (8006464 <netif_set_down+0x60>)
 800641c:	f008 feb8 	bl	800f190 <iprintf>
 8006420:	e019      	b.n	8006456 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	2b00      	cmp	r3, #0
 800642e:	d012      	beq.n	8006456 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006436:	f023 0301 	bic.w	r3, r3, #1
 800643a:	b2da      	uxtb	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006448:	f003 0308 	and.w	r3, r3, #8
 800644c:	2b00      	cmp	r3, #0
 800644e:	d002      	beq.n	8006456 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f006 fdcf 	bl	800cff4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8006456:	3708      	adds	r7, #8
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	08010354 	.word	0x08010354
 8006460:	0801051c 	.word	0x0801051c
 8006464:	080103a4 	.word	0x080103a4

08006468 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d107      	bne.n	8006486 <netif_set_link_up+0x1e>
 8006476:	4b13      	ldr	r3, [pc, #76]	@ (80064c4 <netif_set_link_up+0x5c>)
 8006478:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800647c:	4912      	ldr	r1, [pc, #72]	@ (80064c8 <netif_set_link_up+0x60>)
 800647e:	4813      	ldr	r0, [pc, #76]	@ (80064cc <netif_set_link_up+0x64>)
 8006480:	f008 fe86 	bl	800f190 <iprintf>
 8006484:	e01b      	b.n	80064be <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800648c:	f003 0304 	and.w	r3, r3, #4
 8006490:	2b00      	cmp	r3, #0
 8006492:	d114      	bne.n	80064be <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800649a:	f043 0304 	orr.w	r3, r3, #4
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80064a6:	2103      	movs	r1, #3
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7ff ff6b 	bl	8006384 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <netif_set_link_up+0x56>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	69db      	ldr	r3, [r3, #28]
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	08010354 	.word	0x08010354
 80064c8:	0801053c 	.word	0x0801053c
 80064cc:	080103a4 	.word	0x080103a4

080064d0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d107      	bne.n	80064ee <netif_set_link_down+0x1e>
 80064de:	4b11      	ldr	r3, [pc, #68]	@ (8006524 <netif_set_link_down+0x54>)
 80064e0:	f240 4206 	movw	r2, #1030	@ 0x406
 80064e4:	4910      	ldr	r1, [pc, #64]	@ (8006528 <netif_set_link_down+0x58>)
 80064e6:	4811      	ldr	r0, [pc, #68]	@ (800652c <netif_set_link_down+0x5c>)
 80064e8:	f008 fe52 	bl	800f190 <iprintf>
 80064ec:	e017      	b.n	800651e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d010      	beq.n	800651e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006502:	f023 0304 	bic.w	r3, r3, #4
 8006506:	b2da      	uxtb	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <netif_set_link_down+0x4e>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	08010354 	.word	0x08010354
 8006528:	08010560 	.word	0x08010560
 800652c:	080103a4 	.word	0x080103a4

08006530 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d002      	beq.n	8006546 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	61da      	str	r2, [r3, #28]
  }
}
 8006546:	bf00      	nop
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8006552:	b480      	push	{r7}
 8006554:	b085      	sub	sp, #20
 8006556:	af00      	add	r7, sp, #0
 8006558:	60f8      	str	r0, [r7, #12]
 800655a:	60b9      	str	r1, [r7, #8]
 800655c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800655e:	f06f 030b 	mvn.w	r3, #11
}
 8006562:	4618      	mov	r0, r3
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
	...

08006570 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	4603      	mov	r3, r0
 8006578:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800657a:	79fb      	ldrb	r3, [r7, #7]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d013      	beq.n	80065a8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006580:	4b0d      	ldr	r3, [pc, #52]	@ (80065b8 <netif_get_by_index+0x48>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	60fb      	str	r3, [r7, #12]
 8006586:	e00c      	b.n	80065a2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800658e:	3301      	adds	r3, #1
 8006590:	b2db      	uxtb	r3, r3
 8006592:	79fa      	ldrb	r2, [r7, #7]
 8006594:	429a      	cmp	r2, r3
 8006596:	d101      	bne.n	800659c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	e006      	b.n	80065aa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60fb      	str	r3, [r7, #12]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1ef      	bne.n	8006588 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	20007c68 	.word	0x20007c68

080065bc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80065c2:	4b0c      	ldr	r3, [pc, #48]	@ (80065f4 <pbuf_free_ooseq+0x38>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80065c8:	4b0b      	ldr	r3, [pc, #44]	@ (80065f8 <pbuf_free_ooseq+0x3c>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	607b      	str	r3, [r7, #4]
 80065ce:	e00a      	b.n	80065e6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d003      	beq.n	80065e0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f002 f93f 	bl	800885c <tcp_free_ooseq>
      return;
 80065de:	e005      	b.n	80065ec <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	607b      	str	r3, [r7, #4]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1f1      	bne.n	80065d0 <pbuf_free_ooseq+0x14>
    }
  }
}
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	20007c71 	.word	0x20007c71
 80065f8:	20007c80 	.word	0x20007c80

080065fc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80065fc:	b480      	push	{r7}
 80065fe:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8006600:	4b03      	ldr	r3, [pc, #12]	@ (8006610 <pbuf_pool_is_empty+0x14>)
 8006602:	2201      	movs	r2, #1
 8006604:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8006606:	bf00      	nop
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	20007c71 	.word	0x20007c71

08006614 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	4611      	mov	r1, r2
 8006620:	461a      	mov	r2, r3
 8006622:	460b      	mov	r3, r1
 8006624:	80fb      	strh	r3, [r7, #6]
 8006626:	4613      	mov	r3, r2
 8006628:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	88fa      	ldrh	r2, [r7, #6]
 800663a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	88ba      	ldrh	r2, [r7, #4]
 8006640:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8006642:	8b3b      	ldrh	r3, [r7, #24]
 8006644:	b2da      	uxtb	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	7f3a      	ldrb	r2, [r7, #28]
 800664e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2201      	movs	r2, #1
 8006654:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	73da      	strb	r2, [r3, #15]
}
 800665c:	bf00      	nop
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08c      	sub	sp, #48	@ 0x30
 800666c:	af02      	add	r7, sp, #8
 800666e:	4603      	mov	r3, r0
 8006670:	71fb      	strb	r3, [r7, #7]
 8006672:	460b      	mov	r3, r1
 8006674:	80bb      	strh	r3, [r7, #4]
 8006676:	4613      	mov	r3, r2
 8006678:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800667a:	79fb      	ldrb	r3, [r7, #7]
 800667c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800667e:	887b      	ldrh	r3, [r7, #2]
 8006680:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8006684:	d07f      	beq.n	8006786 <pbuf_alloc+0x11e>
 8006686:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800668a:	f300 80c8 	bgt.w	800681e <pbuf_alloc+0x1b6>
 800668e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8006692:	d010      	beq.n	80066b6 <pbuf_alloc+0x4e>
 8006694:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8006698:	f300 80c1 	bgt.w	800681e <pbuf_alloc+0x1b6>
 800669c:	2b01      	cmp	r3, #1
 800669e:	d002      	beq.n	80066a6 <pbuf_alloc+0x3e>
 80066a0:	2b41      	cmp	r3, #65	@ 0x41
 80066a2:	f040 80bc 	bne.w	800681e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80066a6:	887a      	ldrh	r2, [r7, #2]
 80066a8:	88bb      	ldrh	r3, [r7, #4]
 80066aa:	4619      	mov	r1, r3
 80066ac:	2000      	movs	r0, #0
 80066ae:	f000 f8d1 	bl	8006854 <pbuf_alloc_reference>
 80066b2:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 80066b4:	e0bd      	b.n	8006832 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80066b6:	2300      	movs	r3, #0
 80066b8:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80066be:	88bb      	ldrh	r3, [r7, #4]
 80066c0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80066c2:	2008      	movs	r0, #8
 80066c4:	f7ff fbce 	bl	8005e64 <memp_malloc>
 80066c8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d109      	bne.n	80066e4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80066d0:	f7ff ff94 	bl	80065fc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80066d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d002      	beq.n	80066e0 <pbuf_alloc+0x78>
            pbuf_free(p);
 80066da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80066dc:	f000 faa8 	bl	8006c30 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80066e0:	2300      	movs	r3, #0
 80066e2:	e0a7      	b.n	8006834 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80066e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80066e6:	3303      	adds	r3, #3
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	f023 0303 	bic.w	r3, r3, #3
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	8b7a      	ldrh	r2, [r7, #26]
 80066f8:	4293      	cmp	r3, r2
 80066fa:	bf28      	it	cs
 80066fc:	4613      	movcs	r3, r2
 80066fe:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8006700:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006702:	3310      	adds	r3, #16
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	4413      	add	r3, r2
 8006708:	3303      	adds	r3, #3
 800670a:	f023 0303 	bic.w	r3, r3, #3
 800670e:	4618      	mov	r0, r3
 8006710:	89f9      	ldrh	r1, [r7, #14]
 8006712:	8b7a      	ldrh	r2, [r7, #26]
 8006714:	2300      	movs	r3, #0
 8006716:	9301      	str	r3, [sp, #4]
 8006718:	887b      	ldrh	r3, [r7, #2]
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	460b      	mov	r3, r1
 800671e:	4601      	mov	r1, r0
 8006720:	6938      	ldr	r0, [r7, #16]
 8006722:	f7ff ff77 	bl	8006614 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f003 0303 	and.w	r3, r3, #3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d006      	beq.n	8006740 <pbuf_alloc+0xd8>
 8006732:	4b42      	ldr	r3, [pc, #264]	@ (800683c <pbuf_alloc+0x1d4>)
 8006734:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006738:	4941      	ldr	r1, [pc, #260]	@ (8006840 <pbuf_alloc+0x1d8>)
 800673a:	4842      	ldr	r0, [pc, #264]	@ (8006844 <pbuf_alloc+0x1dc>)
 800673c:	f008 fd28 	bl	800f190 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006740:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006742:	3303      	adds	r3, #3
 8006744:	f023 0303 	bic.w	r3, r3, #3
 8006748:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800674c:	d106      	bne.n	800675c <pbuf_alloc+0xf4>
 800674e:	4b3b      	ldr	r3, [pc, #236]	@ (800683c <pbuf_alloc+0x1d4>)
 8006750:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8006754:	493c      	ldr	r1, [pc, #240]	@ (8006848 <pbuf_alloc+0x1e0>)
 8006756:	483b      	ldr	r0, [pc, #236]	@ (8006844 <pbuf_alloc+0x1dc>)
 8006758:	f008 fd1a 	bl	800f190 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800675c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675e:	2b00      	cmp	r3, #0
 8006760:	d102      	bne.n	8006768 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	627b      	str	r3, [r7, #36]	@ 0x24
 8006766:	e002      	b.n	800676e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8006772:	8b7a      	ldrh	r2, [r7, #26]
 8006774:	89fb      	ldrh	r3, [r7, #14]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800677a:	2300      	movs	r3, #0
 800677c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800677e:	8b7b      	ldrh	r3, [r7, #26]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d19e      	bne.n	80066c2 <pbuf_alloc+0x5a>
      break;
 8006784:	e055      	b.n	8006832 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006786:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006788:	3303      	adds	r3, #3
 800678a:	b29b      	uxth	r3, r3
 800678c:	f023 0303 	bic.w	r3, r3, #3
 8006790:	b29a      	uxth	r2, r3
 8006792:	88bb      	ldrh	r3, [r7, #4]
 8006794:	3303      	adds	r3, #3
 8006796:	b29b      	uxth	r3, r3
 8006798:	f023 0303 	bic.w	r3, r3, #3
 800679c:	b29b      	uxth	r3, r3
 800679e:	4413      	add	r3, r2
 80067a0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80067a2:	8b3b      	ldrh	r3, [r7, #24]
 80067a4:	3310      	adds	r3, #16
 80067a6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80067a8:	8b3a      	ldrh	r2, [r7, #24]
 80067aa:	88bb      	ldrh	r3, [r7, #4]
 80067ac:	3303      	adds	r3, #3
 80067ae:	f023 0303 	bic.w	r3, r3, #3
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d306      	bcc.n	80067c4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80067b6:	8afa      	ldrh	r2, [r7, #22]
 80067b8:	88bb      	ldrh	r3, [r7, #4]
 80067ba:	3303      	adds	r3, #3
 80067bc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d201      	bcs.n	80067c8 <pbuf_alloc+0x160>
        return NULL;
 80067c4:	2300      	movs	r3, #0
 80067c6:	e035      	b.n	8006834 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80067c8:	8afb      	ldrh	r3, [r7, #22]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff f9ba 	bl	8005b44 <mem_malloc>
 80067d0:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 80067d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <pbuf_alloc+0x174>
        return NULL;
 80067d8:	2300      	movs	r3, #0
 80067da:	e02b      	b.n	8006834 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80067dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80067de:	3310      	adds	r3, #16
 80067e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067e2:	4413      	add	r3, r2
 80067e4:	3303      	adds	r3, #3
 80067e6:	f023 0303 	bic.w	r3, r3, #3
 80067ea:	4618      	mov	r0, r3
 80067ec:	88b9      	ldrh	r1, [r7, #4]
 80067ee:	88ba      	ldrh	r2, [r7, #4]
 80067f0:	2300      	movs	r3, #0
 80067f2:	9301      	str	r3, [sp, #4]
 80067f4:	887b      	ldrh	r3, [r7, #2]
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	460b      	mov	r3, r1
 80067fa:	4601      	mov	r1, r0
 80067fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80067fe:	f7ff ff09 	bl	8006614 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f003 0303 	and.w	r3, r3, #3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d010      	beq.n	8006830 <pbuf_alloc+0x1c8>
 800680e:	4b0b      	ldr	r3, [pc, #44]	@ (800683c <pbuf_alloc+0x1d4>)
 8006810:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8006814:	490d      	ldr	r1, [pc, #52]	@ (800684c <pbuf_alloc+0x1e4>)
 8006816:	480b      	ldr	r0, [pc, #44]	@ (8006844 <pbuf_alloc+0x1dc>)
 8006818:	f008 fcba 	bl	800f190 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800681c:	e008      	b.n	8006830 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800681e:	4b07      	ldr	r3, [pc, #28]	@ (800683c <pbuf_alloc+0x1d4>)
 8006820:	f240 1227 	movw	r2, #295	@ 0x127
 8006824:	490a      	ldr	r1, [pc, #40]	@ (8006850 <pbuf_alloc+0x1e8>)
 8006826:	4807      	ldr	r0, [pc, #28]	@ (8006844 <pbuf_alloc+0x1dc>)
 8006828:	f008 fcb2 	bl	800f190 <iprintf>
      return NULL;
 800682c:	2300      	movs	r3, #0
 800682e:	e001      	b.n	8006834 <pbuf_alloc+0x1cc>
      break;
 8006830:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8006832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006834:	4618      	mov	r0, r3
 8006836:	3728      	adds	r7, #40	@ 0x28
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	08010584 	.word	0x08010584
 8006840:	080105b4 	.word	0x080105b4
 8006844:	080105e4 	.word	0x080105e4
 8006848:	0801060c 	.word	0x0801060c
 800684c:	08010640 	.word	0x08010640
 8006850:	0801066c 	.word	0x0801066c

08006854 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af02      	add	r7, sp, #8
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	460b      	mov	r3, r1
 800685e:	807b      	strh	r3, [r7, #2]
 8006860:	4613      	mov	r3, r2
 8006862:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006864:	883b      	ldrh	r3, [r7, #0]
 8006866:	2b41      	cmp	r3, #65	@ 0x41
 8006868:	d009      	beq.n	800687e <pbuf_alloc_reference+0x2a>
 800686a:	883b      	ldrh	r3, [r7, #0]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d006      	beq.n	800687e <pbuf_alloc_reference+0x2a>
 8006870:	4b0f      	ldr	r3, [pc, #60]	@ (80068b0 <pbuf_alloc_reference+0x5c>)
 8006872:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8006876:	490f      	ldr	r1, [pc, #60]	@ (80068b4 <pbuf_alloc_reference+0x60>)
 8006878:	480f      	ldr	r0, [pc, #60]	@ (80068b8 <pbuf_alloc_reference+0x64>)
 800687a:	f008 fc89 	bl	800f190 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800687e:	2007      	movs	r0, #7
 8006880:	f7ff faf0 	bl	8005e64 <memp_malloc>
 8006884:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d101      	bne.n	8006890 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800688c:	2300      	movs	r3, #0
 800688e:	e00b      	b.n	80068a8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006890:	8879      	ldrh	r1, [r7, #2]
 8006892:	887a      	ldrh	r2, [r7, #2]
 8006894:	2300      	movs	r3, #0
 8006896:	9301      	str	r3, [sp, #4]
 8006898:	883b      	ldrh	r3, [r7, #0]
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	460b      	mov	r3, r1
 800689e:	6879      	ldr	r1, [r7, #4]
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f7ff feb7 	bl	8006614 <pbuf_init_alloced_pbuf>
  return p;
 80068a6:	68fb      	ldr	r3, [r7, #12]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	08010584 	.word	0x08010584
 80068b4:	08010688 	.word	0x08010688
 80068b8:	080105e4 	.word	0x080105e4

080068bc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b088      	sub	sp, #32
 80068c0:	af02      	add	r7, sp, #8
 80068c2:	607b      	str	r3, [r7, #4]
 80068c4:	4603      	mov	r3, r0
 80068c6:	73fb      	strb	r3, [r7, #15]
 80068c8:	460b      	mov	r3, r1
 80068ca:	81bb      	strh	r3, [r7, #12]
 80068cc:	4613      	mov	r3, r2
 80068ce:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
 80068d2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80068d4:	8a7b      	ldrh	r3, [r7, #18]
 80068d6:	3303      	adds	r3, #3
 80068d8:	f023 0203 	bic.w	r2, r3, #3
 80068dc:	89bb      	ldrh	r3, [r7, #12]
 80068de:	441a      	add	r2, r3
 80068e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d901      	bls.n	80068ea <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80068e6:	2300      	movs	r3, #0
 80068e8:	e018      	b.n	800691c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d007      	beq.n	8006900 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80068f0:	8a7b      	ldrh	r3, [r7, #18]
 80068f2:	3303      	adds	r3, #3
 80068f4:	f023 0303 	bic.w	r3, r3, #3
 80068f8:	6a3a      	ldr	r2, [r7, #32]
 80068fa:	4413      	add	r3, r2
 80068fc:	617b      	str	r3, [r7, #20]
 80068fe:	e001      	b.n	8006904 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006900:	2300      	movs	r3, #0
 8006902:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	89b9      	ldrh	r1, [r7, #12]
 8006908:	89ba      	ldrh	r2, [r7, #12]
 800690a:	2302      	movs	r3, #2
 800690c:	9301      	str	r3, [sp, #4]
 800690e:	897b      	ldrh	r3, [r7, #10]
 8006910:	9300      	str	r3, [sp, #0]
 8006912:	460b      	mov	r3, r1
 8006914:	6979      	ldr	r1, [r7, #20]
 8006916:	f7ff fe7d 	bl	8006614 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800691a:	687b      	ldr	r3, [r7, #4]
}
 800691c:	4618      	mov	r0, r3
 800691e:	3718      	adds	r7, #24
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	460b      	mov	r3, r1
 800692e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d106      	bne.n	8006944 <pbuf_realloc+0x20>
 8006936:	4b3a      	ldr	r3, [pc, #232]	@ (8006a20 <pbuf_realloc+0xfc>)
 8006938:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800693c:	4939      	ldr	r1, [pc, #228]	@ (8006a24 <pbuf_realloc+0x100>)
 800693e:	483a      	ldr	r0, [pc, #232]	@ (8006a28 <pbuf_realloc+0x104>)
 8006940:	f008 fc26 	bl	800f190 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	891b      	ldrh	r3, [r3, #8]
 8006948:	887a      	ldrh	r2, [r7, #2]
 800694a:	429a      	cmp	r2, r3
 800694c:	d263      	bcs.n	8006a16 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	891a      	ldrh	r2, [r3, #8]
 8006952:	887b      	ldrh	r3, [r7, #2]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006958:	887b      	ldrh	r3, [r7, #2]
 800695a:	817b      	strh	r3, [r7, #10]
  q = p;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006960:	e018      	b.n	8006994 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	895b      	ldrh	r3, [r3, #10]
 8006966:	897a      	ldrh	r2, [r7, #10]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	891a      	ldrh	r2, [r3, #8]
 8006970:	893b      	ldrh	r3, [r7, #8]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	b29a      	uxth	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d106      	bne.n	8006994 <pbuf_realloc+0x70>
 8006986:	4b26      	ldr	r3, [pc, #152]	@ (8006a20 <pbuf_realloc+0xfc>)
 8006988:	f240 12af 	movw	r2, #431	@ 0x1af
 800698c:	4927      	ldr	r1, [pc, #156]	@ (8006a2c <pbuf_realloc+0x108>)
 800698e:	4826      	ldr	r0, [pc, #152]	@ (8006a28 <pbuf_realloc+0x104>)
 8006990:	f008 fbfe 	bl	800f190 <iprintf>
  while (rem_len > q->len) {
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	895b      	ldrh	r3, [r3, #10]
 8006998:	897a      	ldrh	r2, [r7, #10]
 800699a:	429a      	cmp	r2, r3
 800699c:	d8e1      	bhi.n	8006962 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	7b1b      	ldrb	r3, [r3, #12]
 80069a2:	f003 030f 	and.w	r3, r3, #15
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d121      	bne.n	80069ee <pbuf_realloc+0xca>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	895b      	ldrh	r3, [r3, #10]
 80069ae:	897a      	ldrh	r2, [r7, #10]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d01c      	beq.n	80069ee <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	7b5b      	ldrb	r3, [r3, #13]
 80069b8:	f003 0302 	and.w	r3, r3, #2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d116      	bne.n	80069ee <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	897b      	ldrh	r3, [r7, #10]
 80069cc:	4413      	add	r3, r2
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	4619      	mov	r1, r3
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f7fe ffba 	bl	800594c <mem_trim>
 80069d8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d106      	bne.n	80069ee <pbuf_realloc+0xca>
 80069e0:	4b0f      	ldr	r3, [pc, #60]	@ (8006a20 <pbuf_realloc+0xfc>)
 80069e2:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80069e6:	4912      	ldr	r1, [pc, #72]	@ (8006a30 <pbuf_realloc+0x10c>)
 80069e8:	480f      	ldr	r0, [pc, #60]	@ (8006a28 <pbuf_realloc+0x104>)
 80069ea:	f008 fbd1 	bl	800f190 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	897a      	ldrh	r2, [r7, #10]
 80069f2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	895a      	ldrh	r2, [r3, #10]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d004      	beq.n	8006a0e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f000 f911 	bl	8006c30 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	e000      	b.n	8006a18 <pbuf_realloc+0xf4>
    return;
 8006a16:	bf00      	nop

}
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	08010584 	.word	0x08010584
 8006a24:	0801069c 	.word	0x0801069c
 8006a28:	080105e4 	.word	0x080105e4
 8006a2c:	080106b4 	.word	0x080106b4
 8006a30:	080106cc 	.word	0x080106cc

08006a34 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d106      	bne.n	8006a56 <pbuf_add_header_impl+0x22>
 8006a48:	4b2b      	ldr	r3, [pc, #172]	@ (8006af8 <pbuf_add_header_impl+0xc4>)
 8006a4a:	f240 12df 	movw	r2, #479	@ 0x1df
 8006a4e:	492b      	ldr	r1, [pc, #172]	@ (8006afc <pbuf_add_header_impl+0xc8>)
 8006a50:	482b      	ldr	r0, [pc, #172]	@ (8006b00 <pbuf_add_header_impl+0xcc>)
 8006a52:	f008 fb9d 	bl	800f190 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d003      	beq.n	8006a64 <pbuf_add_header_impl+0x30>
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a62:	d301      	bcc.n	8006a68 <pbuf_add_header_impl+0x34>
    return 1;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e043      	b.n	8006af0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <pbuf_add_header_impl+0x3e>
    return 0;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	e03e      	b.n	8006af0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	891a      	ldrh	r2, [r3, #8]
 8006a7a:	8a7b      	ldrh	r3, [r7, #18]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	8a7a      	ldrh	r2, [r7, #18]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d901      	bls.n	8006a8a <pbuf_add_header_impl+0x56>
    return 1;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e032      	b.n	8006af0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	7b1b      	ldrb	r3, [r3, #12]
 8006a8e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006a90:	8a3b      	ldrh	r3, [r7, #16]
 8006a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00c      	beq.n	8006ab4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	425b      	negs	r3, r3
 8006aa2:	4413      	add	r3, r2
 8006aa4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	3310      	adds	r3, #16
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d20d      	bcs.n	8006acc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e01d      	b.n	8006af0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006ab4:	79fb      	ldrb	r3, [r7, #7]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d006      	beq.n	8006ac8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	685a      	ldr	r2, [r3, #4]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	425b      	negs	r3, r3
 8006ac2:	4413      	add	r3, r2
 8006ac4:	617b      	str	r3, [r7, #20]
 8006ac6:	e001      	b.n	8006acc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e011      	b.n	8006af0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	895a      	ldrh	r2, [r3, #10]
 8006ad6:	8a7b      	ldrh	r3, [r7, #18]
 8006ad8:	4413      	add	r3, r2
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	891a      	ldrh	r2, [r3, #8]
 8006ae4:	8a7b      	ldrh	r3, [r7, #18]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	811a      	strh	r2, [r3, #8]


  return 0;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3718      	adds	r7, #24
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	08010584 	.word	0x08010584
 8006afc:	080106e8 	.word	0x080106e8
 8006b00:	080105e4 	.word	0x080105e4

08006b04 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006b0e:	2200      	movs	r2, #0
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7ff ff8e 	bl	8006a34 <pbuf_add_header_impl>
 8006b18:	4603      	mov	r3, r0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
	...

08006b24 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d106      	bne.n	8006b42 <pbuf_remove_header+0x1e>
 8006b34:	4b20      	ldr	r3, [pc, #128]	@ (8006bb8 <pbuf_remove_header+0x94>)
 8006b36:	f240 224b 	movw	r2, #587	@ 0x24b
 8006b3a:	4920      	ldr	r1, [pc, #128]	@ (8006bbc <pbuf_remove_header+0x98>)
 8006b3c:	4820      	ldr	r0, [pc, #128]	@ (8006bc0 <pbuf_remove_header+0x9c>)
 8006b3e:	f008 fb27 	bl	800f190 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d003      	beq.n	8006b50 <pbuf_remove_header+0x2c>
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b4e:	d301      	bcc.n	8006b54 <pbuf_remove_header+0x30>
    return 1;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e02c      	b.n	8006bae <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <pbuf_remove_header+0x3a>
    return 0;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	e027      	b.n	8006bae <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	895b      	ldrh	r3, [r3, #10]
 8006b66:	89fa      	ldrh	r2, [r7, #14]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d908      	bls.n	8006b7e <pbuf_remove_header+0x5a>
 8006b6c:	4b12      	ldr	r3, [pc, #72]	@ (8006bb8 <pbuf_remove_header+0x94>)
 8006b6e:	f240 2255 	movw	r2, #597	@ 0x255
 8006b72:	4914      	ldr	r1, [pc, #80]	@ (8006bc4 <pbuf_remove_header+0xa0>)
 8006b74:	4812      	ldr	r0, [pc, #72]	@ (8006bc0 <pbuf_remove_header+0x9c>)
 8006b76:	f008 fb0b 	bl	800f190 <iprintf>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e017      	b.n	8006bae <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685a      	ldr	r2, [r3, #4]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	441a      	add	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	895a      	ldrh	r2, [r3, #10]
 8006b94:	89fb      	ldrh	r3, [r7, #14]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	891a      	ldrh	r2, [r3, #8]
 8006ba2:	89fb      	ldrh	r3, [r7, #14]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	08010584 	.word	0x08010584
 8006bbc:	080106e8 	.word	0x080106e8
 8006bc0:	080105e4 	.word	0x080105e4
 8006bc4:	080106f4 	.word	0x080106f4

08006bc8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	807b      	strh	r3, [r7, #2]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006bd8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	da08      	bge.n	8006bf2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006be0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006be4:	425b      	negs	r3, r3
 8006be6:	4619      	mov	r1, r3
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f7ff ff9b 	bl	8006b24 <pbuf_remove_header>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	e007      	b.n	8006c02 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006bf2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006bf6:	787a      	ldrb	r2, [r7, #1]
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7ff ff1a 	bl	8006a34 <pbuf_add_header_impl>
 8006c00:	4603      	mov	r3, r0
  }
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b082      	sub	sp, #8
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	460b      	mov	r3, r1
 8006c14:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006c16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f7ff ffd2 	bl	8006bc8 <pbuf_header_impl>
 8006c24:	4603      	mov	r3, r0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3708      	adds	r7, #8
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
	...

08006c30 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10b      	bne.n	8006c56 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d106      	bne.n	8006c52 <pbuf_free+0x22>
 8006c44:	4b38      	ldr	r3, [pc, #224]	@ (8006d28 <pbuf_free+0xf8>)
 8006c46:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8006c4a:	4938      	ldr	r1, [pc, #224]	@ (8006d2c <pbuf_free+0xfc>)
 8006c4c:	4838      	ldr	r0, [pc, #224]	@ (8006d30 <pbuf_free+0x100>)
 8006c4e:	f008 fa9f 	bl	800f190 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	e063      	b.n	8006d1e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006c56:	2300      	movs	r3, #0
 8006c58:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006c5a:	e05c      	b.n	8006d16 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	7b9b      	ldrb	r3, [r3, #14]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d106      	bne.n	8006c72 <pbuf_free+0x42>
 8006c64:	4b30      	ldr	r3, [pc, #192]	@ (8006d28 <pbuf_free+0xf8>)
 8006c66:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8006c6a:	4932      	ldr	r1, [pc, #200]	@ (8006d34 <pbuf_free+0x104>)
 8006c6c:	4830      	ldr	r0, [pc, #192]	@ (8006d30 <pbuf_free+0x100>)
 8006c6e:	f008 fa8f 	bl	800f190 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	7b9b      	ldrb	r3, [r3, #14]
 8006c76:	3b01      	subs	r3, #1
 8006c78:	b2da      	uxtb	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	739a      	strb	r2, [r3, #14]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	7b9b      	ldrb	r3, [r3, #14]
 8006c82:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006c84:	7dbb      	ldrb	r3, [r7, #22]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d143      	bne.n	8006d12 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	7b1b      	ldrb	r3, [r3, #12]
 8006c94:	f003 030f 	and.w	r3, r3, #15
 8006c98:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	7b5b      	ldrb	r3, [r3, #13]
 8006c9e:	f003 0302 	and.w	r3, r3, #2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d011      	beq.n	8006cca <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d106      	bne.n	8006cc0 <pbuf_free+0x90>
 8006cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8006d28 <pbuf_free+0xf8>)
 8006cb4:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8006cb8:	491f      	ldr	r1, [pc, #124]	@ (8006d38 <pbuf_free+0x108>)
 8006cba:	481d      	ldr	r0, [pc, #116]	@ (8006d30 <pbuf_free+0x100>)
 8006cbc:	f008 fa68 	bl	800f190 <iprintf>
        pc->custom_free_function(p);
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	4798      	blx	r3
 8006cc8:	e01d      	b.n	8006d06 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006cca:	7bfb      	ldrb	r3, [r7, #15]
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d104      	bne.n	8006cda <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006cd0:	6879      	ldr	r1, [r7, #4]
 8006cd2:	2008      	movs	r0, #8
 8006cd4:	f7ff f936 	bl	8005f44 <memp_free>
 8006cd8:	e015      	b.n	8006d06 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006cda:	7bfb      	ldrb	r3, [r7, #15]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d104      	bne.n	8006cea <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006ce0:	6879      	ldr	r1, [r7, #4]
 8006ce2:	2007      	movs	r0, #7
 8006ce4:	f7ff f92e 	bl	8005f44 <memp_free>
 8006ce8:	e00d      	b.n	8006d06 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006cea:	7bfb      	ldrb	r3, [r7, #15]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d103      	bne.n	8006cf8 <pbuf_free+0xc8>
          mem_free(p);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f7fe fdc1 	bl	8005878 <mem_free>
 8006cf6:	e006      	b.n	8006d06 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8006d28 <pbuf_free+0xf8>)
 8006cfa:	f240 320f 	movw	r2, #783	@ 0x30f
 8006cfe:	490f      	ldr	r1, [pc, #60]	@ (8006d3c <pbuf_free+0x10c>)
 8006d00:	480b      	ldr	r0, [pc, #44]	@ (8006d30 <pbuf_free+0x100>)
 8006d02:	f008 fa45 	bl	800f190 <iprintf>
        }
      }
      count++;
 8006d06:	7dfb      	ldrb	r3, [r7, #23]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	607b      	str	r3, [r7, #4]
 8006d10:	e001      	b.n	8006d16 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006d12:	2300      	movs	r3, #0
 8006d14:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d19f      	bne.n	8006c5c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3718      	adds	r7, #24
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	08010584 	.word	0x08010584
 8006d2c:	080106e8 	.word	0x080106e8
 8006d30:	080105e4 	.word	0x080105e4
 8006d34:	08010714 	.word	0x08010714
 8006d38:	0801072c 	.word	0x0801072c
 8006d3c:	08010750 	.word	0x08010750

08006d40 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006d4c:	e005      	b.n	8006d5a <pbuf_clen+0x1a>
    ++len;
 8006d4e:	89fb      	ldrh	r3, [r7, #14]
 8006d50:	3301      	adds	r3, #1
 8006d52:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1f6      	bne.n	8006d4e <pbuf_clen+0xe>
  }
  return len;
 8006d60:	89fb      	ldrh	r3, [r7, #14]
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
	...

08006d70 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d010      	beq.n	8006da0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	7b9b      	ldrb	r3, [r3, #14]
 8006d82:	3301      	adds	r3, #1
 8006d84:	b2da      	uxtb	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	7b9b      	ldrb	r3, [r3, #14]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d106      	bne.n	8006da0 <pbuf_ref+0x30>
 8006d92:	4b05      	ldr	r3, [pc, #20]	@ (8006da8 <pbuf_ref+0x38>)
 8006d94:	f240 3242 	movw	r2, #834	@ 0x342
 8006d98:	4904      	ldr	r1, [pc, #16]	@ (8006dac <pbuf_ref+0x3c>)
 8006d9a:	4805      	ldr	r0, [pc, #20]	@ (8006db0 <pbuf_ref+0x40>)
 8006d9c:	f008 f9f8 	bl	800f190 <iprintf>
  }
}
 8006da0:	bf00      	nop
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	08010584 	.word	0x08010584
 8006dac:	08010764 	.word	0x08010764
 8006db0:	080105e4 	.word	0x080105e4

08006db4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d002      	beq.n	8006dca <pbuf_cat+0x16>
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d107      	bne.n	8006dda <pbuf_cat+0x26>
 8006dca:	4b20      	ldr	r3, [pc, #128]	@ (8006e4c <pbuf_cat+0x98>)
 8006dcc:	f240 3259 	movw	r2, #857	@ 0x359
 8006dd0:	491f      	ldr	r1, [pc, #124]	@ (8006e50 <pbuf_cat+0x9c>)
 8006dd2:	4820      	ldr	r0, [pc, #128]	@ (8006e54 <pbuf_cat+0xa0>)
 8006dd4:	f008 f9dc 	bl	800f190 <iprintf>
 8006dd8:	e034      	b.n	8006e44 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	60fb      	str	r3, [r7, #12]
 8006dde:	e00a      	b.n	8006df6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	891a      	ldrh	r2, [r3, #8]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	891b      	ldrh	r3, [r3, #8]
 8006de8:	4413      	add	r3, r2
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	60fb      	str	r3, [r7, #12]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1f0      	bne.n	8006de0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	891a      	ldrh	r2, [r3, #8]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	895b      	ldrh	r3, [r3, #10]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d006      	beq.n	8006e18 <pbuf_cat+0x64>
 8006e0a:	4b10      	ldr	r3, [pc, #64]	@ (8006e4c <pbuf_cat+0x98>)
 8006e0c:	f240 3262 	movw	r2, #866	@ 0x362
 8006e10:	4911      	ldr	r1, [pc, #68]	@ (8006e58 <pbuf_cat+0xa4>)
 8006e12:	4810      	ldr	r0, [pc, #64]	@ (8006e54 <pbuf_cat+0xa0>)
 8006e14:	f008 f9bc 	bl	800f190 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d006      	beq.n	8006e2e <pbuf_cat+0x7a>
 8006e20:	4b0a      	ldr	r3, [pc, #40]	@ (8006e4c <pbuf_cat+0x98>)
 8006e22:	f240 3263 	movw	r2, #867	@ 0x363
 8006e26:	490d      	ldr	r1, [pc, #52]	@ (8006e5c <pbuf_cat+0xa8>)
 8006e28:	480a      	ldr	r0, [pc, #40]	@ (8006e54 <pbuf_cat+0xa0>)
 8006e2a:	f008 f9b1 	bl	800f190 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	891a      	ldrh	r2, [r3, #8]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	891b      	ldrh	r3, [r3, #8]
 8006e36:	4413      	add	r3, r2
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	08010584 	.word	0x08010584
 8006e50:	08010778 	.word	0x08010778
 8006e54:	080105e4 	.word	0x080105e4
 8006e58:	080107b0 	.word	0x080107b0
 8006e5c:	080107e0 	.word	0x080107e0

08006e60 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	617b      	str	r3, [r7, #20]
 8006e6e:	2300      	movs	r3, #0
 8006e70:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d008      	beq.n	8006e8a <pbuf_copy+0x2a>
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d005      	beq.n	8006e8a <pbuf_copy+0x2a>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	891a      	ldrh	r2, [r3, #8]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	891b      	ldrh	r3, [r3, #8]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d209      	bcs.n	8006e9e <pbuf_copy+0x3e>
 8006e8a:	4b57      	ldr	r3, [pc, #348]	@ (8006fe8 <pbuf_copy+0x188>)
 8006e8c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8006e90:	4956      	ldr	r1, [pc, #344]	@ (8006fec <pbuf_copy+0x18c>)
 8006e92:	4857      	ldr	r0, [pc, #348]	@ (8006ff0 <pbuf_copy+0x190>)
 8006e94:	f008 f97c 	bl	800f190 <iprintf>
 8006e98:	f06f 030f 	mvn.w	r3, #15
 8006e9c:	e09f      	b.n	8006fde <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	895b      	ldrh	r3, [r3, #10]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	1ad2      	subs	r2, r2, r3
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	895b      	ldrh	r3, [r3, #10]
 8006eac:	4619      	mov	r1, r3
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	1acb      	subs	r3, r1, r3
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d306      	bcc.n	8006ec4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	895b      	ldrh	r3, [r3, #10]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	60fb      	str	r3, [r7, #12]
 8006ec2:	e005      	b.n	8006ed0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	895b      	ldrh	r3, [r3, #10]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685a      	ldr	r2, [r3, #4]
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	18d0      	adds	r0, r2, r3
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	4413      	add	r3, r2
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	f008 fa2f 	bl	800f346 <memcpy>
    offset_to += len;
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	4413      	add	r3, r2
 8006eee:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	895b      	ldrh	r3, [r3, #10]
 8006efc:	461a      	mov	r2, r3
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d906      	bls.n	8006f12 <pbuf_copy+0xb2>
 8006f04:	4b38      	ldr	r3, [pc, #224]	@ (8006fe8 <pbuf_copy+0x188>)
 8006f06:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8006f0a:	493a      	ldr	r1, [pc, #232]	@ (8006ff4 <pbuf_copy+0x194>)
 8006f0c:	4838      	ldr	r0, [pc, #224]	@ (8006ff0 <pbuf_copy+0x190>)
 8006f0e:	f008 f93f 	bl	800f190 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	895b      	ldrh	r3, [r3, #10]
 8006f16:	461a      	mov	r2, r3
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d906      	bls.n	8006f2c <pbuf_copy+0xcc>
 8006f1e:	4b32      	ldr	r3, [pc, #200]	@ (8006fe8 <pbuf_copy+0x188>)
 8006f20:	f240 32da 	movw	r2, #986	@ 0x3da
 8006f24:	4934      	ldr	r1, [pc, #208]	@ (8006ff8 <pbuf_copy+0x198>)
 8006f26:	4832      	ldr	r0, [pc, #200]	@ (8006ff0 <pbuf_copy+0x190>)
 8006f28:	f008 f932 	bl	800f190 <iprintf>
    if (offset_from >= p_from->len) {
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	895b      	ldrh	r3, [r3, #10]
 8006f30:	461a      	mov	r2, r3
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d304      	bcc.n	8006f42 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	895b      	ldrh	r3, [r3, #10]
 8006f46:	461a      	mov	r2, r3
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d114      	bne.n	8006f78 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10c      	bne.n	8006f78 <pbuf_copy+0x118>
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d009      	beq.n	8006f78 <pbuf_copy+0x118>
 8006f64:	4b20      	ldr	r3, [pc, #128]	@ (8006fe8 <pbuf_copy+0x188>)
 8006f66:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8006f6a:	4924      	ldr	r1, [pc, #144]	@ (8006ffc <pbuf_copy+0x19c>)
 8006f6c:	4820      	ldr	r0, [pc, #128]	@ (8006ff0 <pbuf_copy+0x190>)
 8006f6e:	f008 f90f 	bl	800f190 <iprintf>
 8006f72:	f06f 030f 	mvn.w	r3, #15
 8006f76:	e032      	b.n	8006fde <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d013      	beq.n	8006fa6 <pbuf_copy+0x146>
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	895a      	ldrh	r2, [r3, #10]
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	891b      	ldrh	r3, [r3, #8]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d10d      	bne.n	8006fa6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d009      	beq.n	8006fa6 <pbuf_copy+0x146>
 8006f92:	4b15      	ldr	r3, [pc, #84]	@ (8006fe8 <pbuf_copy+0x188>)
 8006f94:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8006f98:	4919      	ldr	r1, [pc, #100]	@ (8007000 <pbuf_copy+0x1a0>)
 8006f9a:	4815      	ldr	r0, [pc, #84]	@ (8006ff0 <pbuf_copy+0x190>)
 8006f9c:	f008 f8f8 	bl	800f190 <iprintf>
 8006fa0:	f06f 0305 	mvn.w	r3, #5
 8006fa4:	e01b      	b.n	8006fde <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d013      	beq.n	8006fd4 <pbuf_copy+0x174>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	895a      	ldrh	r2, [r3, #10]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	891b      	ldrh	r3, [r3, #8]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d10d      	bne.n	8006fd4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d009      	beq.n	8006fd4 <pbuf_copy+0x174>
 8006fc0:	4b09      	ldr	r3, [pc, #36]	@ (8006fe8 <pbuf_copy+0x188>)
 8006fc2:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8006fc6:	490e      	ldr	r1, [pc, #56]	@ (8007000 <pbuf_copy+0x1a0>)
 8006fc8:	4809      	ldr	r0, [pc, #36]	@ (8006ff0 <pbuf_copy+0x190>)
 8006fca:	f008 f8e1 	bl	800f190 <iprintf>
 8006fce:	f06f 0305 	mvn.w	r3, #5
 8006fd2:	e004      	b.n	8006fde <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f47f af61 	bne.w	8006e9e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3718      	adds	r7, #24
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	08010584 	.word	0x08010584
 8006fec:	0801082c 	.word	0x0801082c
 8006ff0:	080105e4 	.word	0x080105e4
 8006ff4:	0801085c 	.word	0x0801085c
 8006ff8:	08010874 	.word	0x08010874
 8006ffc:	08010890 	.word	0x08010890
 8007000:	080108a0 	.word	0x080108a0

08007004 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b088      	sub	sp, #32
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	4611      	mov	r1, r2
 8007010:	461a      	mov	r2, r3
 8007012:	460b      	mov	r3, r1
 8007014:	80fb      	strh	r3, [r7, #6]
 8007016:	4613      	mov	r3, r2
 8007018:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800701a:	2300      	movs	r3, #0
 800701c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800701e:	2300      	movs	r3, #0
 8007020:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d108      	bne.n	800703a <pbuf_copy_partial+0x36>
 8007028:	4b2b      	ldr	r3, [pc, #172]	@ (80070d8 <pbuf_copy_partial+0xd4>)
 800702a:	f240 420a 	movw	r2, #1034	@ 0x40a
 800702e:	492b      	ldr	r1, [pc, #172]	@ (80070dc <pbuf_copy_partial+0xd8>)
 8007030:	482b      	ldr	r0, [pc, #172]	@ (80070e0 <pbuf_copy_partial+0xdc>)
 8007032:	f008 f8ad 	bl	800f190 <iprintf>
 8007036:	2300      	movs	r3, #0
 8007038:	e04a      	b.n	80070d0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d108      	bne.n	8007052 <pbuf_copy_partial+0x4e>
 8007040:	4b25      	ldr	r3, [pc, #148]	@ (80070d8 <pbuf_copy_partial+0xd4>)
 8007042:	f240 420b 	movw	r2, #1035	@ 0x40b
 8007046:	4927      	ldr	r1, [pc, #156]	@ (80070e4 <pbuf_copy_partial+0xe0>)
 8007048:	4825      	ldr	r0, [pc, #148]	@ (80070e0 <pbuf_copy_partial+0xdc>)
 800704a:	f008 f8a1 	bl	800f190 <iprintf>
 800704e:	2300      	movs	r3, #0
 8007050:	e03e      	b.n	80070d0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	61fb      	str	r3, [r7, #28]
 8007056:	e034      	b.n	80070c2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007058:	88bb      	ldrh	r3, [r7, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00a      	beq.n	8007074 <pbuf_copy_partial+0x70>
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	895b      	ldrh	r3, [r3, #10]
 8007062:	88ba      	ldrh	r2, [r7, #4]
 8007064:	429a      	cmp	r2, r3
 8007066:	d305      	bcc.n	8007074 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	895b      	ldrh	r3, [r3, #10]
 800706c:	88ba      	ldrh	r2, [r7, #4]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	80bb      	strh	r3, [r7, #4]
 8007072:	e023      	b.n	80070bc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	895a      	ldrh	r2, [r3, #10]
 8007078:	88bb      	ldrh	r3, [r7, #4]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800707e:	8b3a      	ldrh	r2, [r7, #24]
 8007080:	88fb      	ldrh	r3, [r7, #6]
 8007082:	429a      	cmp	r2, r3
 8007084:	d901      	bls.n	800708a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8007086:	88fb      	ldrh	r3, [r7, #6]
 8007088:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800708a:	8b7b      	ldrh	r3, [r7, #26]
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	18d0      	adds	r0, r2, r3
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	685a      	ldr	r2, [r3, #4]
 8007094:	88bb      	ldrh	r3, [r7, #4]
 8007096:	4413      	add	r3, r2
 8007098:	8b3a      	ldrh	r2, [r7, #24]
 800709a:	4619      	mov	r1, r3
 800709c:	f008 f953 	bl	800f346 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80070a0:	8afa      	ldrh	r2, [r7, #22]
 80070a2:	8b3b      	ldrh	r3, [r7, #24]
 80070a4:	4413      	add	r3, r2
 80070a6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80070a8:	8b7a      	ldrh	r2, [r7, #26]
 80070aa:	8b3b      	ldrh	r3, [r7, #24]
 80070ac:	4413      	add	r3, r2
 80070ae:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80070b0:	88fa      	ldrh	r2, [r7, #6]
 80070b2:	8b3b      	ldrh	r3, [r7, #24]
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80070b8:	2300      	movs	r3, #0
 80070ba:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	61fb      	str	r3, [r7, #28]
 80070c2:	88fb      	ldrh	r3, [r7, #6]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d002      	beq.n	80070ce <pbuf_copy_partial+0xca>
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1c4      	bne.n	8007058 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80070ce:	8afb      	ldrh	r3, [r7, #22]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3720      	adds	r7, #32
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	08010584 	.word	0x08010584
 80070dc:	080108cc 	.word	0x080108cc
 80070e0:	080105e4 	.word	0x080105e4
 80070e4:	080108ec 	.word	0x080108ec

080070e8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	4603      	mov	r3, r0
 80070f0:	603a      	str	r2, [r7, #0]
 80070f2:	71fb      	strb	r3, [r7, #7]
 80070f4:	460b      	mov	r3, r1
 80070f6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	8919      	ldrh	r1, [r3, #8]
 80070fc:	88ba      	ldrh	r2, [r7, #4]
 80070fe:	79fb      	ldrb	r3, [r7, #7]
 8007100:	4618      	mov	r0, r3
 8007102:	f7ff fab1 	bl	8006668 <pbuf_alloc>
 8007106:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <pbuf_clone+0x2a>
    return NULL;
 800710e:	2300      	movs	r3, #0
 8007110:	e011      	b.n	8007136 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8007112:	6839      	ldr	r1, [r7, #0]
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f7ff fea3 	bl	8006e60 <pbuf_copy>
 800711a:	4603      	mov	r3, r0
 800711c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800711e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d006      	beq.n	8007134 <pbuf_clone+0x4c>
 8007126:	4b06      	ldr	r3, [pc, #24]	@ (8007140 <pbuf_clone+0x58>)
 8007128:	f240 5224 	movw	r2, #1316	@ 0x524
 800712c:	4905      	ldr	r1, [pc, #20]	@ (8007144 <pbuf_clone+0x5c>)
 800712e:	4806      	ldr	r0, [pc, #24]	@ (8007148 <pbuf_clone+0x60>)
 8007130:	f008 f82e 	bl	800f190 <iprintf>
  return q;
 8007134:	68fb      	ldr	r3, [r7, #12]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	08010584 	.word	0x08010584
 8007144:	080109f8 	.word	0x080109f8
 8007148:	080105e4 	.word	0x080105e4

0800714c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007150:	f007 ff1e 	bl	800ef90 <rand>
 8007154:	4603      	mov	r3, r0
 8007156:	b29b      	uxth	r3, r3
 8007158:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800715c:	b29b      	uxth	r3, r3
 800715e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8007162:	b29a      	uxth	r2, r3
 8007164:	4b01      	ldr	r3, [pc, #4]	@ (800716c <tcp_init+0x20>)
 8007166:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007168:	bf00      	nop
 800716a:	bd80      	pop	{r7, pc}
 800716c:	20000020 	.word	0x20000020

08007170 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	7d1b      	ldrb	r3, [r3, #20]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d105      	bne.n	800718c <tcp_free+0x1c>
 8007180:	4b06      	ldr	r3, [pc, #24]	@ (800719c <tcp_free+0x2c>)
 8007182:	22d4      	movs	r2, #212	@ 0xd4
 8007184:	4906      	ldr	r1, [pc, #24]	@ (80071a0 <tcp_free+0x30>)
 8007186:	4807      	ldr	r0, [pc, #28]	@ (80071a4 <tcp_free+0x34>)
 8007188:	f008 f802 	bl	800f190 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800718c:	6879      	ldr	r1, [r7, #4]
 800718e:	2001      	movs	r0, #1
 8007190:	f7fe fed8 	bl	8005f44 <memp_free>
}
 8007194:	bf00      	nop
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	08010a84 	.word	0x08010a84
 80071a0:	08010ab4 	.word	0x08010ab4
 80071a4:	08010ac8 	.word	0x08010ac8

080071a8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	7d1b      	ldrb	r3, [r3, #20]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d105      	bne.n	80071c4 <tcp_free_listen+0x1c>
 80071b8:	4b06      	ldr	r3, [pc, #24]	@ (80071d4 <tcp_free_listen+0x2c>)
 80071ba:	22df      	movs	r2, #223	@ 0xdf
 80071bc:	4906      	ldr	r1, [pc, #24]	@ (80071d8 <tcp_free_listen+0x30>)
 80071be:	4807      	ldr	r0, [pc, #28]	@ (80071dc <tcp_free_listen+0x34>)
 80071c0:	f007 ffe6 	bl	800f190 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80071c4:	6879      	ldr	r1, [r7, #4]
 80071c6:	2002      	movs	r0, #2
 80071c8:	f7fe febc 	bl	8005f44 <memp_free>
}
 80071cc:	bf00      	nop
 80071ce:	3708      	adds	r7, #8
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	08010a84 	.word	0x08010a84
 80071d8:	08010af0 	.word	0x08010af0
 80071dc:	08010ac8 	.word	0x08010ac8

080071e0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80071e4:	f000 fea4 	bl	8007f30 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80071e8:	4b07      	ldr	r3, [pc, #28]	@ (8007208 <tcp_tmr+0x28>)
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	3301      	adds	r3, #1
 80071ee:	b2da      	uxtb	r2, r3
 80071f0:	4b05      	ldr	r3, [pc, #20]	@ (8007208 <tcp_tmr+0x28>)
 80071f2:	701a      	strb	r2, [r3, #0]
 80071f4:	4b04      	ldr	r3, [pc, #16]	@ (8007208 <tcp_tmr+0x28>)
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d001      	beq.n	8007204 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007200:	f000 fb54 	bl	80078ac <tcp_slowtmr>
  }
}
 8007204:	bf00      	nop
 8007206:	bd80      	pop	{r7, pc}
 8007208:	20007c89 	.word	0x20007c89

0800720c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d105      	bne.n	8007228 <tcp_remove_listener+0x1c>
 800721c:	4b0d      	ldr	r3, [pc, #52]	@ (8007254 <tcp_remove_listener+0x48>)
 800721e:	22ff      	movs	r2, #255	@ 0xff
 8007220:	490d      	ldr	r1, [pc, #52]	@ (8007258 <tcp_remove_listener+0x4c>)
 8007222:	480e      	ldr	r0, [pc, #56]	@ (800725c <tcp_remove_listener+0x50>)
 8007224:	f007 ffb4 	bl	800f190 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	e00a      	b.n	8007244 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	429a      	cmp	r2, r3
 8007236:	d102      	bne.n	800723e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	60fb      	str	r3, [r7, #12]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1f1      	bne.n	800722e <tcp_remove_listener+0x22>
    }
  }
}
 800724a:	bf00      	nop
 800724c:	bf00      	nop
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	08010a84 	.word	0x08010a84
 8007258:	08010b0c 	.word	0x08010b0c
 800725c:	08010ac8 	.word	0x08010ac8

08007260 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d106      	bne.n	800727c <tcp_listen_closed+0x1c>
 800726e:	4b14      	ldr	r3, [pc, #80]	@ (80072c0 <tcp_listen_closed+0x60>)
 8007270:	f240 1211 	movw	r2, #273	@ 0x111
 8007274:	4913      	ldr	r1, [pc, #76]	@ (80072c4 <tcp_listen_closed+0x64>)
 8007276:	4814      	ldr	r0, [pc, #80]	@ (80072c8 <tcp_listen_closed+0x68>)
 8007278:	f007 ff8a 	bl	800f190 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	7d1b      	ldrb	r3, [r3, #20]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d006      	beq.n	8007292 <tcp_listen_closed+0x32>
 8007284:	4b0e      	ldr	r3, [pc, #56]	@ (80072c0 <tcp_listen_closed+0x60>)
 8007286:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800728a:	4910      	ldr	r1, [pc, #64]	@ (80072cc <tcp_listen_closed+0x6c>)
 800728c:	480e      	ldr	r0, [pc, #56]	@ (80072c8 <tcp_listen_closed+0x68>)
 800728e:	f007 ff7f 	bl	800f190 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007292:	2301      	movs	r3, #1
 8007294:	60fb      	str	r3, [r7, #12]
 8007296:	e00b      	b.n	80072b0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007298:	4a0d      	ldr	r2, [pc, #52]	@ (80072d0 <tcp_listen_closed+0x70>)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	6879      	ldr	r1, [r7, #4]
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7ff ffb1 	bl	800720c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	3301      	adds	r3, #1
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2b03      	cmp	r3, #3
 80072b4:	d9f0      	bls.n	8007298 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80072b6:	bf00      	nop
 80072b8:	bf00      	nop
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	08010a84 	.word	0x08010a84
 80072c4:	08010b34 	.word	0x08010b34
 80072c8:	08010ac8 	.word	0x08010ac8
 80072cc:	08010b40 	.word	0x08010b40
 80072d0:	08012a64 	.word	0x08012a64

080072d4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80072d4:	b5b0      	push	{r4, r5, r7, lr}
 80072d6:	b088      	sub	sp, #32
 80072d8:	af04      	add	r7, sp, #16
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	460b      	mov	r3, r1
 80072de:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d106      	bne.n	80072f4 <tcp_close_shutdown+0x20>
 80072e6:	4b63      	ldr	r3, [pc, #396]	@ (8007474 <tcp_close_shutdown+0x1a0>)
 80072e8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80072ec:	4962      	ldr	r1, [pc, #392]	@ (8007478 <tcp_close_shutdown+0x1a4>)
 80072ee:	4863      	ldr	r0, [pc, #396]	@ (800747c <tcp_close_shutdown+0x1a8>)
 80072f0:	f007 ff4e 	bl	800f190 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80072f4:	78fb      	ldrb	r3, [r7, #3]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d066      	beq.n	80073c8 <tcp_close_shutdown+0xf4>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	7d1b      	ldrb	r3, [r3, #20]
 80072fe:	2b04      	cmp	r3, #4
 8007300:	d003      	beq.n	800730a <tcp_close_shutdown+0x36>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	7d1b      	ldrb	r3, [r3, #20]
 8007306:	2b07      	cmp	r3, #7
 8007308:	d15e      	bne.n	80073c8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800730e:	2b00      	cmp	r3, #0
 8007310:	d104      	bne.n	800731c <tcp_close_shutdown+0x48>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007316:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800731a:	d055      	beq.n	80073c8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	8b5b      	ldrh	r3, [r3, #26]
 8007320:	f003 0310 	and.w	r3, r3, #16
 8007324:	2b00      	cmp	r3, #0
 8007326:	d106      	bne.n	8007336 <tcp_close_shutdown+0x62>
 8007328:	4b52      	ldr	r3, [pc, #328]	@ (8007474 <tcp_close_shutdown+0x1a0>)
 800732a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800732e:	4954      	ldr	r1, [pc, #336]	@ (8007480 <tcp_close_shutdown+0x1ac>)
 8007330:	4852      	ldr	r0, [pc, #328]	@ (800747c <tcp_close_shutdown+0x1a8>)
 8007332:	f007 ff2d 	bl	800f190 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800733e:	687d      	ldr	r5, [r7, #4]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	3304      	adds	r3, #4
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	8ad2      	ldrh	r2, [r2, #22]
 8007348:	6879      	ldr	r1, [r7, #4]
 800734a:	8b09      	ldrh	r1, [r1, #24]
 800734c:	9102      	str	r1, [sp, #8]
 800734e:	9201      	str	r2, [sp, #4]
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	462b      	mov	r3, r5
 8007354:	4622      	mov	r2, r4
 8007356:	4601      	mov	r1, r0
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f004 fe8d 	bl	800c078 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f001 f8c8 	bl	80084f4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007364:	4b47      	ldr	r3, [pc, #284]	@ (8007484 <tcp_close_shutdown+0x1b0>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	429a      	cmp	r2, r3
 800736c:	d105      	bne.n	800737a <tcp_close_shutdown+0xa6>
 800736e:	4b45      	ldr	r3, [pc, #276]	@ (8007484 <tcp_close_shutdown+0x1b0>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	4a43      	ldr	r2, [pc, #268]	@ (8007484 <tcp_close_shutdown+0x1b0>)
 8007376:	6013      	str	r3, [r2, #0]
 8007378:	e013      	b.n	80073a2 <tcp_close_shutdown+0xce>
 800737a:	4b42      	ldr	r3, [pc, #264]	@ (8007484 <tcp_close_shutdown+0x1b0>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	60fb      	str	r3, [r7, #12]
 8007380:	e00c      	b.n	800739c <tcp_close_shutdown+0xc8>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	429a      	cmp	r2, r3
 800738a:	d104      	bne.n	8007396 <tcp_close_shutdown+0xc2>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	68da      	ldr	r2, [r3, #12]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	60da      	str	r2, [r3, #12]
 8007394:	e005      	b.n	80073a2 <tcp_close_shutdown+0xce>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	60fb      	str	r3, [r7, #12]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1ef      	bne.n	8007382 <tcp_close_shutdown+0xae>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	60da      	str	r2, [r3, #12]
 80073a8:	4b37      	ldr	r3, [pc, #220]	@ (8007488 <tcp_close_shutdown+0x1b4>)
 80073aa:	2201      	movs	r2, #1
 80073ac:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80073ae:	4b37      	ldr	r3, [pc, #220]	@ (800748c <tcp_close_shutdown+0x1b8>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d102      	bne.n	80073be <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80073b8:	f003 fd5c 	bl	800ae74 <tcp_trigger_input_pcb_close>
 80073bc:	e002      	b.n	80073c4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7ff fed6 	bl	8007170 <tcp_free>
      }
      return ERR_OK;
 80073c4:	2300      	movs	r3, #0
 80073c6:	e050      	b.n	800746a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	7d1b      	ldrb	r3, [r3, #20]
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d03b      	beq.n	8007448 <tcp_close_shutdown+0x174>
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	dc44      	bgt.n	800745e <tcp_close_shutdown+0x18a>
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d002      	beq.n	80073de <tcp_close_shutdown+0x10a>
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d02a      	beq.n	8007432 <tcp_close_shutdown+0x15e>
 80073dc:	e03f      	b.n	800745e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	8adb      	ldrh	r3, [r3, #22]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d021      	beq.n	800742a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80073e6:	4b2a      	ldr	r3, [pc, #168]	@ (8007490 <tcp_close_shutdown+0x1bc>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d105      	bne.n	80073fc <tcp_close_shutdown+0x128>
 80073f0:	4b27      	ldr	r3, [pc, #156]	@ (8007490 <tcp_close_shutdown+0x1bc>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	4a26      	ldr	r2, [pc, #152]	@ (8007490 <tcp_close_shutdown+0x1bc>)
 80073f8:	6013      	str	r3, [r2, #0]
 80073fa:	e013      	b.n	8007424 <tcp_close_shutdown+0x150>
 80073fc:	4b24      	ldr	r3, [pc, #144]	@ (8007490 <tcp_close_shutdown+0x1bc>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	60bb      	str	r3, [r7, #8]
 8007402:	e00c      	b.n	800741e <tcp_close_shutdown+0x14a>
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	429a      	cmp	r2, r3
 800740c:	d104      	bne.n	8007418 <tcp_close_shutdown+0x144>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68da      	ldr	r2, [r3, #12]
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	60da      	str	r2, [r3, #12]
 8007416:	e005      	b.n	8007424 <tcp_close_shutdown+0x150>
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	60bb      	str	r3, [r7, #8]
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1ef      	bne.n	8007404 <tcp_close_shutdown+0x130>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f7ff fea0 	bl	8007170 <tcp_free>
      break;
 8007430:	e01a      	b.n	8007468 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7ff ff14 	bl	8007260 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007438:	6879      	ldr	r1, [r7, #4]
 800743a:	4816      	ldr	r0, [pc, #88]	@ (8007494 <tcp_close_shutdown+0x1c0>)
 800743c:	f001 f8aa 	bl	8008594 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7ff feb1 	bl	80071a8 <tcp_free_listen>
      break;
 8007446:	e00f      	b.n	8007468 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007448:	6879      	ldr	r1, [r7, #4]
 800744a:	480e      	ldr	r0, [pc, #56]	@ (8007484 <tcp_close_shutdown+0x1b0>)
 800744c:	f001 f8a2 	bl	8008594 <tcp_pcb_remove>
 8007450:	4b0d      	ldr	r3, [pc, #52]	@ (8007488 <tcp_close_shutdown+0x1b4>)
 8007452:	2201      	movs	r2, #1
 8007454:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7ff fe8a 	bl	8007170 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800745c:	e004      	b.n	8007468 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f81a 	bl	8007498 <tcp_close_shutdown_fin>
 8007464:	4603      	mov	r3, r0
 8007466:	e000      	b.n	800746a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bdb0      	pop	{r4, r5, r7, pc}
 8007472:	bf00      	nop
 8007474:	08010a84 	.word	0x08010a84
 8007478:	08010b58 	.word	0x08010b58
 800747c:	08010ac8 	.word	0x08010ac8
 8007480:	08010b78 	.word	0x08010b78
 8007484:	20007c80 	.word	0x20007c80
 8007488:	20007c88 	.word	0x20007c88
 800748c:	20007cc0 	.word	0x20007cc0
 8007490:	20007c78 	.word	0x20007c78
 8007494:	20007c7c 	.word	0x20007c7c

08007498 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d106      	bne.n	80074b4 <tcp_close_shutdown_fin+0x1c>
 80074a6:	4b2e      	ldr	r3, [pc, #184]	@ (8007560 <tcp_close_shutdown_fin+0xc8>)
 80074a8:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80074ac:	492d      	ldr	r1, [pc, #180]	@ (8007564 <tcp_close_shutdown_fin+0xcc>)
 80074ae:	482e      	ldr	r0, [pc, #184]	@ (8007568 <tcp_close_shutdown_fin+0xd0>)
 80074b0:	f007 fe6e 	bl	800f190 <iprintf>

  switch (pcb->state) {
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	7d1b      	ldrb	r3, [r3, #20]
 80074b8:	2b07      	cmp	r3, #7
 80074ba:	d020      	beq.n	80074fe <tcp_close_shutdown_fin+0x66>
 80074bc:	2b07      	cmp	r3, #7
 80074be:	dc2b      	bgt.n	8007518 <tcp_close_shutdown_fin+0x80>
 80074c0:	2b03      	cmp	r3, #3
 80074c2:	d002      	beq.n	80074ca <tcp_close_shutdown_fin+0x32>
 80074c4:	2b04      	cmp	r3, #4
 80074c6:	d00d      	beq.n	80074e4 <tcp_close_shutdown_fin+0x4c>
 80074c8:	e026      	b.n	8007518 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f003 fee2 	bl	800b294 <tcp_send_fin>
 80074d0:	4603      	mov	r3, r0
 80074d2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80074d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d11f      	bne.n	800751c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2205      	movs	r2, #5
 80074e0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80074e2:	e01b      	b.n	800751c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f003 fed5 	bl	800b294 <tcp_send_fin>
 80074ea:	4603      	mov	r3, r0
 80074ec:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80074ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d114      	bne.n	8007520 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2205      	movs	r2, #5
 80074fa:	751a      	strb	r2, [r3, #20]
      }
      break;
 80074fc:	e010      	b.n	8007520 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f003 fec8 	bl	800b294 <tcp_send_fin>
 8007504:	4603      	mov	r3, r0
 8007506:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007508:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d109      	bne.n	8007524 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2209      	movs	r2, #9
 8007514:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007516:	e005      	b.n	8007524 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007518:	2300      	movs	r3, #0
 800751a:	e01c      	b.n	8007556 <tcp_close_shutdown_fin+0xbe>
      break;
 800751c:	bf00      	nop
 800751e:	e002      	b.n	8007526 <tcp_close_shutdown_fin+0x8e>
      break;
 8007520:	bf00      	nop
 8007522:	e000      	b.n	8007526 <tcp_close_shutdown_fin+0x8e>
      break;
 8007524:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d103      	bne.n	8007536 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f003 ffee 	bl	800b510 <tcp_output>
 8007534:	e00d      	b.n	8007552 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8007536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800753a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800753e:	d108      	bne.n	8007552 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	8b5b      	ldrh	r3, [r3, #26]
 8007544:	f043 0308 	orr.w	r3, r3, #8
 8007548:	b29a      	uxth	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	e001      	b.n	8007556 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8007552:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007556:	4618      	mov	r0, r3
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	08010a84 	.word	0x08010a84
 8007564:	08010b34 	.word	0x08010b34
 8007568:	08010ac8 	.word	0x08010ac8

0800756c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d109      	bne.n	800758e <tcp_close+0x22>
 800757a:	4b0f      	ldr	r3, [pc, #60]	@ (80075b8 <tcp_close+0x4c>)
 800757c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8007580:	490e      	ldr	r1, [pc, #56]	@ (80075bc <tcp_close+0x50>)
 8007582:	480f      	ldr	r0, [pc, #60]	@ (80075c0 <tcp_close+0x54>)
 8007584:	f007 fe04 	bl	800f190 <iprintf>
 8007588:	f06f 030f 	mvn.w	r3, #15
 800758c:	e00f      	b.n	80075ae <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	7d1b      	ldrb	r3, [r3, #20]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d006      	beq.n	80075a4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	8b5b      	ldrh	r3, [r3, #26]
 800759a:	f043 0310 	orr.w	r3, r3, #16
 800759e:	b29a      	uxth	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80075a4:	2101      	movs	r1, #1
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7ff fe94 	bl	80072d4 <tcp_close_shutdown>
 80075ac:	4603      	mov	r3, r0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	08010a84 	.word	0x08010a84
 80075bc:	08010b94 	.word	0x08010b94
 80075c0:	08010ac8 	.word	0x08010ac8

080075c4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b08e      	sub	sp, #56	@ 0x38
 80075c8:	af04      	add	r7, sp, #16
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d107      	bne.n	80075e4 <tcp_abandon+0x20>
 80075d4:	4b52      	ldr	r3, [pc, #328]	@ (8007720 <tcp_abandon+0x15c>)
 80075d6:	f240 223d 	movw	r2, #573	@ 0x23d
 80075da:	4952      	ldr	r1, [pc, #328]	@ (8007724 <tcp_abandon+0x160>)
 80075dc:	4852      	ldr	r0, [pc, #328]	@ (8007728 <tcp_abandon+0x164>)
 80075de:	f007 fdd7 	bl	800f190 <iprintf>
 80075e2:	e099      	b.n	8007718 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	7d1b      	ldrb	r3, [r3, #20]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d106      	bne.n	80075fa <tcp_abandon+0x36>
 80075ec:	4b4c      	ldr	r3, [pc, #304]	@ (8007720 <tcp_abandon+0x15c>)
 80075ee:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80075f2:	494e      	ldr	r1, [pc, #312]	@ (800772c <tcp_abandon+0x168>)
 80075f4:	484c      	ldr	r0, [pc, #304]	@ (8007728 <tcp_abandon+0x164>)
 80075f6:	f007 fdcb 	bl	800f190 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	7d1b      	ldrb	r3, [r3, #20]
 80075fe:	2b0a      	cmp	r3, #10
 8007600:	d107      	bne.n	8007612 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007602:	6879      	ldr	r1, [r7, #4]
 8007604:	484a      	ldr	r0, [pc, #296]	@ (8007730 <tcp_abandon+0x16c>)
 8007606:	f000 ffc5 	bl	8008594 <tcp_pcb_remove>
    tcp_free(pcb);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7ff fdb0 	bl	8007170 <tcp_free>
 8007610:	e082      	b.n	8007718 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8007612:	2300      	movs	r3, #0
 8007614:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8007616:	2300      	movs	r3, #0
 8007618:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800761e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007624:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800762c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	7d1b      	ldrb	r3, [r3, #20]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d126      	bne.n	800768a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	8adb      	ldrh	r3, [r3, #22]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d02e      	beq.n	80076a2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007644:	4b3b      	ldr	r3, [pc, #236]	@ (8007734 <tcp_abandon+0x170>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	429a      	cmp	r2, r3
 800764c:	d105      	bne.n	800765a <tcp_abandon+0x96>
 800764e:	4b39      	ldr	r3, [pc, #228]	@ (8007734 <tcp_abandon+0x170>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	4a37      	ldr	r2, [pc, #220]	@ (8007734 <tcp_abandon+0x170>)
 8007656:	6013      	str	r3, [r2, #0]
 8007658:	e013      	b.n	8007682 <tcp_abandon+0xbe>
 800765a:	4b36      	ldr	r3, [pc, #216]	@ (8007734 <tcp_abandon+0x170>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	61fb      	str	r3, [r7, #28]
 8007660:	e00c      	b.n	800767c <tcp_abandon+0xb8>
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	429a      	cmp	r2, r3
 800766a:	d104      	bne.n	8007676 <tcp_abandon+0xb2>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	68da      	ldr	r2, [r3, #12]
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	60da      	str	r2, [r3, #12]
 8007674:	e005      	b.n	8007682 <tcp_abandon+0xbe>
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	61fb      	str	r3, [r7, #28]
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1ef      	bne.n	8007662 <tcp_abandon+0x9e>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	60da      	str	r2, [r3, #12]
 8007688:	e00b      	b.n	80076a2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	8adb      	ldrh	r3, [r3, #22]
 8007692:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007694:	6879      	ldr	r1, [r7, #4]
 8007696:	4828      	ldr	r0, [pc, #160]	@ (8007738 <tcp_abandon+0x174>)
 8007698:	f000 ff7c 	bl	8008594 <tcp_pcb_remove>
 800769c:	4b27      	ldr	r3, [pc, #156]	@ (800773c <tcp_abandon+0x178>)
 800769e:	2201      	movs	r2, #1
 80076a0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d004      	beq.n	80076b4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076ae:	4618      	mov	r0, r3
 80076b0:	f000 fd1e 	bl	80080f0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d004      	beq.n	80076c6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 fd15 	bl	80080f0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d004      	beq.n	80076d8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 fd0c 	bl	80080f0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80076d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00e      	beq.n	80076fc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80076de:	6879      	ldr	r1, [r7, #4]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	3304      	adds	r3, #4
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	8b12      	ldrh	r2, [r2, #24]
 80076e8:	9202      	str	r2, [sp, #8]
 80076ea:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80076ec:	9201      	str	r2, [sp, #4]
 80076ee:	9300      	str	r3, [sp, #0]
 80076f0:	460b      	mov	r3, r1
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	69b9      	ldr	r1, [r7, #24]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f004 fcbe 	bl	800c078 <tcp_rst>
    }
    last_state = pcb->state;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	7d1b      	ldrb	r3, [r3, #20]
 8007700:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f7ff fd34 	bl	8007170 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d004      	beq.n	8007718 <tcp_abandon+0x154>
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	f06f 010c 	mvn.w	r1, #12
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	4798      	blx	r3
  }
}
 8007718:	3728      	adds	r7, #40	@ 0x28
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	08010a84 	.word	0x08010a84
 8007724:	08010bc8 	.word	0x08010bc8
 8007728:	08010ac8 	.word	0x08010ac8
 800772c:	08010be4 	.word	0x08010be4
 8007730:	20007c84 	.word	0x20007c84
 8007734:	20007c78 	.word	0x20007c78
 8007738:	20007c80 	.word	0x20007c80
 800773c:	20007c88 	.word	0x20007c88

08007740 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007748:	2101      	movs	r1, #1
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7ff ff3a 	bl	80075c4 <tcp_abandon>
}
 8007750:	bf00      	nop
 8007752:	3708      	adds	r7, #8
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d106      	bne.n	8007774 <tcp_update_rcv_ann_wnd+0x1c>
 8007766:	4b25      	ldr	r3, [pc, #148]	@ (80077fc <tcp_update_rcv_ann_wnd+0xa4>)
 8007768:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800776c:	4924      	ldr	r1, [pc, #144]	@ (8007800 <tcp_update_rcv_ann_wnd+0xa8>)
 800776e:	4825      	ldr	r0, [pc, #148]	@ (8007804 <tcp_update_rcv_ann_wnd+0xac>)
 8007770:	f007 fd0e 	bl	800f190 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800777c:	4413      	add	r3, r2
 800777e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8007788:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800778c:	bf28      	it	cs
 800778e:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8007792:	b292      	uxth	r2, r2
 8007794:	4413      	add	r3, r2
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	db08      	blt.n	80077b0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	e020      	b.n	80077f2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	dd03      	ble.n	80077c6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80077c4:	e014      	b.n	80077f0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077d8:	d306      	bcc.n	80077e8 <tcp_update_rcv_ann_wnd+0x90>
 80077da:	4b08      	ldr	r3, [pc, #32]	@ (80077fc <tcp_update_rcv_ann_wnd+0xa4>)
 80077dc:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80077e0:	4909      	ldr	r1, [pc, #36]	@ (8007808 <tcp_update_rcv_ann_wnd+0xb0>)
 80077e2:	4808      	ldr	r0, [pc, #32]	@ (8007804 <tcp_update_rcv_ann_wnd+0xac>)
 80077e4:	f007 fcd4 	bl	800f190 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80077f0:	2300      	movs	r3, #0
  }
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	08010a84 	.word	0x08010a84
 8007800:	08010ce0 	.word	0x08010ce0
 8007804:	08010ac8 	.word	0x08010ac8
 8007808:	08010d04 	.word	0x08010d04

0800780c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	460b      	mov	r3, r1
 8007816:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d107      	bne.n	800782e <tcp_recved+0x22>
 800781e:	4b1f      	ldr	r3, [pc, #124]	@ (800789c <tcp_recved+0x90>)
 8007820:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8007824:	491e      	ldr	r1, [pc, #120]	@ (80078a0 <tcp_recved+0x94>)
 8007826:	481f      	ldr	r0, [pc, #124]	@ (80078a4 <tcp_recved+0x98>)
 8007828:	f007 fcb2 	bl	800f190 <iprintf>
 800782c:	e032      	b.n	8007894 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	7d1b      	ldrb	r3, [r3, #20]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d106      	bne.n	8007844 <tcp_recved+0x38>
 8007836:	4b19      	ldr	r3, [pc, #100]	@ (800789c <tcp_recved+0x90>)
 8007838:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800783c:	491a      	ldr	r1, [pc, #104]	@ (80078a8 <tcp_recved+0x9c>)
 800783e:	4819      	ldr	r0, [pc, #100]	@ (80078a4 <tcp_recved+0x98>)
 8007840:	f007 fca6 	bl	800f190 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8007848:	887b      	ldrh	r3, [r7, #2]
 800784a:	4413      	add	r3, r2
 800784c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800784e:	89fb      	ldrh	r3, [r7, #14]
 8007850:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8007854:	d804      	bhi.n	8007860 <tcp_recved+0x54>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800785a:	89fa      	ldrh	r2, [r7, #14]
 800785c:	429a      	cmp	r2, r3
 800785e:	d204      	bcs.n	800786a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8007866:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007868:	e002      	b.n	8007870 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	89fa      	ldrh	r2, [r7, #14]
 800786e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f7ff ff71 	bl	8007758 <tcp_update_rcv_ann_wnd>
 8007876:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800787e:	d309      	bcc.n	8007894 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	8b5b      	ldrh	r3, [r3, #26]
 8007884:	f043 0302 	orr.w	r3, r3, #2
 8007888:	b29a      	uxth	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f003 fe3e 	bl	800b510 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	08010a84 	.word	0x08010a84
 80078a0:	08010d20 	.word	0x08010d20
 80078a4:	08010ac8 	.word	0x08010ac8
 80078a8:	08010d38 	.word	0x08010d38

080078ac <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80078ac:	b5b0      	push	{r4, r5, r7, lr}
 80078ae:	b090      	sub	sp, #64	@ 0x40
 80078b0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80078b2:	2300      	movs	r3, #0
 80078b4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80078b8:	4b95      	ldr	r3, [pc, #596]	@ (8007b10 <tcp_slowtmr+0x264>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	3301      	adds	r3, #1
 80078be:	4a94      	ldr	r2, [pc, #592]	@ (8007b10 <tcp_slowtmr+0x264>)
 80078c0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80078c2:	4b94      	ldr	r3, [pc, #592]	@ (8007b14 <tcp_slowtmr+0x268>)
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	3301      	adds	r3, #1
 80078c8:	b2da      	uxtb	r2, r3
 80078ca:	4b92      	ldr	r3, [pc, #584]	@ (8007b14 <tcp_slowtmr+0x268>)
 80078cc:	701a      	strb	r2, [r3, #0]
 80078ce:	e000      	b.n	80078d2 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80078d0:	bf00      	nop
  prev = NULL;
 80078d2:	2300      	movs	r3, #0
 80078d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80078d6:	4b90      	ldr	r3, [pc, #576]	@ (8007b18 <tcp_slowtmr+0x26c>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80078dc:	e29d      	b.n	8007e1a <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80078de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078e0:	7d1b      	ldrb	r3, [r3, #20]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d106      	bne.n	80078f4 <tcp_slowtmr+0x48>
 80078e6:	4b8d      	ldr	r3, [pc, #564]	@ (8007b1c <tcp_slowtmr+0x270>)
 80078e8:	f240 42be 	movw	r2, #1214	@ 0x4be
 80078ec:	498c      	ldr	r1, [pc, #560]	@ (8007b20 <tcp_slowtmr+0x274>)
 80078ee:	488d      	ldr	r0, [pc, #564]	@ (8007b24 <tcp_slowtmr+0x278>)
 80078f0:	f007 fc4e 	bl	800f190 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80078f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f6:	7d1b      	ldrb	r3, [r3, #20]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d106      	bne.n	800790a <tcp_slowtmr+0x5e>
 80078fc:	4b87      	ldr	r3, [pc, #540]	@ (8007b1c <tcp_slowtmr+0x270>)
 80078fe:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8007902:	4989      	ldr	r1, [pc, #548]	@ (8007b28 <tcp_slowtmr+0x27c>)
 8007904:	4887      	ldr	r0, [pc, #540]	@ (8007b24 <tcp_slowtmr+0x278>)
 8007906:	f007 fc43 	bl	800f190 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800790a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800790c:	7d1b      	ldrb	r3, [r3, #20]
 800790e:	2b0a      	cmp	r3, #10
 8007910:	d106      	bne.n	8007920 <tcp_slowtmr+0x74>
 8007912:	4b82      	ldr	r3, [pc, #520]	@ (8007b1c <tcp_slowtmr+0x270>)
 8007914:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8007918:	4984      	ldr	r1, [pc, #528]	@ (8007b2c <tcp_slowtmr+0x280>)
 800791a:	4882      	ldr	r0, [pc, #520]	@ (8007b24 <tcp_slowtmr+0x278>)
 800791c:	f007 fc38 	bl	800f190 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007922:	7f9a      	ldrb	r2, [r3, #30]
 8007924:	4b7b      	ldr	r3, [pc, #492]	@ (8007b14 <tcp_slowtmr+0x268>)
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	429a      	cmp	r2, r3
 800792a:	d105      	bne.n	8007938 <tcp_slowtmr+0x8c>
      prev = pcb;
 800792c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800792e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8007930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8007936:	e270      	b.n	8007e1a <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8007938:	4b76      	ldr	r3, [pc, #472]	@ (8007b14 <tcp_slowtmr+0x268>)
 800793a:	781a      	ldrb	r2, [r3, #0]
 800793c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800793e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8007940:	2300      	movs	r3, #0
 8007942:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8007946:	2300      	movs	r3, #0
 8007948:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800794c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800794e:	7d1b      	ldrb	r3, [r3, #20]
 8007950:	2b02      	cmp	r3, #2
 8007952:	d10a      	bne.n	800796a <tcp_slowtmr+0xbe>
 8007954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007956:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800795a:	2b05      	cmp	r3, #5
 800795c:	d905      	bls.n	800796a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800795e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007962:	3301      	adds	r3, #1
 8007964:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007968:	e11e      	b.n	8007ba8 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800796a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800796c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007970:	2b0b      	cmp	r3, #11
 8007972:	d905      	bls.n	8007980 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8007974:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007978:	3301      	adds	r3, #1
 800797a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800797e:	e113      	b.n	8007ba8 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8007980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007982:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007986:	2b00      	cmp	r3, #0
 8007988:	d075      	beq.n	8007a76 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800798a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800798c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800798e:	2b00      	cmp	r3, #0
 8007990:	d006      	beq.n	80079a0 <tcp_slowtmr+0xf4>
 8007992:	4b62      	ldr	r3, [pc, #392]	@ (8007b1c <tcp_slowtmr+0x270>)
 8007994:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8007998:	4965      	ldr	r1, [pc, #404]	@ (8007b30 <tcp_slowtmr+0x284>)
 800799a:	4862      	ldr	r0, [pc, #392]	@ (8007b24 <tcp_slowtmr+0x278>)
 800799c:	f007 fbf8 	bl	800f190 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80079a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d106      	bne.n	80079b6 <tcp_slowtmr+0x10a>
 80079a8:	4b5c      	ldr	r3, [pc, #368]	@ (8007b1c <tcp_slowtmr+0x270>)
 80079aa:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80079ae:	4961      	ldr	r1, [pc, #388]	@ (8007b34 <tcp_slowtmr+0x288>)
 80079b0:	485c      	ldr	r0, [pc, #368]	@ (8007b24 <tcp_slowtmr+0x278>)
 80079b2:	f007 fbed 	bl	800f190 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80079b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079b8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80079bc:	2b0b      	cmp	r3, #11
 80079be:	d905      	bls.n	80079cc <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80079c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079c4:	3301      	adds	r3, #1
 80079c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80079ca:	e0ed      	b.n	8007ba8 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80079cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ce:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80079d2:	3b01      	subs	r3, #1
 80079d4:	4a58      	ldr	r2, [pc, #352]	@ (8007b38 <tcp_slowtmr+0x28c>)
 80079d6:	5cd3      	ldrb	r3, [r2, r3]
 80079d8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80079da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079dc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80079e0:	7c7a      	ldrb	r2, [r7, #17]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d907      	bls.n	80079f6 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80079e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079e8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80079ec:	3301      	adds	r3, #1
 80079ee:	b2da      	uxtb	r2, r3
 80079f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079f2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80079f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079f8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80079fc:	7c7a      	ldrb	r2, [r7, #17]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	f200 80d2 	bhi.w	8007ba8 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8007a04:	2301      	movs	r3, #1
 8007a06:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8007a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d108      	bne.n	8007a24 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007a12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a14:	f004 fc24 	bl	800c260 <tcp_zero_window_probe>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d014      	beq.n	8007a48 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8007a1e:	2300      	movs	r3, #0
 8007a20:	623b      	str	r3, [r7, #32]
 8007a22:	e011      	b.n	8007a48 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a2e:	f003 fae9 	bl	800b004 <tcp_split_unsent_seg>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d107      	bne.n	8007a48 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8007a38:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a3a:	f003 fd69 	bl	800b510 <tcp_output>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d101      	bne.n	8007a48 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8007a44:	2300      	movs	r3, #0
 8007a46:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8007a48:	6a3b      	ldr	r3, [r7, #32]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f000 80ac 	beq.w	8007ba8 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8007a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a52:	2200      	movs	r2, #0
 8007a54:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a5a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007a5e:	2b06      	cmp	r3, #6
 8007a60:	f200 80a2 	bhi.w	8007ba8 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8007a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a66:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	b2da      	uxtb	r2, r3
 8007a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a70:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8007a74:	e098      	b.n	8007ba8 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a78:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	db0f      	blt.n	8007aa0 <tcp_slowtmr+0x1f4>
 8007a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a82:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007a86:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d008      	beq.n	8007aa0 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8007a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a90:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	3301      	adds	r3, #1
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	b21a      	sxth	r2, r3
 8007a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a9e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8007aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aa2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8007aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aa8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8007aac:	429a      	cmp	r2, r3
 8007aae:	db7b      	blt.n	8007ba8 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007ab0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007ab2:	f004 f821 	bl	800baf8 <tcp_rexmit_rto_prepare>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d007      	beq.n	8007acc <tcp_slowtmr+0x220>
 8007abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d171      	bne.n	8007ba8 <tcp_slowtmr+0x2fc>
 8007ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ac6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d06d      	beq.n	8007ba8 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8007acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ace:	7d1b      	ldrb	r3, [r3, #20]
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d03a      	beq.n	8007b4a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ad6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ada:	2b0c      	cmp	r3, #12
 8007adc:	bf28      	it	cs
 8007ade:	230c      	movcs	r3, #12
 8007ae0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ae4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8007ae8:	10db      	asrs	r3, r3, #3
 8007aea:	b21b      	sxth	r3, r3
 8007aec:	461a      	mov	r2, r3
 8007aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007af0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8007af4:	4413      	add	r3, r2
 8007af6:	7efa      	ldrb	r2, [r7, #27]
 8007af8:	4910      	ldr	r1, [pc, #64]	@ (8007b3c <tcp_slowtmr+0x290>)
 8007afa:	5c8a      	ldrb	r2, [r1, r2]
 8007afc:	4093      	lsls	r3, r2
 8007afe:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8007b06:	4293      	cmp	r3, r2
 8007b08:	dc1a      	bgt.n	8007b40 <tcp_slowtmr+0x294>
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	b21a      	sxth	r2, r3
 8007b0e:	e019      	b.n	8007b44 <tcp_slowtmr+0x298>
 8007b10:	20007c74 	.word	0x20007c74
 8007b14:	20007c8a 	.word	0x20007c8a
 8007b18:	20007c80 	.word	0x20007c80
 8007b1c:	08010a84 	.word	0x08010a84
 8007b20:	08010dc8 	.word	0x08010dc8
 8007b24:	08010ac8 	.word	0x08010ac8
 8007b28:	08010df4 	.word	0x08010df4
 8007b2c:	08010e20 	.word	0x08010e20
 8007b30:	08010e50 	.word	0x08010e50
 8007b34:	08010e84 	.word	0x08010e84
 8007b38:	08012a5c 	.word	0x08012a5c
 8007b3c:	08012a4c 	.word	0x08012a4c
 8007b40:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8007b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b46:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8007b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b52:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8007b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	bf28      	it	cs
 8007b60:	4613      	movcs	r3, r2
 8007b62:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007b64:	8a7b      	ldrh	r3, [r7, #18]
 8007b66:	085b      	lsrs	r3, r3, #1
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b6c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b72:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8007b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007b7a:	005b      	lsls	r3, r3, #1
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d206      	bcs.n	8007b90 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b84:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007b86:	005b      	lsls	r3, r3, #1
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b8c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8007b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b92:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8007b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b96:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8007b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8007ba2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007ba4:	f004 f818 	bl	800bbd8 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8007ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007baa:	7d1b      	ldrb	r3, [r3, #20]
 8007bac:	2b06      	cmp	r3, #6
 8007bae:	d111      	bne.n	8007bd4 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8007bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bb2:	8b5b      	ldrh	r3, [r3, #26]
 8007bb4:	f003 0310 	and.w	r3, r3, #16
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00b      	beq.n	8007bd4 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007bbc:	4b9c      	ldr	r3, [pc, #624]	@ (8007e30 <tcp_slowtmr+0x584>)
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bc2:	6a1b      	ldr	r3, [r3, #32]
 8007bc4:	1ad3      	subs	r3, r2, r3
 8007bc6:	2b28      	cmp	r3, #40	@ 0x28
 8007bc8:	d904      	bls.n	8007bd4 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8007bca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007bce:	3301      	adds	r3, #1
 8007bd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bd6:	7a5b      	ldrb	r3, [r3, #9]
 8007bd8:	f003 0308 	and.w	r3, r3, #8
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d04a      	beq.n	8007c76 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8007be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007be2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007be4:	2b04      	cmp	r3, #4
 8007be6:	d003      	beq.n	8007bf0 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8007be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bea:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007bec:	2b07      	cmp	r3, #7
 8007bee:	d142      	bne.n	8007c76 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007bf0:	4b8f      	ldr	r3, [pc, #572]	@ (8007e30 <tcp_slowtmr+0x584>)
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bf6:	6a1b      	ldr	r3, [r3, #32]
 8007bf8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bfc:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8007c00:	4b8c      	ldr	r3, [pc, #560]	@ (8007e34 <tcp_slowtmr+0x588>)
 8007c02:	440b      	add	r3, r1
 8007c04:	498c      	ldr	r1, [pc, #560]	@ (8007e38 <tcp_slowtmr+0x58c>)
 8007c06:	fba1 1303 	umull	r1, r3, r1, r3
 8007c0a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d90a      	bls.n	8007c26 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8007c10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c14:	3301      	adds	r3, #1
 8007c16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8007c1a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c1e:	3301      	adds	r3, #1
 8007c20:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007c24:	e027      	b.n	8007c76 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007c26:	4b82      	ldr	r3, [pc, #520]	@ (8007e30 <tcp_slowtmr+0x584>)
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c32:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8007c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c38:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	4b7f      	ldr	r3, [pc, #508]	@ (8007e3c <tcp_slowtmr+0x590>)
 8007c40:	fb00 f303 	mul.w	r3, r0, r3
 8007c44:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007c46:	497c      	ldr	r1, [pc, #496]	@ (8007e38 <tcp_slowtmr+0x58c>)
 8007c48:	fba1 1303 	umull	r1, r3, r1, r3
 8007c4c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d911      	bls.n	8007c76 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8007c52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007c54:	f004 fac4 	bl	800c1e0 <tcp_keepalive>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8007c5e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d107      	bne.n	8007c76 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8007c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c68:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	b2da      	uxtb	r2, r3
 8007c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c72:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8007c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d011      	beq.n	8007ca2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007c7e:	4b6c      	ldr	r3, [pc, #432]	@ (8007e30 <tcp_slowtmr+0x584>)
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c84:	6a1b      	ldr	r3, [r3, #32]
 8007c86:	1ad2      	subs	r2, r2, r3
 8007c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c8a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8007c8e:	4619      	mov	r1, r3
 8007c90:	460b      	mov	r3, r1
 8007c92:	005b      	lsls	r3, r3, #1
 8007c94:	440b      	add	r3, r1
 8007c96:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d302      	bcc.n	8007ca2 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8007c9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007c9e:	f000 fddd 	bl	800885c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8007ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ca4:	7d1b      	ldrb	r3, [r3, #20]
 8007ca6:	2b03      	cmp	r3, #3
 8007ca8:	d10b      	bne.n	8007cc2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007caa:	4b61      	ldr	r3, [pc, #388]	@ (8007e30 <tcp_slowtmr+0x584>)
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	2b28      	cmp	r3, #40	@ 0x28
 8007cb6:	d904      	bls.n	8007cc2 <tcp_slowtmr+0x416>
        ++pcb_remove;
 8007cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8007cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cc4:	7d1b      	ldrb	r3, [r3, #20]
 8007cc6:	2b09      	cmp	r3, #9
 8007cc8:	d10b      	bne.n	8007ce2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007cca:	4b59      	ldr	r3, [pc, #356]	@ (8007e30 <tcp_slowtmr+0x584>)
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cd0:	6a1b      	ldr	r3, [r3, #32]
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	2bf0      	cmp	r3, #240	@ 0xf0
 8007cd6:	d904      	bls.n	8007ce2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8007cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007cdc:	3301      	adds	r3, #1
 8007cde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8007ce2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d060      	beq.n	8007dac <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8007cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cf0:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8007cf2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007cf4:	f000 fbfe 	bl	80084f4 <tcp_pcb_purge>
      if (prev != NULL) {
 8007cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d010      	beq.n	8007d20 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007cfe:	4b50      	ldr	r3, [pc, #320]	@ (8007e40 <tcp_slowtmr+0x594>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d106      	bne.n	8007d16 <tcp_slowtmr+0x46a>
 8007d08:	4b4e      	ldr	r3, [pc, #312]	@ (8007e44 <tcp_slowtmr+0x598>)
 8007d0a:	f240 526d 	movw	r2, #1389	@ 0x56d
 8007d0e:	494e      	ldr	r1, [pc, #312]	@ (8007e48 <tcp_slowtmr+0x59c>)
 8007d10:	484e      	ldr	r0, [pc, #312]	@ (8007e4c <tcp_slowtmr+0x5a0>)
 8007d12:	f007 fa3d 	bl	800f190 <iprintf>
        prev->next = pcb->next;
 8007d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d18:	68da      	ldr	r2, [r3, #12]
 8007d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d1c:	60da      	str	r2, [r3, #12]
 8007d1e:	e00f      	b.n	8007d40 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007d20:	4b47      	ldr	r3, [pc, #284]	@ (8007e40 <tcp_slowtmr+0x594>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d006      	beq.n	8007d38 <tcp_slowtmr+0x48c>
 8007d2a:	4b46      	ldr	r3, [pc, #280]	@ (8007e44 <tcp_slowtmr+0x598>)
 8007d2c:	f240 5271 	movw	r2, #1393	@ 0x571
 8007d30:	4947      	ldr	r1, [pc, #284]	@ (8007e50 <tcp_slowtmr+0x5a4>)
 8007d32:	4846      	ldr	r0, [pc, #280]	@ (8007e4c <tcp_slowtmr+0x5a0>)
 8007d34:	f007 fa2c 	bl	800f190 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	4a40      	ldr	r2, [pc, #256]	@ (8007e40 <tcp_slowtmr+0x594>)
 8007d3e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8007d40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d013      	beq.n	8007d70 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d4a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8007d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d4e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007d50:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8007d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d54:	3304      	adds	r3, #4
 8007d56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d58:	8ad2      	ldrh	r2, [r2, #22]
 8007d5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d5c:	8b09      	ldrh	r1, [r1, #24]
 8007d5e:	9102      	str	r1, [sp, #8]
 8007d60:	9201      	str	r2, [sp, #4]
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	462b      	mov	r3, r5
 8007d66:	4622      	mov	r2, r4
 8007d68:	4601      	mov	r1, r0
 8007d6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007d6c:	f004 f984 	bl	800c078 <tcp_rst>
      err_arg = pcb->callback_arg;
 8007d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d78:	7d1b      	ldrb	r3, [r3, #20]
 8007d7a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d7e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8007d86:	6838      	ldr	r0, [r7, #0]
 8007d88:	f7ff f9f2 	bl	8007170 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8007d8c:	4b31      	ldr	r3, [pc, #196]	@ (8007e54 <tcp_slowtmr+0x5a8>)
 8007d8e:	2200      	movs	r2, #0
 8007d90:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d004      	beq.n	8007da2 <tcp_slowtmr+0x4f6>
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f06f 010c 	mvn.w	r1, #12
 8007d9e:	68b8      	ldr	r0, [r7, #8]
 8007da0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007da2:	4b2c      	ldr	r3, [pc, #176]	@ (8007e54 <tcp_slowtmr+0x5a8>)
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d037      	beq.n	8007e1a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8007daa:	e592      	b.n	80078d2 <tcp_slowtmr+0x26>
      prev = pcb;
 8007dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dae:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8007db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8007db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db8:	7f1b      	ldrb	r3, [r3, #28]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	b2da      	uxtb	r2, r3
 8007dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc4:	7f1a      	ldrb	r2, [r3, #28]
 8007dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc8:	7f5b      	ldrb	r3, [r3, #29]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d325      	bcc.n	8007e1a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8007dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8007dd4:	4b1f      	ldr	r3, [pc, #124]	@ (8007e54 <tcp_slowtmr+0x5a8>)
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00b      	beq.n	8007dfc <tcp_slowtmr+0x550>
 8007de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007dec:	6912      	ldr	r2, [r2, #16]
 8007dee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007df0:	4610      	mov	r0, r2
 8007df2:	4798      	blx	r3
 8007df4:	4603      	mov	r3, r0
 8007df6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8007dfa:	e002      	b.n	8007e02 <tcp_slowtmr+0x556>
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8007e02:	4b14      	ldr	r3, [pc, #80]	@ (8007e54 <tcp_slowtmr+0x5a8>)
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	f47f ad62 	bne.w	80078d0 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007e0c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d102      	bne.n	8007e1a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8007e14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e16:	f003 fb7b 	bl	800b510 <tcp_output>
  while (pcb != NULL) {
 8007e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f47f ad5e 	bne.w	80078de <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007e22:	2300      	movs	r3, #0
 8007e24:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8007e26:	4b0c      	ldr	r3, [pc, #48]	@ (8007e58 <tcp_slowtmr+0x5ac>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8007e2c:	e069      	b.n	8007f02 <tcp_slowtmr+0x656>
 8007e2e:	bf00      	nop
 8007e30:	20007c74 	.word	0x20007c74
 8007e34:	000a4cb8 	.word	0x000a4cb8
 8007e38:	10624dd3 	.word	0x10624dd3
 8007e3c:	000124f8 	.word	0x000124f8
 8007e40:	20007c80 	.word	0x20007c80
 8007e44:	08010a84 	.word	0x08010a84
 8007e48:	08010ebc 	.word	0x08010ebc
 8007e4c:	08010ac8 	.word	0x08010ac8
 8007e50:	08010ee8 	.word	0x08010ee8
 8007e54:	20007c88 	.word	0x20007c88
 8007e58:	20007c84 	.word	0x20007c84
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e5e:	7d1b      	ldrb	r3, [r3, #20]
 8007e60:	2b0a      	cmp	r3, #10
 8007e62:	d006      	beq.n	8007e72 <tcp_slowtmr+0x5c6>
 8007e64:	4b2b      	ldr	r3, [pc, #172]	@ (8007f14 <tcp_slowtmr+0x668>)
 8007e66:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8007e6a:	492b      	ldr	r1, [pc, #172]	@ (8007f18 <tcp_slowtmr+0x66c>)
 8007e6c:	482b      	ldr	r0, [pc, #172]	@ (8007f1c <tcp_slowtmr+0x670>)
 8007e6e:	f007 f98f 	bl	800f190 <iprintf>
    pcb_remove = 0;
 8007e72:	2300      	movs	r3, #0
 8007e74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007e78:	4b29      	ldr	r3, [pc, #164]	@ (8007f20 <tcp_slowtmr+0x674>)
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e7e:	6a1b      	ldr	r3, [r3, #32]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	2bf0      	cmp	r3, #240	@ 0xf0
 8007e84:	d904      	bls.n	8007e90 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8007e86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007e90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d02f      	beq.n	8007ef8 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007e98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007e9a:	f000 fb2b 	bl	80084f4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d010      	beq.n	8007ec6 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8007f24 <tcp_slowtmr+0x678>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d106      	bne.n	8007ebc <tcp_slowtmr+0x610>
 8007eae:	4b19      	ldr	r3, [pc, #100]	@ (8007f14 <tcp_slowtmr+0x668>)
 8007eb0:	f240 52af 	movw	r2, #1455	@ 0x5af
 8007eb4:	491c      	ldr	r1, [pc, #112]	@ (8007f28 <tcp_slowtmr+0x67c>)
 8007eb6:	4819      	ldr	r0, [pc, #100]	@ (8007f1c <tcp_slowtmr+0x670>)
 8007eb8:	f007 f96a 	bl	800f190 <iprintf>
        prev->next = pcb->next;
 8007ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ebe:	68da      	ldr	r2, [r3, #12]
 8007ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec2:	60da      	str	r2, [r3, #12]
 8007ec4:	e00f      	b.n	8007ee6 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007ec6:	4b17      	ldr	r3, [pc, #92]	@ (8007f24 <tcp_slowtmr+0x678>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d006      	beq.n	8007ede <tcp_slowtmr+0x632>
 8007ed0:	4b10      	ldr	r3, [pc, #64]	@ (8007f14 <tcp_slowtmr+0x668>)
 8007ed2:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8007ed6:	4915      	ldr	r1, [pc, #84]	@ (8007f2c <tcp_slowtmr+0x680>)
 8007ed8:	4810      	ldr	r0, [pc, #64]	@ (8007f1c <tcp_slowtmr+0x670>)
 8007eda:	f007 f959 	bl	800f190 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	4a10      	ldr	r2, [pc, #64]	@ (8007f24 <tcp_slowtmr+0x678>)
 8007ee4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8007eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8007ef0:	69f8      	ldr	r0, [r7, #28]
 8007ef2:	f7ff f93d 	bl	8007170 <tcp_free>
 8007ef6:	e004      	b.n	8007f02 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8007ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007efa:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8007efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8007f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1a9      	bne.n	8007e5c <tcp_slowtmr+0x5b0>
    }
  }
}
 8007f08:	bf00      	nop
 8007f0a:	bf00      	nop
 8007f0c:	3730      	adds	r7, #48	@ 0x30
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bdb0      	pop	{r4, r5, r7, pc}
 8007f12:	bf00      	nop
 8007f14:	08010a84 	.word	0x08010a84
 8007f18:	08010f14 	.word	0x08010f14
 8007f1c:	08010ac8 	.word	0x08010ac8
 8007f20:	20007c74 	.word	0x20007c74
 8007f24:	20007c84 	.word	0x20007c84
 8007f28:	08010f44 	.word	0x08010f44
 8007f2c:	08010f6c 	.word	0x08010f6c

08007f30 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007f36:	4b2d      	ldr	r3, [pc, #180]	@ (8007fec <tcp_fasttmr+0xbc>)
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	4b2b      	ldr	r3, [pc, #172]	@ (8007fec <tcp_fasttmr+0xbc>)
 8007f40:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007f42:	4b2b      	ldr	r3, [pc, #172]	@ (8007ff0 <tcp_fasttmr+0xc0>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007f48:	e048      	b.n	8007fdc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	7f9a      	ldrb	r2, [r3, #30]
 8007f4e:	4b27      	ldr	r3, [pc, #156]	@ (8007fec <tcp_fasttmr+0xbc>)
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d03f      	beq.n	8007fd6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007f56:	4b25      	ldr	r3, [pc, #148]	@ (8007fec <tcp_fasttmr+0xbc>)
 8007f58:	781a      	ldrb	r2, [r3, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	8b5b      	ldrh	r3, [r3, #26]
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d010      	beq.n	8007f8c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	8b5b      	ldrh	r3, [r3, #26]
 8007f6e:	f043 0302 	orr.w	r3, r3, #2
 8007f72:	b29a      	uxth	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f003 fac9 	bl	800b510 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	8b5b      	ldrh	r3, [r3, #26]
 8007f82:	f023 0303 	bic.w	r3, r3, #3
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	8b5b      	ldrh	r3, [r3, #26]
 8007f90:	f003 0308 	and.w	r3, r3, #8
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d009      	beq.n	8007fac <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	8b5b      	ldrh	r3, [r3, #26]
 8007f9c:	f023 0308 	bic.w	r3, r3, #8
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f7ff fa76 	bl	8007498 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00a      	beq.n	8007fd0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007fba:	4b0e      	ldr	r3, [pc, #56]	@ (8007ff4 <tcp_fasttmr+0xc4>)
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f819 	bl	8007ff8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8007ff4 <tcp_fasttmr+0xc4>)
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d000      	beq.n	8007fd0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007fce:	e7b8      	b.n	8007f42 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	607b      	str	r3, [r7, #4]
 8007fd4:	e002      	b.n	8007fdc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1b3      	bne.n	8007f4a <tcp_fasttmr+0x1a>
    }
  }
}
 8007fe2:	bf00      	nop
 8007fe4:	bf00      	nop
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	20007c8a 	.word	0x20007c8a
 8007ff0:	20007c80 	.word	0x20007c80
 8007ff4:	20007c88 	.word	0x20007c88

08007ff8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007ff8:	b590      	push	{r4, r7, lr}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d109      	bne.n	800801a <tcp_process_refused_data+0x22>
 8008006:	4b37      	ldr	r3, [pc, #220]	@ (80080e4 <tcp_process_refused_data+0xec>)
 8008008:	f240 6209 	movw	r2, #1545	@ 0x609
 800800c:	4936      	ldr	r1, [pc, #216]	@ (80080e8 <tcp_process_refused_data+0xf0>)
 800800e:	4837      	ldr	r0, [pc, #220]	@ (80080ec <tcp_process_refused_data+0xf4>)
 8008010:	f007 f8be 	bl	800f190 <iprintf>
 8008014:	f06f 030f 	mvn.w	r3, #15
 8008018:	e060      	b.n	80080dc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800801e:	7b5b      	ldrb	r3, [r3, #13]
 8008020:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008026:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00b      	beq.n	8008050 <tcp_process_refused_data+0x58>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6918      	ldr	r0, [r3, #16]
 8008042:	2300      	movs	r3, #0
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	6879      	ldr	r1, [r7, #4]
 8008048:	47a0      	blx	r4
 800804a:	4603      	mov	r3, r0
 800804c:	73fb      	strb	r3, [r7, #15]
 800804e:	e007      	b.n	8008060 <tcp_process_refused_data+0x68>
 8008050:	2300      	movs	r3, #0
 8008052:	68ba      	ldr	r2, [r7, #8]
 8008054:	6879      	ldr	r1, [r7, #4]
 8008056:	2000      	movs	r0, #0
 8008058:	f000 f8a4 	bl	80081a4 <tcp_recv_null>
 800805c:	4603      	mov	r3, r0
 800805e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d12a      	bne.n	80080be <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008068:	7bbb      	ldrb	r3, [r7, #14]
 800806a:	f003 0320 	and.w	r3, r3, #32
 800806e:	2b00      	cmp	r3, #0
 8008070:	d033      	beq.n	80080da <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008076:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800807a:	d005      	beq.n	8008088 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008080:	3301      	adds	r3, #1
 8008082:	b29a      	uxth	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00b      	beq.n	80080aa <tcp_process_refused_data+0xb2>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6918      	ldr	r0, [r3, #16]
 800809c:	2300      	movs	r3, #0
 800809e:	2200      	movs	r2, #0
 80080a0:	6879      	ldr	r1, [r7, #4]
 80080a2:	47a0      	blx	r4
 80080a4:	4603      	mov	r3, r0
 80080a6:	73fb      	strb	r3, [r7, #15]
 80080a8:	e001      	b.n	80080ae <tcp_process_refused_data+0xb6>
 80080aa:	2300      	movs	r3, #0
 80080ac:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80080ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080b2:	f113 0f0d 	cmn.w	r3, #13
 80080b6:	d110      	bne.n	80080da <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80080b8:	f06f 030c 	mvn.w	r3, #12
 80080bc:	e00e      	b.n	80080dc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80080be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080c2:	f113 0f0d 	cmn.w	r3, #13
 80080c6:	d102      	bne.n	80080ce <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80080c8:	f06f 030c 	mvn.w	r3, #12
 80080cc:	e006      	b.n	80080dc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80080d4:	f06f 0304 	mvn.w	r3, #4
 80080d8:	e000      	b.n	80080dc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3714      	adds	r7, #20
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd90      	pop	{r4, r7, pc}
 80080e4:	08010a84 	.word	0x08010a84
 80080e8:	08010f94 	.word	0x08010f94
 80080ec:	08010ac8 	.word	0x08010ac8

080080f0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80080f8:	e007      	b.n	800810a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f80a 	bl	800811a <tcp_seg_free>
    seg = next;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1f4      	bne.n	80080fa <tcp_segs_free+0xa>
  }
}
 8008110:	bf00      	nop
 8008112:	bf00      	nop
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b082      	sub	sp, #8
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00c      	beq.n	8008142 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d004      	beq.n	800813a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	4618      	mov	r0, r3
 8008136:	f7fe fd7b 	bl	8006c30 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800813a:	6879      	ldr	r1, [r7, #4]
 800813c:	2003      	movs	r0, #3
 800813e:	f7fd ff01 	bl	8005f44 <memp_free>
  }
}
 8008142:	bf00      	nop
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
	...

0800814c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d106      	bne.n	8008168 <tcp_seg_copy+0x1c>
 800815a:	4b0f      	ldr	r3, [pc, #60]	@ (8008198 <tcp_seg_copy+0x4c>)
 800815c:	f240 6282 	movw	r2, #1666	@ 0x682
 8008160:	490e      	ldr	r1, [pc, #56]	@ (800819c <tcp_seg_copy+0x50>)
 8008162:	480f      	ldr	r0, [pc, #60]	@ (80081a0 <tcp_seg_copy+0x54>)
 8008164:	f007 f814 	bl	800f190 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008168:	2003      	movs	r0, #3
 800816a:	f7fd fe7b 	bl	8005e64 <memp_malloc>
 800816e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d101      	bne.n	800817a <tcp_seg_copy+0x2e>
    return NULL;
 8008176:	2300      	movs	r3, #0
 8008178:	e00a      	b.n	8008190 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800817a:	2210      	movs	r2, #16
 800817c:	6879      	ldr	r1, [r7, #4]
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f007 f8e1 	bl	800f346 <memcpy>
  pbuf_ref(cseg->p);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	4618      	mov	r0, r3
 800818a:	f7fe fdf1 	bl	8006d70 <pbuf_ref>
  return cseg;
 800818e:	68fb      	ldr	r3, [r7, #12]
}
 8008190:	4618      	mov	r0, r3
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	08010a84 	.word	0x08010a84
 800819c:	08010fd8 	.word	0x08010fd8
 80081a0:	08010ac8 	.word	0x08010ac8

080081a4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	607a      	str	r2, [r7, #4]
 80081b0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d109      	bne.n	80081cc <tcp_recv_null+0x28>
 80081b8:	4b12      	ldr	r3, [pc, #72]	@ (8008204 <tcp_recv_null+0x60>)
 80081ba:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80081be:	4912      	ldr	r1, [pc, #72]	@ (8008208 <tcp_recv_null+0x64>)
 80081c0:	4812      	ldr	r0, [pc, #72]	@ (800820c <tcp_recv_null+0x68>)
 80081c2:	f006 ffe5 	bl	800f190 <iprintf>
 80081c6:	f06f 030f 	mvn.w	r3, #15
 80081ca:	e016      	b.n	80081fa <tcp_recv_null+0x56>

  if (p != NULL) {
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d009      	beq.n	80081e6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	891b      	ldrh	r3, [r3, #8]
 80081d6:	4619      	mov	r1, r3
 80081d8:	68b8      	ldr	r0, [r7, #8]
 80081da:	f7ff fb17 	bl	800780c <tcp_recved>
    pbuf_free(p);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f7fe fd26 	bl	8006c30 <pbuf_free>
 80081e4:	e008      	b.n	80081f8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80081e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d104      	bne.n	80081f8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80081ee:	68b8      	ldr	r0, [r7, #8]
 80081f0:	f7ff f9bc 	bl	800756c <tcp_close>
 80081f4:	4603      	mov	r3, r0
 80081f6:	e000      	b.n	80081fa <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	08010a84 	.word	0x08010a84
 8008208:	08010ff4 	.word	0x08010ff4
 800820c:	08010ac8 	.word	0x08010ac8

08008210 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	4603      	mov	r3, r0
 8008218:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800821a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800821e:	2b00      	cmp	r3, #0
 8008220:	db01      	blt.n	8008226 <tcp_kill_prio+0x16>
 8008222:	79fb      	ldrb	r3, [r7, #7]
 8008224:	e000      	b.n	8008228 <tcp_kill_prio+0x18>
 8008226:	237f      	movs	r3, #127	@ 0x7f
 8008228:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800822a:	7afb      	ldrb	r3, [r7, #11]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d034      	beq.n	800829a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8008230:	7afb      	ldrb	r3, [r7, #11]
 8008232:	3b01      	subs	r3, #1
 8008234:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8008236:	2300      	movs	r3, #0
 8008238:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800823a:	2300      	movs	r3, #0
 800823c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800823e:	4b19      	ldr	r3, [pc, #100]	@ (80082a4 <tcp_kill_prio+0x94>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	617b      	str	r3, [r7, #20]
 8008244:	e01f      	b.n	8008286 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	7d5b      	ldrb	r3, [r3, #21]
 800824a:	7afa      	ldrb	r2, [r7, #11]
 800824c:	429a      	cmp	r2, r3
 800824e:	d80c      	bhi.n	800826a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8008254:	7afa      	ldrb	r2, [r7, #11]
 8008256:	429a      	cmp	r2, r3
 8008258:	d112      	bne.n	8008280 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800825a:	4b13      	ldr	r3, [pc, #76]	@ (80082a8 <tcp_kill_prio+0x98>)
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	6a1b      	ldr	r3, [r3, #32]
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	429a      	cmp	r2, r3
 8008268:	d80a      	bhi.n	8008280 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800826a:	4b0f      	ldr	r3, [pc, #60]	@ (80082a8 <tcp_kill_prio+0x98>)
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	6a1b      	ldr	r3, [r3, #32]
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	7d5b      	ldrb	r3, [r3, #21]
 800827e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	617b      	str	r3, [r7, #20]
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d1dc      	bne.n	8008246 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d004      	beq.n	800829c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008292:	6938      	ldr	r0, [r7, #16]
 8008294:	f7ff fa54 	bl	8007740 <tcp_abort>
 8008298:	e000      	b.n	800829c <tcp_kill_prio+0x8c>
    return;
 800829a:	bf00      	nop
  }
}
 800829c:	3718      	adds	r7, #24
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	20007c80 	.word	0x20007c80
 80082a8:	20007c74 	.word	0x20007c74

080082ac <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b086      	sub	sp, #24
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	4603      	mov	r3, r0
 80082b4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80082b6:	79fb      	ldrb	r3, [r7, #7]
 80082b8:	2b08      	cmp	r3, #8
 80082ba:	d009      	beq.n	80082d0 <tcp_kill_state+0x24>
 80082bc:	79fb      	ldrb	r3, [r7, #7]
 80082be:	2b09      	cmp	r3, #9
 80082c0:	d006      	beq.n	80082d0 <tcp_kill_state+0x24>
 80082c2:	4b1a      	ldr	r3, [pc, #104]	@ (800832c <tcp_kill_state+0x80>)
 80082c4:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80082c8:	4919      	ldr	r1, [pc, #100]	@ (8008330 <tcp_kill_state+0x84>)
 80082ca:	481a      	ldr	r0, [pc, #104]	@ (8008334 <tcp_kill_state+0x88>)
 80082cc:	f006 ff60 	bl	800f190 <iprintf>

  inactivity = 0;
 80082d0:	2300      	movs	r3, #0
 80082d2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80082d4:	2300      	movs	r3, #0
 80082d6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80082d8:	4b17      	ldr	r3, [pc, #92]	@ (8008338 <tcp_kill_state+0x8c>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	617b      	str	r3, [r7, #20]
 80082de:	e017      	b.n	8008310 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	7d1b      	ldrb	r3, [r3, #20]
 80082e4:	79fa      	ldrb	r2, [r7, #7]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d10f      	bne.n	800830a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80082ea:	4b14      	ldr	r3, [pc, #80]	@ (800833c <tcp_kill_state+0x90>)
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	6a1b      	ldr	r3, [r3, #32]
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d807      	bhi.n	800830a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80082fa:	4b10      	ldr	r3, [pc, #64]	@ (800833c <tcp_kill_state+0x90>)
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	6a1b      	ldr	r3, [r3, #32]
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	617b      	str	r3, [r7, #20]
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1e4      	bne.n	80082e0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d003      	beq.n	8008324 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800831c:	2100      	movs	r1, #0
 800831e:	6938      	ldr	r0, [r7, #16]
 8008320:	f7ff f950 	bl	80075c4 <tcp_abandon>
  }
}
 8008324:	bf00      	nop
 8008326:	3718      	adds	r7, #24
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	08010a84 	.word	0x08010a84
 8008330:	08011010 	.word	0x08011010
 8008334:	08010ac8 	.word	0x08010ac8
 8008338:	20007c80 	.word	0x20007c80
 800833c:	20007c74 	.word	0x20007c74

08008340 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008346:	2300      	movs	r3, #0
 8008348:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800834a:	2300      	movs	r3, #0
 800834c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800834e:	4b12      	ldr	r3, [pc, #72]	@ (8008398 <tcp_kill_timewait+0x58>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	60fb      	str	r3, [r7, #12]
 8008354:	e012      	b.n	800837c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008356:	4b11      	ldr	r3, [pc, #68]	@ (800839c <tcp_kill_timewait+0x5c>)
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6a1b      	ldr	r3, [r3, #32]
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	429a      	cmp	r2, r3
 8008364:	d807      	bhi.n	8008376 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8008366:	4b0d      	ldr	r3, [pc, #52]	@ (800839c <tcp_kill_timewait+0x5c>)
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6a1b      	ldr	r3, [r3, #32]
 800836e:	1ad3      	subs	r3, r2, r3
 8008370:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	60fb      	str	r3, [r7, #12]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1e9      	bne.n	8008356 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d002      	beq.n	800838e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008388:	68b8      	ldr	r0, [r7, #8]
 800838a:	f7ff f9d9 	bl	8007740 <tcp_abort>
  }
}
 800838e:	bf00      	nop
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	20007c84 	.word	0x20007c84
 800839c:	20007c74 	.word	0x20007c74

080083a0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80083a6:	4b10      	ldr	r3, [pc, #64]	@ (80083e8 <tcp_handle_closepend+0x48>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80083ac:	e014      	b.n	80083d8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	8b5b      	ldrh	r3, [r3, #26]
 80083b8:	f003 0308 	and.w	r3, r3, #8
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d009      	beq.n	80083d4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	8b5b      	ldrh	r3, [r3, #26]
 80083c4:	f023 0308 	bic.w	r3, r3, #8
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7ff f862 	bl	8007498 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1e7      	bne.n	80083ae <tcp_handle_closepend+0xe>
  }
}
 80083de:	bf00      	nop
 80083e0:	bf00      	nop
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	20007c80 	.word	0x20007c80

080083ec <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	4603      	mov	r3, r0
 80083f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80083f6:	2001      	movs	r0, #1
 80083f8:	f7fd fd34 	bl	8005e64 <memp_malloc>
 80083fc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d126      	bne.n	8008452 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008404:	f7ff ffcc 	bl	80083a0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008408:	f7ff ff9a 	bl	8008340 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800840c:	2001      	movs	r0, #1
 800840e:	f7fd fd29 	bl	8005e64 <memp_malloc>
 8008412:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d11b      	bne.n	8008452 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800841a:	2009      	movs	r0, #9
 800841c:	f7ff ff46 	bl	80082ac <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008420:	2001      	movs	r0, #1
 8008422:	f7fd fd1f 	bl	8005e64 <memp_malloc>
 8008426:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d111      	bne.n	8008452 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800842e:	2008      	movs	r0, #8
 8008430:	f7ff ff3c 	bl	80082ac <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008434:	2001      	movs	r0, #1
 8008436:	f7fd fd15 	bl	8005e64 <memp_malloc>
 800843a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d107      	bne.n	8008452 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8008442:	79fb      	ldrb	r3, [r7, #7]
 8008444:	4618      	mov	r0, r3
 8008446:	f7ff fee3 	bl	8008210 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800844a:	2001      	movs	r0, #1
 800844c:	f7fd fd0a 	bl	8005e64 <memp_malloc>
 8008450:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d03f      	beq.n	80084d8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008458:	229c      	movs	r2, #156	@ 0x9c
 800845a:	2100      	movs	r1, #0
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f006 fefc 	bl	800f25a <memset>
    pcb->prio = prio;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	79fa      	ldrb	r2, [r7, #7]
 8008466:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800846e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8008478:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	22ff      	movs	r2, #255	@ 0xff
 8008486:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800848e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2206      	movs	r2, #6
 8008494:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2206      	movs	r2, #6
 800849c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80084a4:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2201      	movs	r2, #1
 80084aa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80084ae:	4b0d      	ldr	r3, [pc, #52]	@ (80084e4 <tcp_alloc+0xf8>)
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80084b6:	4b0c      	ldr	r3, [pc, #48]	@ (80084e8 <tcp_alloc+0xfc>)
 80084b8:	781a      	ldrb	r2, [r3, #0]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80084c4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	4a08      	ldr	r2, [pc, #32]	@ (80084ec <tcp_alloc+0x100>)
 80084cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	4a07      	ldr	r2, [pc, #28]	@ (80084f0 <tcp_alloc+0x104>)
 80084d4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80084d8:	68fb      	ldr	r3, [r7, #12]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	20007c74 	.word	0x20007c74
 80084e8:	20007c8a 	.word	0x20007c8a
 80084ec:	080081a5 	.word	0x080081a5
 80084f0:	006ddd00 	.word	0x006ddd00

080084f4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d107      	bne.n	8008512 <tcp_pcb_purge+0x1e>
 8008502:	4b21      	ldr	r3, [pc, #132]	@ (8008588 <tcp_pcb_purge+0x94>)
 8008504:	f640 0251 	movw	r2, #2129	@ 0x851
 8008508:	4920      	ldr	r1, [pc, #128]	@ (800858c <tcp_pcb_purge+0x98>)
 800850a:	4821      	ldr	r0, [pc, #132]	@ (8008590 <tcp_pcb_purge+0x9c>)
 800850c:	f006 fe40 	bl	800f190 <iprintf>
 8008510:	e037      	b.n	8008582 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	7d1b      	ldrb	r3, [r3, #20]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d033      	beq.n	8008582 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800851e:	2b0a      	cmp	r3, #10
 8008520:	d02f      	beq.n	8008582 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8008526:	2b01      	cmp	r3, #1
 8008528:	d02b      	beq.n	8008582 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800852e:	2b00      	cmp	r3, #0
 8008530:	d007      	beq.n	8008542 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008536:	4618      	mov	r0, r3
 8008538:	f7fe fb7a 	bl	8006c30 <pbuf_free>
      pcb->refused_data = NULL;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008546:	2b00      	cmp	r3, #0
 8008548:	d002      	beq.n	8008550 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f986 	bl	800885c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008556:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800855c:	4618      	mov	r0, r3
 800855e:	f7ff fdc7 	bl	80080f0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008566:	4618      	mov	r0, r3
 8008568:	f7ff fdc2 	bl	80080f0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}
 8008588:	08010a84 	.word	0x08010a84
 800858c:	080110d0 	.word	0x080110d0
 8008590:	08010ac8 	.word	0x08010ac8

08008594 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d106      	bne.n	80085b2 <tcp_pcb_remove+0x1e>
 80085a4:	4b3e      	ldr	r3, [pc, #248]	@ (80086a0 <tcp_pcb_remove+0x10c>)
 80085a6:	f640 0283 	movw	r2, #2179	@ 0x883
 80085aa:	493e      	ldr	r1, [pc, #248]	@ (80086a4 <tcp_pcb_remove+0x110>)
 80085ac:	483e      	ldr	r0, [pc, #248]	@ (80086a8 <tcp_pcb_remove+0x114>)
 80085ae:	f006 fdef 	bl	800f190 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d106      	bne.n	80085c6 <tcp_pcb_remove+0x32>
 80085b8:	4b39      	ldr	r3, [pc, #228]	@ (80086a0 <tcp_pcb_remove+0x10c>)
 80085ba:	f640 0284 	movw	r2, #2180	@ 0x884
 80085be:	493b      	ldr	r1, [pc, #236]	@ (80086ac <tcp_pcb_remove+0x118>)
 80085c0:	4839      	ldr	r0, [pc, #228]	@ (80086a8 <tcp_pcb_remove+0x114>)
 80085c2:	f006 fde5 	bl	800f190 <iprintf>

  TCP_RMV(pcblist, pcb);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d105      	bne.n	80085dc <tcp_pcb_remove+0x48>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68da      	ldr	r2, [r3, #12]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	601a      	str	r2, [r3, #0]
 80085da:	e013      	b.n	8008604 <tcp_pcb_remove+0x70>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	60fb      	str	r3, [r7, #12]
 80085e2:	e00c      	b.n	80085fe <tcp_pcb_remove+0x6a>
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	683a      	ldr	r2, [r7, #0]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d104      	bne.n	80085f8 <tcp_pcb_remove+0x64>
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	68da      	ldr	r2, [r3, #12]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	60da      	str	r2, [r3, #12]
 80085f6:	e005      	b.n	8008604 <tcp_pcb_remove+0x70>
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	60fb      	str	r3, [r7, #12]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1ef      	bne.n	80085e4 <tcp_pcb_remove+0x50>
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	2200      	movs	r2, #0
 8008608:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800860a:	6838      	ldr	r0, [r7, #0]
 800860c:	f7ff ff72 	bl	80084f4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	7d1b      	ldrb	r3, [r3, #20]
 8008614:	2b0a      	cmp	r3, #10
 8008616:	d013      	beq.n	8008640 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800861c:	2b01      	cmp	r3, #1
 800861e:	d00f      	beq.n	8008640 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	8b5b      	ldrh	r3, [r3, #26]
 8008624:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008628:	2b00      	cmp	r3, #0
 800862a:	d009      	beq.n	8008640 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	8b5b      	ldrh	r3, [r3, #26]
 8008630:	f043 0302 	orr.w	r3, r3, #2
 8008634:	b29a      	uxth	r2, r3
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800863a:	6838      	ldr	r0, [r7, #0]
 800863c:	f002 ff68 	bl	800b510 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	7d1b      	ldrb	r3, [r3, #20]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d020      	beq.n	800868a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800864c:	2b00      	cmp	r3, #0
 800864e:	d006      	beq.n	800865e <tcp_pcb_remove+0xca>
 8008650:	4b13      	ldr	r3, [pc, #76]	@ (80086a0 <tcp_pcb_remove+0x10c>)
 8008652:	f640 0293 	movw	r2, #2195	@ 0x893
 8008656:	4916      	ldr	r1, [pc, #88]	@ (80086b0 <tcp_pcb_remove+0x11c>)
 8008658:	4813      	ldr	r0, [pc, #76]	@ (80086a8 <tcp_pcb_remove+0x114>)
 800865a:	f006 fd99 	bl	800f190 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008662:	2b00      	cmp	r3, #0
 8008664:	d006      	beq.n	8008674 <tcp_pcb_remove+0xe0>
 8008666:	4b0e      	ldr	r3, [pc, #56]	@ (80086a0 <tcp_pcb_remove+0x10c>)
 8008668:	f640 0294 	movw	r2, #2196	@ 0x894
 800866c:	4911      	ldr	r1, [pc, #68]	@ (80086b4 <tcp_pcb_remove+0x120>)
 800866e:	480e      	ldr	r0, [pc, #56]	@ (80086a8 <tcp_pcb_remove+0x114>)
 8008670:	f006 fd8e 	bl	800f190 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008678:	2b00      	cmp	r3, #0
 800867a:	d006      	beq.n	800868a <tcp_pcb_remove+0xf6>
 800867c:	4b08      	ldr	r3, [pc, #32]	@ (80086a0 <tcp_pcb_remove+0x10c>)
 800867e:	f640 0296 	movw	r2, #2198	@ 0x896
 8008682:	490d      	ldr	r1, [pc, #52]	@ (80086b8 <tcp_pcb_remove+0x124>)
 8008684:	4808      	ldr	r0, [pc, #32]	@ (80086a8 <tcp_pcb_remove+0x114>)
 8008686:	f006 fd83 	bl	800f190 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	2200      	movs	r2, #0
 800868e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	2200      	movs	r2, #0
 8008694:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008696:	bf00      	nop
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	08010a84 	.word	0x08010a84
 80086a4:	080110ec 	.word	0x080110ec
 80086a8:	08010ac8 	.word	0x08010ac8
 80086ac:	08011108 	.word	0x08011108
 80086b0:	08011128 	.word	0x08011128
 80086b4:	08011140 	.word	0x08011140
 80086b8:	0801115c 	.word	0x0801115c

080086bc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d106      	bne.n	80086d8 <tcp_next_iss+0x1c>
 80086ca:	4b0a      	ldr	r3, [pc, #40]	@ (80086f4 <tcp_next_iss+0x38>)
 80086cc:	f640 02af 	movw	r2, #2223	@ 0x8af
 80086d0:	4909      	ldr	r1, [pc, #36]	@ (80086f8 <tcp_next_iss+0x3c>)
 80086d2:	480a      	ldr	r0, [pc, #40]	@ (80086fc <tcp_next_iss+0x40>)
 80086d4:	f006 fd5c 	bl	800f190 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80086d8:	4b09      	ldr	r3, [pc, #36]	@ (8008700 <tcp_next_iss+0x44>)
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	4b09      	ldr	r3, [pc, #36]	@ (8008704 <tcp_next_iss+0x48>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4413      	add	r3, r2
 80086e2:	4a07      	ldr	r2, [pc, #28]	@ (8008700 <tcp_next_iss+0x44>)
 80086e4:	6013      	str	r3, [r2, #0]
  return iss;
 80086e6:	4b06      	ldr	r3, [pc, #24]	@ (8008700 <tcp_next_iss+0x44>)
 80086e8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3708      	adds	r7, #8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	08010a84 	.word	0x08010a84
 80086f8:	08011174 	.word	0x08011174
 80086fc:	08010ac8 	.word	0x08010ac8
 8008700:	20000024 	.word	0x20000024
 8008704:	20007c74 	.word	0x20007c74

08008708 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b086      	sub	sp, #24
 800870c:	af00      	add	r7, sp, #0
 800870e:	4603      	mov	r3, r0
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
 8008714:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d106      	bne.n	800872a <tcp_eff_send_mss_netif+0x22>
 800871c:	4b14      	ldr	r3, [pc, #80]	@ (8008770 <tcp_eff_send_mss_netif+0x68>)
 800871e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8008722:	4914      	ldr	r1, [pc, #80]	@ (8008774 <tcp_eff_send_mss_netif+0x6c>)
 8008724:	4814      	ldr	r0, [pc, #80]	@ (8008778 <tcp_eff_send_mss_netif+0x70>)
 8008726:	f006 fd33 	bl	800f190 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d101      	bne.n	8008734 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008730:	89fb      	ldrh	r3, [r7, #14]
 8008732:	e019      	b.n	8008768 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008738:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800873a:	8afb      	ldrh	r3, [r7, #22]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d012      	beq.n	8008766 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008740:	2328      	movs	r3, #40	@ 0x28
 8008742:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008744:	8afa      	ldrh	r2, [r7, #22]
 8008746:	8abb      	ldrh	r3, [r7, #20]
 8008748:	429a      	cmp	r2, r3
 800874a:	d904      	bls.n	8008756 <tcp_eff_send_mss_netif+0x4e>
 800874c:	8afa      	ldrh	r2, [r7, #22]
 800874e:	8abb      	ldrh	r3, [r7, #20]
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	b29b      	uxth	r3, r3
 8008754:	e000      	b.n	8008758 <tcp_eff_send_mss_netif+0x50>
 8008756:	2300      	movs	r3, #0
 8008758:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800875a:	8a7a      	ldrh	r2, [r7, #18]
 800875c:	89fb      	ldrh	r3, [r7, #14]
 800875e:	4293      	cmp	r3, r2
 8008760:	bf28      	it	cs
 8008762:	4613      	movcs	r3, r2
 8008764:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008766:	89fb      	ldrh	r3, [r7, #14]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3718      	adds	r7, #24
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	08010a84 	.word	0x08010a84
 8008774:	08011190 	.word	0x08011190
 8008778:	08010ac8 	.word	0x08010ac8

0800877c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d119      	bne.n	80087c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008790:	4b10      	ldr	r3, [pc, #64]	@ (80087d4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8008792:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8008796:	4910      	ldr	r1, [pc, #64]	@ (80087d8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008798:	4810      	ldr	r0, [pc, #64]	@ (80087dc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800879a:	f006 fcf9 	bl	800f190 <iprintf>

  while (pcb != NULL) {
 800879e:	e011      	b.n	80087c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d108      	bne.n	80087be <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f7fe ffc4 	bl	8007740 <tcp_abort>
      pcb = next;
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	60fb      	str	r3, [r7, #12]
 80087bc:	e002      	b.n	80087c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d1ea      	bne.n	80087a0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80087ca:	bf00      	nop
 80087cc:	bf00      	nop
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	08010a84 	.word	0x08010a84
 80087d8:	080111b8 	.word	0x080111b8
 80087dc:	08010ac8 	.word	0x08010ac8

080087e0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d02a      	beq.n	8008846 <tcp_netif_ip_addr_changed+0x66>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d026      	beq.n	8008846 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80087f8:	4b15      	ldr	r3, [pc, #84]	@ (8008850 <tcp_netif_ip_addr_changed+0x70>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4619      	mov	r1, r3
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f7ff ffbc 	bl	800877c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008804:	4b13      	ldr	r3, [pc, #76]	@ (8008854 <tcp_netif_ip_addr_changed+0x74>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4619      	mov	r1, r3
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f7ff ffb6 	bl	800877c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d017      	beq.n	8008846 <tcp_netif_ip_addr_changed+0x66>
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d013      	beq.n	8008846 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800881e:	4b0e      	ldr	r3, [pc, #56]	@ (8008858 <tcp_netif_ip_addr_changed+0x78>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	60fb      	str	r3, [r7, #12]
 8008824:	e00c      	b.n	8008840 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	429a      	cmp	r2, r3
 8008830:	d103      	bne.n	800883a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	60fb      	str	r3, [r7, #12]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1ef      	bne.n	8008826 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008846:	bf00      	nop
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	20007c80 	.word	0x20007c80
 8008854:	20007c78 	.word	0x20007c78
 8008858:	20007c7c 	.word	0x20007c7c

0800885c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008868:	2b00      	cmp	r3, #0
 800886a:	d007      	beq.n	800887c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008870:	4618      	mov	r0, r3
 8008872:	f7ff fc3d 	bl	80080f0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800887c:	bf00      	nop
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008884:	b590      	push	{r4, r7, lr}
 8008886:	b08d      	sub	sp, #52	@ 0x34
 8008888:	af04      	add	r7, sp, #16
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d105      	bne.n	80088a0 <tcp_input+0x1c>
 8008894:	4b9b      	ldr	r3, [pc, #620]	@ (8008b04 <tcp_input+0x280>)
 8008896:	2283      	movs	r2, #131	@ 0x83
 8008898:	499b      	ldr	r1, [pc, #620]	@ (8008b08 <tcp_input+0x284>)
 800889a:	489c      	ldr	r0, [pc, #624]	@ (8008b0c <tcp_input+0x288>)
 800889c:	f006 fc78 	bl	800f190 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	4a9a      	ldr	r2, [pc, #616]	@ (8008b10 <tcp_input+0x28c>)
 80088a6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	895b      	ldrh	r3, [r3, #10]
 80088ac:	2b13      	cmp	r3, #19
 80088ae:	f240 83d1 	bls.w	8009054 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80088b2:	4b98      	ldr	r3, [pc, #608]	@ (8008b14 <tcp_input+0x290>)
 80088b4:	695b      	ldr	r3, [r3, #20]
 80088b6:	4a97      	ldr	r2, [pc, #604]	@ (8008b14 <tcp_input+0x290>)
 80088b8:	6812      	ldr	r2, [r2, #0]
 80088ba:	4611      	mov	r1, r2
 80088bc:	4618      	mov	r0, r3
 80088be:	f005 fc11 	bl	800e0e4 <ip4_addr_isbroadcast_u32>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f040 83c7 	bne.w	8009058 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80088ca:	4b92      	ldr	r3, [pc, #584]	@ (8008b14 <tcp_input+0x290>)
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80088d2:	2be0      	cmp	r3, #224	@ 0xe0
 80088d4:	f000 83c0 	beq.w	8009058 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80088d8:	4b8d      	ldr	r3, [pc, #564]	@ (8008b10 <tcp_input+0x28c>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	899b      	ldrh	r3, [r3, #12]
 80088de:	b29b      	uxth	r3, r3
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7fc fe4b 	bl	800557c <lwip_htons>
 80088e6:	4603      	mov	r3, r0
 80088e8:	0b1b      	lsrs	r3, r3, #12
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80088f2:	7cbb      	ldrb	r3, [r7, #18]
 80088f4:	2b13      	cmp	r3, #19
 80088f6:	f240 83b1 	bls.w	800905c <tcp_input+0x7d8>
 80088fa:	7cbb      	ldrb	r3, [r7, #18]
 80088fc:	b29a      	uxth	r2, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	891b      	ldrh	r3, [r3, #8]
 8008902:	429a      	cmp	r2, r3
 8008904:	f200 83aa 	bhi.w	800905c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008908:	7cbb      	ldrb	r3, [r7, #18]
 800890a:	b29b      	uxth	r3, r3
 800890c:	3b14      	subs	r3, #20
 800890e:	b29a      	uxth	r2, r3
 8008910:	4b81      	ldr	r3, [pc, #516]	@ (8008b18 <tcp_input+0x294>)
 8008912:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008914:	4b81      	ldr	r3, [pc, #516]	@ (8008b1c <tcp_input+0x298>)
 8008916:	2200      	movs	r2, #0
 8008918:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	895a      	ldrh	r2, [r3, #10]
 800891e:	7cbb      	ldrb	r3, [r7, #18]
 8008920:	b29b      	uxth	r3, r3
 8008922:	429a      	cmp	r2, r3
 8008924:	d309      	bcc.n	800893a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008926:	4b7c      	ldr	r3, [pc, #496]	@ (8008b18 <tcp_input+0x294>)
 8008928:	881a      	ldrh	r2, [r3, #0]
 800892a:	4b7d      	ldr	r3, [pc, #500]	@ (8008b20 <tcp_input+0x29c>)
 800892c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800892e:	7cbb      	ldrb	r3, [r7, #18]
 8008930:	4619      	mov	r1, r3
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7fe f8f6 	bl	8006b24 <pbuf_remove_header>
 8008938:	e04e      	b.n	80089d8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d105      	bne.n	800894e <tcp_input+0xca>
 8008942:	4b70      	ldr	r3, [pc, #448]	@ (8008b04 <tcp_input+0x280>)
 8008944:	22c2      	movs	r2, #194	@ 0xc2
 8008946:	4977      	ldr	r1, [pc, #476]	@ (8008b24 <tcp_input+0x2a0>)
 8008948:	4870      	ldr	r0, [pc, #448]	@ (8008b0c <tcp_input+0x288>)
 800894a:	f006 fc21 	bl	800f190 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800894e:	2114      	movs	r1, #20
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f7fe f8e7 	bl	8006b24 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	895a      	ldrh	r2, [r3, #10]
 800895a:	4b71      	ldr	r3, [pc, #452]	@ (8008b20 <tcp_input+0x29c>)
 800895c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800895e:	4b6e      	ldr	r3, [pc, #440]	@ (8008b18 <tcp_input+0x294>)
 8008960:	881a      	ldrh	r2, [r3, #0]
 8008962:	4b6f      	ldr	r3, [pc, #444]	@ (8008b20 <tcp_input+0x29c>)
 8008964:	881b      	ldrh	r3, [r3, #0]
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800896a:	4b6d      	ldr	r3, [pc, #436]	@ (8008b20 <tcp_input+0x29c>)
 800896c:	881b      	ldrh	r3, [r3, #0]
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f7fe f8d7 	bl	8006b24 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	895b      	ldrh	r3, [r3, #10]
 800897c:	8a3a      	ldrh	r2, [r7, #16]
 800897e:	429a      	cmp	r2, r3
 8008980:	f200 836e 	bhi.w	8009060 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	4a64      	ldr	r2, [pc, #400]	@ (8008b1c <tcp_input+0x298>)
 800898c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	8a3a      	ldrh	r2, [r7, #16]
 8008994:	4611      	mov	r1, r2
 8008996:	4618      	mov	r0, r3
 8008998:	f7fe f8c4 	bl	8006b24 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	891a      	ldrh	r2, [r3, #8]
 80089a0:	8a3b      	ldrh	r3, [r7, #16]
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	895b      	ldrh	r3, [r3, #10]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d005      	beq.n	80089be <tcp_input+0x13a>
 80089b2:	4b54      	ldr	r3, [pc, #336]	@ (8008b04 <tcp_input+0x280>)
 80089b4:	22df      	movs	r2, #223	@ 0xdf
 80089b6:	495c      	ldr	r1, [pc, #368]	@ (8008b28 <tcp_input+0x2a4>)
 80089b8:	4854      	ldr	r0, [pc, #336]	@ (8008b0c <tcp_input+0x288>)
 80089ba:	f006 fbe9 	bl	800f190 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	891a      	ldrh	r2, [r3, #8]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	891b      	ldrh	r3, [r3, #8]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d005      	beq.n	80089d8 <tcp_input+0x154>
 80089cc:	4b4d      	ldr	r3, [pc, #308]	@ (8008b04 <tcp_input+0x280>)
 80089ce:	22e0      	movs	r2, #224	@ 0xe0
 80089d0:	4956      	ldr	r1, [pc, #344]	@ (8008b2c <tcp_input+0x2a8>)
 80089d2:	484e      	ldr	r0, [pc, #312]	@ (8008b0c <tcp_input+0x288>)
 80089d4:	f006 fbdc 	bl	800f190 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80089d8:	4b4d      	ldr	r3, [pc, #308]	@ (8008b10 <tcp_input+0x28c>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	881b      	ldrh	r3, [r3, #0]
 80089de:	b29b      	uxth	r3, r3
 80089e0:	4a4b      	ldr	r2, [pc, #300]	@ (8008b10 <tcp_input+0x28c>)
 80089e2:	6814      	ldr	r4, [r2, #0]
 80089e4:	4618      	mov	r0, r3
 80089e6:	f7fc fdc9 	bl	800557c <lwip_htons>
 80089ea:	4603      	mov	r3, r0
 80089ec:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80089ee:	4b48      	ldr	r3, [pc, #288]	@ (8008b10 <tcp_input+0x28c>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	885b      	ldrh	r3, [r3, #2]
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	4a46      	ldr	r2, [pc, #280]	@ (8008b10 <tcp_input+0x28c>)
 80089f8:	6814      	ldr	r4, [r2, #0]
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7fc fdbe 	bl	800557c <lwip_htons>
 8008a00:	4603      	mov	r3, r0
 8008a02:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008a04:	4b42      	ldr	r3, [pc, #264]	@ (8008b10 <tcp_input+0x28c>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	4a41      	ldr	r2, [pc, #260]	@ (8008b10 <tcp_input+0x28c>)
 8008a0c:	6814      	ldr	r4, [r2, #0]
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7fc fdca 	bl	80055a8 <lwip_htonl>
 8008a14:	4603      	mov	r3, r0
 8008a16:	6063      	str	r3, [r4, #4]
 8008a18:	6863      	ldr	r3, [r4, #4]
 8008a1a:	4a45      	ldr	r2, [pc, #276]	@ (8008b30 <tcp_input+0x2ac>)
 8008a1c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008a1e:	4b3c      	ldr	r3, [pc, #240]	@ (8008b10 <tcp_input+0x28c>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	4a3a      	ldr	r2, [pc, #232]	@ (8008b10 <tcp_input+0x28c>)
 8008a26:	6814      	ldr	r4, [r2, #0]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7fc fdbd 	bl	80055a8 <lwip_htonl>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	60a3      	str	r3, [r4, #8]
 8008a32:	68a3      	ldr	r3, [r4, #8]
 8008a34:	4a3f      	ldr	r2, [pc, #252]	@ (8008b34 <tcp_input+0x2b0>)
 8008a36:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008a38:	4b35      	ldr	r3, [pc, #212]	@ (8008b10 <tcp_input+0x28c>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	89db      	ldrh	r3, [r3, #14]
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	4a33      	ldr	r2, [pc, #204]	@ (8008b10 <tcp_input+0x28c>)
 8008a42:	6814      	ldr	r4, [r2, #0]
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7fc fd99 	bl	800557c <lwip_htons>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008a4e:	4b30      	ldr	r3, [pc, #192]	@ (8008b10 <tcp_input+0x28c>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	899b      	ldrh	r3, [r3, #12]
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7fc fd90 	bl	800557c <lwip_htons>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a64:	b2da      	uxtb	r2, r3
 8008a66:	4b34      	ldr	r3, [pc, #208]	@ (8008b38 <tcp_input+0x2b4>)
 8008a68:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	891a      	ldrh	r2, [r3, #8]
 8008a6e:	4b33      	ldr	r3, [pc, #204]	@ (8008b3c <tcp_input+0x2b8>)
 8008a70:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008a72:	4b31      	ldr	r3, [pc, #196]	@ (8008b38 <tcp_input+0x2b4>)
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	f003 0303 	and.w	r3, r3, #3
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00c      	beq.n	8008a98 <tcp_input+0x214>
    tcplen++;
 8008a7e:	4b2f      	ldr	r3, [pc, #188]	@ (8008b3c <tcp_input+0x2b8>)
 8008a80:	881b      	ldrh	r3, [r3, #0]
 8008a82:	3301      	adds	r3, #1
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	4b2d      	ldr	r3, [pc, #180]	@ (8008b3c <tcp_input+0x2b8>)
 8008a88:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	891a      	ldrh	r2, [r3, #8]
 8008a8e:	4b2b      	ldr	r3, [pc, #172]	@ (8008b3c <tcp_input+0x2b8>)
 8008a90:	881b      	ldrh	r3, [r3, #0]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	f200 82e6 	bhi.w	8009064 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008a9c:	4b28      	ldr	r3, [pc, #160]	@ (8008b40 <tcp_input+0x2bc>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	61fb      	str	r3, [r7, #28]
 8008aa2:	e09d      	b.n	8008be0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	7d1b      	ldrb	r3, [r3, #20]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d105      	bne.n	8008ab8 <tcp_input+0x234>
 8008aac:	4b15      	ldr	r3, [pc, #84]	@ (8008b04 <tcp_input+0x280>)
 8008aae:	22fb      	movs	r2, #251	@ 0xfb
 8008ab0:	4924      	ldr	r1, [pc, #144]	@ (8008b44 <tcp_input+0x2c0>)
 8008ab2:	4816      	ldr	r0, [pc, #88]	@ (8008b0c <tcp_input+0x288>)
 8008ab4:	f006 fb6c 	bl	800f190 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	7d1b      	ldrb	r3, [r3, #20]
 8008abc:	2b0a      	cmp	r3, #10
 8008abe:	d105      	bne.n	8008acc <tcp_input+0x248>
 8008ac0:	4b10      	ldr	r3, [pc, #64]	@ (8008b04 <tcp_input+0x280>)
 8008ac2:	22fc      	movs	r2, #252	@ 0xfc
 8008ac4:	4920      	ldr	r1, [pc, #128]	@ (8008b48 <tcp_input+0x2c4>)
 8008ac6:	4811      	ldr	r0, [pc, #68]	@ (8008b0c <tcp_input+0x288>)
 8008ac8:	f006 fb62 	bl	800f190 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	7d1b      	ldrb	r3, [r3, #20]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d105      	bne.n	8008ae0 <tcp_input+0x25c>
 8008ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8008b04 <tcp_input+0x280>)
 8008ad6:	22fd      	movs	r2, #253	@ 0xfd
 8008ad8:	491c      	ldr	r1, [pc, #112]	@ (8008b4c <tcp_input+0x2c8>)
 8008ada:	480c      	ldr	r0, [pc, #48]	@ (8008b0c <tcp_input+0x288>)
 8008adc:	f006 fb58 	bl	800f190 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	7a1b      	ldrb	r3, [r3, #8]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d033      	beq.n	8008b50 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	7a1a      	ldrb	r2, [r3, #8]
 8008aec:	4b09      	ldr	r3, [pc, #36]	@ (8008b14 <tcp_input+0x290>)
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008af4:	3301      	adds	r3, #1
 8008af6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d029      	beq.n	8008b50 <tcp_input+0x2cc>
      prev = pcb;
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	61bb      	str	r3, [r7, #24]
      continue;
 8008b00:	e06b      	b.n	8008bda <tcp_input+0x356>
 8008b02:	bf00      	nop
 8008b04:	080111ec 	.word	0x080111ec
 8008b08:	08011220 	.word	0x08011220
 8008b0c:	08011238 	.word	0x08011238
 8008b10:	20007c9c 	.word	0x20007c9c
 8008b14:	20004d58 	.word	0x20004d58
 8008b18:	20007ca0 	.word	0x20007ca0
 8008b1c:	20007ca4 	.word	0x20007ca4
 8008b20:	20007ca2 	.word	0x20007ca2
 8008b24:	08011260 	.word	0x08011260
 8008b28:	08011270 	.word	0x08011270
 8008b2c:	0801127c 	.word	0x0801127c
 8008b30:	20007cac 	.word	0x20007cac
 8008b34:	20007cb0 	.word	0x20007cb0
 8008b38:	20007cb8 	.word	0x20007cb8
 8008b3c:	20007cb6 	.word	0x20007cb6
 8008b40:	20007c80 	.word	0x20007c80
 8008b44:	0801129c 	.word	0x0801129c
 8008b48:	080112c4 	.word	0x080112c4
 8008b4c:	080112f0 	.word	0x080112f0
    }

    if (pcb->remote_port == tcphdr->src &&
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	8b1a      	ldrh	r2, [r3, #24]
 8008b54:	4b72      	ldr	r3, [pc, #456]	@ (8008d20 <tcp_input+0x49c>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	881b      	ldrh	r3, [r3, #0]
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d13a      	bne.n	8008bd6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	8ada      	ldrh	r2, [r3, #22]
 8008b64:	4b6e      	ldr	r3, [pc, #440]	@ (8008d20 <tcp_input+0x49c>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	885b      	ldrh	r3, [r3, #2]
 8008b6a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d132      	bne.n	8008bd6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	685a      	ldr	r2, [r3, #4]
 8008b74:	4b6b      	ldr	r3, [pc, #428]	@ (8008d24 <tcp_input+0x4a0>)
 8008b76:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d12c      	bne.n	8008bd6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	4b68      	ldr	r3, [pc, #416]	@ (8008d24 <tcp_input+0x4a0>)
 8008b82:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d126      	bne.n	8008bd6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008b88:	69fb      	ldr	r3, [r7, #28]
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	69fa      	ldr	r2, [r7, #28]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d106      	bne.n	8008ba0 <tcp_input+0x31c>
 8008b92:	4b65      	ldr	r3, [pc, #404]	@ (8008d28 <tcp_input+0x4a4>)
 8008b94:	f240 120d 	movw	r2, #269	@ 0x10d
 8008b98:	4964      	ldr	r1, [pc, #400]	@ (8008d2c <tcp_input+0x4a8>)
 8008b9a:	4865      	ldr	r0, [pc, #404]	@ (8008d30 <tcp_input+0x4ac>)
 8008b9c:	f006 faf8 	bl	800f190 <iprintf>
      if (prev != NULL) {
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00a      	beq.n	8008bbc <tcp_input+0x338>
        prev->next = pcb->next;
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	68da      	ldr	r2, [r3, #12]
 8008baa:	69bb      	ldr	r3, [r7, #24]
 8008bac:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008bae:	4b61      	ldr	r3, [pc, #388]	@ (8008d34 <tcp_input+0x4b0>)
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008bb6:	4a5f      	ldr	r2, [pc, #380]	@ (8008d34 <tcp_input+0x4b0>)
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	69fa      	ldr	r2, [r7, #28]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d111      	bne.n	8008bea <tcp_input+0x366>
 8008bc6:	4b58      	ldr	r3, [pc, #352]	@ (8008d28 <tcp_input+0x4a4>)
 8008bc8:	f240 1215 	movw	r2, #277	@ 0x115
 8008bcc:	495a      	ldr	r1, [pc, #360]	@ (8008d38 <tcp_input+0x4b4>)
 8008bce:	4858      	ldr	r0, [pc, #352]	@ (8008d30 <tcp_input+0x4ac>)
 8008bd0:	f006 fade 	bl	800f190 <iprintf>
      break;
 8008bd4:	e009      	b.n	8008bea <tcp_input+0x366>
    }
    prev = pcb;
 8008bd6:	69fb      	ldr	r3, [r7, #28]
 8008bd8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	61fb      	str	r3, [r7, #28]
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f47f af5e 	bne.w	8008aa4 <tcp_input+0x220>
 8008be8:	e000      	b.n	8008bec <tcp_input+0x368>
      break;
 8008bea:	bf00      	nop
  }

  if (pcb == NULL) {
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	f040 80aa 	bne.w	8008d48 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008bf4:	4b51      	ldr	r3, [pc, #324]	@ (8008d3c <tcp_input+0x4b8>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	61fb      	str	r3, [r7, #28]
 8008bfa:	e03f      	b.n	8008c7c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	7d1b      	ldrb	r3, [r3, #20]
 8008c00:	2b0a      	cmp	r3, #10
 8008c02:	d006      	beq.n	8008c12 <tcp_input+0x38e>
 8008c04:	4b48      	ldr	r3, [pc, #288]	@ (8008d28 <tcp_input+0x4a4>)
 8008c06:	f240 121f 	movw	r2, #287	@ 0x11f
 8008c0a:	494d      	ldr	r1, [pc, #308]	@ (8008d40 <tcp_input+0x4bc>)
 8008c0c:	4848      	ldr	r0, [pc, #288]	@ (8008d30 <tcp_input+0x4ac>)
 8008c0e:	f006 fabf 	bl	800f190 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	7a1b      	ldrb	r3, [r3, #8]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d009      	beq.n	8008c2e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	7a1a      	ldrb	r2, [r3, #8]
 8008c1e:	4b41      	ldr	r3, [pc, #260]	@ (8008d24 <tcp_input+0x4a0>)
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008c26:	3301      	adds	r3, #1
 8008c28:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d122      	bne.n	8008c74 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	8b1a      	ldrh	r2, [r3, #24]
 8008c32:	4b3b      	ldr	r3, [pc, #236]	@ (8008d20 <tcp_input+0x49c>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	881b      	ldrh	r3, [r3, #0]
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d11b      	bne.n	8008c76 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	8ada      	ldrh	r2, [r3, #22]
 8008c42:	4b37      	ldr	r3, [pc, #220]	@ (8008d20 <tcp_input+0x49c>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	885b      	ldrh	r3, [r3, #2]
 8008c48:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d113      	bne.n	8008c76 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	4b34      	ldr	r3, [pc, #208]	@ (8008d24 <tcp_input+0x4a0>)
 8008c54:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d10d      	bne.n	8008c76 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	4b31      	ldr	r3, [pc, #196]	@ (8008d24 <tcp_input+0x4a0>)
 8008c60:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d107      	bne.n	8008c76 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008c66:	69f8      	ldr	r0, [r7, #28]
 8008c68:	f000 fb56 	bl	8009318 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f7fd ffdf 	bl	8006c30 <pbuf_free>
        return;
 8008c72:	e1fd      	b.n	8009070 <tcp_input+0x7ec>
        continue;
 8008c74:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	61fb      	str	r3, [r7, #28]
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d1bc      	bne.n	8008bfc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008c82:	2300      	movs	r3, #0
 8008c84:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008c86:	4b2f      	ldr	r3, [pc, #188]	@ (8008d44 <tcp_input+0x4c0>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	617b      	str	r3, [r7, #20]
 8008c8c:	e02a      	b.n	8008ce4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	7a1b      	ldrb	r3, [r3, #8]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00c      	beq.n	8008cb0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	7a1a      	ldrb	r2, [r3, #8]
 8008c9a:	4b22      	ldr	r3, [pc, #136]	@ (8008d24 <tcp_input+0x4a0>)
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d002      	beq.n	8008cb0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	61bb      	str	r3, [r7, #24]
        continue;
 8008cae:	e016      	b.n	8008cde <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	8ada      	ldrh	r2, [r3, #22]
 8008cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8008d20 <tcp_input+0x49c>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	885b      	ldrh	r3, [r3, #2]
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d10c      	bne.n	8008cda <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	4b17      	ldr	r3, [pc, #92]	@ (8008d24 <tcp_input+0x4a0>)
 8008cc6:	695b      	ldr	r3, [r3, #20]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d00f      	beq.n	8008cec <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00d      	beq.n	8008cee <tcp_input+0x46a>
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d009      	beq.n	8008cee <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	617b      	str	r3, [r7, #20]
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1d1      	bne.n	8008c8e <tcp_input+0x40a>
 8008cea:	e000      	b.n	8008cee <tcp_input+0x46a>
            break;
 8008cec:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d029      	beq.n	8008d48 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00a      	beq.n	8008d10 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	68da      	ldr	r2, [r3, #12]
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008d02:	4b10      	ldr	r3, [pc, #64]	@ (8008d44 <tcp_input+0x4c0>)
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008d0a:	4a0e      	ldr	r2, [pc, #56]	@ (8008d44 <tcp_input+0x4c0>)
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008d10:	6978      	ldr	r0, [r7, #20]
 8008d12:	f000 fa03 	bl	800911c <tcp_listen_input>
      }
      pbuf_free(p);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f7fd ff8a 	bl	8006c30 <pbuf_free>
      return;
 8008d1c:	e1a8      	b.n	8009070 <tcp_input+0x7ec>
 8008d1e:	bf00      	nop
 8008d20:	20007c9c 	.word	0x20007c9c
 8008d24:	20004d58 	.word	0x20004d58
 8008d28:	080111ec 	.word	0x080111ec
 8008d2c:	08011318 	.word	0x08011318
 8008d30:	08011238 	.word	0x08011238
 8008d34:	20007c80 	.word	0x20007c80
 8008d38:	08011344 	.word	0x08011344
 8008d3c:	20007c84 	.word	0x20007c84
 8008d40:	08011370 	.word	0x08011370
 8008d44:	20007c7c 	.word	0x20007c7c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	f000 8158 	beq.w	8009000 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008d50:	4b95      	ldr	r3, [pc, #596]	@ (8008fa8 <tcp_input+0x724>)
 8008d52:	2200      	movs	r2, #0
 8008d54:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	891a      	ldrh	r2, [r3, #8]
 8008d5a:	4b93      	ldr	r3, [pc, #588]	@ (8008fa8 <tcp_input+0x724>)
 8008d5c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008d5e:	4a92      	ldr	r2, [pc, #584]	@ (8008fa8 <tcp_input+0x724>)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008d64:	4b91      	ldr	r3, [pc, #580]	@ (8008fac <tcp_input+0x728>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a8f      	ldr	r2, [pc, #572]	@ (8008fa8 <tcp_input+0x724>)
 8008d6a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008d6c:	4b90      	ldr	r3, [pc, #576]	@ (8008fb0 <tcp_input+0x72c>)
 8008d6e:	2200      	movs	r2, #0
 8008d70:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008d72:	4b90      	ldr	r3, [pc, #576]	@ (8008fb4 <tcp_input+0x730>)
 8008d74:	2200      	movs	r2, #0
 8008d76:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008d78:	4b8f      	ldr	r3, [pc, #572]	@ (8008fb8 <tcp_input+0x734>)
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008d7e:	4b8f      	ldr	r3, [pc, #572]	@ (8008fbc <tcp_input+0x738>)
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	f003 0308 	and.w	r3, r3, #8
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d006      	beq.n	8008d98 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	7b5b      	ldrb	r3, [r3, #13]
 8008d8e:	f043 0301 	orr.w	r3, r3, #1
 8008d92:	b2da      	uxtb	r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d017      	beq.n	8008dd0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008da0:	69f8      	ldr	r0, [r7, #28]
 8008da2:	f7ff f929 	bl	8007ff8 <tcp_process_refused_data>
 8008da6:	4603      	mov	r3, r0
 8008da8:	f113 0f0d 	cmn.w	r3, #13
 8008dac:	d007      	beq.n	8008dbe <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d00c      	beq.n	8008dd0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008db6:	4b82      	ldr	r3, [pc, #520]	@ (8008fc0 <tcp_input+0x73c>)
 8008db8:	881b      	ldrh	r3, [r3, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d008      	beq.n	8008dd0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	f040 80e3 	bne.w	8008f8e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008dc8:	69f8      	ldr	r0, [r7, #28]
 8008dca:	f003 f9a7 	bl	800c11c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008dce:	e0de      	b.n	8008f8e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8008dd0:	4a7c      	ldr	r2, [pc, #496]	@ (8008fc4 <tcp_input+0x740>)
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008dd6:	69f8      	ldr	r0, [r7, #28]
 8008dd8:	f000 fb18 	bl	800940c <tcp_process>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008de0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008de4:	f113 0f0d 	cmn.w	r3, #13
 8008de8:	f000 80d3 	beq.w	8008f92 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8008dec:	4b71      	ldr	r3, [pc, #452]	@ (8008fb4 <tcp_input+0x730>)
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	f003 0308 	and.w	r3, r3, #8
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d015      	beq.n	8008e24 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d008      	beq.n	8008e14 <tcp_input+0x590>
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e08:	69fa      	ldr	r2, [r7, #28]
 8008e0a:	6912      	ldr	r2, [r2, #16]
 8008e0c:	f06f 010d 	mvn.w	r1, #13
 8008e10:	4610      	mov	r0, r2
 8008e12:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008e14:	69f9      	ldr	r1, [r7, #28]
 8008e16:	486c      	ldr	r0, [pc, #432]	@ (8008fc8 <tcp_input+0x744>)
 8008e18:	f7ff fbbc 	bl	8008594 <tcp_pcb_remove>
        tcp_free(pcb);
 8008e1c:	69f8      	ldr	r0, [r7, #28]
 8008e1e:	f7fe f9a7 	bl	8007170 <tcp_free>
 8008e22:	e0da      	b.n	8008fda <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8008e24:	2300      	movs	r3, #0
 8008e26:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008e28:	4b63      	ldr	r3, [pc, #396]	@ (8008fb8 <tcp_input+0x734>)
 8008e2a:	881b      	ldrh	r3, [r3, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d01d      	beq.n	8008e6c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008e30:	4b61      	ldr	r3, [pc, #388]	@ (8008fb8 <tcp_input+0x734>)
 8008e32:	881b      	ldrh	r3, [r3, #0]
 8008e34:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00a      	beq.n	8008e56 <tcp_input+0x5d2>
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e46:	69fa      	ldr	r2, [r7, #28]
 8008e48:	6910      	ldr	r0, [r2, #16]
 8008e4a:	89fa      	ldrh	r2, [r7, #14]
 8008e4c:	69f9      	ldr	r1, [r7, #28]
 8008e4e:	4798      	blx	r3
 8008e50:	4603      	mov	r3, r0
 8008e52:	74fb      	strb	r3, [r7, #19]
 8008e54:	e001      	b.n	8008e5a <tcp_input+0x5d6>
 8008e56:	2300      	movs	r3, #0
 8008e58:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008e5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008e5e:	f113 0f0d 	cmn.w	r3, #13
 8008e62:	f000 8098 	beq.w	8008f96 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008e66:	4b54      	ldr	r3, [pc, #336]	@ (8008fb8 <tcp_input+0x734>)
 8008e68:	2200      	movs	r2, #0
 8008e6a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008e6c:	69f8      	ldr	r0, [r7, #28]
 8008e6e:	f000 f915 	bl	800909c <tcp_input_delayed_close>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	f040 8090 	bne.w	8008f9a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008e7a:	4b4d      	ldr	r3, [pc, #308]	@ (8008fb0 <tcp_input+0x72c>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d041      	beq.n	8008f06 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d006      	beq.n	8008e98 <tcp_input+0x614>
 8008e8a:	4b50      	ldr	r3, [pc, #320]	@ (8008fcc <tcp_input+0x748>)
 8008e8c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8008e90:	494f      	ldr	r1, [pc, #316]	@ (8008fd0 <tcp_input+0x74c>)
 8008e92:	4850      	ldr	r0, [pc, #320]	@ (8008fd4 <tcp_input+0x750>)
 8008e94:	f006 f97c 	bl	800f190 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	8b5b      	ldrh	r3, [r3, #26]
 8008e9c:	f003 0310 	and.w	r3, r3, #16
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d008      	beq.n	8008eb6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008ea4:	4b42      	ldr	r3, [pc, #264]	@ (8008fb0 <tcp_input+0x72c>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f7fd fec1 	bl	8006c30 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008eae:	69f8      	ldr	r0, [r7, #28]
 8008eb0:	f7fe fc46 	bl	8007740 <tcp_abort>
            goto aborted;
 8008eb4:	e091      	b.n	8008fda <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00c      	beq.n	8008eda <tcp_input+0x656>
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	6918      	ldr	r0, [r3, #16]
 8008eca:	4b39      	ldr	r3, [pc, #228]	@ (8008fb0 <tcp_input+0x72c>)
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	2300      	movs	r3, #0
 8008ed0:	69f9      	ldr	r1, [r7, #28]
 8008ed2:	47a0      	blx	r4
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	74fb      	strb	r3, [r7, #19]
 8008ed8:	e008      	b.n	8008eec <tcp_input+0x668>
 8008eda:	4b35      	ldr	r3, [pc, #212]	@ (8008fb0 <tcp_input+0x72c>)
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	2300      	movs	r3, #0
 8008ee0:	69f9      	ldr	r1, [r7, #28]
 8008ee2:	2000      	movs	r0, #0
 8008ee4:	f7ff f95e 	bl	80081a4 <tcp_recv_null>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008eec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008ef0:	f113 0f0d 	cmn.w	r3, #13
 8008ef4:	d053      	beq.n	8008f9e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008ef6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d003      	beq.n	8008f06 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008efe:	4b2c      	ldr	r3, [pc, #176]	@ (8008fb0 <tcp_input+0x72c>)
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008f06:	4b2b      	ldr	r3, [pc, #172]	@ (8008fb4 <tcp_input+0x730>)
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	f003 0320 	and.w	r3, r3, #32
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d030      	beq.n	8008f74 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d009      	beq.n	8008f2e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008f1e:	7b5a      	ldrb	r2, [r3, #13]
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008f24:	f042 0220 	orr.w	r2, r2, #32
 8008f28:	b2d2      	uxtb	r2, r2
 8008f2a:	735a      	strb	r2, [r3, #13]
 8008f2c:	e022      	b.n	8008f74 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f32:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008f36:	d005      	beq.n	8008f44 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8008f38:	69fb      	ldr	r3, [r7, #28]
 8008f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	b29a      	uxth	r2, r3
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00b      	beq.n	8008f66 <tcp_input+0x6e2>
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	6918      	ldr	r0, [r3, #16]
 8008f58:	2300      	movs	r3, #0
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	69f9      	ldr	r1, [r7, #28]
 8008f5e:	47a0      	blx	r4
 8008f60:	4603      	mov	r3, r0
 8008f62:	74fb      	strb	r3, [r7, #19]
 8008f64:	e001      	b.n	8008f6a <tcp_input+0x6e6>
 8008f66:	2300      	movs	r3, #0
 8008f68:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008f6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008f6e:	f113 0f0d 	cmn.w	r3, #13
 8008f72:	d016      	beq.n	8008fa2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008f74:	4b13      	ldr	r3, [pc, #76]	@ (8008fc4 <tcp_input+0x740>)
 8008f76:	2200      	movs	r2, #0
 8008f78:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008f7a:	69f8      	ldr	r0, [r7, #28]
 8008f7c:	f000 f88e 	bl	800909c <tcp_input_delayed_close>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d128      	bne.n	8008fd8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008f86:	69f8      	ldr	r0, [r7, #28]
 8008f88:	f002 fac2 	bl	800b510 <tcp_output>
 8008f8c:	e025      	b.n	8008fda <tcp_input+0x756>
        goto aborted;
 8008f8e:	bf00      	nop
 8008f90:	e023      	b.n	8008fda <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008f92:	bf00      	nop
 8008f94:	e021      	b.n	8008fda <tcp_input+0x756>
              goto aborted;
 8008f96:	bf00      	nop
 8008f98:	e01f      	b.n	8008fda <tcp_input+0x756>
          goto aborted;
 8008f9a:	bf00      	nop
 8008f9c:	e01d      	b.n	8008fda <tcp_input+0x756>
            goto aborted;
 8008f9e:	bf00      	nop
 8008fa0:	e01b      	b.n	8008fda <tcp_input+0x756>
              goto aborted;
 8008fa2:	bf00      	nop
 8008fa4:	e019      	b.n	8008fda <tcp_input+0x756>
 8008fa6:	bf00      	nop
 8008fa8:	20007c8c 	.word	0x20007c8c
 8008fac:	20007c9c 	.word	0x20007c9c
 8008fb0:	20007cbc 	.word	0x20007cbc
 8008fb4:	20007cb9 	.word	0x20007cb9
 8008fb8:	20007cb4 	.word	0x20007cb4
 8008fbc:	20007cb8 	.word	0x20007cb8
 8008fc0:	20007cb6 	.word	0x20007cb6
 8008fc4:	20007cc0 	.word	0x20007cc0
 8008fc8:	20007c80 	.word	0x20007c80
 8008fcc:	080111ec 	.word	0x080111ec
 8008fd0:	080113a0 	.word	0x080113a0
 8008fd4:	08011238 	.word	0x08011238
          goto aborted;
 8008fd8:	bf00      	nop
    tcp_input_pcb = NULL;
 8008fda:	4b27      	ldr	r3, [pc, #156]	@ (8009078 <tcp_input+0x7f4>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008fe0:	4b26      	ldr	r3, [pc, #152]	@ (800907c <tcp_input+0x7f8>)
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008fe6:	4b26      	ldr	r3, [pc, #152]	@ (8009080 <tcp_input+0x7fc>)
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d03f      	beq.n	800906e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8008fee:	4b24      	ldr	r3, [pc, #144]	@ (8009080 <tcp_input+0x7fc>)
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7fd fe1c 	bl	8006c30 <pbuf_free>
      inseg.p = NULL;
 8008ff8:	4b21      	ldr	r3, [pc, #132]	@ (8009080 <tcp_input+0x7fc>)
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008ffe:	e036      	b.n	800906e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009000:	4b20      	ldr	r3, [pc, #128]	@ (8009084 <tcp_input+0x800>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	899b      	ldrh	r3, [r3, #12]
 8009006:	b29b      	uxth	r3, r3
 8009008:	4618      	mov	r0, r3
 800900a:	f7fc fab7 	bl	800557c <lwip_htons>
 800900e:	4603      	mov	r3, r0
 8009010:	b2db      	uxtb	r3, r3
 8009012:	f003 0304 	and.w	r3, r3, #4
 8009016:	2b00      	cmp	r3, #0
 8009018:	d118      	bne.n	800904c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800901a:	4b1b      	ldr	r3, [pc, #108]	@ (8009088 <tcp_input+0x804>)
 800901c:	6819      	ldr	r1, [r3, #0]
 800901e:	4b1b      	ldr	r3, [pc, #108]	@ (800908c <tcp_input+0x808>)
 8009020:	881b      	ldrh	r3, [r3, #0]
 8009022:	461a      	mov	r2, r3
 8009024:	4b1a      	ldr	r3, [pc, #104]	@ (8009090 <tcp_input+0x80c>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800902a:	4b16      	ldr	r3, [pc, #88]	@ (8009084 <tcp_input+0x800>)
 800902c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800902e:	885b      	ldrh	r3, [r3, #2]
 8009030:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009032:	4a14      	ldr	r2, [pc, #80]	@ (8009084 <tcp_input+0x800>)
 8009034:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009036:	8812      	ldrh	r2, [r2, #0]
 8009038:	b292      	uxth	r2, r2
 800903a:	9202      	str	r2, [sp, #8]
 800903c:	9301      	str	r3, [sp, #4]
 800903e:	4b15      	ldr	r3, [pc, #84]	@ (8009094 <tcp_input+0x810>)
 8009040:	9300      	str	r3, [sp, #0]
 8009042:	4b15      	ldr	r3, [pc, #84]	@ (8009098 <tcp_input+0x814>)
 8009044:	4602      	mov	r2, r0
 8009046:	2000      	movs	r0, #0
 8009048:	f003 f816 	bl	800c078 <tcp_rst>
    pbuf_free(p);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f7fd fdef 	bl	8006c30 <pbuf_free>
  return;
 8009052:	e00c      	b.n	800906e <tcp_input+0x7ea>
    goto dropped;
 8009054:	bf00      	nop
 8009056:	e006      	b.n	8009066 <tcp_input+0x7e2>
    goto dropped;
 8009058:	bf00      	nop
 800905a:	e004      	b.n	8009066 <tcp_input+0x7e2>
    goto dropped;
 800905c:	bf00      	nop
 800905e:	e002      	b.n	8009066 <tcp_input+0x7e2>
      goto dropped;
 8009060:	bf00      	nop
 8009062:	e000      	b.n	8009066 <tcp_input+0x7e2>
      goto dropped;
 8009064:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f7fd fde2 	bl	8006c30 <pbuf_free>
 800906c:	e000      	b.n	8009070 <tcp_input+0x7ec>
  return;
 800906e:	bf00      	nop
}
 8009070:	3724      	adds	r7, #36	@ 0x24
 8009072:	46bd      	mov	sp, r7
 8009074:	bd90      	pop	{r4, r7, pc}
 8009076:	bf00      	nop
 8009078:	20007cc0 	.word	0x20007cc0
 800907c:	20007cbc 	.word	0x20007cbc
 8009080:	20007c8c 	.word	0x20007c8c
 8009084:	20007c9c 	.word	0x20007c9c
 8009088:	20007cb0 	.word	0x20007cb0
 800908c:	20007cb6 	.word	0x20007cb6
 8009090:	20007cac 	.word	0x20007cac
 8009094:	20004d68 	.word	0x20004d68
 8009098:	20004d6c 	.word	0x20004d6c

0800909c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d106      	bne.n	80090b8 <tcp_input_delayed_close+0x1c>
 80090aa:	4b17      	ldr	r3, [pc, #92]	@ (8009108 <tcp_input_delayed_close+0x6c>)
 80090ac:	f240 225a 	movw	r2, #602	@ 0x25a
 80090b0:	4916      	ldr	r1, [pc, #88]	@ (800910c <tcp_input_delayed_close+0x70>)
 80090b2:	4817      	ldr	r0, [pc, #92]	@ (8009110 <tcp_input_delayed_close+0x74>)
 80090b4:	f006 f86c 	bl	800f190 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80090b8:	4b16      	ldr	r3, [pc, #88]	@ (8009114 <tcp_input_delayed_close+0x78>)
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	f003 0310 	and.w	r3, r3, #16
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d01c      	beq.n	80090fe <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	8b5b      	ldrh	r3, [r3, #26]
 80090c8:	f003 0310 	and.w	r3, r3, #16
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d10d      	bne.n	80090ec <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d008      	beq.n	80090ec <tcp_input_delayed_close+0x50>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	6912      	ldr	r2, [r2, #16]
 80090e4:	f06f 010e 	mvn.w	r1, #14
 80090e8:	4610      	mov	r0, r2
 80090ea:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80090ec:	6879      	ldr	r1, [r7, #4]
 80090ee:	480a      	ldr	r0, [pc, #40]	@ (8009118 <tcp_input_delayed_close+0x7c>)
 80090f0:	f7ff fa50 	bl	8008594 <tcp_pcb_remove>
    tcp_free(pcb);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f7fe f83b 	bl	8007170 <tcp_free>
    return 1;
 80090fa:	2301      	movs	r3, #1
 80090fc:	e000      	b.n	8009100 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	3708      	adds	r7, #8
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	080111ec 	.word	0x080111ec
 800910c:	080113bc 	.word	0x080113bc
 8009110:	08011238 	.word	0x08011238
 8009114:	20007cb9 	.word	0x20007cb9
 8009118:	20007c80 	.word	0x20007c80

0800911c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800911c:	b590      	push	{r4, r7, lr}
 800911e:	b08b      	sub	sp, #44	@ 0x2c
 8009120:	af04      	add	r7, sp, #16
 8009122:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009124:	4b6f      	ldr	r3, [pc, #444]	@ (80092e4 <tcp_listen_input+0x1c8>)
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	f003 0304 	and.w	r3, r3, #4
 800912c:	2b00      	cmp	r3, #0
 800912e:	f040 80d2 	bne.w	80092d6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d106      	bne.n	8009146 <tcp_listen_input+0x2a>
 8009138:	4b6b      	ldr	r3, [pc, #428]	@ (80092e8 <tcp_listen_input+0x1cc>)
 800913a:	f240 2281 	movw	r2, #641	@ 0x281
 800913e:	496b      	ldr	r1, [pc, #428]	@ (80092ec <tcp_listen_input+0x1d0>)
 8009140:	486b      	ldr	r0, [pc, #428]	@ (80092f0 <tcp_listen_input+0x1d4>)
 8009142:	f006 f825 	bl	800f190 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009146:	4b67      	ldr	r3, [pc, #412]	@ (80092e4 <tcp_listen_input+0x1c8>)
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	f003 0310 	and.w	r3, r3, #16
 800914e:	2b00      	cmp	r3, #0
 8009150:	d019      	beq.n	8009186 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009152:	4b68      	ldr	r3, [pc, #416]	@ (80092f4 <tcp_listen_input+0x1d8>)
 8009154:	6819      	ldr	r1, [r3, #0]
 8009156:	4b68      	ldr	r3, [pc, #416]	@ (80092f8 <tcp_listen_input+0x1dc>)
 8009158:	881b      	ldrh	r3, [r3, #0]
 800915a:	461a      	mov	r2, r3
 800915c:	4b67      	ldr	r3, [pc, #412]	@ (80092fc <tcp_listen_input+0x1e0>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009162:	4b67      	ldr	r3, [pc, #412]	@ (8009300 <tcp_listen_input+0x1e4>)
 8009164:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009166:	885b      	ldrh	r3, [r3, #2]
 8009168:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800916a:	4a65      	ldr	r2, [pc, #404]	@ (8009300 <tcp_listen_input+0x1e4>)
 800916c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800916e:	8812      	ldrh	r2, [r2, #0]
 8009170:	b292      	uxth	r2, r2
 8009172:	9202      	str	r2, [sp, #8]
 8009174:	9301      	str	r3, [sp, #4]
 8009176:	4b63      	ldr	r3, [pc, #396]	@ (8009304 <tcp_listen_input+0x1e8>)
 8009178:	9300      	str	r3, [sp, #0]
 800917a:	4b63      	ldr	r3, [pc, #396]	@ (8009308 <tcp_listen_input+0x1ec>)
 800917c:	4602      	mov	r2, r0
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f002 ff7a 	bl	800c078 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009184:	e0a9      	b.n	80092da <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8009186:	4b57      	ldr	r3, [pc, #348]	@ (80092e4 <tcp_listen_input+0x1c8>)
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	f003 0302 	and.w	r3, r3, #2
 800918e:	2b00      	cmp	r3, #0
 8009190:	f000 80a3 	beq.w	80092da <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	7d5b      	ldrb	r3, [r3, #21]
 8009198:	4618      	mov	r0, r3
 800919a:	f7ff f927 	bl	80083ec <tcp_alloc>
 800919e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d111      	bne.n	80091ca <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d00a      	beq.n	80091c4 <tcp_listen_input+0xa8>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	699b      	ldr	r3, [r3, #24]
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	6910      	ldr	r0, [r2, #16]
 80091b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80091ba:	2100      	movs	r1, #0
 80091bc:	4798      	blx	r3
 80091be:	4603      	mov	r3, r0
 80091c0:	73bb      	strb	r3, [r7, #14]
      return;
 80091c2:	e08b      	b.n	80092dc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80091c4:	23f0      	movs	r3, #240	@ 0xf0
 80091c6:	73bb      	strb	r3, [r7, #14]
      return;
 80091c8:	e088      	b.n	80092dc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80091ca:	4b50      	ldr	r3, [pc, #320]	@ (800930c <tcp_listen_input+0x1f0>)
 80091cc:	695a      	ldr	r2, [r3, #20]
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80091d2:	4b4e      	ldr	r3, [pc, #312]	@ (800930c <tcp_listen_input+0x1f0>)
 80091d4:	691a      	ldr	r2, [r3, #16]
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	8ada      	ldrh	r2, [r3, #22]
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80091e2:	4b47      	ldr	r3, [pc, #284]	@ (8009300 <tcp_listen_input+0x1e4>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	881b      	ldrh	r3, [r3, #0]
 80091e8:	b29a      	uxth	r2, r3
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	2203      	movs	r2, #3
 80091f2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80091f4:	4b41      	ldr	r3, [pc, #260]	@ (80092fc <tcp_listen_input+0x1e0>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	1c5a      	adds	r2, r3, #1
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8009206:	6978      	ldr	r0, [r7, #20]
 8009208:	f7ff fa58 	bl	80086bc <tcp_next_iss>
 800920c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	693a      	ldr	r2, [r7, #16]
 8009212:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	693a      	ldr	r2, [r7, #16]
 8009218:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	693a      	ldr	r2, [r7, #16]
 800921e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	693a      	ldr	r2, [r7, #16]
 8009224:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009226:	4b35      	ldr	r3, [pc, #212]	@ (80092fc <tcp_listen_input+0x1e0>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	1e5a      	subs	r2, r3, #1
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	691a      	ldr	r2, [r3, #16]
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	7a5b      	ldrb	r3, [r3, #9]
 8009242:	f003 030c 	and.w	r3, r3, #12
 8009246:	b2da      	uxtb	r2, r3
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	7a1a      	ldrb	r2, [r3, #8]
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009254:	4b2e      	ldr	r3, [pc, #184]	@ (8009310 <tcp_listen_input+0x1f4>)
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	60da      	str	r2, [r3, #12]
 800925c:	4a2c      	ldr	r2, [pc, #176]	@ (8009310 <tcp_listen_input+0x1f4>)
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	6013      	str	r3, [r2, #0]
 8009262:	f003 f8cb 	bl	800c3fc <tcp_timer_needed>
 8009266:	4b2b      	ldr	r3, [pc, #172]	@ (8009314 <tcp_listen_input+0x1f8>)
 8009268:	2201      	movs	r2, #1
 800926a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800926c:	6978      	ldr	r0, [r7, #20]
 800926e:	f001 fd8b 	bl	800ad88 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009272:	4b23      	ldr	r3, [pc, #140]	@ (8009300 <tcp_listen_input+0x1e4>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	89db      	ldrh	r3, [r3, #14]
 8009278:	b29a      	uxth	r2, r3
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	3304      	adds	r3, #4
 8009294:	4618      	mov	r0, r3
 8009296:	f004 fc8f 	bl	800dbb8 <ip4_route>
 800929a:	4601      	mov	r1, r0
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	3304      	adds	r3, #4
 80092a0:	461a      	mov	r2, r3
 80092a2:	4620      	mov	r0, r4
 80092a4:	f7ff fa30 	bl	8008708 <tcp_eff_send_mss_netif>
 80092a8:	4603      	mov	r3, r0
 80092aa:	461a      	mov	r2, r3
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80092b0:	2112      	movs	r1, #18
 80092b2:	6978      	ldr	r0, [r7, #20]
 80092b4:	f002 f83e 	bl	800b334 <tcp_enqueue_flags>
 80092b8:	4603      	mov	r3, r0
 80092ba:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80092bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d004      	beq.n	80092ce <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80092c4:	2100      	movs	r1, #0
 80092c6:	6978      	ldr	r0, [r7, #20]
 80092c8:	f7fe f97c 	bl	80075c4 <tcp_abandon>
      return;
 80092cc:	e006      	b.n	80092dc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80092ce:	6978      	ldr	r0, [r7, #20]
 80092d0:	f002 f91e 	bl	800b510 <tcp_output>
  return;
 80092d4:	e001      	b.n	80092da <tcp_listen_input+0x1be>
    return;
 80092d6:	bf00      	nop
 80092d8:	e000      	b.n	80092dc <tcp_listen_input+0x1c0>
  return;
 80092da:	bf00      	nop
}
 80092dc:	371c      	adds	r7, #28
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd90      	pop	{r4, r7, pc}
 80092e2:	bf00      	nop
 80092e4:	20007cb8 	.word	0x20007cb8
 80092e8:	080111ec 	.word	0x080111ec
 80092ec:	080113e4 	.word	0x080113e4
 80092f0:	08011238 	.word	0x08011238
 80092f4:	20007cb0 	.word	0x20007cb0
 80092f8:	20007cb6 	.word	0x20007cb6
 80092fc:	20007cac 	.word	0x20007cac
 8009300:	20007c9c 	.word	0x20007c9c
 8009304:	20004d68 	.word	0x20004d68
 8009308:	20004d6c 	.word	0x20004d6c
 800930c:	20004d58 	.word	0x20004d58
 8009310:	20007c80 	.word	0x20007c80
 8009314:	20007c88 	.word	0x20007c88

08009318 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b086      	sub	sp, #24
 800931c:	af04      	add	r7, sp, #16
 800931e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009320:	4b2f      	ldr	r3, [pc, #188]	@ (80093e0 <tcp_timewait_input+0xc8>)
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	f003 0304 	and.w	r3, r3, #4
 8009328:	2b00      	cmp	r3, #0
 800932a:	d153      	bne.n	80093d4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d106      	bne.n	8009340 <tcp_timewait_input+0x28>
 8009332:	4b2c      	ldr	r3, [pc, #176]	@ (80093e4 <tcp_timewait_input+0xcc>)
 8009334:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8009338:	492b      	ldr	r1, [pc, #172]	@ (80093e8 <tcp_timewait_input+0xd0>)
 800933a:	482c      	ldr	r0, [pc, #176]	@ (80093ec <tcp_timewait_input+0xd4>)
 800933c:	f005 ff28 	bl	800f190 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009340:	4b27      	ldr	r3, [pc, #156]	@ (80093e0 <tcp_timewait_input+0xc8>)
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	f003 0302 	and.w	r3, r3, #2
 8009348:	2b00      	cmp	r3, #0
 800934a:	d02a      	beq.n	80093a2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800934c:	4b28      	ldr	r3, [pc, #160]	@ (80093f0 <tcp_timewait_input+0xd8>)
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	2b00      	cmp	r3, #0
 8009358:	db2d      	blt.n	80093b6 <tcp_timewait_input+0x9e>
 800935a:	4b25      	ldr	r3, [pc, #148]	@ (80093f0 <tcp_timewait_input+0xd8>)
 800935c:	681a      	ldr	r2, [r3, #0]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009362:	6879      	ldr	r1, [r7, #4]
 8009364:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009366:	440b      	add	r3, r1
 8009368:	1ad3      	subs	r3, r2, r3
 800936a:	2b00      	cmp	r3, #0
 800936c:	dc23      	bgt.n	80093b6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800936e:	4b21      	ldr	r3, [pc, #132]	@ (80093f4 <tcp_timewait_input+0xdc>)
 8009370:	6819      	ldr	r1, [r3, #0]
 8009372:	4b21      	ldr	r3, [pc, #132]	@ (80093f8 <tcp_timewait_input+0xe0>)
 8009374:	881b      	ldrh	r3, [r3, #0]
 8009376:	461a      	mov	r2, r3
 8009378:	4b1d      	ldr	r3, [pc, #116]	@ (80093f0 <tcp_timewait_input+0xd8>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800937e:	4b1f      	ldr	r3, [pc, #124]	@ (80093fc <tcp_timewait_input+0xe4>)
 8009380:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009382:	885b      	ldrh	r3, [r3, #2]
 8009384:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009386:	4a1d      	ldr	r2, [pc, #116]	@ (80093fc <tcp_timewait_input+0xe4>)
 8009388:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800938a:	8812      	ldrh	r2, [r2, #0]
 800938c:	b292      	uxth	r2, r2
 800938e:	9202      	str	r2, [sp, #8]
 8009390:	9301      	str	r3, [sp, #4]
 8009392:	4b1b      	ldr	r3, [pc, #108]	@ (8009400 <tcp_timewait_input+0xe8>)
 8009394:	9300      	str	r3, [sp, #0]
 8009396:	4b1b      	ldr	r3, [pc, #108]	@ (8009404 <tcp_timewait_input+0xec>)
 8009398:	4602      	mov	r2, r0
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f002 fe6c 	bl	800c078 <tcp_rst>
      return;
 80093a0:	e01b      	b.n	80093da <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80093a2:	4b0f      	ldr	r3, [pc, #60]	@ (80093e0 <tcp_timewait_input+0xc8>)
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	f003 0301 	and.w	r3, r3, #1
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d003      	beq.n	80093b6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80093ae:	4b16      	ldr	r3, [pc, #88]	@ (8009408 <tcp_timewait_input+0xf0>)
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80093b6:	4b10      	ldr	r3, [pc, #64]	@ (80093f8 <tcp_timewait_input+0xe0>)
 80093b8:	881b      	ldrh	r3, [r3, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00c      	beq.n	80093d8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	8b5b      	ldrh	r3, [r3, #26]
 80093c2:	f043 0302 	orr.w	r3, r3, #2
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f002 f89f 	bl	800b510 <tcp_output>
  }
  return;
 80093d2:	e001      	b.n	80093d8 <tcp_timewait_input+0xc0>
    return;
 80093d4:	bf00      	nop
 80093d6:	e000      	b.n	80093da <tcp_timewait_input+0xc2>
  return;
 80093d8:	bf00      	nop
}
 80093da:	3708      	adds	r7, #8
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	20007cb8 	.word	0x20007cb8
 80093e4:	080111ec 	.word	0x080111ec
 80093e8:	08011404 	.word	0x08011404
 80093ec:	08011238 	.word	0x08011238
 80093f0:	20007cac 	.word	0x20007cac
 80093f4:	20007cb0 	.word	0x20007cb0
 80093f8:	20007cb6 	.word	0x20007cb6
 80093fc:	20007c9c 	.word	0x20007c9c
 8009400:	20004d68 	.word	0x20004d68
 8009404:	20004d6c 	.word	0x20004d6c
 8009408:	20007c74 	.word	0x20007c74

0800940c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800940c:	b590      	push	{r4, r7, lr}
 800940e:	b08d      	sub	sp, #52	@ 0x34
 8009410:	af04      	add	r7, sp, #16
 8009412:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009414:	2300      	movs	r3, #0
 8009416:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d106      	bne.n	8009430 <tcp_process+0x24>
 8009422:	4b9d      	ldr	r3, [pc, #628]	@ (8009698 <tcp_process+0x28c>)
 8009424:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8009428:	499c      	ldr	r1, [pc, #624]	@ (800969c <tcp_process+0x290>)
 800942a:	489d      	ldr	r0, [pc, #628]	@ (80096a0 <tcp_process+0x294>)
 800942c:	f005 feb0 	bl	800f190 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009430:	4b9c      	ldr	r3, [pc, #624]	@ (80096a4 <tcp_process+0x298>)
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	f003 0304 	and.w	r3, r3, #4
 8009438:	2b00      	cmp	r3, #0
 800943a:	d04e      	beq.n	80094da <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	7d1b      	ldrb	r3, [r3, #20]
 8009440:	2b02      	cmp	r3, #2
 8009442:	d108      	bne.n	8009456 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009448:	4b97      	ldr	r3, [pc, #604]	@ (80096a8 <tcp_process+0x29c>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	429a      	cmp	r2, r3
 800944e:	d123      	bne.n	8009498 <tcp_process+0x8c>
        acceptable = 1;
 8009450:	2301      	movs	r3, #1
 8009452:	76fb      	strb	r3, [r7, #27]
 8009454:	e020      	b.n	8009498 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800945a:	4b94      	ldr	r3, [pc, #592]	@ (80096ac <tcp_process+0x2a0>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	429a      	cmp	r2, r3
 8009460:	d102      	bne.n	8009468 <tcp_process+0x5c>
        acceptable = 1;
 8009462:	2301      	movs	r3, #1
 8009464:	76fb      	strb	r3, [r7, #27]
 8009466:	e017      	b.n	8009498 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009468:	4b90      	ldr	r3, [pc, #576]	@ (80096ac <tcp_process+0x2a0>)
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	2b00      	cmp	r3, #0
 8009474:	db10      	blt.n	8009498 <tcp_process+0x8c>
 8009476:	4b8d      	ldr	r3, [pc, #564]	@ (80096ac <tcp_process+0x2a0>)
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800947e:	6879      	ldr	r1, [r7, #4]
 8009480:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009482:	440b      	add	r3, r1
 8009484:	1ad3      	subs	r3, r2, r3
 8009486:	2b00      	cmp	r3, #0
 8009488:	dc06      	bgt.n	8009498 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	8b5b      	ldrh	r3, [r3, #26]
 800948e:	f043 0302 	orr.w	r3, r3, #2
 8009492:	b29a      	uxth	r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009498:	7efb      	ldrb	r3, [r7, #27]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d01b      	beq.n	80094d6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	7d1b      	ldrb	r3, [r3, #20]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d106      	bne.n	80094b4 <tcp_process+0xa8>
 80094a6:	4b7c      	ldr	r3, [pc, #496]	@ (8009698 <tcp_process+0x28c>)
 80094a8:	f44f 724e 	mov.w	r2, #824	@ 0x338
 80094ac:	4980      	ldr	r1, [pc, #512]	@ (80096b0 <tcp_process+0x2a4>)
 80094ae:	487c      	ldr	r0, [pc, #496]	@ (80096a0 <tcp_process+0x294>)
 80094b0:	f005 fe6e 	bl	800f190 <iprintf>
      recv_flags |= TF_RESET;
 80094b4:	4b7f      	ldr	r3, [pc, #508]	@ (80096b4 <tcp_process+0x2a8>)
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	f043 0308 	orr.w	r3, r3, #8
 80094bc:	b2da      	uxtb	r2, r3
 80094be:	4b7d      	ldr	r3, [pc, #500]	@ (80096b4 <tcp_process+0x2a8>)
 80094c0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	8b5b      	ldrh	r3, [r3, #26]
 80094c6:	f023 0301 	bic.w	r3, r3, #1
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80094d0:	f06f 030d 	mvn.w	r3, #13
 80094d4:	e37a      	b.n	8009bcc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80094d6:	2300      	movs	r3, #0
 80094d8:	e378      	b.n	8009bcc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80094da:	4b72      	ldr	r3, [pc, #456]	@ (80096a4 <tcp_process+0x298>)
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	f003 0302 	and.w	r3, r3, #2
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d010      	beq.n	8009508 <tcp_process+0xfc>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	7d1b      	ldrb	r3, [r3, #20]
 80094ea:	2b02      	cmp	r3, #2
 80094ec:	d00c      	beq.n	8009508 <tcp_process+0xfc>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	7d1b      	ldrb	r3, [r3, #20]
 80094f2:	2b03      	cmp	r3, #3
 80094f4:	d008      	beq.n	8009508 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	8b5b      	ldrh	r3, [r3, #26]
 80094fa:	f043 0302 	orr.w	r3, r3, #2
 80094fe:	b29a      	uxth	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8009504:	2300      	movs	r3, #0
 8009506:	e361      	b.n	8009bcc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	8b5b      	ldrh	r3, [r3, #26]
 800950c:	f003 0310 	and.w	r3, r3, #16
 8009510:	2b00      	cmp	r3, #0
 8009512:	d103      	bne.n	800951c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009514:	4b68      	ldr	r3, [pc, #416]	@ (80096b8 <tcp_process+0x2ac>)
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f001 fc2b 	bl	800ad88 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	7d1b      	ldrb	r3, [r3, #20]
 8009536:	3b02      	subs	r3, #2
 8009538:	2b07      	cmp	r3, #7
 800953a:	f200 8337 	bhi.w	8009bac <tcp_process+0x7a0>
 800953e:	a201      	add	r2, pc, #4	@ (adr r2, 8009544 <tcp_process+0x138>)
 8009540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009544:	08009565 	.word	0x08009565
 8009548:	08009795 	.word	0x08009795
 800954c:	0800990d 	.word	0x0800990d
 8009550:	08009937 	.word	0x08009937
 8009554:	08009a5b 	.word	0x08009a5b
 8009558:	0800990d 	.word	0x0800990d
 800955c:	08009ae7 	.word	0x08009ae7
 8009560:	08009b77 	.word	0x08009b77
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009564:	4b4f      	ldr	r3, [pc, #316]	@ (80096a4 <tcp_process+0x298>)
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	f003 0310 	and.w	r3, r3, #16
 800956c:	2b00      	cmp	r3, #0
 800956e:	f000 80e4 	beq.w	800973a <tcp_process+0x32e>
 8009572:	4b4c      	ldr	r3, [pc, #304]	@ (80096a4 <tcp_process+0x298>)
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	f003 0302 	and.w	r3, r3, #2
 800957a:	2b00      	cmp	r3, #0
 800957c:	f000 80dd 	beq.w	800973a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009584:	1c5a      	adds	r2, r3, #1
 8009586:	4b48      	ldr	r3, [pc, #288]	@ (80096a8 <tcp_process+0x29c>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	429a      	cmp	r2, r3
 800958c:	f040 80d5 	bne.w	800973a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009590:	4b46      	ldr	r3, [pc, #280]	@ (80096ac <tcp_process+0x2a0>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	1c5a      	adds	r2, r3, #1
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80095a2:	4b41      	ldr	r3, [pc, #260]	@ (80096a8 <tcp_process+0x29c>)
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80095aa:	4b44      	ldr	r3, [pc, #272]	@ (80096bc <tcp_process+0x2b0>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	89db      	ldrh	r3, [r3, #14]
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80095c4:	4b39      	ldr	r3, [pc, #228]	@ (80096ac <tcp_process+0x2a0>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	1e5a      	subs	r2, r3, #1
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2204      	movs	r2, #4
 80095d2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	3304      	adds	r3, #4
 80095dc:	4618      	mov	r0, r3
 80095de:	f004 faeb 	bl	800dbb8 <ip4_route>
 80095e2:	4601      	mov	r1, r0
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	3304      	adds	r3, #4
 80095e8:	461a      	mov	r2, r3
 80095ea:	4620      	mov	r0, r4
 80095ec:	f7ff f88c 	bl	8008708 <tcp_eff_send_mss_netif>
 80095f0:	4603      	mov	r3, r0
 80095f2:	461a      	mov	r2, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80095fc:	009a      	lsls	r2, r3, #2
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009602:	005b      	lsls	r3, r3, #1
 8009604:	f241 111c 	movw	r1, #4380	@ 0x111c
 8009608:	428b      	cmp	r3, r1
 800960a:	bf38      	it	cc
 800960c:	460b      	movcc	r3, r1
 800960e:	429a      	cmp	r2, r3
 8009610:	d204      	bcs.n	800961c <tcp_process+0x210>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	b29b      	uxth	r3, r3
 800961a:	e00d      	b.n	8009638 <tcp_process+0x22c>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009620:	005b      	lsls	r3, r3, #1
 8009622:	f241 121c 	movw	r2, #4380	@ 0x111c
 8009626:	4293      	cmp	r3, r2
 8009628:	d904      	bls.n	8009634 <tcp_process+0x228>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800962e:	005b      	lsls	r3, r3, #1
 8009630:	b29b      	uxth	r3, r3
 8009632:	e001      	b.n	8009638 <tcp_process+0x22c>
 8009634:	f241 131c 	movw	r3, #4380	@ 0x111c
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009644:	2b00      	cmp	r3, #0
 8009646:	d106      	bne.n	8009656 <tcp_process+0x24a>
 8009648:	4b13      	ldr	r3, [pc, #76]	@ (8009698 <tcp_process+0x28c>)
 800964a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800964e:	491c      	ldr	r1, [pc, #112]	@ (80096c0 <tcp_process+0x2b4>)
 8009650:	4813      	ldr	r0, [pc, #76]	@ (80096a0 <tcp_process+0x294>)
 8009652:	f005 fd9d 	bl	800f190 <iprintf>
        --pcb->snd_queuelen;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800965c:	3b01      	subs	r3, #1
 800965e:	b29a      	uxth	r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800966a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800966c:	69fb      	ldr	r3, [r7, #28]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d12a      	bne.n	80096c8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009676:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009678:	69fb      	ldr	r3, [r7, #28]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d106      	bne.n	800968c <tcp_process+0x280>
 800967e:	4b06      	ldr	r3, [pc, #24]	@ (8009698 <tcp_process+0x28c>)
 8009680:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8009684:	490f      	ldr	r1, [pc, #60]	@ (80096c4 <tcp_process+0x2b8>)
 8009686:	4806      	ldr	r0, [pc, #24]	@ (80096a0 <tcp_process+0x294>)
 8009688:	f005 fd82 	bl	800f190 <iprintf>
          pcb->unsent = rseg->next;
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009694:	e01c      	b.n	80096d0 <tcp_process+0x2c4>
 8009696:	bf00      	nop
 8009698:	080111ec 	.word	0x080111ec
 800969c:	08011424 	.word	0x08011424
 80096a0:	08011238 	.word	0x08011238
 80096a4:	20007cb8 	.word	0x20007cb8
 80096a8:	20007cb0 	.word	0x20007cb0
 80096ac:	20007cac 	.word	0x20007cac
 80096b0:	08011440 	.word	0x08011440
 80096b4:	20007cb9 	.word	0x20007cb9
 80096b8:	20007c74 	.word	0x20007c74
 80096bc:	20007c9c 	.word	0x20007c9c
 80096c0:	08011460 	.word	0x08011460
 80096c4:	08011478 	.word	0x08011478
        } else {
          pcb->unacked = rseg->next;
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80096d0:	69f8      	ldr	r0, [r7, #28]
 80096d2:	f7fe fd22 	bl	800811a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d104      	bne.n	80096e8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80096e4:	861a      	strh	r2, [r3, #48]	@ 0x30
 80096e6:	e006      	b.n	80096f6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d00a      	beq.n	8009716 <tcp_process+0x30a>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	6910      	ldr	r0, [r2, #16]
 800970a:	2200      	movs	r2, #0
 800970c:	6879      	ldr	r1, [r7, #4]
 800970e:	4798      	blx	r3
 8009710:	4603      	mov	r3, r0
 8009712:	76bb      	strb	r3, [r7, #26]
 8009714:	e001      	b.n	800971a <tcp_process+0x30e>
 8009716:	2300      	movs	r3, #0
 8009718:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800971a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800971e:	f113 0f0d 	cmn.w	r3, #13
 8009722:	d102      	bne.n	800972a <tcp_process+0x31e>
          return ERR_ABRT;
 8009724:	f06f 030c 	mvn.w	r3, #12
 8009728:	e250      	b.n	8009bcc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	8b5b      	ldrh	r3, [r3, #26]
 800972e:	f043 0302 	orr.w	r3, r3, #2
 8009732:	b29a      	uxth	r2, r3
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009738:	e23a      	b.n	8009bb0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800973a:	4b98      	ldr	r3, [pc, #608]	@ (800999c <tcp_process+0x590>)
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	f003 0310 	and.w	r3, r3, #16
 8009742:	2b00      	cmp	r3, #0
 8009744:	f000 8234 	beq.w	8009bb0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009748:	4b95      	ldr	r3, [pc, #596]	@ (80099a0 <tcp_process+0x594>)
 800974a:	6819      	ldr	r1, [r3, #0]
 800974c:	4b95      	ldr	r3, [pc, #596]	@ (80099a4 <tcp_process+0x598>)
 800974e:	881b      	ldrh	r3, [r3, #0]
 8009750:	461a      	mov	r2, r3
 8009752:	4b95      	ldr	r3, [pc, #596]	@ (80099a8 <tcp_process+0x59c>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009758:	4b94      	ldr	r3, [pc, #592]	@ (80099ac <tcp_process+0x5a0>)
 800975a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800975c:	885b      	ldrh	r3, [r3, #2]
 800975e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009760:	4a92      	ldr	r2, [pc, #584]	@ (80099ac <tcp_process+0x5a0>)
 8009762:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009764:	8812      	ldrh	r2, [r2, #0]
 8009766:	b292      	uxth	r2, r2
 8009768:	9202      	str	r2, [sp, #8]
 800976a:	9301      	str	r3, [sp, #4]
 800976c:	4b90      	ldr	r3, [pc, #576]	@ (80099b0 <tcp_process+0x5a4>)
 800976e:	9300      	str	r3, [sp, #0]
 8009770:	4b90      	ldr	r3, [pc, #576]	@ (80099b4 <tcp_process+0x5a8>)
 8009772:	4602      	mov	r2, r0
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f002 fc7f 	bl	800c078 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009780:	2b05      	cmp	r3, #5
 8009782:	f200 8215 	bhi.w	8009bb0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f002 fa4b 	bl	800bc28 <tcp_rexmit_rto>
      break;
 8009792:	e20d      	b.n	8009bb0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009794:	4b81      	ldr	r3, [pc, #516]	@ (800999c <tcp_process+0x590>)
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	f003 0310 	and.w	r3, r3, #16
 800979c:	2b00      	cmp	r3, #0
 800979e:	f000 80a1 	beq.w	80098e4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80097a2:	4b7f      	ldr	r3, [pc, #508]	@ (80099a0 <tcp_process+0x594>)
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097aa:	1ad3      	subs	r3, r2, r3
 80097ac:	3b01      	subs	r3, #1
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	db7e      	blt.n	80098b0 <tcp_process+0x4a4>
 80097b2:	4b7b      	ldr	r3, [pc, #492]	@ (80099a0 <tcp_process+0x594>)
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097ba:	1ad3      	subs	r3, r2, r3
 80097bc:	2b00      	cmp	r3, #0
 80097be:	dc77      	bgt.n	80098b0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2204      	movs	r2, #4
 80097c4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d102      	bne.n	80097d4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80097ce:	23fa      	movs	r3, #250	@ 0xfa
 80097d0:	76bb      	strb	r3, [r7, #26]
 80097d2:	e01d      	b.n	8009810 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097d8:	699b      	ldr	r3, [r3, #24]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d106      	bne.n	80097ec <tcp_process+0x3e0>
 80097de:	4b76      	ldr	r3, [pc, #472]	@ (80099b8 <tcp_process+0x5ac>)
 80097e0:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80097e4:	4975      	ldr	r1, [pc, #468]	@ (80099bc <tcp_process+0x5b0>)
 80097e6:	4876      	ldr	r0, [pc, #472]	@ (80099c0 <tcp_process+0x5b4>)
 80097e8:	f005 fcd2 	bl	800f190 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097f0:	699b      	ldr	r3, [r3, #24]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d00a      	beq.n	800980c <tcp_process+0x400>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097fa:	699b      	ldr	r3, [r3, #24]
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	6910      	ldr	r0, [r2, #16]
 8009800:	2200      	movs	r2, #0
 8009802:	6879      	ldr	r1, [r7, #4]
 8009804:	4798      	blx	r3
 8009806:	4603      	mov	r3, r0
 8009808:	76bb      	strb	r3, [r7, #26]
 800980a:	e001      	b.n	8009810 <tcp_process+0x404>
 800980c:	23f0      	movs	r3, #240	@ 0xf0
 800980e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8009810:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d00a      	beq.n	800982e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009818:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800981c:	f113 0f0d 	cmn.w	r3, #13
 8009820:	d002      	beq.n	8009828 <tcp_process+0x41c>
              tcp_abort(pcb);
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f7fd ff8c 	bl	8007740 <tcp_abort>
            }
            return ERR_ABRT;
 8009828:	f06f 030c 	mvn.w	r3, #12
 800982c:	e1ce      	b.n	8009bcc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 fae0 	bl	8009df4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009834:	4b63      	ldr	r3, [pc, #396]	@ (80099c4 <tcp_process+0x5b8>)
 8009836:	881b      	ldrh	r3, [r3, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d005      	beq.n	8009848 <tcp_process+0x43c>
            recv_acked--;
 800983c:	4b61      	ldr	r3, [pc, #388]	@ (80099c4 <tcp_process+0x5b8>)
 800983e:	881b      	ldrh	r3, [r3, #0]
 8009840:	3b01      	subs	r3, #1
 8009842:	b29a      	uxth	r2, r3
 8009844:	4b5f      	ldr	r3, [pc, #380]	@ (80099c4 <tcp_process+0x5b8>)
 8009846:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800984c:	009a      	lsls	r2, r3, #2
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009852:	005b      	lsls	r3, r3, #1
 8009854:	f241 111c 	movw	r1, #4380	@ 0x111c
 8009858:	428b      	cmp	r3, r1
 800985a:	bf38      	it	cc
 800985c:	460b      	movcc	r3, r1
 800985e:	429a      	cmp	r2, r3
 8009860:	d204      	bcs.n	800986c <tcp_process+0x460>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	b29b      	uxth	r3, r3
 800986a:	e00d      	b.n	8009888 <tcp_process+0x47c>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009870:	005b      	lsls	r3, r3, #1
 8009872:	f241 121c 	movw	r2, #4380	@ 0x111c
 8009876:	4293      	cmp	r3, r2
 8009878:	d904      	bls.n	8009884 <tcp_process+0x478>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800987e:	005b      	lsls	r3, r3, #1
 8009880:	b29b      	uxth	r3, r3
 8009882:	e001      	b.n	8009888 <tcp_process+0x47c>
 8009884:	f241 131c 	movw	r3, #4380	@ 0x111c
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800988e:	4b4e      	ldr	r3, [pc, #312]	@ (80099c8 <tcp_process+0x5bc>)
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	f003 0320 	and.w	r3, r3, #32
 8009896:	2b00      	cmp	r3, #0
 8009898:	d037      	beq.n	800990a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	8b5b      	ldrh	r3, [r3, #26]
 800989e:	f043 0302 	orr.w	r3, r3, #2
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2207      	movs	r2, #7
 80098ac:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80098ae:	e02c      	b.n	800990a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80098b0:	4b3b      	ldr	r3, [pc, #236]	@ (80099a0 <tcp_process+0x594>)
 80098b2:	6819      	ldr	r1, [r3, #0]
 80098b4:	4b3b      	ldr	r3, [pc, #236]	@ (80099a4 <tcp_process+0x598>)
 80098b6:	881b      	ldrh	r3, [r3, #0]
 80098b8:	461a      	mov	r2, r3
 80098ba:	4b3b      	ldr	r3, [pc, #236]	@ (80099a8 <tcp_process+0x59c>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80098c0:	4b3a      	ldr	r3, [pc, #232]	@ (80099ac <tcp_process+0x5a0>)
 80098c2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80098c4:	885b      	ldrh	r3, [r3, #2]
 80098c6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80098c8:	4a38      	ldr	r2, [pc, #224]	@ (80099ac <tcp_process+0x5a0>)
 80098ca:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80098cc:	8812      	ldrh	r2, [r2, #0]
 80098ce:	b292      	uxth	r2, r2
 80098d0:	9202      	str	r2, [sp, #8]
 80098d2:	9301      	str	r3, [sp, #4]
 80098d4:	4b36      	ldr	r3, [pc, #216]	@ (80099b0 <tcp_process+0x5a4>)
 80098d6:	9300      	str	r3, [sp, #0]
 80098d8:	4b36      	ldr	r3, [pc, #216]	@ (80099b4 <tcp_process+0x5a8>)
 80098da:	4602      	mov	r2, r0
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f002 fbcb 	bl	800c078 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80098e2:	e167      	b.n	8009bb4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80098e4:	4b2d      	ldr	r3, [pc, #180]	@ (800999c <tcp_process+0x590>)
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	f003 0302 	and.w	r3, r3, #2
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f000 8161 	beq.w	8009bb4 <tcp_process+0x7a8>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098f6:	1e5a      	subs	r2, r3, #1
 80098f8:	4b2b      	ldr	r3, [pc, #172]	@ (80099a8 <tcp_process+0x59c>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	f040 8159 	bne.w	8009bb4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f002 f9b2 	bl	800bc6c <tcp_rexmit>
      break;
 8009908:	e154      	b.n	8009bb4 <tcp_process+0x7a8>
 800990a:	e153      	b.n	8009bb4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 fa71 	bl	8009df4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009912:	4b2d      	ldr	r3, [pc, #180]	@ (80099c8 <tcp_process+0x5bc>)
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	f003 0320 	and.w	r3, r3, #32
 800991a:	2b00      	cmp	r3, #0
 800991c:	f000 814c 	beq.w	8009bb8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	8b5b      	ldrh	r3, [r3, #26]
 8009924:	f043 0302 	orr.w	r3, r3, #2
 8009928:	b29a      	uxth	r2, r3
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2207      	movs	r2, #7
 8009932:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009934:	e140      	b.n	8009bb8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 fa5c 	bl	8009df4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800993c:	4b22      	ldr	r3, [pc, #136]	@ (80099c8 <tcp_process+0x5bc>)
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	f003 0320 	and.w	r3, r3, #32
 8009944:	2b00      	cmp	r3, #0
 8009946:	d071      	beq.n	8009a2c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009948:	4b14      	ldr	r3, [pc, #80]	@ (800999c <tcp_process+0x590>)
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	f003 0310 	and.w	r3, r3, #16
 8009950:	2b00      	cmp	r3, #0
 8009952:	d060      	beq.n	8009a16 <tcp_process+0x60a>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009958:	4b11      	ldr	r3, [pc, #68]	@ (80099a0 <tcp_process+0x594>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	429a      	cmp	r2, r3
 800995e:	d15a      	bne.n	8009a16 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009964:	2b00      	cmp	r3, #0
 8009966:	d156      	bne.n	8009a16 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	8b5b      	ldrh	r3, [r3, #26]
 800996c:	f043 0302 	orr.w	r3, r3, #2
 8009970:	b29a      	uxth	r2, r3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f7fe fdbc 	bl	80084f4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800997c:	4b13      	ldr	r3, [pc, #76]	@ (80099cc <tcp_process+0x5c0>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	429a      	cmp	r2, r3
 8009984:	d105      	bne.n	8009992 <tcp_process+0x586>
 8009986:	4b11      	ldr	r3, [pc, #68]	@ (80099cc <tcp_process+0x5c0>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	4a0f      	ldr	r2, [pc, #60]	@ (80099cc <tcp_process+0x5c0>)
 800998e:	6013      	str	r3, [r2, #0]
 8009990:	e02e      	b.n	80099f0 <tcp_process+0x5e4>
 8009992:	4b0e      	ldr	r3, [pc, #56]	@ (80099cc <tcp_process+0x5c0>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	617b      	str	r3, [r7, #20]
 8009998:	e027      	b.n	80099ea <tcp_process+0x5de>
 800999a:	bf00      	nop
 800999c:	20007cb8 	.word	0x20007cb8
 80099a0:	20007cb0 	.word	0x20007cb0
 80099a4:	20007cb6 	.word	0x20007cb6
 80099a8:	20007cac 	.word	0x20007cac
 80099ac:	20007c9c 	.word	0x20007c9c
 80099b0:	20004d68 	.word	0x20004d68
 80099b4:	20004d6c 	.word	0x20004d6c
 80099b8:	080111ec 	.word	0x080111ec
 80099bc:	0801148c 	.word	0x0801148c
 80099c0:	08011238 	.word	0x08011238
 80099c4:	20007cb4 	.word	0x20007cb4
 80099c8:	20007cb9 	.word	0x20007cb9
 80099cc:	20007c80 	.word	0x20007c80
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	68db      	ldr	r3, [r3, #12]
 80099d4:	687a      	ldr	r2, [r7, #4]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d104      	bne.n	80099e4 <tcp_process+0x5d8>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	68da      	ldr	r2, [r3, #12]
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	60da      	str	r2, [r3, #12]
 80099e2:	e005      	b.n	80099f0 <tcp_process+0x5e4>
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	617b      	str	r3, [r7, #20]
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d1ef      	bne.n	80099d0 <tcp_process+0x5c4>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	60da      	str	r2, [r3, #12]
 80099f6:	4b77      	ldr	r3, [pc, #476]	@ (8009bd4 <tcp_process+0x7c8>)
 80099f8:	2201      	movs	r2, #1
 80099fa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	220a      	movs	r2, #10
 8009a00:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009a02:	4b75      	ldr	r3, [pc, #468]	@ (8009bd8 <tcp_process+0x7cc>)
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	60da      	str	r2, [r3, #12]
 8009a0a:	4a73      	ldr	r2, [pc, #460]	@ (8009bd8 <tcp_process+0x7cc>)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6013      	str	r3, [r2, #0]
 8009a10:	f002 fcf4 	bl	800c3fc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009a14:	e0d2      	b.n	8009bbc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	8b5b      	ldrh	r3, [r3, #26]
 8009a1a:	f043 0302 	orr.w	r3, r3, #2
 8009a1e:	b29a      	uxth	r2, r3
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2208      	movs	r2, #8
 8009a28:	751a      	strb	r2, [r3, #20]
      break;
 8009a2a:	e0c7      	b.n	8009bbc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009a2c:	4b6b      	ldr	r3, [pc, #428]	@ (8009bdc <tcp_process+0x7d0>)
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	f003 0310 	and.w	r3, r3, #16
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f000 80c1 	beq.w	8009bbc <tcp_process+0x7b0>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009a3e:	4b68      	ldr	r3, [pc, #416]	@ (8009be0 <tcp_process+0x7d4>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	f040 80ba 	bne.w	8009bbc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	f040 80b5 	bne.w	8009bbc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2206      	movs	r2, #6
 8009a56:	751a      	strb	r2, [r3, #20]
      break;
 8009a58:	e0b0      	b.n	8009bbc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 f9ca 	bl	8009df4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009a60:	4b60      	ldr	r3, [pc, #384]	@ (8009be4 <tcp_process+0x7d8>)
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	f003 0320 	and.w	r3, r3, #32
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	f000 80a9 	beq.w	8009bc0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	8b5b      	ldrh	r3, [r3, #26]
 8009a72:	f043 0302 	orr.w	r3, r3, #2
 8009a76:	b29a      	uxth	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f7fe fd39 	bl	80084f4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009a82:	4b59      	ldr	r3, [pc, #356]	@ (8009be8 <tcp_process+0x7dc>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d105      	bne.n	8009a98 <tcp_process+0x68c>
 8009a8c:	4b56      	ldr	r3, [pc, #344]	@ (8009be8 <tcp_process+0x7dc>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	4a55      	ldr	r2, [pc, #340]	@ (8009be8 <tcp_process+0x7dc>)
 8009a94:	6013      	str	r3, [r2, #0]
 8009a96:	e013      	b.n	8009ac0 <tcp_process+0x6b4>
 8009a98:	4b53      	ldr	r3, [pc, #332]	@ (8009be8 <tcp_process+0x7dc>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	613b      	str	r3, [r7, #16]
 8009a9e:	e00c      	b.n	8009aba <tcp_process+0x6ae>
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d104      	bne.n	8009ab4 <tcp_process+0x6a8>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	68da      	ldr	r2, [r3, #12]
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	60da      	str	r2, [r3, #12]
 8009ab2:	e005      	b.n	8009ac0 <tcp_process+0x6b4>
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	613b      	str	r3, [r7, #16]
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d1ef      	bne.n	8009aa0 <tcp_process+0x694>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	60da      	str	r2, [r3, #12]
 8009ac6:	4b43      	ldr	r3, [pc, #268]	@ (8009bd4 <tcp_process+0x7c8>)
 8009ac8:	2201      	movs	r2, #1
 8009aca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	220a      	movs	r2, #10
 8009ad0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009ad2:	4b41      	ldr	r3, [pc, #260]	@ (8009bd8 <tcp_process+0x7cc>)
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	60da      	str	r2, [r3, #12]
 8009ada:	4a3f      	ldr	r2, [pc, #252]	@ (8009bd8 <tcp_process+0x7cc>)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6013      	str	r3, [r2, #0]
 8009ae0:	f002 fc8c 	bl	800c3fc <tcp_timer_needed>
      }
      break;
 8009ae4:	e06c      	b.n	8009bc0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 f984 	bl	8009df4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009aec:	4b3b      	ldr	r3, [pc, #236]	@ (8009bdc <tcp_process+0x7d0>)
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	f003 0310 	and.w	r3, r3, #16
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d065      	beq.n	8009bc4 <tcp_process+0x7b8>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009afc:	4b38      	ldr	r3, [pc, #224]	@ (8009be0 <tcp_process+0x7d4>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d15f      	bne.n	8009bc4 <tcp_process+0x7b8>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d15b      	bne.n	8009bc4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f7fe fcf1 	bl	80084f4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009b12:	4b35      	ldr	r3, [pc, #212]	@ (8009be8 <tcp_process+0x7dc>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d105      	bne.n	8009b28 <tcp_process+0x71c>
 8009b1c:	4b32      	ldr	r3, [pc, #200]	@ (8009be8 <tcp_process+0x7dc>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	4a31      	ldr	r2, [pc, #196]	@ (8009be8 <tcp_process+0x7dc>)
 8009b24:	6013      	str	r3, [r2, #0]
 8009b26:	e013      	b.n	8009b50 <tcp_process+0x744>
 8009b28:	4b2f      	ldr	r3, [pc, #188]	@ (8009be8 <tcp_process+0x7dc>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	60fb      	str	r3, [r7, #12]
 8009b2e:	e00c      	b.n	8009b4a <tcp_process+0x73e>
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d104      	bne.n	8009b44 <tcp_process+0x738>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	68da      	ldr	r2, [r3, #12]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	60da      	str	r2, [r3, #12]
 8009b42:	e005      	b.n	8009b50 <tcp_process+0x744>
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	60fb      	str	r3, [r7, #12]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d1ef      	bne.n	8009b30 <tcp_process+0x724>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	60da      	str	r2, [r3, #12]
 8009b56:	4b1f      	ldr	r3, [pc, #124]	@ (8009bd4 <tcp_process+0x7c8>)
 8009b58:	2201      	movs	r2, #1
 8009b5a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	220a      	movs	r2, #10
 8009b60:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009b62:	4b1d      	ldr	r3, [pc, #116]	@ (8009bd8 <tcp_process+0x7cc>)
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	60da      	str	r2, [r3, #12]
 8009b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8009bd8 <tcp_process+0x7cc>)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6013      	str	r3, [r2, #0]
 8009b70:	f002 fc44 	bl	800c3fc <tcp_timer_needed>
      }
      break;
 8009b74:	e026      	b.n	8009bc4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 f93c 	bl	8009df4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009b7c:	4b17      	ldr	r3, [pc, #92]	@ (8009bdc <tcp_process+0x7d0>)
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	f003 0310 	and.w	r3, r3, #16
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d01f      	beq.n	8009bc8 <tcp_process+0x7bc>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009b8c:	4b14      	ldr	r3, [pc, #80]	@ (8009be0 <tcp_process+0x7d4>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d119      	bne.n	8009bc8 <tcp_process+0x7bc>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d115      	bne.n	8009bc8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009b9c:	4b11      	ldr	r3, [pc, #68]	@ (8009be4 <tcp_process+0x7d8>)
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	f043 0310 	orr.w	r3, r3, #16
 8009ba4:	b2da      	uxtb	r2, r3
 8009ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8009be4 <tcp_process+0x7d8>)
 8009ba8:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009baa:	e00d      	b.n	8009bc8 <tcp_process+0x7bc>
    default:
      break;
 8009bac:	bf00      	nop
 8009bae:	e00c      	b.n	8009bca <tcp_process+0x7be>
      break;
 8009bb0:	bf00      	nop
 8009bb2:	e00a      	b.n	8009bca <tcp_process+0x7be>
      break;
 8009bb4:	bf00      	nop
 8009bb6:	e008      	b.n	8009bca <tcp_process+0x7be>
      break;
 8009bb8:	bf00      	nop
 8009bba:	e006      	b.n	8009bca <tcp_process+0x7be>
      break;
 8009bbc:	bf00      	nop
 8009bbe:	e004      	b.n	8009bca <tcp_process+0x7be>
      break;
 8009bc0:	bf00      	nop
 8009bc2:	e002      	b.n	8009bca <tcp_process+0x7be>
      break;
 8009bc4:	bf00      	nop
 8009bc6:	e000      	b.n	8009bca <tcp_process+0x7be>
      break;
 8009bc8:	bf00      	nop
  }
  return ERR_OK;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3724      	adds	r7, #36	@ 0x24
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd90      	pop	{r4, r7, pc}
 8009bd4:	20007c88 	.word	0x20007c88
 8009bd8:	20007c84 	.word	0x20007c84
 8009bdc:	20007cb8 	.word	0x20007cb8
 8009be0:	20007cb0 	.word	0x20007cb0
 8009be4:	20007cb9 	.word	0x20007cb9
 8009be8:	20007c80 	.word	0x20007c80

08009bec <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009bec:	b590      	push	{r4, r7, lr}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d106      	bne.n	8009c0a <tcp_oos_insert_segment+0x1e>
 8009bfc:	4b3b      	ldr	r3, [pc, #236]	@ (8009cec <tcp_oos_insert_segment+0x100>)
 8009bfe:	f240 421f 	movw	r2, #1055	@ 0x41f
 8009c02:	493b      	ldr	r1, [pc, #236]	@ (8009cf0 <tcp_oos_insert_segment+0x104>)
 8009c04:	483b      	ldr	r0, [pc, #236]	@ (8009cf4 <tcp_oos_insert_segment+0x108>)
 8009c06:	f005 fac3 	bl	800f190 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	68db      	ldr	r3, [r3, #12]
 8009c0e:	899b      	ldrh	r3, [r3, #12]
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7fb fcb2 	bl	800557c <lwip_htons>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	f003 0301 	and.w	r3, r3, #1
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d028      	beq.n	8009c76 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009c24:	6838      	ldr	r0, [r7, #0]
 8009c26:	f7fe fa63 	bl	80080f0 <tcp_segs_free>
    next = NULL;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	603b      	str	r3, [r7, #0]
 8009c2e:	e056      	b.n	8009cde <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	899b      	ldrh	r3, [r3, #12]
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7fb fc9f 	bl	800557c <lwip_htons>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	f003 0301 	and.w	r3, r3, #1
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d00d      	beq.n	8009c66 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	68db      	ldr	r3, [r3, #12]
 8009c4e:	899b      	ldrh	r3, [r3, #12]
 8009c50:	b29c      	uxth	r4, r3
 8009c52:	2001      	movs	r0, #1
 8009c54:	f7fb fc92 	bl	800557c <lwip_htons>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	4322      	orrs	r2, r4
 8009c62:	b292      	uxth	r2, r2
 8009c64:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009c70:	68f8      	ldr	r0, [r7, #12]
 8009c72:	f7fe fa52 	bl	800811a <tcp_seg_free>
    while (next &&
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00e      	beq.n	8009c9a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	891b      	ldrh	r3, [r3, #8]
 8009c80:	461a      	mov	r2, r3
 8009c82:	4b1d      	ldr	r3, [pc, #116]	@ (8009cf8 <tcp_oos_insert_segment+0x10c>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	441a      	add	r2, r3
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	6839      	ldr	r1, [r7, #0]
 8009c90:	8909      	ldrh	r1, [r1, #8]
 8009c92:	440b      	add	r3, r1
 8009c94:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	daca      	bge.n	8009c30 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d01e      	beq.n	8009cde <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	891b      	ldrh	r3, [r3, #8]
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	4b14      	ldr	r3, [pc, #80]	@ (8009cf8 <tcp_oos_insert_segment+0x10c>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	441a      	add	r2, r3
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	dd12      	ble.n	8009cde <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	68db      	ldr	r3, [r3, #12]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	b29a      	uxth	r2, r3
 8009cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8009cf8 <tcp_oos_insert_segment+0x10c>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	1ad3      	subs	r3, r2, r3
 8009cc8:	b29a      	uxth	r2, r3
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	685a      	ldr	r2, [r3, #4]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	891b      	ldrh	r3, [r3, #8]
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	4610      	mov	r0, r2
 8009cda:	f7fc fe23 	bl	8006924 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	683a      	ldr	r2, [r7, #0]
 8009ce2:	601a      	str	r2, [r3, #0]
}
 8009ce4:	bf00      	nop
 8009ce6:	3714      	adds	r7, #20
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd90      	pop	{r4, r7, pc}
 8009cec:	080111ec 	.word	0x080111ec
 8009cf0:	080114ac 	.word	0x080114ac
 8009cf4:	08011238 	.word	0x08011238
 8009cf8:	20007cac 	.word	0x20007cac

08009cfc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009cfc:	b5b0      	push	{r4, r5, r7, lr}
 8009cfe:	b086      	sub	sp, #24
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
 8009d08:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009d0a:	e03e      	b.n	8009d8a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7fd f810 	bl	8006d40 <pbuf_clen>
 8009d20:	4603      	mov	r3, r0
 8009d22:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009d2a:	8a7a      	ldrh	r2, [r7, #18]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d906      	bls.n	8009d3e <tcp_free_acked_segments+0x42>
 8009d30:	4b2a      	ldr	r3, [pc, #168]	@ (8009ddc <tcp_free_acked_segments+0xe0>)
 8009d32:	f240 4257 	movw	r2, #1111	@ 0x457
 8009d36:	492a      	ldr	r1, [pc, #168]	@ (8009de0 <tcp_free_acked_segments+0xe4>)
 8009d38:	482a      	ldr	r0, [pc, #168]	@ (8009de4 <tcp_free_acked_segments+0xe8>)
 8009d3a:	f005 fa29 	bl	800f190 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8009d44:	8a7b      	ldrh	r3, [r7, #18]
 8009d46:	1ad3      	subs	r3, r2, r3
 8009d48:	b29a      	uxth	r2, r3
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	891a      	ldrh	r2, [r3, #8]
 8009d54:	4b24      	ldr	r3, [pc, #144]	@ (8009de8 <tcp_free_acked_segments+0xec>)
 8009d56:	881b      	ldrh	r3, [r3, #0]
 8009d58:	4413      	add	r3, r2
 8009d5a:	b29a      	uxth	r2, r3
 8009d5c:	4b22      	ldr	r3, [pc, #136]	@ (8009de8 <tcp_free_acked_segments+0xec>)
 8009d5e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009d60:	6978      	ldr	r0, [r7, #20]
 8009d62:	f7fe f9da 	bl	800811a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d00c      	beq.n	8009d8a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d109      	bne.n	8009d8a <tcp_free_acked_segments+0x8e>
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d106      	bne.n	8009d8a <tcp_free_acked_segments+0x8e>
 8009d7c:	4b17      	ldr	r3, [pc, #92]	@ (8009ddc <tcp_free_acked_segments+0xe0>)
 8009d7e:	f240 4261 	movw	r2, #1121	@ 0x461
 8009d82:	491a      	ldr	r1, [pc, #104]	@ (8009dec <tcp_free_acked_segments+0xf0>)
 8009d84:	4817      	ldr	r0, [pc, #92]	@ (8009de4 <tcp_free_acked_segments+0xe8>)
 8009d86:	f005 fa03 	bl	800f190 <iprintf>
  while (seg_list != NULL &&
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d020      	beq.n	8009dd2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7fb fc06 	bl	80055a8 <lwip_htonl>
 8009d9c:	4604      	mov	r4, r0
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	891b      	ldrh	r3, [r3, #8]
 8009da2:	461d      	mov	r5, r3
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	899b      	ldrh	r3, [r3, #12]
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7fb fbe5 	bl	800557c <lwip_htons>
 8009db2:	4603      	mov	r3, r0
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	f003 0303 	and.w	r3, r3, #3
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d001      	beq.n	8009dc2 <tcp_free_acked_segments+0xc6>
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e000      	b.n	8009dc4 <tcp_free_acked_segments+0xc8>
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	442b      	add	r3, r5
 8009dc6:	18e2      	adds	r2, r4, r3
 8009dc8:	4b09      	ldr	r3, [pc, #36]	@ (8009df0 <tcp_free_acked_segments+0xf4>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	dd9c      	ble.n	8009d0c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009dd2:	68bb      	ldr	r3, [r7, #8]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3718      	adds	r7, #24
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bdb0      	pop	{r4, r5, r7, pc}
 8009ddc:	080111ec 	.word	0x080111ec
 8009de0:	080114d4 	.word	0x080114d4
 8009de4:	08011238 	.word	0x08011238
 8009de8:	20007cb4 	.word	0x20007cb4
 8009dec:	080114fc 	.word	0x080114fc
 8009df0:	20007cb0 	.word	0x20007cb0

08009df4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009df4:	b5b0      	push	{r4, r5, r7, lr}
 8009df6:	b094      	sub	sp, #80	@ 0x50
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d106      	bne.n	8009e14 <tcp_receive+0x20>
 8009e06:	4b91      	ldr	r3, [pc, #580]	@ (800a04c <tcp_receive+0x258>)
 8009e08:	f240 427b 	movw	r2, #1147	@ 0x47b
 8009e0c:	4990      	ldr	r1, [pc, #576]	@ (800a050 <tcp_receive+0x25c>)
 8009e0e:	4891      	ldr	r0, [pc, #580]	@ (800a054 <tcp_receive+0x260>)
 8009e10:	f005 f9be 	bl	800f190 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	7d1b      	ldrb	r3, [r3, #20]
 8009e18:	2b03      	cmp	r3, #3
 8009e1a:	d806      	bhi.n	8009e2a <tcp_receive+0x36>
 8009e1c:	4b8b      	ldr	r3, [pc, #556]	@ (800a04c <tcp_receive+0x258>)
 8009e1e:	f240 427c 	movw	r2, #1148	@ 0x47c
 8009e22:	498d      	ldr	r1, [pc, #564]	@ (800a058 <tcp_receive+0x264>)
 8009e24:	488b      	ldr	r0, [pc, #556]	@ (800a054 <tcp_receive+0x260>)
 8009e26:	f005 f9b3 	bl	800f190 <iprintf>

  if (flags & TCP_ACK) {
 8009e2a:	4b8c      	ldr	r3, [pc, #560]	@ (800a05c <tcp_receive+0x268>)
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	f003 0310 	and.w	r3, r3, #16
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	f000 8264 	beq.w	800a300 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009e3e:	461a      	mov	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e44:	4413      	add	r3, r2
 8009e46:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009e4c:	4b84      	ldr	r3, [pc, #528]	@ (800a060 <tcp_receive+0x26c>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	1ad3      	subs	r3, r2, r3
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	db1b      	blt.n	8009e8e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009e5a:	4b81      	ldr	r3, [pc, #516]	@ (800a060 <tcp_receive+0x26c>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d106      	bne.n	8009e70 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009e66:	4b7f      	ldr	r3, [pc, #508]	@ (800a064 <tcp_receive+0x270>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	1ad3      	subs	r3, r2, r3
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	db0e      	blt.n	8009e8e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009e74:	4b7b      	ldr	r3, [pc, #492]	@ (800a064 <tcp_receive+0x270>)
 8009e76:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d125      	bne.n	8009ec8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009e7c:	4b7a      	ldr	r3, [pc, #488]	@ (800a068 <tcp_receive+0x274>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	89db      	ldrh	r3, [r3, #14]
 8009e82:	b29a      	uxth	r2, r3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d91c      	bls.n	8009ec8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009e8e:	4b76      	ldr	r3, [pc, #472]	@ (800a068 <tcp_receive+0x274>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	89db      	ldrh	r3, [r3, #14]
 8009e94:	b29a      	uxth	r2, r3
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d205      	bcs.n	8009eb8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8009eb8:	4b69      	ldr	r3, [pc, #420]	@ (800a060 <tcp_receive+0x26c>)
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8009ec0:	4b68      	ldr	r3, [pc, #416]	@ (800a064 <tcp_receive+0x270>)
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009ec8:	4b66      	ldr	r3, [pc, #408]	@ (800a064 <tcp_receive+0x270>)
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	dc58      	bgt.n	8009f88 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8009ed6:	4b65      	ldr	r3, [pc, #404]	@ (800a06c <tcp_receive+0x278>)
 8009ed8:	881b      	ldrh	r3, [r3, #0]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d14b      	bne.n	8009f76 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8009ee8:	4413      	add	r3, r2
 8009eea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d142      	bne.n	8009f76 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	db3d      	blt.n	8009f76 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009efe:	4b59      	ldr	r3, [pc, #356]	@ (800a064 <tcp_receive+0x270>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d137      	bne.n	8009f76 <tcp_receive+0x182>
              found_dupack = 1;
 8009f06:	2301      	movs	r3, #1
 8009f08:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009f10:	2bff      	cmp	r3, #255	@ 0xff
 8009f12:	d007      	beq.n	8009f24 <tcp_receive+0x130>
                ++pcb->dupacks;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	b2da      	uxtb	r2, r3
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009f2a:	2b03      	cmp	r3, #3
 8009f2c:	d91b      	bls.n	8009f66 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009f38:	4413      	add	r3, r2
 8009f3a:	b29a      	uxth	r2, r3
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d30a      	bcc.n	8009f5c <tcp_receive+0x168>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009f50:	4413      	add	r3, r2
 8009f52:	b29a      	uxth	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009f5a:	e004      	b.n	8009f66 <tcp_receive+0x172>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009f62:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009f6c:	2b02      	cmp	r3, #2
 8009f6e:	d902      	bls.n	8009f76 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f001 fee7 	bl	800bd44 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009f76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	f040 8161 	bne.w	800a240 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2200      	movs	r2, #0
 8009f82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009f86:	e15b      	b.n	800a240 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009f88:	4b36      	ldr	r3, [pc, #216]	@ (800a064 <tcp_receive+0x270>)
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f90:	1ad3      	subs	r3, r2, r3
 8009f92:	3b01      	subs	r3, #1
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f2c0 814e 	blt.w	800a236 <tcp_receive+0x442>
 8009f9a:	4b32      	ldr	r3, [pc, #200]	@ (800a064 <tcp_receive+0x270>)
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f300 8146 	bgt.w	800a236 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	8b5b      	ldrh	r3, [r3, #26]
 8009fae:	f003 0304 	and.w	r3, r3, #4
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d010      	beq.n	8009fd8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	8b5b      	ldrh	r3, [r3, #26]
 8009fba:	f023 0304 	bic.w	r3, r3, #4
 8009fbe:	b29a      	uxth	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009fe6:	10db      	asrs	r3, r3, #3
 8009fe8:	b21b      	sxth	r3, r3
 8009fea:	b29a      	uxth	r2, r3
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	4413      	add	r3, r2
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	b21a      	sxth	r2, r3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a000:	4b18      	ldr	r3, [pc, #96]	@ (800a064 <tcp_receive+0x270>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	b29a      	uxth	r2, r3
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	1ad3      	subs	r3, r2, r3
 800a00e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2200      	movs	r2, #0
 800a014:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800a018:	4b12      	ldr	r3, [pc, #72]	@ (800a064 <tcp_receive+0x270>)
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	7d1b      	ldrb	r3, [r3, #20]
 800a024:	2b03      	cmp	r3, #3
 800a026:	f240 8097 	bls.w	800a158 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800a036:	429a      	cmp	r2, r3
 800a038:	d245      	bcs.n	800a0c6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	8b5b      	ldrh	r3, [r3, #26]
 800a03e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a042:	2b00      	cmp	r3, #0
 800a044:	d014      	beq.n	800a070 <tcp_receive+0x27c>
 800a046:	2301      	movs	r3, #1
 800a048:	e013      	b.n	800a072 <tcp_receive+0x27e>
 800a04a:	bf00      	nop
 800a04c:	080111ec 	.word	0x080111ec
 800a050:	0801151c 	.word	0x0801151c
 800a054:	08011238 	.word	0x08011238
 800a058:	08011538 	.word	0x08011538
 800a05c:	20007cb8 	.word	0x20007cb8
 800a060:	20007cac 	.word	0x20007cac
 800a064:	20007cb0 	.word	0x20007cb0
 800a068:	20007c9c 	.word	0x20007c9c
 800a06c:	20007cb6 	.word	0x20007cb6
 800a070:	2302      	movs	r3, #2
 800a072:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a076:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800a07a:	b29a      	uxth	r2, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a080:	fb12 f303 	smulbb	r3, r2, r3
 800a084:	b29b      	uxth	r3, r3
 800a086:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a088:	4293      	cmp	r3, r2
 800a08a:	bf28      	it	cs
 800a08c:	4613      	movcs	r3, r2
 800a08e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a096:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a098:	4413      	add	r3, r2
 800a09a:	b29a      	uxth	r2, r3
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d309      	bcc.n	800a0ba <tcp_receive+0x2c6>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a0ac:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a0ae:	4413      	add	r3, r2
 800a0b0:	b29a      	uxth	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800a0b8:	e04e      	b.n	800a158 <tcp_receive+0x364>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a0c0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800a0c4:	e048      	b.n	800a158 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800a0cc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a0ce:	4413      	add	r3, r2
 800a0d0:	b29a      	uxth	r2, r3
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d309      	bcc.n	800a0f0 <tcp_receive+0x2fc>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800a0e2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a0e4:	4413      	add	r3, r2
 800a0e6:	b29a      	uxth	r2, r3
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a0ee:	e004      	b.n	800a0fa <tcp_receive+0x306>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a0f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a106:	429a      	cmp	r2, r3
 800a108:	d326      	bcc.n	800a158 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	b29a      	uxth	r2, r3
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a12a:	4413      	add	r3, r2
 800a12c:	b29a      	uxth	r2, r3
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a134:	429a      	cmp	r2, r3
 800a136:	d30a      	bcc.n	800a14e <tcp_receive+0x35a>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a142:	4413      	add	r3, r2
 800a144:	b29a      	uxth	r2, r3
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800a14c:	e004      	b.n	800a158 <tcp_receive+0x364>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a154:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a160:	4a98      	ldr	r2, [pc, #608]	@ (800a3c4 <tcp_receive+0x5d0>)
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f7ff fdca 	bl	8009cfc <tcp_free_acked_segments>
 800a168:	4602      	mov	r2, r0
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a176:	4a94      	ldr	r2, [pc, #592]	@ (800a3c8 <tcp_receive+0x5d4>)
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f7ff fdbf 	bl	8009cfc <tcp_free_acked_segments>
 800a17e:	4602      	mov	r2, r0
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d104      	bne.n	800a196 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a192:	861a      	strh	r2, [r3, #48]	@ 0x30
 800a194:	e002      	b.n	800a19c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2200      	movs	r2, #0
 800a19a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d103      	bne.n	800a1b2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800a1b8:	4b84      	ldr	r3, [pc, #528]	@ (800a3cc <tcp_receive+0x5d8>)
 800a1ba:	881b      	ldrh	r3, [r3, #0]
 800a1bc:	4413      	add	r3, r2
 800a1be:	b29a      	uxth	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	8b5b      	ldrh	r3, [r3, #26]
 800a1ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d035      	beq.n	800a23e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d118      	bne.n	800a20c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d00c      	beq.n	800a1fc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7fb f9da 	bl	80055a8 <lwip_htonl>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	dc20      	bgt.n	800a23e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	8b5b      	ldrh	r3, [r3, #26]
 800a200:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a204:	b29a      	uxth	r2, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a20a:	e018      	b.n	800a23e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	4618      	mov	r0, r3
 800a21a:	f7fb f9c5 	bl	80055a8 <lwip_htonl>
 800a21e:	4603      	mov	r3, r0
 800a220:	1ae3      	subs	r3, r4, r3
 800a222:	2b00      	cmp	r3, #0
 800a224:	dc0b      	bgt.n	800a23e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	8b5b      	ldrh	r3, [r3, #26]
 800a22a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a22e:	b29a      	uxth	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a234:	e003      	b.n	800a23e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f001 ff70 	bl	800c11c <tcp_send_empty_ack>
 800a23c:	e000      	b.n	800a240 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a23e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a244:	2b00      	cmp	r3, #0
 800a246:	d05b      	beq.n	800a300 <tcp_receive+0x50c>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a24c:	4b60      	ldr	r3, [pc, #384]	@ (800a3d0 <tcp_receive+0x5dc>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	1ad3      	subs	r3, r2, r3
 800a252:	2b00      	cmp	r3, #0
 800a254:	da54      	bge.n	800a300 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a256:	4b5f      	ldr	r3, [pc, #380]	@ (800a3d4 <tcp_receive+0x5e0>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	b29a      	uxth	r2, r3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a260:	b29b      	uxth	r3, r3
 800a262:	1ad3      	subs	r3, r2, r3
 800a264:	b29b      	uxth	r3, r3
 800a266:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a26a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a274:	10db      	asrs	r3, r3, #3
 800a276:	b21b      	sxth	r3, r3
 800a278:	b29b      	uxth	r3, r3
 800a27a:	1ad3      	subs	r3, r2, r3
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a288:	b29a      	uxth	r2, r3
 800a28a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a28e:	4413      	add	r3, r2
 800a290:	b29b      	uxth	r3, r3
 800a292:	b21a      	sxth	r2, r3
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800a298:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	da05      	bge.n	800a2ac <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800a2a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a2a4:	425b      	negs	r3, r3
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a2ac:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a2b6:	109b      	asrs	r3, r3, #2
 800a2b8:	b21b      	sxth	r3, r3
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	1ad3      	subs	r3, r2, r3
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a2d0:	4413      	add	r3, r2
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	b21a      	sxth	r2, r3
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a2e0:	10db      	asrs	r3, r3, #3
 800a2e2:	b21b      	sxth	r3, r3
 800a2e4:	b29a      	uxth	r2, r3
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	4413      	add	r3, r2
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	b21a      	sxth	r2, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a300:	4b35      	ldr	r3, [pc, #212]	@ (800a3d8 <tcp_receive+0x5e4>)
 800a302:	881b      	ldrh	r3, [r3, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	f000 84df 	beq.w	800acc8 <tcp_receive+0xed4>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	7d1b      	ldrb	r3, [r3, #20]
 800a30e:	2b06      	cmp	r3, #6
 800a310:	f200 84da 	bhi.w	800acc8 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a318:	4b30      	ldr	r3, [pc, #192]	@ (800a3dc <tcp_receive+0x5e8>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	1ad3      	subs	r3, r2, r3
 800a31e:	3b01      	subs	r3, #1
 800a320:	2b00      	cmp	r3, #0
 800a322:	f2c0 808f 	blt.w	800a444 <tcp_receive+0x650>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a32a:	4b2b      	ldr	r3, [pc, #172]	@ (800a3d8 <tcp_receive+0x5e4>)
 800a32c:	881b      	ldrh	r3, [r3, #0]
 800a32e:	4619      	mov	r1, r3
 800a330:	4b2a      	ldr	r3, [pc, #168]	@ (800a3dc <tcp_receive+0x5e8>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	440b      	add	r3, r1
 800a336:	1ad3      	subs	r3, r2, r3
 800a338:	3301      	adds	r3, #1
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	f300 8082 	bgt.w	800a444 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a340:	4b27      	ldr	r3, [pc, #156]	@ (800a3e0 <tcp_receive+0x5ec>)
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a34a:	4b24      	ldr	r3, [pc, #144]	@ (800a3dc <tcp_receive+0x5e8>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	1ad3      	subs	r3, r2, r3
 800a350:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a352:	4b23      	ldr	r3, [pc, #140]	@ (800a3e0 <tcp_receive+0x5ec>)
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d106      	bne.n	800a368 <tcp_receive+0x574>
 800a35a:	4b22      	ldr	r3, [pc, #136]	@ (800a3e4 <tcp_receive+0x5f0>)
 800a35c:	f240 5294 	movw	r2, #1428	@ 0x594
 800a360:	4921      	ldr	r1, [pc, #132]	@ (800a3e8 <tcp_receive+0x5f4>)
 800a362:	4822      	ldr	r0, [pc, #136]	@ (800a3ec <tcp_receive+0x5f8>)
 800a364:	f004 ff14 	bl	800f190 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a36a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a36e:	4293      	cmp	r3, r2
 800a370:	d906      	bls.n	800a380 <tcp_receive+0x58c>
 800a372:	4b1c      	ldr	r3, [pc, #112]	@ (800a3e4 <tcp_receive+0x5f0>)
 800a374:	f240 5295 	movw	r2, #1429	@ 0x595
 800a378:	491d      	ldr	r1, [pc, #116]	@ (800a3f0 <tcp_receive+0x5fc>)
 800a37a:	481c      	ldr	r0, [pc, #112]	@ (800a3ec <tcp_receive+0x5f8>)
 800a37c:	f004 ff08 	bl	800f190 <iprintf>
      off = (u16_t)off32;
 800a380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a382:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a386:	4b16      	ldr	r3, [pc, #88]	@ (800a3e0 <tcp_receive+0x5ec>)
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	891b      	ldrh	r3, [r3, #8]
 800a38c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a390:	429a      	cmp	r2, r3
 800a392:	d906      	bls.n	800a3a2 <tcp_receive+0x5ae>
 800a394:	4b13      	ldr	r3, [pc, #76]	@ (800a3e4 <tcp_receive+0x5f0>)
 800a396:	f240 5297 	movw	r2, #1431	@ 0x597
 800a39a:	4916      	ldr	r1, [pc, #88]	@ (800a3f4 <tcp_receive+0x600>)
 800a39c:	4813      	ldr	r0, [pc, #76]	@ (800a3ec <tcp_receive+0x5f8>)
 800a39e:	f004 fef7 	bl	800f190 <iprintf>
      inseg.len -= off;
 800a3a2:	4b0f      	ldr	r3, [pc, #60]	@ (800a3e0 <tcp_receive+0x5ec>)
 800a3a4:	891a      	ldrh	r2, [r3, #8]
 800a3a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a3aa:	1ad3      	subs	r3, r2, r3
 800a3ac:	b29a      	uxth	r2, r3
 800a3ae:	4b0c      	ldr	r3, [pc, #48]	@ (800a3e0 <tcp_receive+0x5ec>)
 800a3b0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a3b2:	4b0b      	ldr	r3, [pc, #44]	@ (800a3e0 <tcp_receive+0x5ec>)
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	891a      	ldrh	r2, [r3, #8]
 800a3b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a3bc:	1ad3      	subs	r3, r2, r3
 800a3be:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800a3c0:	e02a      	b.n	800a418 <tcp_receive+0x624>
 800a3c2:	bf00      	nop
 800a3c4:	08011554 	.word	0x08011554
 800a3c8:	0801155c 	.word	0x0801155c
 800a3cc:	20007cb4 	.word	0x20007cb4
 800a3d0:	20007cb0 	.word	0x20007cb0
 800a3d4:	20007c74 	.word	0x20007c74
 800a3d8:	20007cb6 	.word	0x20007cb6
 800a3dc:	20007cac 	.word	0x20007cac
 800a3e0:	20007c8c 	.word	0x20007c8c
 800a3e4:	080111ec 	.word	0x080111ec
 800a3e8:	08011564 	.word	0x08011564
 800a3ec:	08011238 	.word	0x08011238
 800a3f0:	08011574 	.word	0x08011574
 800a3f4:	08011584 	.word	0x08011584
        off -= p->len;
 800a3f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3fa:	895b      	ldrh	r3, [r3, #10]
 800a3fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a406:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a408:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800a40a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a40c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a40e:	2200      	movs	r2, #0
 800a410:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a412:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800a418:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a41a:	895b      	ldrh	r3, [r3, #10]
 800a41c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a420:	429a      	cmp	r2, r3
 800a422:	d8e9      	bhi.n	800a3f8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a424:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a428:	4619      	mov	r1, r3
 800a42a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800a42c:	f7fc fb7a 	bl	8006b24 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a434:	4a90      	ldr	r2, [pc, #576]	@ (800a678 <tcp_receive+0x884>)
 800a436:	6013      	str	r3, [r2, #0]
 800a438:	4b90      	ldr	r3, [pc, #576]	@ (800a67c <tcp_receive+0x888>)
 800a43a:	68db      	ldr	r3, [r3, #12]
 800a43c:	4a8e      	ldr	r2, [pc, #568]	@ (800a678 <tcp_receive+0x884>)
 800a43e:	6812      	ldr	r2, [r2, #0]
 800a440:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a442:	e00d      	b.n	800a460 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a444:	4b8c      	ldr	r3, [pc, #560]	@ (800a678 <tcp_receive+0x884>)
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a44c:	1ad3      	subs	r3, r2, r3
 800a44e:	2b00      	cmp	r3, #0
 800a450:	da06      	bge.n	800a460 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	8b5b      	ldrh	r3, [r3, #26]
 800a456:	f043 0302 	orr.w	r3, r3, #2
 800a45a:	b29a      	uxth	r2, r3
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a460:	4b85      	ldr	r3, [pc, #532]	@ (800a678 <tcp_receive+0x884>)
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a468:	1ad3      	subs	r3, r2, r3
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	f2c0 8427 	blt.w	800acbe <tcp_receive+0xeca>
 800a470:	4b81      	ldr	r3, [pc, #516]	@ (800a678 <tcp_receive+0x884>)
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a478:	6879      	ldr	r1, [r7, #4]
 800a47a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a47c:	440b      	add	r3, r1
 800a47e:	1ad3      	subs	r3, r2, r3
 800a480:	3301      	adds	r3, #1
 800a482:	2b00      	cmp	r3, #0
 800a484:	f300 841b 	bgt.w	800acbe <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a48c:	4b7a      	ldr	r3, [pc, #488]	@ (800a678 <tcp_receive+0x884>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	429a      	cmp	r2, r3
 800a492:	f040 8298 	bne.w	800a9c6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a496:	4b79      	ldr	r3, [pc, #484]	@ (800a67c <tcp_receive+0x888>)
 800a498:	891c      	ldrh	r4, [r3, #8]
 800a49a:	4b78      	ldr	r3, [pc, #480]	@ (800a67c <tcp_receive+0x888>)
 800a49c:	68db      	ldr	r3, [r3, #12]
 800a49e:	899b      	ldrh	r3, [r3, #12]
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f7fb f86a 	bl	800557c <lwip_htons>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	f003 0303 	and.w	r3, r3, #3
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d001      	beq.n	800a4b8 <tcp_receive+0x6c4>
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e000      	b.n	800a4ba <tcp_receive+0x6c6>
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	4423      	add	r3, r4
 800a4bc:	b29a      	uxth	r2, r3
 800a4be:	4b70      	ldr	r3, [pc, #448]	@ (800a680 <tcp_receive+0x88c>)
 800a4c0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a4c6:	4b6e      	ldr	r3, [pc, #440]	@ (800a680 <tcp_receive+0x88c>)
 800a4c8:	881b      	ldrh	r3, [r3, #0]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d274      	bcs.n	800a5b8 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a4ce:	4b6b      	ldr	r3, [pc, #428]	@ (800a67c <tcp_receive+0x888>)
 800a4d0:	68db      	ldr	r3, [r3, #12]
 800a4d2:	899b      	ldrh	r3, [r3, #12]
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f7fb f850 	bl	800557c <lwip_htons>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	f003 0301 	and.w	r3, r3, #1
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d01e      	beq.n	800a526 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a4e8:	4b64      	ldr	r3, [pc, #400]	@ (800a67c <tcp_receive+0x888>)
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	899b      	ldrh	r3, [r3, #12]
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	b21b      	sxth	r3, r3
 800a4f2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a4f6:	b21c      	sxth	r4, r3
 800a4f8:	4b60      	ldr	r3, [pc, #384]	@ (800a67c <tcp_receive+0x888>)
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	899b      	ldrh	r3, [r3, #12]
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	4618      	mov	r0, r3
 800a502:	f7fb f83b 	bl	800557c <lwip_htons>
 800a506:	4603      	mov	r3, r0
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800a50e:	b29b      	uxth	r3, r3
 800a510:	4618      	mov	r0, r3
 800a512:	f7fb f833 	bl	800557c <lwip_htons>
 800a516:	4603      	mov	r3, r0
 800a518:	b21b      	sxth	r3, r3
 800a51a:	4323      	orrs	r3, r4
 800a51c:	b21a      	sxth	r2, r3
 800a51e:	4b57      	ldr	r3, [pc, #348]	@ (800a67c <tcp_receive+0x888>)
 800a520:	68db      	ldr	r3, [r3, #12]
 800a522:	b292      	uxth	r2, r2
 800a524:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a52a:	4b54      	ldr	r3, [pc, #336]	@ (800a67c <tcp_receive+0x888>)
 800a52c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a52e:	4b53      	ldr	r3, [pc, #332]	@ (800a67c <tcp_receive+0x888>)
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	899b      	ldrh	r3, [r3, #12]
 800a534:	b29b      	uxth	r3, r3
 800a536:	4618      	mov	r0, r3
 800a538:	f7fb f820 	bl	800557c <lwip_htons>
 800a53c:	4603      	mov	r3, r0
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	f003 0302 	and.w	r3, r3, #2
 800a544:	2b00      	cmp	r3, #0
 800a546:	d005      	beq.n	800a554 <tcp_receive+0x760>
            inseg.len -= 1;
 800a548:	4b4c      	ldr	r3, [pc, #304]	@ (800a67c <tcp_receive+0x888>)
 800a54a:	891b      	ldrh	r3, [r3, #8]
 800a54c:	3b01      	subs	r3, #1
 800a54e:	b29a      	uxth	r2, r3
 800a550:	4b4a      	ldr	r3, [pc, #296]	@ (800a67c <tcp_receive+0x888>)
 800a552:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a554:	4b49      	ldr	r3, [pc, #292]	@ (800a67c <tcp_receive+0x888>)
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	4a48      	ldr	r2, [pc, #288]	@ (800a67c <tcp_receive+0x888>)
 800a55a:	8912      	ldrh	r2, [r2, #8]
 800a55c:	4611      	mov	r1, r2
 800a55e:	4618      	mov	r0, r3
 800a560:	f7fc f9e0 	bl	8006924 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a564:	4b45      	ldr	r3, [pc, #276]	@ (800a67c <tcp_receive+0x888>)
 800a566:	891c      	ldrh	r4, [r3, #8]
 800a568:	4b44      	ldr	r3, [pc, #272]	@ (800a67c <tcp_receive+0x888>)
 800a56a:	68db      	ldr	r3, [r3, #12]
 800a56c:	899b      	ldrh	r3, [r3, #12]
 800a56e:	b29b      	uxth	r3, r3
 800a570:	4618      	mov	r0, r3
 800a572:	f7fb f803 	bl	800557c <lwip_htons>
 800a576:	4603      	mov	r3, r0
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	f003 0303 	and.w	r3, r3, #3
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d001      	beq.n	800a586 <tcp_receive+0x792>
 800a582:	2301      	movs	r3, #1
 800a584:	e000      	b.n	800a588 <tcp_receive+0x794>
 800a586:	2300      	movs	r3, #0
 800a588:	4423      	add	r3, r4
 800a58a:	b29a      	uxth	r2, r3
 800a58c:	4b3c      	ldr	r3, [pc, #240]	@ (800a680 <tcp_receive+0x88c>)
 800a58e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a590:	4b3b      	ldr	r3, [pc, #236]	@ (800a680 <tcp_receive+0x88c>)
 800a592:	881b      	ldrh	r3, [r3, #0]
 800a594:	461a      	mov	r2, r3
 800a596:	4b38      	ldr	r3, [pc, #224]	@ (800a678 <tcp_receive+0x884>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	441a      	add	r2, r3
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5a0:	6879      	ldr	r1, [r7, #4]
 800a5a2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a5a4:	440b      	add	r3, r1
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d006      	beq.n	800a5b8 <tcp_receive+0x7c4>
 800a5aa:	4b36      	ldr	r3, [pc, #216]	@ (800a684 <tcp_receive+0x890>)
 800a5ac:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800a5b0:	4935      	ldr	r1, [pc, #212]	@ (800a688 <tcp_receive+0x894>)
 800a5b2:	4836      	ldr	r0, [pc, #216]	@ (800a68c <tcp_receive+0x898>)
 800a5b4:	f004 fdec 	bl	800f190 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f000 80e6 	beq.w	800a78e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a5c2:	4b2e      	ldr	r3, [pc, #184]	@ (800a67c <tcp_receive+0x888>)
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	899b      	ldrh	r3, [r3, #12]
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7fa ffd6 	bl	800557c <lwip_htons>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	f003 0301 	and.w	r3, r3, #1
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d010      	beq.n	800a5fe <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a5dc:	e00a      	b.n	800a5f4 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5e2:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800a5ee:	68f8      	ldr	r0, [r7, #12]
 800a5f0:	f7fd fd93 	bl	800811a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d1f0      	bne.n	800a5de <tcp_receive+0x7ea>
 800a5fc:	e0c7      	b.n	800a78e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a602:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a604:	e051      	b.n	800a6aa <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	899b      	ldrh	r3, [r3, #12]
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fa ffb4 	bl	800557c <lwip_htons>
 800a614:	4603      	mov	r3, r0
 800a616:	b2db      	uxtb	r3, r3
 800a618:	f003 0301 	and.w	r3, r3, #1
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d03c      	beq.n	800a69a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a620:	4b16      	ldr	r3, [pc, #88]	@ (800a67c <tcp_receive+0x888>)
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	899b      	ldrh	r3, [r3, #12]
 800a626:	b29b      	uxth	r3, r3
 800a628:	4618      	mov	r0, r3
 800a62a:	f7fa ffa7 	bl	800557c <lwip_htons>
 800a62e:	4603      	mov	r3, r0
 800a630:	b2db      	uxtb	r3, r3
 800a632:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a636:	2b00      	cmp	r3, #0
 800a638:	d12f      	bne.n	800a69a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a63a:	4b10      	ldr	r3, [pc, #64]	@ (800a67c <tcp_receive+0x888>)
 800a63c:	68db      	ldr	r3, [r3, #12]
 800a63e:	899b      	ldrh	r3, [r3, #12]
 800a640:	b29c      	uxth	r4, r3
 800a642:	2001      	movs	r0, #1
 800a644:	f7fa ff9a 	bl	800557c <lwip_htons>
 800a648:	4603      	mov	r3, r0
 800a64a:	461a      	mov	r2, r3
 800a64c:	4b0b      	ldr	r3, [pc, #44]	@ (800a67c <tcp_receive+0x888>)
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	4322      	orrs	r2, r4
 800a652:	b292      	uxth	r2, r2
 800a654:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a656:	4b09      	ldr	r3, [pc, #36]	@ (800a67c <tcp_receive+0x888>)
 800a658:	891c      	ldrh	r4, [r3, #8]
 800a65a:	4b08      	ldr	r3, [pc, #32]	@ (800a67c <tcp_receive+0x888>)
 800a65c:	68db      	ldr	r3, [r3, #12]
 800a65e:	899b      	ldrh	r3, [r3, #12]
 800a660:	b29b      	uxth	r3, r3
 800a662:	4618      	mov	r0, r3
 800a664:	f7fa ff8a 	bl	800557c <lwip_htons>
 800a668:	4603      	mov	r3, r0
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	f003 0303 	and.w	r3, r3, #3
 800a670:	2b00      	cmp	r3, #0
 800a672:	d00d      	beq.n	800a690 <tcp_receive+0x89c>
 800a674:	2301      	movs	r3, #1
 800a676:	e00c      	b.n	800a692 <tcp_receive+0x89e>
 800a678:	20007cac 	.word	0x20007cac
 800a67c:	20007c8c 	.word	0x20007c8c
 800a680:	20007cb6 	.word	0x20007cb6
 800a684:	080111ec 	.word	0x080111ec
 800a688:	08011594 	.word	0x08011594
 800a68c:	08011238 	.word	0x08011238
 800a690:	2300      	movs	r3, #0
 800a692:	4423      	add	r3, r4
 800a694:	b29a      	uxth	r2, r3
 800a696:	4b98      	ldr	r3, [pc, #608]	@ (800a8f8 <tcp_receive+0xb04>)
 800a698:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a69a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a69c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a69e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800a6a4:	6938      	ldr	r0, [r7, #16]
 800a6a6:	f7fd fd38 	bl	800811a <tcp_seg_free>
            while (next &&
 800a6aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d00e      	beq.n	800a6ce <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a6b0:	4b91      	ldr	r3, [pc, #580]	@ (800a8f8 <tcp_receive+0xb04>)
 800a6b2:	881b      	ldrh	r3, [r3, #0]
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	4b91      	ldr	r3, [pc, #580]	@ (800a8fc <tcp_receive+0xb08>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	441a      	add	r2, r3
 800a6bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a6c4:	8909      	ldrh	r1, [r1, #8]
 800a6c6:	440b      	add	r3, r1
 800a6c8:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	da9b      	bge.n	800a606 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a6ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d059      	beq.n	800a788 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800a6d4:	4b88      	ldr	r3, [pc, #544]	@ (800a8f8 <tcp_receive+0xb04>)
 800a6d6:	881b      	ldrh	r3, [r3, #0]
 800a6d8:	461a      	mov	r2, r3
 800a6da:	4b88      	ldr	r3, [pc, #544]	@ (800a8fc <tcp_receive+0xb08>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	441a      	add	r2, r3
 800a6e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6e2:	68db      	ldr	r3, [r3, #12]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	dd4d      	ble.n	800a788 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a6ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6ee:	68db      	ldr	r3, [r3, #12]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	b29a      	uxth	r2, r3
 800a6f4:	4b81      	ldr	r3, [pc, #516]	@ (800a8fc <tcp_receive+0xb08>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	1ad3      	subs	r3, r2, r3
 800a6fc:	b29a      	uxth	r2, r3
 800a6fe:	4b80      	ldr	r3, [pc, #512]	@ (800a900 <tcp_receive+0xb0c>)
 800a700:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a702:	4b7f      	ldr	r3, [pc, #508]	@ (800a900 <tcp_receive+0xb0c>)
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	899b      	ldrh	r3, [r3, #12]
 800a708:	b29b      	uxth	r3, r3
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7fa ff36 	bl	800557c <lwip_htons>
 800a710:	4603      	mov	r3, r0
 800a712:	b2db      	uxtb	r3, r3
 800a714:	f003 0302 	and.w	r3, r3, #2
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d005      	beq.n	800a728 <tcp_receive+0x934>
                inseg.len -= 1;
 800a71c:	4b78      	ldr	r3, [pc, #480]	@ (800a900 <tcp_receive+0xb0c>)
 800a71e:	891b      	ldrh	r3, [r3, #8]
 800a720:	3b01      	subs	r3, #1
 800a722:	b29a      	uxth	r2, r3
 800a724:	4b76      	ldr	r3, [pc, #472]	@ (800a900 <tcp_receive+0xb0c>)
 800a726:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a728:	4b75      	ldr	r3, [pc, #468]	@ (800a900 <tcp_receive+0xb0c>)
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	4a74      	ldr	r2, [pc, #464]	@ (800a900 <tcp_receive+0xb0c>)
 800a72e:	8912      	ldrh	r2, [r2, #8]
 800a730:	4611      	mov	r1, r2
 800a732:	4618      	mov	r0, r3
 800a734:	f7fc f8f6 	bl	8006924 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a738:	4b71      	ldr	r3, [pc, #452]	@ (800a900 <tcp_receive+0xb0c>)
 800a73a:	891c      	ldrh	r4, [r3, #8]
 800a73c:	4b70      	ldr	r3, [pc, #448]	@ (800a900 <tcp_receive+0xb0c>)
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	899b      	ldrh	r3, [r3, #12]
 800a742:	b29b      	uxth	r3, r3
 800a744:	4618      	mov	r0, r3
 800a746:	f7fa ff19 	bl	800557c <lwip_htons>
 800a74a:	4603      	mov	r3, r0
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	f003 0303 	and.w	r3, r3, #3
 800a752:	2b00      	cmp	r3, #0
 800a754:	d001      	beq.n	800a75a <tcp_receive+0x966>
 800a756:	2301      	movs	r3, #1
 800a758:	e000      	b.n	800a75c <tcp_receive+0x968>
 800a75a:	2300      	movs	r3, #0
 800a75c:	4423      	add	r3, r4
 800a75e:	b29a      	uxth	r2, r3
 800a760:	4b65      	ldr	r3, [pc, #404]	@ (800a8f8 <tcp_receive+0xb04>)
 800a762:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a764:	4b64      	ldr	r3, [pc, #400]	@ (800a8f8 <tcp_receive+0xb04>)
 800a766:	881b      	ldrh	r3, [r3, #0]
 800a768:	461a      	mov	r2, r3
 800a76a:	4b64      	ldr	r3, [pc, #400]	@ (800a8fc <tcp_receive+0xb08>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	441a      	add	r2, r3
 800a770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a772:	68db      	ldr	r3, [r3, #12]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	429a      	cmp	r2, r3
 800a778:	d006      	beq.n	800a788 <tcp_receive+0x994>
 800a77a:	4b62      	ldr	r3, [pc, #392]	@ (800a904 <tcp_receive+0xb10>)
 800a77c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800a780:	4961      	ldr	r1, [pc, #388]	@ (800a908 <tcp_receive+0xb14>)
 800a782:	4862      	ldr	r0, [pc, #392]	@ (800a90c <tcp_receive+0xb18>)
 800a784:	f004 fd04 	bl	800f190 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a78c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a78e:	4b5a      	ldr	r3, [pc, #360]	@ (800a8f8 <tcp_receive+0xb04>)
 800a790:	881b      	ldrh	r3, [r3, #0]
 800a792:	461a      	mov	r2, r3
 800a794:	4b59      	ldr	r3, [pc, #356]	@ (800a8fc <tcp_receive+0xb08>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	441a      	add	r2, r3
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a7a2:	4b55      	ldr	r3, [pc, #340]	@ (800a8f8 <tcp_receive+0xb04>)
 800a7a4:	881b      	ldrh	r3, [r3, #0]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d206      	bcs.n	800a7b8 <tcp_receive+0x9c4>
 800a7aa:	4b56      	ldr	r3, [pc, #344]	@ (800a904 <tcp_receive+0xb10>)
 800a7ac:	f240 6207 	movw	r2, #1543	@ 0x607
 800a7b0:	4957      	ldr	r1, [pc, #348]	@ (800a910 <tcp_receive+0xb1c>)
 800a7b2:	4856      	ldr	r0, [pc, #344]	@ (800a90c <tcp_receive+0xb18>)
 800a7b4:	f004 fcec 	bl	800f190 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a7bc:	4b4e      	ldr	r3, [pc, #312]	@ (800a8f8 <tcp_receive+0xb04>)
 800a7be:	881b      	ldrh	r3, [r3, #0]
 800a7c0:	1ad3      	subs	r3, r2, r3
 800a7c2:	b29a      	uxth	r2, r3
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f7fc ffc5 	bl	8007758 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a7ce:	4b4c      	ldr	r3, [pc, #304]	@ (800a900 <tcp_receive+0xb0c>)
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	891b      	ldrh	r3, [r3, #8]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d006      	beq.n	800a7e6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800a7d8:	4b49      	ldr	r3, [pc, #292]	@ (800a900 <tcp_receive+0xb0c>)
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	4a4d      	ldr	r2, [pc, #308]	@ (800a914 <tcp_receive+0xb20>)
 800a7de:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a7e0:	4b47      	ldr	r3, [pc, #284]	@ (800a900 <tcp_receive+0xb0c>)
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a7e6:	4b46      	ldr	r3, [pc, #280]	@ (800a900 <tcp_receive+0xb0c>)
 800a7e8:	68db      	ldr	r3, [r3, #12]
 800a7ea:	899b      	ldrh	r3, [r3, #12]
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7fa fec4 	bl	800557c <lwip_htons>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	f003 0301 	and.w	r3, r3, #1
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	f000 80b8 	beq.w	800a972 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a802:	4b45      	ldr	r3, [pc, #276]	@ (800a918 <tcp_receive+0xb24>)
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	f043 0320 	orr.w	r3, r3, #32
 800a80a:	b2da      	uxtb	r2, r3
 800a80c:	4b42      	ldr	r3, [pc, #264]	@ (800a918 <tcp_receive+0xb24>)
 800a80e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a810:	e0af      	b.n	800a972 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a816:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	4a36      	ldr	r2, [pc, #216]	@ (800a8fc <tcp_receive+0xb08>)
 800a822:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	891b      	ldrh	r3, [r3, #8]
 800a828:	461c      	mov	r4, r3
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	899b      	ldrh	r3, [r3, #12]
 800a830:	b29b      	uxth	r3, r3
 800a832:	4618      	mov	r0, r3
 800a834:	f7fa fea2 	bl	800557c <lwip_htons>
 800a838:	4603      	mov	r3, r0
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	f003 0303 	and.w	r3, r3, #3
 800a840:	2b00      	cmp	r3, #0
 800a842:	d001      	beq.n	800a848 <tcp_receive+0xa54>
 800a844:	2301      	movs	r3, #1
 800a846:	e000      	b.n	800a84a <tcp_receive+0xa56>
 800a848:	2300      	movs	r3, #0
 800a84a:	191a      	adds	r2, r3, r4
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a850:	441a      	add	r2, r3
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a85a:	461c      	mov	r4, r3
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	891b      	ldrh	r3, [r3, #8]
 800a860:	461d      	mov	r5, r3
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	899b      	ldrh	r3, [r3, #12]
 800a868:	b29b      	uxth	r3, r3
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7fa fe86 	bl	800557c <lwip_htons>
 800a870:	4603      	mov	r3, r0
 800a872:	b2db      	uxtb	r3, r3
 800a874:	f003 0303 	and.w	r3, r3, #3
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d001      	beq.n	800a880 <tcp_receive+0xa8c>
 800a87c:	2301      	movs	r3, #1
 800a87e:	e000      	b.n	800a882 <tcp_receive+0xa8e>
 800a880:	2300      	movs	r3, #0
 800a882:	442b      	add	r3, r5
 800a884:	429c      	cmp	r4, r3
 800a886:	d206      	bcs.n	800a896 <tcp_receive+0xaa2>
 800a888:	4b1e      	ldr	r3, [pc, #120]	@ (800a904 <tcp_receive+0xb10>)
 800a88a:	f240 622b 	movw	r2, #1579	@ 0x62b
 800a88e:	4923      	ldr	r1, [pc, #140]	@ (800a91c <tcp_receive+0xb28>)
 800a890:	481e      	ldr	r0, [pc, #120]	@ (800a90c <tcp_receive+0xb18>)
 800a892:	f004 fc7d 	bl	800f190 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	891b      	ldrh	r3, [r3, #8]
 800a89a:	461c      	mov	r4, r3
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	899b      	ldrh	r3, [r3, #12]
 800a8a2:	b29b      	uxth	r3, r3
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7fa fe69 	bl	800557c <lwip_htons>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	f003 0303 	and.w	r3, r3, #3
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d001      	beq.n	800a8ba <tcp_receive+0xac6>
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	e000      	b.n	800a8bc <tcp_receive+0xac8>
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	1919      	adds	r1, r3, r4
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a8c2:	b28b      	uxth	r3, r1
 800a8c4:	1ad3      	subs	r3, r2, r3
 800a8c6:	b29a      	uxth	r2, r3
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f7fc ff43 	bl	8007758 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	891b      	ldrh	r3, [r3, #8]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d028      	beq.n	800a92e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a8dc:	4b0d      	ldr	r3, [pc, #52]	@ (800a914 <tcp_receive+0xb20>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d01d      	beq.n	800a920 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800a8e4:	4b0b      	ldr	r3, [pc, #44]	@ (800a914 <tcp_receive+0xb20>)
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	4610      	mov	r0, r2
 800a8f0:	f7fc fa60 	bl	8006db4 <pbuf_cat>
 800a8f4:	e018      	b.n	800a928 <tcp_receive+0xb34>
 800a8f6:	bf00      	nop
 800a8f8:	20007cb6 	.word	0x20007cb6
 800a8fc:	20007cac 	.word	0x20007cac
 800a900:	20007c8c 	.word	0x20007c8c
 800a904:	080111ec 	.word	0x080111ec
 800a908:	080115cc 	.word	0x080115cc
 800a90c:	08011238 	.word	0x08011238
 800a910:	08011608 	.word	0x08011608
 800a914:	20007cbc 	.word	0x20007cbc
 800a918:	20007cb9 	.word	0x20007cb9
 800a91c:	08011628 	.word	0x08011628
            } else {
              recv_data = cseg->p;
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	4a70      	ldr	r2, [pc, #448]	@ (800aae8 <tcp_receive+0xcf4>)
 800a926:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	2200      	movs	r2, #0
 800a92c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	68db      	ldr	r3, [r3, #12]
 800a932:	899b      	ldrh	r3, [r3, #12]
 800a934:	b29b      	uxth	r3, r3
 800a936:	4618      	mov	r0, r3
 800a938:	f7fa fe20 	bl	800557c <lwip_htons>
 800a93c:	4603      	mov	r3, r0
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	f003 0301 	and.w	r3, r3, #1
 800a944:	2b00      	cmp	r3, #0
 800a946:	d00d      	beq.n	800a964 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a948:	4b68      	ldr	r3, [pc, #416]	@ (800aaec <tcp_receive+0xcf8>)
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	f043 0320 	orr.w	r3, r3, #32
 800a950:	b2da      	uxtb	r2, r3
 800a952:	4b66      	ldr	r3, [pc, #408]	@ (800aaec <tcp_receive+0xcf8>)
 800a954:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	7d1b      	ldrb	r3, [r3, #20]
 800a95a:	2b04      	cmp	r3, #4
 800a95c:	d102      	bne.n	800a964 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2207      	movs	r2, #7
 800a962:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800a96c:	68b8      	ldr	r0, [r7, #8]
 800a96e:	f7fd fbd4 	bl	800811a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a976:	2b00      	cmp	r3, #0
 800a978:	d008      	beq.n	800a98c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	685a      	ldr	r2, [r3, #4]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800a986:	429a      	cmp	r2, r3
 800a988:	f43f af43 	beq.w	800a812 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	8b5b      	ldrh	r3, [r3, #26]
 800a990:	f003 0301 	and.w	r3, r3, #1
 800a994:	2b00      	cmp	r3, #0
 800a996:	d00e      	beq.n	800a9b6 <tcp_receive+0xbc2>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	8b5b      	ldrh	r3, [r3, #26]
 800a99c:	f023 0301 	bic.w	r3, r3, #1
 800a9a0:	b29a      	uxth	r2, r3
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	835a      	strh	r2, [r3, #26]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	8b5b      	ldrh	r3, [r3, #26]
 800a9aa:	f043 0302 	orr.w	r3, r3, #2
 800a9ae:	b29a      	uxth	r2, r3
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a9b4:	e187      	b.n	800acc6 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	8b5b      	ldrh	r3, [r3, #26]
 800a9ba:	f043 0301 	orr.w	r3, r3, #1
 800a9be:	b29a      	uxth	r2, r3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a9c4:	e17f      	b.n	800acc6 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d106      	bne.n	800a9dc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a9ce:	4848      	ldr	r0, [pc, #288]	@ (800aaf0 <tcp_receive+0xcfc>)
 800a9d0:	f7fd fbbc 	bl	800814c <tcp_seg_copy>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	675a      	str	r2, [r3, #116]	@ 0x74
 800a9da:	e16c      	b.n	800acb6 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a9e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a9e6:	e156      	b.n	800ac96 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800a9e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	685a      	ldr	r2, [r3, #4]
 800a9ee:	4b41      	ldr	r3, [pc, #260]	@ (800aaf4 <tcp_receive+0xd00>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d11d      	bne.n	800aa32 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a9f6:	4b3e      	ldr	r3, [pc, #248]	@ (800aaf0 <tcp_receive+0xcfc>)
 800a9f8:	891a      	ldrh	r2, [r3, #8]
 800a9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9fc:	891b      	ldrh	r3, [r3, #8]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	f240 814e 	bls.w	800aca0 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800aa04:	483a      	ldr	r0, [pc, #232]	@ (800aaf0 <tcp_receive+0xcfc>)
 800aa06:	f7fd fba1 	bl	800814c <tcp_seg_copy>
 800aa0a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	f000 8148 	beq.w	800aca4 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800aa14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d003      	beq.n	800aa22 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800aa1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa1c:	697a      	ldr	r2, [r7, #20]
 800aa1e:	601a      	str	r2, [r3, #0]
 800aa20:	e002      	b.n	800aa28 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	697a      	ldr	r2, [r7, #20]
 800aa26:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800aa28:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800aa2a:	6978      	ldr	r0, [r7, #20]
 800aa2c:	f7ff f8de 	bl	8009bec <tcp_oos_insert_segment>
                }
                break;
 800aa30:	e138      	b.n	800aca4 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800aa32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d117      	bne.n	800aa68 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800aa38:	4b2e      	ldr	r3, [pc, #184]	@ (800aaf4 <tcp_receive+0xd00>)
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa3e:	68db      	ldr	r3, [r3, #12]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	1ad3      	subs	r3, r2, r3
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	da57      	bge.n	800aaf8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800aa48:	4829      	ldr	r0, [pc, #164]	@ (800aaf0 <tcp_receive+0xcfc>)
 800aa4a:	f7fd fb7f 	bl	800814c <tcp_seg_copy>
 800aa4e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800aa50:	69bb      	ldr	r3, [r7, #24]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	f000 8128 	beq.w	800aca8 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	69ba      	ldr	r2, [r7, #24]
 800aa5c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800aa5e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800aa60:	69b8      	ldr	r0, [r7, #24]
 800aa62:	f7ff f8c3 	bl	8009bec <tcp_oos_insert_segment>
                  }
                  break;
 800aa66:	e11f      	b.n	800aca8 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800aa68:	4b22      	ldr	r3, [pc, #136]	@ (800aaf4 <tcp_receive+0xd00>)
 800aa6a:	681a      	ldr	r2, [r3, #0]
 800aa6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa6e:	68db      	ldr	r3, [r3, #12]
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	1ad3      	subs	r3, r2, r3
 800aa74:	3b01      	subs	r3, #1
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	db3e      	blt.n	800aaf8 <tcp_receive+0xd04>
 800aa7a:	4b1e      	ldr	r3, [pc, #120]	@ (800aaf4 <tcp_receive+0xd00>)
 800aa7c:	681a      	ldr	r2, [r3, #0]
 800aa7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa80:	68db      	ldr	r3, [r3, #12]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	1ad3      	subs	r3, r2, r3
 800aa86:	3301      	adds	r3, #1
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	dc35      	bgt.n	800aaf8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800aa8c:	4818      	ldr	r0, [pc, #96]	@ (800aaf0 <tcp_receive+0xcfc>)
 800aa8e:	f7fd fb5d 	bl	800814c <tcp_seg_copy>
 800aa92:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	f000 8108 	beq.w	800acac <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800aa9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aaa4:	8912      	ldrh	r2, [r2, #8]
 800aaa6:	441a      	add	r2, r3
 800aaa8:	4b12      	ldr	r3, [pc, #72]	@ (800aaf4 <tcp_receive+0xd00>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	1ad3      	subs	r3, r2, r3
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	dd12      	ble.n	800aad8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800aab2:	4b10      	ldr	r3, [pc, #64]	@ (800aaf4 <tcp_receive+0xd00>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	b29a      	uxth	r2, r3
 800aab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaba:	68db      	ldr	r3, [r3, #12]
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	b29b      	uxth	r3, r3
 800aac0:	1ad3      	subs	r3, r2, r3
 800aac2:	b29a      	uxth	r2, r3
 800aac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aac6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800aac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaca:	685a      	ldr	r2, [r3, #4]
 800aacc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aace:	891b      	ldrh	r3, [r3, #8]
 800aad0:	4619      	mov	r1, r3
 800aad2:	4610      	mov	r0, r2
 800aad4:	f7fb ff26 	bl	8006924 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800aad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aada:	69fa      	ldr	r2, [r7, #28]
 800aadc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800aade:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800aae0:	69f8      	ldr	r0, [r7, #28]
 800aae2:	f7ff f883 	bl	8009bec <tcp_oos_insert_segment>
                  }
                  break;
 800aae6:	e0e1      	b.n	800acac <tcp_receive+0xeb8>
 800aae8:	20007cbc 	.word	0x20007cbc
 800aaec:	20007cb9 	.word	0x20007cb9
 800aaf0:	20007c8c 	.word	0x20007c8c
 800aaf4:	20007cac 	.word	0x20007cac
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800aaf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aafa:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800aafc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	f040 80c5 	bne.w	800ac90 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ab06:	4b7f      	ldr	r3, [pc, #508]	@ (800ad04 <tcp_receive+0xf10>)
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab0c:	68db      	ldr	r3, [r3, #12]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	f340 80bc 	ble.w	800ac90 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ab18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab1a:	68db      	ldr	r3, [r3, #12]
 800ab1c:	899b      	ldrh	r3, [r3, #12]
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7fa fd2b 	bl	800557c <lwip_htons>
 800ab26:	4603      	mov	r3, r0
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	f003 0301 	and.w	r3, r3, #1
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	f040 80be 	bne.w	800acb0 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ab34:	4874      	ldr	r0, [pc, #464]	@ (800ad08 <tcp_receive+0xf14>)
 800ab36:	f7fd fb09 	bl	800814c <tcp_seg_copy>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab3e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ab40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	f000 80b5 	beq.w	800acb4 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ab4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ab52:	8912      	ldrh	r2, [r2, #8]
 800ab54:	441a      	add	r2, r3
 800ab56:	4b6b      	ldr	r3, [pc, #428]	@ (800ad04 <tcp_receive+0xf10>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	1ad3      	subs	r3, r2, r3
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	dd12      	ble.n	800ab86 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ab60:	4b68      	ldr	r3, [pc, #416]	@ (800ad04 <tcp_receive+0xf10>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	b29a      	uxth	r2, r3
 800ab66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab68:	68db      	ldr	r3, [r3, #12]
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	1ad3      	subs	r3, r2, r3
 800ab70:	b29a      	uxth	r2, r3
 800ab72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab74:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ab76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab78:	685a      	ldr	r2, [r3, #4]
 800ab7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab7c:	891b      	ldrh	r3, [r3, #8]
 800ab7e:	4619      	mov	r1, r3
 800ab80:	4610      	mov	r0, r2
 800ab82:	f7fb fecf 	bl	8006924 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ab86:	4b61      	ldr	r3, [pc, #388]	@ (800ad0c <tcp_receive+0xf18>)
 800ab88:	881b      	ldrh	r3, [r3, #0]
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	4b5d      	ldr	r3, [pc, #372]	@ (800ad04 <tcp_receive+0xf10>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	441a      	add	r2, r3
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab96:	6879      	ldr	r1, [r7, #4]
 800ab98:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ab9a:	440b      	add	r3, r1
 800ab9c:	1ad3      	subs	r3, r2, r3
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f340 8088 	ble.w	800acb4 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800aba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	68db      	ldr	r3, [r3, #12]
 800abaa:	899b      	ldrh	r3, [r3, #12]
 800abac:	b29b      	uxth	r3, r3
 800abae:	4618      	mov	r0, r3
 800abb0:	f7fa fce4 	bl	800557c <lwip_htons>
 800abb4:	4603      	mov	r3, r0
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	f003 0301 	and.w	r3, r3, #1
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d021      	beq.n	800ac04 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800abc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	68db      	ldr	r3, [r3, #12]
 800abc6:	899b      	ldrh	r3, [r3, #12]
 800abc8:	b29b      	uxth	r3, r3
 800abca:	b21b      	sxth	r3, r3
 800abcc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800abd0:	b21c      	sxth	r4, r3
 800abd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	899b      	ldrh	r3, [r3, #12]
 800abda:	b29b      	uxth	r3, r3
 800abdc:	4618      	mov	r0, r3
 800abde:	f7fa fccd 	bl	800557c <lwip_htons>
 800abe2:	4603      	mov	r3, r0
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800abea:	b29b      	uxth	r3, r3
 800abec:	4618      	mov	r0, r3
 800abee:	f7fa fcc5 	bl	800557c <lwip_htons>
 800abf2:	4603      	mov	r3, r0
 800abf4:	b21b      	sxth	r3, r3
 800abf6:	4323      	orrs	r3, r4
 800abf8:	b21a      	sxth	r2, r3
 800abfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	68db      	ldr	r3, [r3, #12]
 800ac00:	b292      	uxth	r2, r2
 800ac02:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac08:	b29a      	uxth	r2, r3
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac0e:	4413      	add	r3, r2
 800ac10:	b299      	uxth	r1, r3
 800ac12:	4b3c      	ldr	r3, [pc, #240]	@ (800ad04 <tcp_receive+0xf10>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	b29a      	uxth	r2, r3
 800ac18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	1a8a      	subs	r2, r1, r2
 800ac1e:	b292      	uxth	r2, r2
 800ac20:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ac22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	685a      	ldr	r2, [r3, #4]
 800ac28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	891b      	ldrh	r3, [r3, #8]
 800ac2e:	4619      	mov	r1, r3
 800ac30:	4610      	mov	r0, r2
 800ac32:	f7fb fe77 	bl	8006924 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ac36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	891c      	ldrh	r4, [r3, #8]
 800ac3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	68db      	ldr	r3, [r3, #12]
 800ac42:	899b      	ldrh	r3, [r3, #12]
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7fa fc98 	bl	800557c <lwip_htons>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	f003 0303 	and.w	r3, r3, #3
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d001      	beq.n	800ac5c <tcp_receive+0xe68>
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e000      	b.n	800ac5e <tcp_receive+0xe6a>
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	4423      	add	r3, r4
 800ac60:	b29a      	uxth	r2, r3
 800ac62:	4b2a      	ldr	r3, [pc, #168]	@ (800ad0c <tcp_receive+0xf18>)
 800ac64:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ac66:	4b29      	ldr	r3, [pc, #164]	@ (800ad0c <tcp_receive+0xf18>)
 800ac68:	881b      	ldrh	r3, [r3, #0]
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	4b25      	ldr	r3, [pc, #148]	@ (800ad04 <tcp_receive+0xf10>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	441a      	add	r2, r3
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac76:	6879      	ldr	r1, [r7, #4]
 800ac78:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ac7a:	440b      	add	r3, r1
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d019      	beq.n	800acb4 <tcp_receive+0xec0>
 800ac80:	4b23      	ldr	r3, [pc, #140]	@ (800ad10 <tcp_receive+0xf1c>)
 800ac82:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800ac86:	4923      	ldr	r1, [pc, #140]	@ (800ad14 <tcp_receive+0xf20>)
 800ac88:	4823      	ldr	r0, [pc, #140]	@ (800ad18 <tcp_receive+0xf24>)
 800ac8a:	f004 fa81 	bl	800f190 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ac8e:	e011      	b.n	800acb4 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ac90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ac96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f47f aea5 	bne.w	800a9e8 <tcp_receive+0xbf4>
 800ac9e:	e00a      	b.n	800acb6 <tcp_receive+0xec2>
                break;
 800aca0:	bf00      	nop
 800aca2:	e008      	b.n	800acb6 <tcp_receive+0xec2>
                break;
 800aca4:	bf00      	nop
 800aca6:	e006      	b.n	800acb6 <tcp_receive+0xec2>
                  break;
 800aca8:	bf00      	nop
 800acaa:	e004      	b.n	800acb6 <tcp_receive+0xec2>
                  break;
 800acac:	bf00      	nop
 800acae:	e002      	b.n	800acb6 <tcp_receive+0xec2>
                  break;
 800acb0:	bf00      	nop
 800acb2:	e000      	b.n	800acb6 <tcp_receive+0xec2>
                break;
 800acb4:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f001 fa30 	bl	800c11c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800acbc:	e003      	b.n	800acc6 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f001 fa2c 	bl	800c11c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800acc4:	e01a      	b.n	800acfc <tcp_receive+0xf08>
 800acc6:	e019      	b.n	800acfc <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800acc8:	4b0e      	ldr	r3, [pc, #56]	@ (800ad04 <tcp_receive+0xf10>)
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acd0:	1ad3      	subs	r3, r2, r3
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	db0a      	blt.n	800acec <tcp_receive+0xef8>
 800acd6:	4b0b      	ldr	r3, [pc, #44]	@ (800ad04 <tcp_receive+0xf10>)
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acde:	6879      	ldr	r1, [r7, #4]
 800ace0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ace2:	440b      	add	r3, r1
 800ace4:	1ad3      	subs	r3, r2, r3
 800ace6:	3301      	adds	r3, #1
 800ace8:	2b00      	cmp	r3, #0
 800acea:	dd07      	ble.n	800acfc <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	8b5b      	ldrh	r3, [r3, #26]
 800acf0:	f043 0302 	orr.w	r3, r3, #2
 800acf4:	b29a      	uxth	r2, r3
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800acfa:	e7ff      	b.n	800acfc <tcp_receive+0xf08>
 800acfc:	bf00      	nop
 800acfe:	3750      	adds	r7, #80	@ 0x50
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bdb0      	pop	{r4, r5, r7, pc}
 800ad04:	20007cac 	.word	0x20007cac
 800ad08:	20007c8c 	.word	0x20007c8c
 800ad0c:	20007cb6 	.word	0x20007cb6
 800ad10:	080111ec 	.word	0x080111ec
 800ad14:	08011594 	.word	0x08011594
 800ad18:	08011238 	.word	0x08011238

0800ad1c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ad22:	4b15      	ldr	r3, [pc, #84]	@ (800ad78 <tcp_get_next_optbyte+0x5c>)
 800ad24:	881b      	ldrh	r3, [r3, #0]
 800ad26:	1c5a      	adds	r2, r3, #1
 800ad28:	b291      	uxth	r1, r2
 800ad2a:	4a13      	ldr	r2, [pc, #76]	@ (800ad78 <tcp_get_next_optbyte+0x5c>)
 800ad2c:	8011      	strh	r1, [r2, #0]
 800ad2e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ad30:	4b12      	ldr	r3, [pc, #72]	@ (800ad7c <tcp_get_next_optbyte+0x60>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d004      	beq.n	800ad42 <tcp_get_next_optbyte+0x26>
 800ad38:	4b11      	ldr	r3, [pc, #68]	@ (800ad80 <tcp_get_next_optbyte+0x64>)
 800ad3a:	881b      	ldrh	r3, [r3, #0]
 800ad3c:	88fa      	ldrh	r2, [r7, #6]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d208      	bcs.n	800ad54 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ad42:	4b10      	ldr	r3, [pc, #64]	@ (800ad84 <tcp_get_next_optbyte+0x68>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	3314      	adds	r3, #20
 800ad48:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ad4a:	88fb      	ldrh	r3, [r7, #6]
 800ad4c:	683a      	ldr	r2, [r7, #0]
 800ad4e:	4413      	add	r3, r2
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	e00b      	b.n	800ad6c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ad54:	88fb      	ldrh	r3, [r7, #6]
 800ad56:	b2da      	uxtb	r2, r3
 800ad58:	4b09      	ldr	r3, [pc, #36]	@ (800ad80 <tcp_get_next_optbyte+0x64>)
 800ad5a:	881b      	ldrh	r3, [r3, #0]
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	1ad3      	subs	r3, r2, r3
 800ad60:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ad62:	4b06      	ldr	r3, [pc, #24]	@ (800ad7c <tcp_get_next_optbyte+0x60>)
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	797b      	ldrb	r3, [r7, #5]
 800ad68:	4413      	add	r3, r2
 800ad6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	370c      	adds	r7, #12
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr
 800ad78:	20007ca8 	.word	0x20007ca8
 800ad7c:	20007ca4 	.word	0x20007ca4
 800ad80:	20007ca2 	.word	0x20007ca2
 800ad84:	20007c9c 	.word	0x20007c9c

0800ad88 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d106      	bne.n	800ada4 <tcp_parseopt+0x1c>
 800ad96:	4b32      	ldr	r3, [pc, #200]	@ (800ae60 <tcp_parseopt+0xd8>)
 800ad98:	f240 727d 	movw	r2, #1917	@ 0x77d
 800ad9c:	4931      	ldr	r1, [pc, #196]	@ (800ae64 <tcp_parseopt+0xdc>)
 800ad9e:	4832      	ldr	r0, [pc, #200]	@ (800ae68 <tcp_parseopt+0xe0>)
 800ada0:	f004 f9f6 	bl	800f190 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ada4:	4b31      	ldr	r3, [pc, #196]	@ (800ae6c <tcp_parseopt+0xe4>)
 800ada6:	881b      	ldrh	r3, [r3, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d056      	beq.n	800ae5a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800adac:	4b30      	ldr	r3, [pc, #192]	@ (800ae70 <tcp_parseopt+0xe8>)
 800adae:	2200      	movs	r2, #0
 800adb0:	801a      	strh	r2, [r3, #0]
 800adb2:	e046      	b.n	800ae42 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800adb4:	f7ff ffb2 	bl	800ad1c <tcp_get_next_optbyte>
 800adb8:	4603      	mov	r3, r0
 800adba:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800adbc:	7bfb      	ldrb	r3, [r7, #15]
 800adbe:	2b02      	cmp	r3, #2
 800adc0:	d006      	beq.n	800add0 <tcp_parseopt+0x48>
 800adc2:	2b02      	cmp	r3, #2
 800adc4:	dc2a      	bgt.n	800ae1c <tcp_parseopt+0x94>
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d042      	beq.n	800ae50 <tcp_parseopt+0xc8>
 800adca:	2b01      	cmp	r3, #1
 800adcc:	d038      	beq.n	800ae40 <tcp_parseopt+0xb8>
 800adce:	e025      	b.n	800ae1c <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800add0:	f7ff ffa4 	bl	800ad1c <tcp_get_next_optbyte>
 800add4:	4603      	mov	r3, r0
 800add6:	2b04      	cmp	r3, #4
 800add8:	d13c      	bne.n	800ae54 <tcp_parseopt+0xcc>
 800adda:	4b25      	ldr	r3, [pc, #148]	@ (800ae70 <tcp_parseopt+0xe8>)
 800addc:	881b      	ldrh	r3, [r3, #0]
 800adde:	3301      	adds	r3, #1
 800ade0:	4a22      	ldr	r2, [pc, #136]	@ (800ae6c <tcp_parseopt+0xe4>)
 800ade2:	8812      	ldrh	r2, [r2, #0]
 800ade4:	4293      	cmp	r3, r2
 800ade6:	da35      	bge.n	800ae54 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ade8:	f7ff ff98 	bl	800ad1c <tcp_get_next_optbyte>
 800adec:	4603      	mov	r3, r0
 800adee:	021b      	lsls	r3, r3, #8
 800adf0:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800adf2:	f7ff ff93 	bl	800ad1c <tcp_get_next_optbyte>
 800adf6:	4603      	mov	r3, r0
 800adf8:	461a      	mov	r2, r3
 800adfa:	89bb      	ldrh	r3, [r7, #12]
 800adfc:	4313      	orrs	r3, r2
 800adfe:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ae00:	89bb      	ldrh	r3, [r7, #12]
 800ae02:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800ae06:	d804      	bhi.n	800ae12 <tcp_parseopt+0x8a>
 800ae08:	89bb      	ldrh	r3, [r7, #12]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d001      	beq.n	800ae12 <tcp_parseopt+0x8a>
 800ae0e:	89ba      	ldrh	r2, [r7, #12]
 800ae10:	e001      	b.n	800ae16 <tcp_parseopt+0x8e>
 800ae12:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800ae1a:	e012      	b.n	800ae42 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ae1c:	f7ff ff7e 	bl	800ad1c <tcp_get_next_optbyte>
 800ae20:	4603      	mov	r3, r0
 800ae22:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800ae24:	7afb      	ldrb	r3, [r7, #11]
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d916      	bls.n	800ae58 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ae2a:	7afb      	ldrb	r3, [r7, #11]
 800ae2c:	b29a      	uxth	r2, r3
 800ae2e:	4b10      	ldr	r3, [pc, #64]	@ (800ae70 <tcp_parseopt+0xe8>)
 800ae30:	881b      	ldrh	r3, [r3, #0]
 800ae32:	4413      	add	r3, r2
 800ae34:	b29b      	uxth	r3, r3
 800ae36:	3b02      	subs	r3, #2
 800ae38:	b29a      	uxth	r2, r3
 800ae3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ae70 <tcp_parseopt+0xe8>)
 800ae3c:	801a      	strh	r2, [r3, #0]
 800ae3e:	e000      	b.n	800ae42 <tcp_parseopt+0xba>
          break;
 800ae40:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ae42:	4b0b      	ldr	r3, [pc, #44]	@ (800ae70 <tcp_parseopt+0xe8>)
 800ae44:	881a      	ldrh	r2, [r3, #0]
 800ae46:	4b09      	ldr	r3, [pc, #36]	@ (800ae6c <tcp_parseopt+0xe4>)
 800ae48:	881b      	ldrh	r3, [r3, #0]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d3b2      	bcc.n	800adb4 <tcp_parseopt+0x2c>
 800ae4e:	e004      	b.n	800ae5a <tcp_parseopt+0xd2>
          return;
 800ae50:	bf00      	nop
 800ae52:	e002      	b.n	800ae5a <tcp_parseopt+0xd2>
            return;
 800ae54:	bf00      	nop
 800ae56:	e000      	b.n	800ae5a <tcp_parseopt+0xd2>
            return;
 800ae58:	bf00      	nop
      }
    }
  }
}
 800ae5a:	3710      	adds	r7, #16
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}
 800ae60:	080111ec 	.word	0x080111ec
 800ae64:	08011650 	.word	0x08011650
 800ae68:	08011238 	.word	0x08011238
 800ae6c:	20007ca0 	.word	0x20007ca0
 800ae70:	20007ca8 	.word	0x20007ca8

0800ae74 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ae74:	b480      	push	{r7}
 800ae76:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ae78:	4b05      	ldr	r3, [pc, #20]	@ (800ae90 <tcp_trigger_input_pcb_close+0x1c>)
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	f043 0310 	orr.w	r3, r3, #16
 800ae80:	b2da      	uxtb	r2, r3
 800ae82:	4b03      	ldr	r3, [pc, #12]	@ (800ae90 <tcp_trigger_input_pcb_close+0x1c>)
 800ae84:	701a      	strb	r2, [r3, #0]
}
 800ae86:	bf00      	nop
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr
 800ae90:	20007cb9 	.word	0x20007cb9

0800ae94 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d00a      	beq.n	800aebc <tcp_route+0x28>
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	7a1b      	ldrb	r3, [r3, #8]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d006      	beq.n	800aebc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	7a1b      	ldrb	r3, [r3, #8]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7fb fb5c 	bl	8006570 <netif_get_by_index>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	e003      	b.n	800aec4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f002 fe7b 	bl	800dbb8 <ip4_route>
 800aec2:	4603      	mov	r3, r0
  }
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3710      	adds	r7, #16
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800aecc:	b590      	push	{r4, r7, lr}
 800aece:	b087      	sub	sp, #28
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	603b      	str	r3, [r7, #0]
 800aed8:	4613      	mov	r3, r2
 800aeda:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d105      	bne.n	800aeee <tcp_create_segment+0x22>
 800aee2:	4b43      	ldr	r3, [pc, #268]	@ (800aff0 <tcp_create_segment+0x124>)
 800aee4:	22a3      	movs	r2, #163	@ 0xa3
 800aee6:	4943      	ldr	r1, [pc, #268]	@ (800aff4 <tcp_create_segment+0x128>)
 800aee8:	4843      	ldr	r0, [pc, #268]	@ (800aff8 <tcp_create_segment+0x12c>)
 800aeea:	f004 f951 	bl	800f190 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d105      	bne.n	800af00 <tcp_create_segment+0x34>
 800aef4:	4b3e      	ldr	r3, [pc, #248]	@ (800aff0 <tcp_create_segment+0x124>)
 800aef6:	22a4      	movs	r2, #164	@ 0xa4
 800aef8:	4940      	ldr	r1, [pc, #256]	@ (800affc <tcp_create_segment+0x130>)
 800aefa:	483f      	ldr	r0, [pc, #252]	@ (800aff8 <tcp_create_segment+0x12c>)
 800aefc:	f004 f948 	bl	800f190 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800af00:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800af04:	009b      	lsls	r3, r3, #2
 800af06:	b2db      	uxtb	r3, r3
 800af08:	f003 0304 	and.w	r3, r3, #4
 800af0c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800af0e:	2003      	movs	r0, #3
 800af10:	f7fa ffa8 	bl	8005e64 <memp_malloc>
 800af14:	6138      	str	r0, [r7, #16]
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d104      	bne.n	800af26 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800af1c:	68b8      	ldr	r0, [r7, #8]
 800af1e:	f7fb fe87 	bl	8006c30 <pbuf_free>
    return NULL;
 800af22:	2300      	movs	r3, #0
 800af24:	e060      	b.n	800afe8 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800af2c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	2200      	movs	r2, #0
 800af32:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	891a      	ldrh	r2, [r3, #8]
 800af3e:	7dfb      	ldrb	r3, [r7, #23]
 800af40:	b29b      	uxth	r3, r3
 800af42:	429a      	cmp	r2, r3
 800af44:	d205      	bcs.n	800af52 <tcp_create_segment+0x86>
 800af46:	4b2a      	ldr	r3, [pc, #168]	@ (800aff0 <tcp_create_segment+0x124>)
 800af48:	22b0      	movs	r2, #176	@ 0xb0
 800af4a:	492d      	ldr	r1, [pc, #180]	@ (800b000 <tcp_create_segment+0x134>)
 800af4c:	482a      	ldr	r0, [pc, #168]	@ (800aff8 <tcp_create_segment+0x12c>)
 800af4e:	f004 f91f 	bl	800f190 <iprintf>
  seg->len = p->tot_len - optlen;
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	891a      	ldrh	r2, [r3, #8]
 800af56:	7dfb      	ldrb	r3, [r7, #23]
 800af58:	b29b      	uxth	r3, r3
 800af5a:	1ad3      	subs	r3, r2, r3
 800af5c:	b29a      	uxth	r2, r3
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800af62:	2114      	movs	r1, #20
 800af64:	68b8      	ldr	r0, [r7, #8]
 800af66:	f7fb fdcd 	bl	8006b04 <pbuf_add_header>
 800af6a:	4603      	mov	r3, r0
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d004      	beq.n	800af7a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800af70:	6938      	ldr	r0, [r7, #16]
 800af72:	f7fd f8d2 	bl	800811a <tcp_seg_free>
    return NULL;
 800af76:	2300      	movs	r3, #0
 800af78:	e036      	b.n	800afe8 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	685a      	ldr	r2, [r3, #4]
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	8ada      	ldrh	r2, [r3, #22]
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	68dc      	ldr	r4, [r3, #12]
 800af8c:	4610      	mov	r0, r2
 800af8e:	f7fa faf5 	bl	800557c <lwip_htons>
 800af92:	4603      	mov	r3, r0
 800af94:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	8b1a      	ldrh	r2, [r3, #24]
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	68dc      	ldr	r4, [r3, #12]
 800af9e:	4610      	mov	r0, r2
 800afa0:	f7fa faec 	bl	800557c <lwip_htons>
 800afa4:	4603      	mov	r3, r0
 800afa6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	68dc      	ldr	r4, [r3, #12]
 800afac:	6838      	ldr	r0, [r7, #0]
 800afae:	f7fa fafb 	bl	80055a8 <lwip_htonl>
 800afb2:	4603      	mov	r3, r0
 800afb4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800afb6:	7dfb      	ldrb	r3, [r7, #23]
 800afb8:	089b      	lsrs	r3, r3, #2
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	3305      	adds	r3, #5
 800afbe:	b29b      	uxth	r3, r3
 800afc0:	031b      	lsls	r3, r3, #12
 800afc2:	b29a      	uxth	r2, r3
 800afc4:	79fb      	ldrb	r3, [r7, #7]
 800afc6:	b29b      	uxth	r3, r3
 800afc8:	4313      	orrs	r3, r2
 800afca:	b29a      	uxth	r2, r3
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	68dc      	ldr	r4, [r3, #12]
 800afd0:	4610      	mov	r0, r2
 800afd2:	f7fa fad3 	bl	800557c <lwip_htons>
 800afd6:	4603      	mov	r3, r0
 800afd8:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	68db      	ldr	r3, [r3, #12]
 800afde:	2200      	movs	r2, #0
 800afe0:	749a      	strb	r2, [r3, #18]
 800afe2:	2200      	movs	r2, #0
 800afe4:	74da      	strb	r2, [r3, #19]
  return seg;
 800afe6:	693b      	ldr	r3, [r7, #16]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	371c      	adds	r7, #28
 800afec:	46bd      	mov	sp, r7
 800afee:	bd90      	pop	{r4, r7, pc}
 800aff0:	0801166c 	.word	0x0801166c
 800aff4:	080116a0 	.word	0x080116a0
 800aff8:	080116c0 	.word	0x080116c0
 800affc:	080116e8 	.word	0x080116e8
 800b000:	0801170c 	.word	0x0801170c

0800b004 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b004:	b590      	push	{r4, r7, lr}
 800b006:	b08b      	sub	sp, #44	@ 0x2c
 800b008:	af02      	add	r7, sp, #8
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	460b      	mov	r3, r1
 800b00e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b010:	2300      	movs	r3, #0
 800b012:	61fb      	str	r3, [r7, #28]
 800b014:	2300      	movs	r3, #0
 800b016:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b018:	2300      	movs	r3, #0
 800b01a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d106      	bne.n	800b030 <tcp_split_unsent_seg+0x2c>
 800b022:	4b95      	ldr	r3, [pc, #596]	@ (800b278 <tcp_split_unsent_seg+0x274>)
 800b024:	f240 324b 	movw	r2, #843	@ 0x34b
 800b028:	4994      	ldr	r1, [pc, #592]	@ (800b27c <tcp_split_unsent_seg+0x278>)
 800b02a:	4895      	ldr	r0, [pc, #596]	@ (800b280 <tcp_split_unsent_seg+0x27c>)
 800b02c:	f004 f8b0 	bl	800f190 <iprintf>

  useg = pcb->unsent;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b034:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d102      	bne.n	800b042 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800b03c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b040:	e116      	b.n	800b270 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800b042:	887b      	ldrh	r3, [r7, #2]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d109      	bne.n	800b05c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b048:	4b8b      	ldr	r3, [pc, #556]	@ (800b278 <tcp_split_unsent_seg+0x274>)
 800b04a:	f240 3253 	movw	r2, #851	@ 0x353
 800b04e:	498d      	ldr	r1, [pc, #564]	@ (800b284 <tcp_split_unsent_seg+0x280>)
 800b050:	488b      	ldr	r0, [pc, #556]	@ (800b280 <tcp_split_unsent_seg+0x27c>)
 800b052:	f004 f89d 	bl	800f190 <iprintf>
    return ERR_VAL;
 800b056:	f06f 0305 	mvn.w	r3, #5
 800b05a:	e109      	b.n	800b270 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	891b      	ldrh	r3, [r3, #8]
 800b060:	887a      	ldrh	r2, [r7, #2]
 800b062:	429a      	cmp	r2, r3
 800b064:	d301      	bcc.n	800b06a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800b066:	2300      	movs	r3, #0
 800b068:	e102      	b.n	800b270 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b06e:	887a      	ldrh	r2, [r7, #2]
 800b070:	429a      	cmp	r2, r3
 800b072:	d906      	bls.n	800b082 <tcp_split_unsent_seg+0x7e>
 800b074:	4b80      	ldr	r3, [pc, #512]	@ (800b278 <tcp_split_unsent_seg+0x274>)
 800b076:	f240 325b 	movw	r2, #859	@ 0x35b
 800b07a:	4983      	ldr	r1, [pc, #524]	@ (800b288 <tcp_split_unsent_seg+0x284>)
 800b07c:	4880      	ldr	r0, [pc, #512]	@ (800b280 <tcp_split_unsent_seg+0x27c>)
 800b07e:	f004 f887 	bl	800f190 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	891b      	ldrh	r3, [r3, #8]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d106      	bne.n	800b098 <tcp_split_unsent_seg+0x94>
 800b08a:	4b7b      	ldr	r3, [pc, #492]	@ (800b278 <tcp_split_unsent_seg+0x274>)
 800b08c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800b090:	497e      	ldr	r1, [pc, #504]	@ (800b28c <tcp_split_unsent_seg+0x288>)
 800b092:	487b      	ldr	r0, [pc, #492]	@ (800b280 <tcp_split_unsent_seg+0x27c>)
 800b094:	f004 f87c 	bl	800f190 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	7a9b      	ldrb	r3, [r3, #10]
 800b09c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b09e:	7bfb      	ldrb	r3, [r7, #15]
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	f003 0304 	and.w	r3, r3, #4
 800b0a8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	891a      	ldrh	r2, [r3, #8]
 800b0ae:	887b      	ldrh	r3, [r7, #2]
 800b0b0:	1ad3      	subs	r3, r2, r3
 800b0b2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b0b4:	7bbb      	ldrb	r3, [r7, #14]
 800b0b6:	b29a      	uxth	r2, r3
 800b0b8:	89bb      	ldrh	r3, [r7, #12]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	2036      	movs	r0, #54	@ 0x36
 800b0c6:	f7fb facf 	bl	8006668 <pbuf_alloc>
 800b0ca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	f000 80b7 	beq.w	800b242 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	891a      	ldrh	r2, [r3, #8]
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	891b      	ldrh	r3, [r3, #8]
 800b0de:	1ad3      	subs	r3, r2, r3
 800b0e0:	b29a      	uxth	r2, r3
 800b0e2:	887b      	ldrh	r3, [r7, #2]
 800b0e4:	4413      	add	r3, r2
 800b0e6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	6858      	ldr	r0, [r3, #4]
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	685a      	ldr	r2, [r3, #4]
 800b0f0:	7bbb      	ldrb	r3, [r7, #14]
 800b0f2:	18d1      	adds	r1, r2, r3
 800b0f4:	897b      	ldrh	r3, [r7, #10]
 800b0f6:	89ba      	ldrh	r2, [r7, #12]
 800b0f8:	f7fb ff84 	bl	8007004 <pbuf_copy_partial>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	461a      	mov	r2, r3
 800b100:	89bb      	ldrh	r3, [r7, #12]
 800b102:	4293      	cmp	r3, r2
 800b104:	f040 809f 	bne.w	800b246 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	68db      	ldr	r3, [r3, #12]
 800b10c:	899b      	ldrh	r3, [r3, #12]
 800b10e:	b29b      	uxth	r3, r3
 800b110:	4618      	mov	r0, r3
 800b112:	f7fa fa33 	bl	800557c <lwip_htons>
 800b116:	4603      	mov	r3, r0
 800b118:	b2db      	uxtb	r3, r3
 800b11a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b11e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b120:	2300      	movs	r3, #0
 800b122:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800b124:	7efb      	ldrb	r3, [r7, #27]
 800b126:	f003 0308 	and.w	r3, r3, #8
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d007      	beq.n	800b13e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800b12e:	7efb      	ldrb	r3, [r7, #27]
 800b130:	f023 0308 	bic.w	r3, r3, #8
 800b134:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800b136:	7ebb      	ldrb	r3, [r7, #26]
 800b138:	f043 0308 	orr.w	r3, r3, #8
 800b13c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800b13e:	7efb      	ldrb	r3, [r7, #27]
 800b140:	f003 0301 	and.w	r3, r3, #1
 800b144:	2b00      	cmp	r3, #0
 800b146:	d007      	beq.n	800b158 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800b148:	7efb      	ldrb	r3, [r7, #27]
 800b14a:	f023 0301 	bic.w	r3, r3, #1
 800b14e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800b150:	7ebb      	ldrb	r3, [r7, #26]
 800b152:	f043 0301 	orr.w	r3, r3, #1
 800b156:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	68db      	ldr	r3, [r3, #12]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	4618      	mov	r0, r3
 800b160:	f7fa fa22 	bl	80055a8 <lwip_htonl>
 800b164:	4602      	mov	r2, r0
 800b166:	887b      	ldrh	r3, [r7, #2]
 800b168:	18d1      	adds	r1, r2, r3
 800b16a:	7eba      	ldrb	r2, [r7, #26]
 800b16c:	7bfb      	ldrb	r3, [r7, #15]
 800b16e:	9300      	str	r3, [sp, #0]
 800b170:	460b      	mov	r3, r1
 800b172:	6939      	ldr	r1, [r7, #16]
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f7ff fea9 	bl	800aecc <tcp_create_segment>
 800b17a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800b17c:	69fb      	ldr	r3, [r7, #28]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d063      	beq.n	800b24a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	4618      	mov	r0, r3
 800b188:	f7fb fdda 	bl	8006d40 <pbuf_clen>
 800b18c:	4603      	mov	r3, r0
 800b18e:	461a      	mov	r2, r3
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b196:	1a9b      	subs	r3, r3, r2
 800b198:	b29a      	uxth	r2, r3
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	6858      	ldr	r0, [r3, #4]
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	891a      	ldrh	r2, [r3, #8]
 800b1aa:	89bb      	ldrh	r3, [r7, #12]
 800b1ac:	1ad3      	subs	r3, r2, r3
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	f7fb fbb7 	bl	8006924 <pbuf_realloc>
  useg->len -= remainder;
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	891a      	ldrh	r2, [r3, #8]
 800b1ba:	89bb      	ldrh	r3, [r7, #12]
 800b1bc:	1ad3      	subs	r3, r2, r3
 800b1be:	b29a      	uxth	r2, r3
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	68db      	ldr	r3, [r3, #12]
 800b1c8:	899b      	ldrh	r3, [r3, #12]
 800b1ca:	b29c      	uxth	r4, r3
 800b1cc:	7efb      	ldrb	r3, [r7, #27]
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7fa f9d3 	bl	800557c <lwip_htons>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	461a      	mov	r2, r3
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	68db      	ldr	r3, [r3, #12]
 800b1de:	4322      	orrs	r2, r4
 800b1e0:	b292      	uxth	r2, r2
 800b1e2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f7fb fda9 	bl	8006d40 <pbuf_clen>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b1f8:	4413      	add	r3, r2
 800b1fa:	b29a      	uxth	r2, r3
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	4618      	mov	r0, r3
 800b208:	f7fb fd9a 	bl	8006d40 <pbuf_clen>
 800b20c:	4603      	mov	r3, r0
 800b20e:	461a      	mov	r2, r3
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b216:	4413      	add	r3, r2
 800b218:	b29a      	uxth	r2, r3
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	681a      	ldr	r2, [r3, #0]
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	69fa      	ldr	r2, [r7, #28]
 800b22c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b22e:	69fb      	ldr	r3, [r7, #28]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d103      	bne.n	800b23e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b23e:	2300      	movs	r3, #0
 800b240:	e016      	b.n	800b270 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800b242:	bf00      	nop
 800b244:	e002      	b.n	800b24c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b246:	bf00      	nop
 800b248:	e000      	b.n	800b24c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b24a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d006      	beq.n	800b260 <tcp_split_unsent_seg+0x25c>
 800b252:	4b09      	ldr	r3, [pc, #36]	@ (800b278 <tcp_split_unsent_seg+0x274>)
 800b254:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800b258:	490d      	ldr	r1, [pc, #52]	@ (800b290 <tcp_split_unsent_seg+0x28c>)
 800b25a:	4809      	ldr	r0, [pc, #36]	@ (800b280 <tcp_split_unsent_seg+0x27c>)
 800b25c:	f003 ff98 	bl	800f190 <iprintf>
  if (p != NULL) {
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d002      	beq.n	800b26c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800b266:	6938      	ldr	r0, [r7, #16]
 800b268:	f7fb fce2 	bl	8006c30 <pbuf_free>
  }

  return ERR_MEM;
 800b26c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800b270:	4618      	mov	r0, r3
 800b272:	3724      	adds	r7, #36	@ 0x24
 800b274:	46bd      	mov	sp, r7
 800b276:	bd90      	pop	{r4, r7, pc}
 800b278:	0801166c 	.word	0x0801166c
 800b27c:	08011a00 	.word	0x08011a00
 800b280:	080116c0 	.word	0x080116c0
 800b284:	08011a24 	.word	0x08011a24
 800b288:	08011a48 	.word	0x08011a48
 800b28c:	08011a58 	.word	0x08011a58
 800b290:	08011a68 	.word	0x08011a68

0800b294 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b294:	b590      	push	{r4, r7, lr}
 800b296:	b085      	sub	sp, #20
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d106      	bne.n	800b2b0 <tcp_send_fin+0x1c>
 800b2a2:	4b21      	ldr	r3, [pc, #132]	@ (800b328 <tcp_send_fin+0x94>)
 800b2a4:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800b2a8:	4920      	ldr	r1, [pc, #128]	@ (800b32c <tcp_send_fin+0x98>)
 800b2aa:	4821      	ldr	r0, [pc, #132]	@ (800b330 <tcp_send_fin+0x9c>)
 800b2ac:	f003 ff70 	bl	800f190 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d02e      	beq.n	800b316 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2bc:	60fb      	str	r3, [r7, #12]
 800b2be:	e002      	b.n	800b2c6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d1f8      	bne.n	800b2c0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	68db      	ldr	r3, [r3, #12]
 800b2d2:	899b      	ldrh	r3, [r3, #12]
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7fa f950 	bl	800557c <lwip_htons>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	b2db      	uxtb	r3, r3
 800b2e0:	f003 0307 	and.w	r3, r3, #7
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d116      	bne.n	800b316 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	899b      	ldrh	r3, [r3, #12]
 800b2ee:	b29c      	uxth	r4, r3
 800b2f0:	2001      	movs	r0, #1
 800b2f2:	f7fa f943 	bl	800557c <lwip_htons>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	461a      	mov	r2, r3
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	68db      	ldr	r3, [r3, #12]
 800b2fe:	4322      	orrs	r2, r4
 800b300:	b292      	uxth	r2, r2
 800b302:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	8b5b      	ldrh	r3, [r3, #26]
 800b308:	f043 0320 	orr.w	r3, r3, #32
 800b30c:	b29a      	uxth	r2, r3
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b312:	2300      	movs	r3, #0
 800b314:	e004      	b.n	800b320 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b316:	2101      	movs	r1, #1
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 f80b 	bl	800b334 <tcp_enqueue_flags>
 800b31e:	4603      	mov	r3, r0
}
 800b320:	4618      	mov	r0, r3
 800b322:	3714      	adds	r7, #20
 800b324:	46bd      	mov	sp, r7
 800b326:	bd90      	pop	{r4, r7, pc}
 800b328:	0801166c 	.word	0x0801166c
 800b32c:	08011a74 	.word	0x08011a74
 800b330:	080116c0 	.word	0x080116c0

0800b334 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b08a      	sub	sp, #40	@ 0x28
 800b338:	af02      	add	r7, sp, #8
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	460b      	mov	r3, r1
 800b33e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b340:	2300      	movs	r3, #0
 800b342:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b344:	2300      	movs	r3, #0
 800b346:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b348:	78fb      	ldrb	r3, [r7, #3]
 800b34a:	f003 0303 	and.w	r3, r3, #3
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d106      	bne.n	800b360 <tcp_enqueue_flags+0x2c>
 800b352:	4b67      	ldr	r3, [pc, #412]	@ (800b4f0 <tcp_enqueue_flags+0x1bc>)
 800b354:	f240 4211 	movw	r2, #1041	@ 0x411
 800b358:	4966      	ldr	r1, [pc, #408]	@ (800b4f4 <tcp_enqueue_flags+0x1c0>)
 800b35a:	4867      	ldr	r0, [pc, #412]	@ (800b4f8 <tcp_enqueue_flags+0x1c4>)
 800b35c:	f003 ff18 	bl	800f190 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d106      	bne.n	800b374 <tcp_enqueue_flags+0x40>
 800b366:	4b62      	ldr	r3, [pc, #392]	@ (800b4f0 <tcp_enqueue_flags+0x1bc>)
 800b368:	f240 4213 	movw	r2, #1043	@ 0x413
 800b36c:	4963      	ldr	r1, [pc, #396]	@ (800b4fc <tcp_enqueue_flags+0x1c8>)
 800b36e:	4862      	ldr	r0, [pc, #392]	@ (800b4f8 <tcp_enqueue_flags+0x1c4>)
 800b370:	f003 ff0e 	bl	800f190 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b374:	78fb      	ldrb	r3, [r7, #3]
 800b376:	f003 0302 	and.w	r3, r3, #2
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d001      	beq.n	800b382 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b37e:	2301      	movs	r3, #1
 800b380:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b382:	7ffb      	ldrb	r3, [r7, #31]
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	b2db      	uxtb	r3, r3
 800b388:	f003 0304 	and.w	r3, r3, #4
 800b38c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b38e:	7dfb      	ldrb	r3, [r7, #23]
 800b390:	b29b      	uxth	r3, r3
 800b392:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b396:	4619      	mov	r1, r3
 800b398:	2036      	movs	r0, #54	@ 0x36
 800b39a:	f7fb f965 	bl	8006668 <pbuf_alloc>
 800b39e:	6138      	str	r0, [r7, #16]
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d109      	bne.n	800b3ba <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	8b5b      	ldrh	r3, [r3, #26]
 800b3aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3ae:	b29a      	uxth	r2, r3
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b3b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b3b8:	e095      	b.n	800b4e6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	895a      	ldrh	r2, [r3, #10]
 800b3be:	7dfb      	ldrb	r3, [r7, #23]
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d206      	bcs.n	800b3d4 <tcp_enqueue_flags+0xa0>
 800b3c6:	4b4a      	ldr	r3, [pc, #296]	@ (800b4f0 <tcp_enqueue_flags+0x1bc>)
 800b3c8:	f240 4239 	movw	r2, #1081	@ 0x439
 800b3cc:	494c      	ldr	r1, [pc, #304]	@ (800b500 <tcp_enqueue_flags+0x1cc>)
 800b3ce:	484a      	ldr	r0, [pc, #296]	@ (800b4f8 <tcp_enqueue_flags+0x1c4>)
 800b3d0:	f003 fede 	bl	800f190 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800b3d8:	78fa      	ldrb	r2, [r7, #3]
 800b3da:	7ffb      	ldrb	r3, [r7, #31]
 800b3dc:	9300      	str	r3, [sp, #0]
 800b3de:	460b      	mov	r3, r1
 800b3e0:	6939      	ldr	r1, [r7, #16]
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f7ff fd72 	bl	800aecc <tcp_create_segment>
 800b3e8:	60f8      	str	r0, [r7, #12]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d109      	bne.n	800b404 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	8b5b      	ldrh	r3, [r3, #26]
 800b3f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3f8:	b29a      	uxth	r2, r3
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b3fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b402:	e070      	b.n	800b4e6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	f003 0303 	and.w	r3, r3, #3
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d006      	beq.n	800b41e <tcp_enqueue_flags+0xea>
 800b410:	4b37      	ldr	r3, [pc, #220]	@ (800b4f0 <tcp_enqueue_flags+0x1bc>)
 800b412:	f240 4242 	movw	r2, #1090	@ 0x442
 800b416:	493b      	ldr	r1, [pc, #236]	@ (800b504 <tcp_enqueue_flags+0x1d0>)
 800b418:	4837      	ldr	r0, [pc, #220]	@ (800b4f8 <tcp_enqueue_flags+0x1c4>)
 800b41a:	f003 feb9 	bl	800f190 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	891b      	ldrh	r3, [r3, #8]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d006      	beq.n	800b434 <tcp_enqueue_flags+0x100>
 800b426:	4b32      	ldr	r3, [pc, #200]	@ (800b4f0 <tcp_enqueue_flags+0x1bc>)
 800b428:	f240 4243 	movw	r2, #1091	@ 0x443
 800b42c:	4936      	ldr	r1, [pc, #216]	@ (800b508 <tcp_enqueue_flags+0x1d4>)
 800b42e:	4832      	ldr	r0, [pc, #200]	@ (800b4f8 <tcp_enqueue_flags+0x1c4>)
 800b430:	f003 feae 	bl	800f190 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d103      	bne.n	800b444 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	68fa      	ldr	r2, [r7, #12]
 800b440:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b442:	e00d      	b.n	800b460 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b448:	61bb      	str	r3, [r7, #24]
 800b44a:	e002      	b.n	800b452 <tcp_enqueue_flags+0x11e>
 800b44c:	69bb      	ldr	r3, [r7, #24]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	61bb      	str	r3, [r7, #24]
 800b452:	69bb      	ldr	r3, [r7, #24]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d1f8      	bne.n	800b44c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b45a:	69bb      	ldr	r3, [r7, #24]
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2200      	movs	r2, #0
 800b464:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b468:	78fb      	ldrb	r3, [r7, #3]
 800b46a:	f003 0302 	and.w	r3, r3, #2
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d104      	bne.n	800b47c <tcp_enqueue_flags+0x148>
 800b472:	78fb      	ldrb	r3, [r7, #3]
 800b474:	f003 0301 	and.w	r3, r3, #1
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d004      	beq.n	800b486 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b480:	1c5a      	adds	r2, r3, #1
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b486:	78fb      	ldrb	r3, [r7, #3]
 800b488:	f003 0301 	and.w	r3, r3, #1
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d006      	beq.n	800b49e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	8b5b      	ldrh	r3, [r3, #26]
 800b494:	f043 0320 	orr.w	r3, r3, #32
 800b498:	b29a      	uxth	r2, r3
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7fb fc4c 	bl	8006d40 <pbuf_clen>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b4b2:	4413      	add	r3, r2
 800b4b4:	b29a      	uxth	r2, r3
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d00e      	beq.n	800b4e4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d10a      	bne.n	800b4e4 <tcp_enqueue_flags+0x1b0>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d106      	bne.n	800b4e4 <tcp_enqueue_flags+0x1b0>
 800b4d6:	4b06      	ldr	r3, [pc, #24]	@ (800b4f0 <tcp_enqueue_flags+0x1bc>)
 800b4d8:	f240 4265 	movw	r2, #1125	@ 0x465
 800b4dc:	490b      	ldr	r1, [pc, #44]	@ (800b50c <tcp_enqueue_flags+0x1d8>)
 800b4de:	4806      	ldr	r0, [pc, #24]	@ (800b4f8 <tcp_enqueue_flags+0x1c4>)
 800b4e0:	f003 fe56 	bl	800f190 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b4e4:	2300      	movs	r3, #0
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3720      	adds	r7, #32
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	0801166c 	.word	0x0801166c
 800b4f4:	08011a90 	.word	0x08011a90
 800b4f8:	080116c0 	.word	0x080116c0
 800b4fc:	08011ae8 	.word	0x08011ae8
 800b500:	08011b08 	.word	0x08011b08
 800b504:	08011b44 	.word	0x08011b44
 800b508:	08011b5c 	.word	0x08011b5c
 800b50c:	08011b88 	.word	0x08011b88

0800b510 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b510:	b5b0      	push	{r4, r5, r7, lr}
 800b512:	b08a      	sub	sp, #40	@ 0x28
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d106      	bne.n	800b52c <tcp_output+0x1c>
 800b51e:	4b8a      	ldr	r3, [pc, #552]	@ (800b748 <tcp_output+0x238>)
 800b520:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800b524:	4989      	ldr	r1, [pc, #548]	@ (800b74c <tcp_output+0x23c>)
 800b526:	488a      	ldr	r0, [pc, #552]	@ (800b750 <tcp_output+0x240>)
 800b528:	f003 fe32 	bl	800f190 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	7d1b      	ldrb	r3, [r3, #20]
 800b530:	2b01      	cmp	r3, #1
 800b532:	d106      	bne.n	800b542 <tcp_output+0x32>
 800b534:	4b84      	ldr	r3, [pc, #528]	@ (800b748 <tcp_output+0x238>)
 800b536:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800b53a:	4986      	ldr	r1, [pc, #536]	@ (800b754 <tcp_output+0x244>)
 800b53c:	4884      	ldr	r0, [pc, #528]	@ (800b750 <tcp_output+0x240>)
 800b53e:	f003 fe27 	bl	800f190 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b542:	4b85      	ldr	r3, [pc, #532]	@ (800b758 <tcp_output+0x248>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	687a      	ldr	r2, [r7, #4]
 800b548:	429a      	cmp	r2, r3
 800b54a:	d101      	bne.n	800b550 <tcp_output+0x40>
    return ERR_OK;
 800b54c:	2300      	movs	r3, #0
 800b54e:	e1ce      	b.n	800b8ee <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b55c:	4293      	cmp	r3, r2
 800b55e:	bf28      	it	cs
 800b560:	4613      	movcs	r3, r2
 800b562:	b29b      	uxth	r3, r3
 800b564:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b56a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800b56c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d10b      	bne.n	800b58a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	8b5b      	ldrh	r3, [r3, #26]
 800b576:	f003 0302 	and.w	r3, r3, #2
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	f000 81aa 	beq.w	800b8d4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f000 fdcb 	bl	800c11c <tcp_send_empty_ack>
 800b586:	4603      	mov	r3, r0
 800b588:	e1b1      	b.n	800b8ee <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b58a:	6879      	ldr	r1, [r7, #4]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	3304      	adds	r3, #4
 800b590:	461a      	mov	r2, r3
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f7ff fc7e 	bl	800ae94 <tcp_route>
 800b598:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d102      	bne.n	800b5a6 <tcp_output+0x96>
    return ERR_RTE;
 800b5a0:	f06f 0303 	mvn.w	r3, #3
 800b5a4:	e1a3      	b.n	800b8ee <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d003      	beq.n	800b5b4 <tcp_output+0xa4>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d111      	bne.n	800b5d8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d002      	beq.n	800b5c0 <tcp_output+0xb0>
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	3304      	adds	r3, #4
 800b5be:	e000      	b.n	800b5c2 <tcp_output+0xb2>
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d102      	bne.n	800b5d0 <tcp_output+0xc0>
      return ERR_RTE;
 800b5ca:	f06f 0303 	mvn.w	r3, #3
 800b5ce:	e18e      	b.n	800b8ee <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7f9 ffe2 	bl	80055a8 <lwip_htonl>
 800b5e4:	4602      	mov	r2, r0
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5ea:	1ad3      	subs	r3, r2, r3
 800b5ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5ee:	8912      	ldrh	r2, [r2, #8]
 800b5f0:	4413      	add	r3, r2
 800b5f2:	69ba      	ldr	r2, [r7, #24]
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d227      	bcs.n	800b648 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b5fe:	461a      	mov	r2, r3
 800b600:	69bb      	ldr	r3, [r7, #24]
 800b602:	4293      	cmp	r3, r2
 800b604:	d114      	bne.n	800b630 <tcp_output+0x120>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d110      	bne.n	800b630 <tcp_output+0x120>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b614:	2b00      	cmp	r3, #0
 800b616:	d10b      	bne.n	800b630 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2200      	movs	r2, #0
 800b61c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2201      	movs	r2, #1
 800b624:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2200      	movs	r2, #0
 800b62c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	8b5b      	ldrh	r3, [r3, #26]
 800b634:	f003 0302 	and.w	r3, r3, #2
 800b638:	2b00      	cmp	r3, #0
 800b63a:	f000 814d 	beq.w	800b8d8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 fd6c 	bl	800c11c <tcp_send_empty_ack>
 800b644:	4603      	mov	r3, r0
 800b646:	e152      	b.n	800b8ee <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2200      	movs	r2, #0
 800b64c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b654:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b656:	6a3b      	ldr	r3, [r7, #32]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	f000 811c 	beq.w	800b896 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800b65e:	e002      	b.n	800b666 <tcp_output+0x156>
 800b660:	6a3b      	ldr	r3, [r7, #32]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	623b      	str	r3, [r7, #32]
 800b666:	6a3b      	ldr	r3, [r7, #32]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d1f8      	bne.n	800b660 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b66e:	e112      	b.n	800b896 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b672:	68db      	ldr	r3, [r3, #12]
 800b674:	899b      	ldrh	r3, [r3, #12]
 800b676:	b29b      	uxth	r3, r3
 800b678:	4618      	mov	r0, r3
 800b67a:	f7f9 ff7f 	bl	800557c <lwip_htons>
 800b67e:	4603      	mov	r3, r0
 800b680:	b2db      	uxtb	r3, r3
 800b682:	f003 0304 	and.w	r3, r3, #4
 800b686:	2b00      	cmp	r3, #0
 800b688:	d006      	beq.n	800b698 <tcp_output+0x188>
 800b68a:	4b2f      	ldr	r3, [pc, #188]	@ (800b748 <tcp_output+0x238>)
 800b68c:	f240 5236 	movw	r2, #1334	@ 0x536
 800b690:	4932      	ldr	r1, [pc, #200]	@ (800b75c <tcp_output+0x24c>)
 800b692:	482f      	ldr	r0, [pc, #188]	@ (800b750 <tcp_output+0x240>)
 800b694:	f003 fd7c 	bl	800f190 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d01f      	beq.n	800b6e0 <tcp_output+0x1d0>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	8b5b      	ldrh	r3, [r3, #26]
 800b6a4:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d119      	bne.n	800b6e0 <tcp_output+0x1d0>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d00b      	beq.n	800b6cc <tcp_output+0x1bc>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d110      	bne.n	800b6e0 <tcp_output+0x1d0>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6c2:	891a      	ldrh	r2, [r3, #8]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d209      	bcs.n	800b6e0 <tcp_output+0x1d0>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d004      	beq.n	800b6e0 <tcp_output+0x1d0>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b6dc:	2b08      	cmp	r3, #8
 800b6de:	d901      	bls.n	800b6e4 <tcp_output+0x1d4>
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	e000      	b.n	800b6e6 <tcp_output+0x1d6>
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d106      	bne.n	800b6f8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	8b5b      	ldrh	r3, [r3, #26]
 800b6ee:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	f000 80e4 	beq.w	800b8c0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	7d1b      	ldrb	r3, [r3, #20]
 800b6fc:	2b02      	cmp	r3, #2
 800b6fe:	d00d      	beq.n	800b71c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b702:	68db      	ldr	r3, [r3, #12]
 800b704:	899b      	ldrh	r3, [r3, #12]
 800b706:	b29c      	uxth	r4, r3
 800b708:	2010      	movs	r0, #16
 800b70a:	f7f9 ff37 	bl	800557c <lwip_htons>
 800b70e:	4603      	mov	r3, r0
 800b710:	461a      	mov	r2, r3
 800b712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	4322      	orrs	r2, r4
 800b718:	b292      	uxth	r2, r2
 800b71a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800b71c:	697a      	ldr	r2, [r7, #20]
 800b71e:	6879      	ldr	r1, [r7, #4]
 800b720:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b722:	f000 f909 	bl	800b938 <tcp_output_segment>
 800b726:	4603      	mov	r3, r0
 800b728:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b72a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d016      	beq.n	800b760 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	8b5b      	ldrh	r3, [r3, #26]
 800b736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b73a:	b29a      	uxth	r2, r3
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	835a      	strh	r2, [r3, #26]
      return err;
 800b740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b744:	e0d3      	b.n	800b8ee <tcp_output+0x3de>
 800b746:	bf00      	nop
 800b748:	0801166c 	.word	0x0801166c
 800b74c:	08011bb0 	.word	0x08011bb0
 800b750:	080116c0 	.word	0x080116c0
 800b754:	08011bc8 	.word	0x08011bc8
 800b758:	20007cc0 	.word	0x20007cc0
 800b75c:	08011bf0 	.word	0x08011bf0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b762:	681a      	ldr	r2, [r3, #0]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	7d1b      	ldrb	r3, [r3, #20]
 800b76c:	2b02      	cmp	r3, #2
 800b76e:	d006      	beq.n	800b77e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	8b5b      	ldrh	r3, [r3, #26]
 800b774:	f023 0303 	bic.w	r3, r3, #3
 800b778:	b29a      	uxth	r2, r3
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b780:	68db      	ldr	r3, [r3, #12]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	4618      	mov	r0, r3
 800b786:	f7f9 ff0f 	bl	80055a8 <lwip_htonl>
 800b78a:	4604      	mov	r4, r0
 800b78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b78e:	891b      	ldrh	r3, [r3, #8]
 800b790:	461d      	mov	r5, r3
 800b792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b794:	68db      	ldr	r3, [r3, #12]
 800b796:	899b      	ldrh	r3, [r3, #12]
 800b798:	b29b      	uxth	r3, r3
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7f9 feee 	bl	800557c <lwip_htons>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	f003 0303 	and.w	r3, r3, #3
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d001      	beq.n	800b7b0 <tcp_output+0x2a0>
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	e000      	b.n	800b7b2 <tcp_output+0x2a2>
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	442b      	add	r3, r5
 800b7b4:	4423      	add	r3, r4
 800b7b6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	1ad3      	subs	r3, r2, r3
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	da02      	bge.n	800b7ca <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	68ba      	ldr	r2, [r7, #8]
 800b7c8:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7cc:	891b      	ldrh	r3, [r3, #8]
 800b7ce:	461c      	mov	r4, r3
 800b7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	899b      	ldrh	r3, [r3, #12]
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f7f9 fecf 	bl	800557c <lwip_htons>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	f003 0303 	and.w	r3, r3, #3
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d001      	beq.n	800b7ee <tcp_output+0x2de>
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	e000      	b.n	800b7f0 <tcp_output+0x2e0>
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	4423      	add	r3, r4
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d049      	beq.n	800b88a <tcp_output+0x37a>
      seg->next = NULL;
 800b7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b800:	2b00      	cmp	r3, #0
 800b802:	d105      	bne.n	800b810 <tcp_output+0x300>
        pcb->unacked = seg;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b808:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800b80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b80c:	623b      	str	r3, [r7, #32]
 800b80e:	e03f      	b.n	800b890 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	685b      	ldr	r3, [r3, #4]
 800b816:	4618      	mov	r0, r3
 800b818:	f7f9 fec6 	bl	80055a8 <lwip_htonl>
 800b81c:	4604      	mov	r4, r0
 800b81e:	6a3b      	ldr	r3, [r7, #32]
 800b820:	68db      	ldr	r3, [r3, #12]
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	4618      	mov	r0, r3
 800b826:	f7f9 febf 	bl	80055a8 <lwip_htonl>
 800b82a:	4603      	mov	r3, r0
 800b82c:	1ae3      	subs	r3, r4, r3
 800b82e:	2b00      	cmp	r3, #0
 800b830:	da24      	bge.n	800b87c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	3370      	adds	r3, #112	@ 0x70
 800b836:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b838:	e002      	b.n	800b840 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b83a:	69fb      	ldr	r3, [r7, #28]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b840:	69fb      	ldr	r3, [r7, #28]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d011      	beq.n	800b86c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b848:	69fb      	ldr	r3, [r7, #28]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	68db      	ldr	r3, [r3, #12]
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	4618      	mov	r0, r3
 800b852:	f7f9 fea9 	bl	80055a8 <lwip_htonl>
 800b856:	4604      	mov	r4, r0
 800b858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b85a:	68db      	ldr	r3, [r3, #12]
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	4618      	mov	r0, r3
 800b860:	f7f9 fea2 	bl	80055a8 <lwip_htonl>
 800b864:	4603      	mov	r3, r0
 800b866:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b868:	2b00      	cmp	r3, #0
 800b86a:	dbe6      	blt.n	800b83a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800b86c:	69fb      	ldr	r3, [r7, #28]
 800b86e:	681a      	ldr	r2, [r3, #0]
 800b870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b872:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b874:	69fb      	ldr	r3, [r7, #28]
 800b876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b878:	601a      	str	r2, [r3, #0]
 800b87a:	e009      	b.n	800b890 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b87c:	6a3b      	ldr	r3, [r7, #32]
 800b87e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b880:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b882:	6a3b      	ldr	r3, [r7, #32]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	623b      	str	r3, [r7, #32]
 800b888:	e002      	b.n	800b890 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b88a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b88c:	f7fc fc45 	bl	800811a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b894:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800b896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d012      	beq.n	800b8c2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b89c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b89e:	68db      	ldr	r3, [r3, #12]
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7f9 fe80 	bl	80055a8 <lwip_htonl>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8ae:	1ad3      	subs	r3, r2, r3
 800b8b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8b2:	8912      	ldrh	r2, [r2, #8]
 800b8b4:	4413      	add	r3, r2
  while (seg != NULL &&
 800b8b6:	69ba      	ldr	r2, [r7, #24]
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	f4bf aed9 	bcs.w	800b670 <tcp_output+0x160>
 800b8be:	e000      	b.n	800b8c2 <tcp_output+0x3b2>
      break;
 800b8c0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d108      	bne.n	800b8dc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800b8d2:	e004      	b.n	800b8de <tcp_output+0x3ce>
    goto output_done;
 800b8d4:	bf00      	nop
 800b8d6:	e002      	b.n	800b8de <tcp_output+0x3ce>
    goto output_done;
 800b8d8:	bf00      	nop
 800b8da:	e000      	b.n	800b8de <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b8dc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	8b5b      	ldrh	r3, [r3, #26]
 800b8e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b8e6:	b29a      	uxth	r2, r3
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b8ec:	2300      	movs	r3, #0
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3728      	adds	r7, #40	@ 0x28
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bdb0      	pop	{r4, r5, r7, pc}
 800b8f6:	bf00      	nop

0800b8f8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b082      	sub	sp, #8
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d106      	bne.n	800b914 <tcp_output_segment_busy+0x1c>
 800b906:	4b09      	ldr	r3, [pc, #36]	@ (800b92c <tcp_output_segment_busy+0x34>)
 800b908:	f240 529a 	movw	r2, #1434	@ 0x59a
 800b90c:	4908      	ldr	r1, [pc, #32]	@ (800b930 <tcp_output_segment_busy+0x38>)
 800b90e:	4809      	ldr	r0, [pc, #36]	@ (800b934 <tcp_output_segment_busy+0x3c>)
 800b910:	f003 fc3e 	bl	800f190 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	7b9b      	ldrb	r3, [r3, #14]
 800b91a:	2b01      	cmp	r3, #1
 800b91c:	d001      	beq.n	800b922 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b91e:	2301      	movs	r3, #1
 800b920:	e000      	b.n	800b924 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b922:	2300      	movs	r3, #0
}
 800b924:	4618      	mov	r0, r3
 800b926:	3708      	adds	r7, #8
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	0801166c 	.word	0x0801166c
 800b930:	08011c08 	.word	0x08011c08
 800b934:	080116c0 	.word	0x080116c0

0800b938 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b938:	b5b0      	push	{r4, r5, r7, lr}
 800b93a:	b08c      	sub	sp, #48	@ 0x30
 800b93c:	af04      	add	r7, sp, #16
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d106      	bne.n	800b958 <tcp_output_segment+0x20>
 800b94a:	4b64      	ldr	r3, [pc, #400]	@ (800badc <tcp_output_segment+0x1a4>)
 800b94c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800b950:	4963      	ldr	r1, [pc, #396]	@ (800bae0 <tcp_output_segment+0x1a8>)
 800b952:	4864      	ldr	r0, [pc, #400]	@ (800bae4 <tcp_output_segment+0x1ac>)
 800b954:	f003 fc1c 	bl	800f190 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d106      	bne.n	800b96c <tcp_output_segment+0x34>
 800b95e:	4b5f      	ldr	r3, [pc, #380]	@ (800badc <tcp_output_segment+0x1a4>)
 800b960:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800b964:	4960      	ldr	r1, [pc, #384]	@ (800bae8 <tcp_output_segment+0x1b0>)
 800b966:	485f      	ldr	r0, [pc, #380]	@ (800bae4 <tcp_output_segment+0x1ac>)
 800b968:	f003 fc12 	bl	800f190 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d106      	bne.n	800b980 <tcp_output_segment+0x48>
 800b972:	4b5a      	ldr	r3, [pc, #360]	@ (800badc <tcp_output_segment+0x1a4>)
 800b974:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800b978:	495c      	ldr	r1, [pc, #368]	@ (800baec <tcp_output_segment+0x1b4>)
 800b97a:	485a      	ldr	r0, [pc, #360]	@ (800bae4 <tcp_output_segment+0x1ac>)
 800b97c:	f003 fc08 	bl	800f190 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b980:	68f8      	ldr	r0, [r7, #12]
 800b982:	f7ff ffb9 	bl	800b8f8 <tcp_output_segment_busy>
 800b986:	4603      	mov	r3, r0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d001      	beq.n	800b990 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b98c:	2300      	movs	r3, #0
 800b98e:	e0a1      	b.n	800bad4 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	68dc      	ldr	r4, [r3, #12]
 800b998:	4610      	mov	r0, r2
 800b99a:	f7f9 fe05 	bl	80055a8 <lwip_htonl>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	68dc      	ldr	r4, [r3, #12]
 800b9aa:	4610      	mov	r0, r2
 800b9ac:	f7f9 fde6 	bl	800557c <lwip_htons>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9b8:	68ba      	ldr	r2, [r7, #8]
 800b9ba:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800b9bc:	441a      	add	r2, r3
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	68db      	ldr	r3, [r3, #12]
 800b9c6:	3314      	adds	r3, #20
 800b9c8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	7a9b      	ldrb	r3, [r3, #10]
 800b9ce:	f003 0301 	and.w	r3, r3, #1
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d015      	beq.n	800ba02 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	3304      	adds	r3, #4
 800b9da:	461a      	mov	r2, r3
 800b9dc:	6879      	ldr	r1, [r7, #4]
 800b9de:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800b9e2:	f7fc fe91 	bl	8008708 <tcp_eff_send_mss_netif>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b9ea:	8b7b      	ldrh	r3, [r7, #26]
 800b9ec:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f7f9 fdd9 	bl	80055a8 <lwip_htonl>
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	69fb      	ldr	r3, [r7, #28]
 800b9fa:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b9fc:	69fb      	ldr	r3, [r7, #28]
 800b9fe:	3304      	adds	r3, #4
 800ba00:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	da02      	bge.n	800ba12 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d10c      	bne.n	800ba34 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800ba1a:	4b35      	ldr	r3, [pc, #212]	@ (800baf0 <tcp_output_segment+0x1b8>)
 800ba1c:	681a      	ldr	r2, [r3, #0]
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	68db      	ldr	r3, [r3, #12]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7f9 fdbd 	bl	80055a8 <lwip_htonl>
 800ba2e:	4602      	mov	r2, r0
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	68da      	ldr	r2, [r3, #12]
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	1ad3      	subs	r3, r2, r3
 800ba40:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	8959      	ldrh	r1, [r3, #10]
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	8b3a      	ldrh	r2, [r7, #24]
 800ba4e:	1a8a      	subs	r2, r1, r2
 800ba50:	b292      	uxth	r2, r2
 800ba52:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	8919      	ldrh	r1, [r3, #8]
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	8b3a      	ldrh	r2, [r7, #24]
 800ba60:	1a8a      	subs	r2, r1, r2
 800ba62:	b292      	uxth	r2, r2
 800ba64:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	68fa      	ldr	r2, [r7, #12]
 800ba6c:	68d2      	ldr	r2, [r2, #12]
 800ba6e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	68db      	ldr	r3, [r3, #12]
 800ba74:	2200      	movs	r2, #0
 800ba76:	741a      	strb	r2, [r3, #16]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	68da      	ldr	r2, [r3, #12]
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	7a9b      	ldrb	r3, [r3, #10]
 800ba84:	f003 0301 	and.w	r3, r3, #1
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d001      	beq.n	800ba90 <tcp_output_segment+0x158>
 800ba8c:	2318      	movs	r3, #24
 800ba8e:	e000      	b.n	800ba92 <tcp_output_segment+0x15a>
 800ba90:	2314      	movs	r3, #20
 800ba92:	4413      	add	r3, r2
 800ba94:	69fa      	ldr	r2, [r7, #28]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d006      	beq.n	800baa8 <tcp_output_segment+0x170>
 800ba9a:	4b10      	ldr	r3, [pc, #64]	@ (800badc <tcp_output_segment+0x1a4>)
 800ba9c:	f240 621c 	movw	r2, #1564	@ 0x61c
 800baa0:	4914      	ldr	r1, [pc, #80]	@ (800baf4 <tcp_output_segment+0x1bc>)
 800baa2:	4810      	ldr	r0, [pc, #64]	@ (800bae4 <tcp_output_segment+0x1ac>)
 800baa4:	f003 fb74 	bl	800f190 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	6858      	ldr	r0, [r3, #4]
 800baac:	68b9      	ldr	r1, [r7, #8]
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	1d1c      	adds	r4, r3, #4
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	7add      	ldrb	r5, [r3, #11]
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	7a9b      	ldrb	r3, [r3, #10]
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	9202      	str	r2, [sp, #8]
 800babe:	2206      	movs	r2, #6
 800bac0:	9201      	str	r2, [sp, #4]
 800bac2:	9300      	str	r3, [sp, #0]
 800bac4:	462b      	mov	r3, r5
 800bac6:	4622      	mov	r2, r4
 800bac8:	f002 fa34 	bl	800df34 <ip4_output_if>
 800bacc:	4603      	mov	r3, r0
 800bace:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800bad0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3720      	adds	r7, #32
 800bad8:	46bd      	mov	sp, r7
 800bada:	bdb0      	pop	{r4, r5, r7, pc}
 800badc:	0801166c 	.word	0x0801166c
 800bae0:	08011c30 	.word	0x08011c30
 800bae4:	080116c0 	.word	0x080116c0
 800bae8:	08011c50 	.word	0x08011c50
 800baec:	08011c70 	.word	0x08011c70
 800baf0:	20007c74 	.word	0x20007c74
 800baf4:	08011c94 	.word	0x08011c94

0800baf8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800baf8:	b5b0      	push	{r4, r5, r7, lr}
 800bafa:	b084      	sub	sp, #16
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d106      	bne.n	800bb14 <tcp_rexmit_rto_prepare+0x1c>
 800bb06:	4b31      	ldr	r3, [pc, #196]	@ (800bbcc <tcp_rexmit_rto_prepare+0xd4>)
 800bb08:	f240 6263 	movw	r2, #1635	@ 0x663
 800bb0c:	4930      	ldr	r1, [pc, #192]	@ (800bbd0 <tcp_rexmit_rto_prepare+0xd8>)
 800bb0e:	4831      	ldr	r0, [pc, #196]	@ (800bbd4 <tcp_rexmit_rto_prepare+0xdc>)
 800bb10:	f003 fb3e 	bl	800f190 <iprintf>

  if (pcb->unacked == NULL) {
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d102      	bne.n	800bb22 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800bb1c:	f06f 0305 	mvn.w	r3, #5
 800bb20:	e050      	b.n	800bbc4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb26:	60fb      	str	r3, [r7, #12]
 800bb28:	e00b      	b.n	800bb42 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800bb2a:	68f8      	ldr	r0, [r7, #12]
 800bb2c:	f7ff fee4 	bl	800b8f8 <tcp_output_segment_busy>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d002      	beq.n	800bb3c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800bb36:	f06f 0305 	mvn.w	r3, #5
 800bb3a:	e043      	b.n	800bbc4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	60fb      	str	r3, [r7, #12]
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d1ef      	bne.n	800bb2a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800bb4a:	68f8      	ldr	r0, [r7, #12]
 800bb4c:	f7ff fed4 	bl	800b8f8 <tcp_output_segment_busy>
 800bb50:	4603      	mov	r3, r0
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d002      	beq.n	800bb5c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800bb56:	f06f 0305 	mvn.w	r3, #5
 800bb5a:	e033      	b.n	800bbc4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	8b5b      	ldrh	r3, [r3, #26]
 800bb76:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800bb7a:	b29a      	uxth	r2, r3
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7f9 fd0e 	bl	80055a8 <lwip_htonl>
 800bb8c:	4604      	mov	r4, r0
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	891b      	ldrh	r3, [r3, #8]
 800bb92:	461d      	mov	r5, r3
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	899b      	ldrh	r3, [r3, #12]
 800bb9a:	b29b      	uxth	r3, r3
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f7f9 fced 	bl	800557c <lwip_htons>
 800bba2:	4603      	mov	r3, r0
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	f003 0303 	and.w	r3, r3, #3
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d001      	beq.n	800bbb2 <tcp_rexmit_rto_prepare+0xba>
 800bbae:	2301      	movs	r3, #1
 800bbb0:	e000      	b.n	800bbb4 <tcp_rexmit_rto_prepare+0xbc>
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	442b      	add	r3, r5
 800bbb6:	18e2      	adds	r2, r4, r3
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800bbc2:	2300      	movs	r3, #0
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3710      	adds	r7, #16
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bdb0      	pop	{r4, r5, r7, pc}
 800bbcc:	0801166c 	.word	0x0801166c
 800bbd0:	08011ca8 	.word	0x08011ca8
 800bbd4:	080116c0 	.word	0x080116c0

0800bbd8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d106      	bne.n	800bbf4 <tcp_rexmit_rto_commit+0x1c>
 800bbe6:	4b0d      	ldr	r3, [pc, #52]	@ (800bc1c <tcp_rexmit_rto_commit+0x44>)
 800bbe8:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800bbec:	490c      	ldr	r1, [pc, #48]	@ (800bc20 <tcp_rexmit_rto_commit+0x48>)
 800bbee:	480d      	ldr	r0, [pc, #52]	@ (800bc24 <tcp_rexmit_rto_commit+0x4c>)
 800bbf0:	f003 face 	bl	800f190 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bbfa:	2bff      	cmp	r3, #255	@ 0xff
 800bbfc:	d007      	beq.n	800bc0e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bc04:	3301      	adds	r3, #1
 800bc06:	b2da      	uxtb	r2, r3
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f7ff fc7e 	bl	800b510 <tcp_output>
}
 800bc14:	bf00      	nop
 800bc16:	3708      	adds	r7, #8
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	0801166c 	.word	0x0801166c
 800bc20:	08011ccc 	.word	0x08011ccc
 800bc24:	080116c0 	.word	0x080116c0

0800bc28 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d106      	bne.n	800bc44 <tcp_rexmit_rto+0x1c>
 800bc36:	4b0a      	ldr	r3, [pc, #40]	@ (800bc60 <tcp_rexmit_rto+0x38>)
 800bc38:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800bc3c:	4909      	ldr	r1, [pc, #36]	@ (800bc64 <tcp_rexmit_rto+0x3c>)
 800bc3e:	480a      	ldr	r0, [pc, #40]	@ (800bc68 <tcp_rexmit_rto+0x40>)
 800bc40:	f003 faa6 	bl	800f190 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f7ff ff57 	bl	800baf8 <tcp_rexmit_rto_prepare>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d102      	bne.n	800bc56 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f7ff ffc1 	bl	800bbd8 <tcp_rexmit_rto_commit>
  }
}
 800bc56:	bf00      	nop
 800bc58:	3708      	adds	r7, #8
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	0801166c 	.word	0x0801166c
 800bc64:	08011cf0 	.word	0x08011cf0
 800bc68:	080116c0 	.word	0x080116c0

0800bc6c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800bc6c:	b590      	push	{r4, r7, lr}
 800bc6e:	b085      	sub	sp, #20
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d106      	bne.n	800bc88 <tcp_rexmit+0x1c>
 800bc7a:	4b2f      	ldr	r3, [pc, #188]	@ (800bd38 <tcp_rexmit+0xcc>)
 800bc7c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800bc80:	492e      	ldr	r1, [pc, #184]	@ (800bd3c <tcp_rexmit+0xd0>)
 800bc82:	482f      	ldr	r0, [pc, #188]	@ (800bd40 <tcp_rexmit+0xd4>)
 800bc84:	f003 fa84 	bl	800f190 <iprintf>

  if (pcb->unacked == NULL) {
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d102      	bne.n	800bc96 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800bc90:	f06f 0305 	mvn.w	r3, #5
 800bc94:	e04c      	b.n	800bd30 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc9a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800bc9c:	68b8      	ldr	r0, [r7, #8]
 800bc9e:	f7ff fe2b 	bl	800b8f8 <tcp_output_segment_busy>
 800bca2:	4603      	mov	r3, r0
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d002      	beq.n	800bcae <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800bca8:	f06f 0305 	mvn.w	r3, #5
 800bcac:	e040      	b.n	800bd30 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	336c      	adds	r3, #108	@ 0x6c
 800bcba:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bcbc:	e002      	b.n	800bcc4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d011      	beq.n	800bcf0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	68db      	ldr	r3, [r3, #12]
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f7f9 fc67 	bl	80055a8 <lwip_htonl>
 800bcda:	4604      	mov	r4, r0
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	4618      	mov	r0, r3
 800bce4:	f7f9 fc60 	bl	80055a8 <lwip_htonl>
 800bce8:	4603      	mov	r3, r0
 800bcea:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	dbe6      	blt.n	800bcbe <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681a      	ldr	r2, [r3, #0]
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	68ba      	ldr	r2, [r7, #8]
 800bcfc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d103      	bne.n	800bd0e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bd14:	2bff      	cmp	r3, #255	@ 0xff
 800bd16:	d007      	beq.n	800bd28 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bd1e:	3301      	adds	r3, #1
 800bd20:	b2da      	uxtb	r2, r3
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800bd2e:	2300      	movs	r3, #0
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3714      	adds	r7, #20
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd90      	pop	{r4, r7, pc}
 800bd38:	0801166c 	.word	0x0801166c
 800bd3c:	08011d0c 	.word	0x08011d0c
 800bd40:	080116c0 	.word	0x080116c0

0800bd44 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d106      	bne.n	800bd60 <tcp_rexmit_fast+0x1c>
 800bd52:	4b2a      	ldr	r3, [pc, #168]	@ (800bdfc <tcp_rexmit_fast+0xb8>)
 800bd54:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800bd58:	4929      	ldr	r1, [pc, #164]	@ (800be00 <tcp_rexmit_fast+0xbc>)
 800bd5a:	482a      	ldr	r0, [pc, #168]	@ (800be04 <tcp_rexmit_fast+0xc0>)
 800bd5c:	f003 fa18 	bl	800f190 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d045      	beq.n	800bdf4 <tcp_rexmit_fast+0xb0>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	8b5b      	ldrh	r3, [r3, #26]
 800bd6c:	f003 0304 	and.w	r3, r3, #4
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d13f      	bne.n	800bdf4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f7ff ff79 	bl	800bc6c <tcp_rexmit>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d139      	bne.n	800bdf4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	bf28      	it	cs
 800bd90:	4613      	movcs	r3, r2
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	da00      	bge.n	800bd9a <tcp_rexmit_fast+0x56>
 800bd98:	3301      	adds	r3, #1
 800bd9a:	105b      	asrs	r3, r3, #1
 800bd9c:	b29a      	uxth	r2, r3
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800bdaa:	461a      	mov	r2, r3
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bdb0:	005b      	lsls	r3, r3, #1
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	d206      	bcs.n	800bdc4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bdba:	005b      	lsls	r3, r3, #1
 800bdbc:	b29a      	uxth	r2, r3
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bdce:	4619      	mov	r1, r3
 800bdd0:	0049      	lsls	r1, r1, #1
 800bdd2:	440b      	add	r3, r1
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	4413      	add	r3, r2
 800bdd8:	b29a      	uxth	r2, r3
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	8b5b      	ldrh	r3, [r3, #26]
 800bde4:	f043 0304 	orr.w	r3, r3, #4
 800bde8:	b29a      	uxth	r2, r3
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800bdf4:	bf00      	nop
 800bdf6:	3708      	adds	r7, #8
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}
 800bdfc:	0801166c 	.word	0x0801166c
 800be00:	08011d24 	.word	0x08011d24
 800be04:	080116c0 	.word	0x080116c0

0800be08 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b086      	sub	sp, #24
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	60f8      	str	r0, [r7, #12]
 800be10:	607b      	str	r3, [r7, #4]
 800be12:	460b      	mov	r3, r1
 800be14:	817b      	strh	r3, [r7, #10]
 800be16:	4613      	mov	r3, r2
 800be18:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800be1a:	897a      	ldrh	r2, [r7, #10]
 800be1c:	893b      	ldrh	r3, [r7, #8]
 800be1e:	4413      	add	r3, r2
 800be20:	b29b      	uxth	r3, r3
 800be22:	3314      	adds	r3, #20
 800be24:	b29b      	uxth	r3, r3
 800be26:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800be2a:	4619      	mov	r1, r3
 800be2c:	2022      	movs	r0, #34	@ 0x22
 800be2e:	f7fa fc1b 	bl	8006668 <pbuf_alloc>
 800be32:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d04d      	beq.n	800bed6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800be3a:	897b      	ldrh	r3, [r7, #10]
 800be3c:	3313      	adds	r3, #19
 800be3e:	697a      	ldr	r2, [r7, #20]
 800be40:	8952      	ldrh	r2, [r2, #10]
 800be42:	4293      	cmp	r3, r2
 800be44:	db06      	blt.n	800be54 <tcp_output_alloc_header_common+0x4c>
 800be46:	4b26      	ldr	r3, [pc, #152]	@ (800bee0 <tcp_output_alloc_header_common+0xd8>)
 800be48:	f240 7223 	movw	r2, #1827	@ 0x723
 800be4c:	4925      	ldr	r1, [pc, #148]	@ (800bee4 <tcp_output_alloc_header_common+0xdc>)
 800be4e:	4826      	ldr	r0, [pc, #152]	@ (800bee8 <tcp_output_alloc_header_common+0xe0>)
 800be50:	f003 f99e 	bl	800f190 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800be5a:	8c3b      	ldrh	r3, [r7, #32]
 800be5c:	4618      	mov	r0, r3
 800be5e:	f7f9 fb8d 	bl	800557c <lwip_htons>
 800be62:	4603      	mov	r3, r0
 800be64:	461a      	mov	r2, r3
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800be6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800be6c:	4618      	mov	r0, r3
 800be6e:	f7f9 fb85 	bl	800557c <lwip_htons>
 800be72:	4603      	mov	r3, r0
 800be74:	461a      	mov	r2, r3
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800be80:	68f8      	ldr	r0, [r7, #12]
 800be82:	f7f9 fb91 	bl	80055a8 <lwip_htonl>
 800be86:	4602      	mov	r2, r0
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800be8c:	897b      	ldrh	r3, [r7, #10]
 800be8e:	089b      	lsrs	r3, r3, #2
 800be90:	b29b      	uxth	r3, r3
 800be92:	3305      	adds	r3, #5
 800be94:	b29b      	uxth	r3, r3
 800be96:	031b      	lsls	r3, r3, #12
 800be98:	b29a      	uxth	r2, r3
 800be9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800be9e:	b29b      	uxth	r3, r3
 800bea0:	4313      	orrs	r3, r2
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7f9 fb69 	bl	800557c <lwip_htons>
 800beaa:	4603      	mov	r3, r0
 800beac:	461a      	mov	r2, r3
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800beb2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800beb4:	4618      	mov	r0, r3
 800beb6:	f7f9 fb61 	bl	800557c <lwip_htons>
 800beba:	4603      	mov	r3, r0
 800bebc:	461a      	mov	r2, r3
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	2200      	movs	r2, #0
 800bec6:	741a      	strb	r2, [r3, #16]
 800bec8:	2200      	movs	r2, #0
 800beca:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	2200      	movs	r2, #0
 800bed0:	749a      	strb	r2, [r3, #18]
 800bed2:	2200      	movs	r2, #0
 800bed4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800bed6:	697b      	ldr	r3, [r7, #20]
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3718      	adds	r7, #24
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	0801166c 	.word	0x0801166c
 800bee4:	08011d44 	.word	0x08011d44
 800bee8:	080116c0 	.word	0x080116c0

0800beec <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800beec:	b5b0      	push	{r4, r5, r7, lr}
 800beee:	b08a      	sub	sp, #40	@ 0x28
 800bef0:	af04      	add	r7, sp, #16
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	607b      	str	r3, [r7, #4]
 800bef6:	460b      	mov	r3, r1
 800bef8:	817b      	strh	r3, [r7, #10]
 800befa:	4613      	mov	r3, r2
 800befc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d106      	bne.n	800bf12 <tcp_output_alloc_header+0x26>
 800bf04:	4b15      	ldr	r3, [pc, #84]	@ (800bf5c <tcp_output_alloc_header+0x70>)
 800bf06:	f240 7242 	movw	r2, #1858	@ 0x742
 800bf0a:	4915      	ldr	r1, [pc, #84]	@ (800bf60 <tcp_output_alloc_header+0x74>)
 800bf0c:	4815      	ldr	r0, [pc, #84]	@ (800bf64 <tcp_output_alloc_header+0x78>)
 800bf0e:	f003 f93f 	bl	800f190 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	8adb      	ldrh	r3, [r3, #22]
 800bf1a:	68fa      	ldr	r2, [r7, #12]
 800bf1c:	8b12      	ldrh	r2, [r2, #24]
 800bf1e:	68f9      	ldr	r1, [r7, #12]
 800bf20:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800bf22:	893d      	ldrh	r5, [r7, #8]
 800bf24:	897c      	ldrh	r4, [r7, #10]
 800bf26:	9103      	str	r1, [sp, #12]
 800bf28:	2110      	movs	r1, #16
 800bf2a:	9102      	str	r1, [sp, #8]
 800bf2c:	9201      	str	r2, [sp, #4]
 800bf2e:	9300      	str	r3, [sp, #0]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	462a      	mov	r2, r5
 800bf34:	4621      	mov	r1, r4
 800bf36:	f7ff ff67 	bl	800be08 <tcp_output_alloc_header_common>
 800bf3a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d006      	beq.n	800bf50 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf46:	68fa      	ldr	r2, [r7, #12]
 800bf48:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800bf4a:	441a      	add	r2, r3
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800bf50:	697b      	ldr	r3, [r7, #20]
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3718      	adds	r7, #24
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bdb0      	pop	{r4, r5, r7, pc}
 800bf5a:	bf00      	nop
 800bf5c:	0801166c 	.word	0x0801166c
 800bf60:	08011d74 	.word	0x08011d74
 800bf64:	080116c0 	.word	0x080116c0

0800bf68 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b088      	sub	sp, #32
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	60f8      	str	r0, [r7, #12]
 800bf70:	60b9      	str	r1, [r7, #8]
 800bf72:	4611      	mov	r1, r2
 800bf74:	461a      	mov	r2, r3
 800bf76:	460b      	mov	r3, r1
 800bf78:	71fb      	strb	r3, [r7, #7]
 800bf7a:	4613      	mov	r3, r2
 800bf7c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d106      	bne.n	800bf96 <tcp_output_fill_options+0x2e>
 800bf88:	4b12      	ldr	r3, [pc, #72]	@ (800bfd4 <tcp_output_fill_options+0x6c>)
 800bf8a:	f240 7256 	movw	r2, #1878	@ 0x756
 800bf8e:	4912      	ldr	r1, [pc, #72]	@ (800bfd8 <tcp_output_fill_options+0x70>)
 800bf90:	4812      	ldr	r0, [pc, #72]	@ (800bfdc <tcp_output_fill_options+0x74>)
 800bf92:	f003 f8fd 	bl	800f190 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800bf9c:	69bb      	ldr	r3, [r7, #24]
 800bf9e:	3314      	adds	r3, #20
 800bfa0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800bfa2:	8bfb      	ldrh	r3, [r7, #30]
 800bfa4:	009b      	lsls	r3, r3, #2
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	79fb      	ldrb	r3, [r7, #7]
 800bfaa:	009b      	lsls	r3, r3, #2
 800bfac:	f003 0304 	and.w	r3, r3, #4
 800bfb0:	4413      	add	r3, r2
 800bfb2:	3314      	adds	r3, #20
 800bfb4:	69ba      	ldr	r2, [r7, #24]
 800bfb6:	4413      	add	r3, r2
 800bfb8:	697a      	ldr	r2, [r7, #20]
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	d006      	beq.n	800bfcc <tcp_output_fill_options+0x64>
 800bfbe:	4b05      	ldr	r3, [pc, #20]	@ (800bfd4 <tcp_output_fill_options+0x6c>)
 800bfc0:	f240 7275 	movw	r2, #1909	@ 0x775
 800bfc4:	4906      	ldr	r1, [pc, #24]	@ (800bfe0 <tcp_output_fill_options+0x78>)
 800bfc6:	4805      	ldr	r0, [pc, #20]	@ (800bfdc <tcp_output_fill_options+0x74>)
 800bfc8:	f003 f8e2 	bl	800f190 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800bfcc:	bf00      	nop
 800bfce:	3720      	adds	r7, #32
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}
 800bfd4:	0801166c 	.word	0x0801166c
 800bfd8:	08011d9c 	.word	0x08011d9c
 800bfdc:	080116c0 	.word	0x080116c0
 800bfe0:	08011c94 	.word	0x08011c94

0800bfe4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b08a      	sub	sp, #40	@ 0x28
 800bfe8:	af04      	add	r7, sp, #16
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	60b9      	str	r1, [r7, #8]
 800bfee:	607a      	str	r2, [r7, #4]
 800bff0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d106      	bne.n	800c006 <tcp_output_control_segment+0x22>
 800bff8:	4b1c      	ldr	r3, [pc, #112]	@ (800c06c <tcp_output_control_segment+0x88>)
 800bffa:	f240 7287 	movw	r2, #1927	@ 0x787
 800bffe:	491c      	ldr	r1, [pc, #112]	@ (800c070 <tcp_output_control_segment+0x8c>)
 800c000:	481c      	ldr	r0, [pc, #112]	@ (800c074 <tcp_output_control_segment+0x90>)
 800c002:	f003 f8c5 	bl	800f190 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c006:	683a      	ldr	r2, [r7, #0]
 800c008:	6879      	ldr	r1, [r7, #4]
 800c00a:	68f8      	ldr	r0, [r7, #12]
 800c00c:	f7fe ff42 	bl	800ae94 <tcp_route>
 800c010:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d102      	bne.n	800c01e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800c018:	23fc      	movs	r3, #252	@ 0xfc
 800c01a:	75fb      	strb	r3, [r7, #23]
 800c01c:	e01c      	b.n	800c058 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d006      	beq.n	800c032 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	7adb      	ldrb	r3, [r3, #11]
 800c028:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	7a9b      	ldrb	r3, [r3, #10]
 800c02e:	757b      	strb	r3, [r7, #21]
 800c030:	e003      	b.n	800c03a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c032:	23ff      	movs	r3, #255	@ 0xff
 800c034:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c036:	2300      	movs	r3, #0
 800c038:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c03a:	7dba      	ldrb	r2, [r7, #22]
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	9302      	str	r3, [sp, #8]
 800c040:	2306      	movs	r3, #6
 800c042:	9301      	str	r3, [sp, #4]
 800c044:	7d7b      	ldrb	r3, [r7, #21]
 800c046:	9300      	str	r3, [sp, #0]
 800c048:	4613      	mov	r3, r2
 800c04a:	683a      	ldr	r2, [r7, #0]
 800c04c:	6879      	ldr	r1, [r7, #4]
 800c04e:	68b8      	ldr	r0, [r7, #8]
 800c050:	f001 ff70 	bl	800df34 <ip4_output_if>
 800c054:	4603      	mov	r3, r0
 800c056:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c058:	68b8      	ldr	r0, [r7, #8]
 800c05a:	f7fa fde9 	bl	8006c30 <pbuf_free>
  return err;
 800c05e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c062:	4618      	mov	r0, r3
 800c064:	3718      	adds	r7, #24
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	bf00      	nop
 800c06c:	0801166c 	.word	0x0801166c
 800c070:	08011dc4 	.word	0x08011dc4
 800c074:	080116c0 	.word	0x080116c0

0800c078 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c078:	b590      	push	{r4, r7, lr}
 800c07a:	b08b      	sub	sp, #44	@ 0x2c
 800c07c:	af04      	add	r7, sp, #16
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	607a      	str	r2, [r7, #4]
 800c084:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d106      	bne.n	800c09a <tcp_rst+0x22>
 800c08c:	4b1f      	ldr	r3, [pc, #124]	@ (800c10c <tcp_rst+0x94>)
 800c08e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800c092:	491f      	ldr	r1, [pc, #124]	@ (800c110 <tcp_rst+0x98>)
 800c094:	481f      	ldr	r0, [pc, #124]	@ (800c114 <tcp_rst+0x9c>)
 800c096:	f003 f87b 	bl	800f190 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c09a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d106      	bne.n	800c0ae <tcp_rst+0x36>
 800c0a0:	4b1a      	ldr	r3, [pc, #104]	@ (800c10c <tcp_rst+0x94>)
 800c0a2:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800c0a6:	491c      	ldr	r1, [pc, #112]	@ (800c118 <tcp_rst+0xa0>)
 800c0a8:	481a      	ldr	r0, [pc, #104]	@ (800c114 <tcp_rst+0x9c>)
 800c0aa:	f003 f871 	bl	800f190 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c0b2:	f246 0308 	movw	r3, #24584	@ 0x6008
 800c0b6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c0b8:	7dfb      	ldrb	r3, [r7, #23]
 800c0ba:	b29c      	uxth	r4, r3
 800c0bc:	68b8      	ldr	r0, [r7, #8]
 800c0be:	f7f9 fa73 	bl	80055a8 <lwip_htonl>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	8abb      	ldrh	r3, [r7, #20]
 800c0c6:	9303      	str	r3, [sp, #12]
 800c0c8:	2314      	movs	r3, #20
 800c0ca:	9302      	str	r3, [sp, #8]
 800c0cc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800c0ce:	9301      	str	r3, [sp, #4]
 800c0d0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c0d2:	9300      	str	r3, [sp, #0]
 800c0d4:	4613      	mov	r3, r2
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	4621      	mov	r1, r4
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f7ff fe94 	bl	800be08 <tcp_output_alloc_header_common>
 800c0e0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d00c      	beq.n	800c102 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c0e8:	7dfb      	ldrb	r3, [r7, #23]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	6939      	ldr	r1, [r7, #16]
 800c0ee:	68f8      	ldr	r0, [r7, #12]
 800c0f0:	f7ff ff3a 	bl	800bf68 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c0f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0f6:	683a      	ldr	r2, [r7, #0]
 800c0f8:	6939      	ldr	r1, [r7, #16]
 800c0fa:	68f8      	ldr	r0, [r7, #12]
 800c0fc:	f7ff ff72 	bl	800bfe4 <tcp_output_control_segment>
 800c100:	e000      	b.n	800c104 <tcp_rst+0x8c>
    return;
 800c102:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c104:	371c      	adds	r7, #28
 800c106:	46bd      	mov	sp, r7
 800c108:	bd90      	pop	{r4, r7, pc}
 800c10a:	bf00      	nop
 800c10c:	0801166c 	.word	0x0801166c
 800c110:	08011df0 	.word	0x08011df0
 800c114:	080116c0 	.word	0x080116c0
 800c118:	08011e0c 	.word	0x08011e0c

0800c11c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c11c:	b590      	push	{r4, r7, lr}
 800c11e:	b087      	sub	sp, #28
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c124:	2300      	movs	r3, #0
 800c126:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c128:	2300      	movs	r3, #0
 800c12a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d106      	bne.n	800c140 <tcp_send_empty_ack+0x24>
 800c132:	4b28      	ldr	r3, [pc, #160]	@ (800c1d4 <tcp_send_empty_ack+0xb8>)
 800c134:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800c138:	4927      	ldr	r1, [pc, #156]	@ (800c1d8 <tcp_send_empty_ack+0xbc>)
 800c13a:	4828      	ldr	r0, [pc, #160]	@ (800c1dc <tcp_send_empty_ack+0xc0>)
 800c13c:	f003 f828 	bl	800f190 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c140:	7dfb      	ldrb	r3, [r7, #23]
 800c142:	009b      	lsls	r3, r3, #2
 800c144:	b2db      	uxtb	r3, r3
 800c146:	f003 0304 	and.w	r3, r3, #4
 800c14a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c14c:	7d7b      	ldrb	r3, [r7, #21]
 800c14e:	b29c      	uxth	r4, r3
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c154:	4618      	mov	r0, r3
 800c156:	f7f9 fa27 	bl	80055a8 <lwip_htonl>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2200      	movs	r2, #0
 800c15e:	4621      	mov	r1, r4
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f7ff fec3 	bl	800beec <tcp_output_alloc_header>
 800c166:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d109      	bne.n	800c182 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	8b5b      	ldrh	r3, [r3, #26]
 800c172:	f043 0303 	orr.w	r3, r3, #3
 800c176:	b29a      	uxth	r2, r3
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c17c:	f06f 0301 	mvn.w	r3, #1
 800c180:	e023      	b.n	800c1ca <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c182:	7dbb      	ldrb	r3, [r7, #22]
 800c184:	7dfa      	ldrb	r2, [r7, #23]
 800c186:	6939      	ldr	r1, [r7, #16]
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f7ff feed 	bl	800bf68 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c18e:	687a      	ldr	r2, [r7, #4]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	3304      	adds	r3, #4
 800c194:	6939      	ldr	r1, [r7, #16]
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f7ff ff24 	bl	800bfe4 <tcp_output_control_segment>
 800c19c:	4603      	mov	r3, r0
 800c19e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c1a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d007      	beq.n	800c1b8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	8b5b      	ldrh	r3, [r3, #26]
 800c1ac:	f043 0303 	orr.w	r3, r3, #3
 800c1b0:	b29a      	uxth	r2, r3
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	835a      	strh	r2, [r3, #26]
 800c1b6:	e006      	b.n	800c1c6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	8b5b      	ldrh	r3, [r3, #26]
 800c1bc:	f023 0303 	bic.w	r3, r3, #3
 800c1c0:	b29a      	uxth	r2, r3
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c1c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	371c      	adds	r7, #28
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd90      	pop	{r4, r7, pc}
 800c1d2:	bf00      	nop
 800c1d4:	0801166c 	.word	0x0801166c
 800c1d8:	08011e28 	.word	0x08011e28
 800c1dc:	080116c0 	.word	0x080116c0

0800c1e0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c1e0:	b590      	push	{r4, r7, lr}
 800c1e2:	b087      	sub	sp, #28
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d106      	bne.n	800c200 <tcp_keepalive+0x20>
 800c1f2:	4b18      	ldr	r3, [pc, #96]	@ (800c254 <tcp_keepalive+0x74>)
 800c1f4:	f640 0224 	movw	r2, #2084	@ 0x824
 800c1f8:	4917      	ldr	r1, [pc, #92]	@ (800c258 <tcp_keepalive+0x78>)
 800c1fa:	4818      	ldr	r0, [pc, #96]	@ (800c25c <tcp_keepalive+0x7c>)
 800c1fc:	f002 ffc8 	bl	800f190 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c200:	7dfb      	ldrb	r3, [r7, #23]
 800c202:	b29c      	uxth	r4, r3
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c208:	3b01      	subs	r3, #1
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7f9 f9cc 	bl	80055a8 <lwip_htonl>
 800c210:	4603      	mov	r3, r0
 800c212:	2200      	movs	r2, #0
 800c214:	4621      	mov	r1, r4
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f7ff fe68 	bl	800beec <tcp_output_alloc_header>
 800c21c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d102      	bne.n	800c22a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c224:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c228:	e010      	b.n	800c24c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c22a:	7dfb      	ldrb	r3, [r7, #23]
 800c22c:	2200      	movs	r2, #0
 800c22e:	6939      	ldr	r1, [r7, #16]
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f7ff fe99 	bl	800bf68 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c236:	687a      	ldr	r2, [r7, #4]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	3304      	adds	r3, #4
 800c23c:	6939      	ldr	r1, [r7, #16]
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f7ff fed0 	bl	800bfe4 <tcp_output_control_segment>
 800c244:	4603      	mov	r3, r0
 800c246:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c248:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	371c      	adds	r7, #28
 800c250:	46bd      	mov	sp, r7
 800c252:	bd90      	pop	{r4, r7, pc}
 800c254:	0801166c 	.word	0x0801166c
 800c258:	08011e48 	.word	0x08011e48
 800c25c:	080116c0 	.word	0x080116c0

0800c260 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c260:	b590      	push	{r4, r7, lr}
 800c262:	b08b      	sub	sp, #44	@ 0x2c
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c268:	2300      	movs	r3, #0
 800c26a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d106      	bne.n	800c282 <tcp_zero_window_probe+0x22>
 800c274:	4b4c      	ldr	r3, [pc, #304]	@ (800c3a8 <tcp_zero_window_probe+0x148>)
 800c276:	f640 024f 	movw	r2, #2127	@ 0x84f
 800c27a:	494c      	ldr	r1, [pc, #304]	@ (800c3ac <tcp_zero_window_probe+0x14c>)
 800c27c:	484c      	ldr	r0, [pc, #304]	@ (800c3b0 <tcp_zero_window_probe+0x150>)
 800c27e:	f002 ff87 	bl	800f190 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c286:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c288:	6a3b      	ldr	r3, [r7, #32]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d101      	bne.n	800c292 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c28e:	2300      	movs	r3, #0
 800c290:	e086      	b.n	800c3a0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c298:	2bff      	cmp	r3, #255	@ 0xff
 800c29a:	d007      	beq.n	800c2ac <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	b2da      	uxtb	r2, r3
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c2ac:	6a3b      	ldr	r3, [r7, #32]
 800c2ae:	68db      	ldr	r3, [r3, #12]
 800c2b0:	899b      	ldrh	r3, [r3, #12]
 800c2b2:	b29b      	uxth	r3, r3
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f7f9 f961 	bl	800557c <lwip_htons>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	b2db      	uxtb	r3, r3
 800c2be:	f003 0301 	and.w	r3, r3, #1
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d005      	beq.n	800c2d2 <tcp_zero_window_probe+0x72>
 800c2c6:	6a3b      	ldr	r3, [r7, #32]
 800c2c8:	891b      	ldrh	r3, [r3, #8]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d101      	bne.n	800c2d2 <tcp_zero_window_probe+0x72>
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	e000      	b.n	800c2d4 <tcp_zero_window_probe+0x74>
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c2d6:	7ffb      	ldrb	r3, [r7, #31]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	bf0c      	ite	eq
 800c2dc:	2301      	moveq	r3, #1
 800c2de:	2300      	movne	r3, #0
 800c2e0:	b2db      	uxtb	r3, r3
 800c2e2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c2e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c2e8:	b299      	uxth	r1, r3
 800c2ea:	6a3b      	ldr	r3, [r7, #32]
 800c2ec:	68db      	ldr	r3, [r3, #12]
 800c2ee:	685b      	ldr	r3, [r3, #4]
 800c2f0:	8bba      	ldrh	r2, [r7, #28]
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f7ff fdfa 	bl	800beec <tcp_output_alloc_header>
 800c2f8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c2fa:	69bb      	ldr	r3, [r7, #24]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d102      	bne.n	800c306 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c300:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c304:	e04c      	b.n	800c3a0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c306:	69bb      	ldr	r3, [r7, #24]
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c30c:	7ffb      	ldrb	r3, [r7, #31]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d011      	beq.n	800c336 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	899b      	ldrh	r3, [r3, #12]
 800c316:	b29b      	uxth	r3, r3
 800c318:	b21b      	sxth	r3, r3
 800c31a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c31e:	b21c      	sxth	r4, r3
 800c320:	2011      	movs	r0, #17
 800c322:	f7f9 f92b 	bl	800557c <lwip_htons>
 800c326:	4603      	mov	r3, r0
 800c328:	b21b      	sxth	r3, r3
 800c32a:	4323      	orrs	r3, r4
 800c32c:	b21b      	sxth	r3, r3
 800c32e:	b29a      	uxth	r2, r3
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	819a      	strh	r2, [r3, #12]
 800c334:	e010      	b.n	800c358 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c336:	69bb      	ldr	r3, [r7, #24]
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	3314      	adds	r3, #20
 800c33c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c33e:	6a3b      	ldr	r3, [r7, #32]
 800c340:	6858      	ldr	r0, [r3, #4]
 800c342:	6a3b      	ldr	r3, [r7, #32]
 800c344:	685b      	ldr	r3, [r3, #4]
 800c346:	891a      	ldrh	r2, [r3, #8]
 800c348:	6a3b      	ldr	r3, [r7, #32]
 800c34a:	891b      	ldrh	r3, [r3, #8]
 800c34c:	1ad3      	subs	r3, r2, r3
 800c34e:	b29b      	uxth	r3, r3
 800c350:	2201      	movs	r2, #1
 800c352:	6939      	ldr	r1, [r7, #16]
 800c354:	f7fa fe56 	bl	8007004 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c358:	6a3b      	ldr	r3, [r7, #32]
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	4618      	mov	r0, r3
 800c360:	f7f9 f922 	bl	80055a8 <lwip_htonl>
 800c364:	4603      	mov	r3, r0
 800c366:	3301      	adds	r3, #1
 800c368:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	1ad3      	subs	r3, r2, r3
 800c372:	2b00      	cmp	r3, #0
 800c374:	da02      	bge.n	800c37c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	68fa      	ldr	r2, [r7, #12]
 800c37a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c37c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c380:	2200      	movs	r2, #0
 800c382:	69b9      	ldr	r1, [r7, #24]
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f7ff fdef 	bl	800bf68 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c38a:	687a      	ldr	r2, [r7, #4]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	3304      	adds	r3, #4
 800c390:	69b9      	ldr	r1, [r7, #24]
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f7ff fe26 	bl	800bfe4 <tcp_output_control_segment>
 800c398:	4603      	mov	r3, r0
 800c39a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c39c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	372c      	adds	r7, #44	@ 0x2c
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd90      	pop	{r4, r7, pc}
 800c3a8:	0801166c 	.word	0x0801166c
 800c3ac:	08011e64 	.word	0x08011e64
 800c3b0:	080116c0 	.word	0x080116c0

0800c3b4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b082      	sub	sp, #8
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c3bc:	f7fa ff10 	bl	80071e0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c3c0:	4b0a      	ldr	r3, [pc, #40]	@ (800c3ec <tcpip_tcp_timer+0x38>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d103      	bne.n	800c3d0 <tcpip_tcp_timer+0x1c>
 800c3c8:	4b09      	ldr	r3, [pc, #36]	@ (800c3f0 <tcpip_tcp_timer+0x3c>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d005      	beq.n	800c3dc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	4908      	ldr	r1, [pc, #32]	@ (800c3f4 <tcpip_tcp_timer+0x40>)
 800c3d4:	20fa      	movs	r0, #250	@ 0xfa
 800c3d6:	f000 f8f3 	bl	800c5c0 <sys_timeout>
 800c3da:	e003      	b.n	800c3e4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c3dc:	4b06      	ldr	r3, [pc, #24]	@ (800c3f8 <tcpip_tcp_timer+0x44>)
 800c3de:	2200      	movs	r2, #0
 800c3e0:	601a      	str	r2, [r3, #0]
  }
}
 800c3e2:	bf00      	nop
 800c3e4:	bf00      	nop
 800c3e6:	3708      	adds	r7, #8
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}
 800c3ec:	20007c80 	.word	0x20007c80
 800c3f0:	20007c84 	.word	0x20007c84
 800c3f4:	0800c3b5 	.word	0x0800c3b5
 800c3f8:	20007ccc 	.word	0x20007ccc

0800c3fc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c400:	4b0a      	ldr	r3, [pc, #40]	@ (800c42c <tcp_timer_needed+0x30>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d10f      	bne.n	800c428 <tcp_timer_needed+0x2c>
 800c408:	4b09      	ldr	r3, [pc, #36]	@ (800c430 <tcp_timer_needed+0x34>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d103      	bne.n	800c418 <tcp_timer_needed+0x1c>
 800c410:	4b08      	ldr	r3, [pc, #32]	@ (800c434 <tcp_timer_needed+0x38>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d007      	beq.n	800c428 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c418:	4b04      	ldr	r3, [pc, #16]	@ (800c42c <tcp_timer_needed+0x30>)
 800c41a:	2201      	movs	r2, #1
 800c41c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c41e:	2200      	movs	r2, #0
 800c420:	4905      	ldr	r1, [pc, #20]	@ (800c438 <tcp_timer_needed+0x3c>)
 800c422:	20fa      	movs	r0, #250	@ 0xfa
 800c424:	f000 f8cc 	bl	800c5c0 <sys_timeout>
  }
}
 800c428:	bf00      	nop
 800c42a:	bd80      	pop	{r7, pc}
 800c42c:	20007ccc 	.word	0x20007ccc
 800c430:	20007c80 	.word	0x20007c80
 800c434:	20007c84 	.word	0x20007c84
 800c438:	0800c3b5 	.word	0x0800c3b5

0800c43c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b086      	sub	sp, #24
 800c440:	af00      	add	r7, sp, #0
 800c442:	60f8      	str	r0, [r7, #12]
 800c444:	60b9      	str	r1, [r7, #8]
 800c446:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c448:	2006      	movs	r0, #6
 800c44a:	f7f9 fd0b 	bl	8005e64 <memp_malloc>
 800c44e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d109      	bne.n	800c46a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d151      	bne.n	800c500 <sys_timeout_abs+0xc4>
 800c45c:	4b2a      	ldr	r3, [pc, #168]	@ (800c508 <sys_timeout_abs+0xcc>)
 800c45e:	22be      	movs	r2, #190	@ 0xbe
 800c460:	492a      	ldr	r1, [pc, #168]	@ (800c50c <sys_timeout_abs+0xd0>)
 800c462:	482b      	ldr	r0, [pc, #172]	@ (800c510 <sys_timeout_abs+0xd4>)
 800c464:	f002 fe94 	bl	800f190 <iprintf>
    return;
 800c468:	e04a      	b.n	800c500 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	2200      	movs	r2, #0
 800c46e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	68ba      	ldr	r2, [r7, #8]
 800c474:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	687a      	ldr	r2, [r7, #4]
 800c47a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	68fa      	ldr	r2, [r7, #12]
 800c480:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c482:	4b24      	ldr	r3, [pc, #144]	@ (800c514 <sys_timeout_abs+0xd8>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d103      	bne.n	800c492 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c48a:	4a22      	ldr	r2, [pc, #136]	@ (800c514 <sys_timeout_abs+0xd8>)
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	6013      	str	r3, [r2, #0]
    return;
 800c490:	e037      	b.n	800c502 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	685a      	ldr	r2, [r3, #4]
 800c496:	4b1f      	ldr	r3, [pc, #124]	@ (800c514 <sys_timeout_abs+0xd8>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	685b      	ldr	r3, [r3, #4]
 800c49c:	1ad3      	subs	r3, r2, r3
 800c49e:	0fdb      	lsrs	r3, r3, #31
 800c4a0:	f003 0301 	and.w	r3, r3, #1
 800c4a4:	b2db      	uxtb	r3, r3
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d007      	beq.n	800c4ba <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c4aa:	4b1a      	ldr	r3, [pc, #104]	@ (800c514 <sys_timeout_abs+0xd8>)
 800c4ac:	681a      	ldr	r2, [r3, #0]
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c4b2:	4a18      	ldr	r2, [pc, #96]	@ (800c514 <sys_timeout_abs+0xd8>)
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	6013      	str	r3, [r2, #0]
 800c4b8:	e023      	b.n	800c502 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c4ba:	4b16      	ldr	r3, [pc, #88]	@ (800c514 <sys_timeout_abs+0xd8>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	617b      	str	r3, [r7, #20]
 800c4c0:	e01a      	b.n	800c4f8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d00b      	beq.n	800c4e2 <sys_timeout_abs+0xa6>
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	685a      	ldr	r2, [r3, #4]
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	1ad3      	subs	r3, r2, r3
 800c4d6:	0fdb      	lsrs	r3, r3, #31
 800c4d8:	f003 0301 	and.w	r3, r3, #1
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d007      	beq.n	800c4f2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	681a      	ldr	r2, [r3, #0]
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	693a      	ldr	r2, [r7, #16]
 800c4ee:	601a      	str	r2, [r3, #0]
        break;
 800c4f0:	e007      	b.n	800c502 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	617b      	str	r3, [r7, #20]
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d1e1      	bne.n	800c4c2 <sys_timeout_abs+0x86>
 800c4fe:	e000      	b.n	800c502 <sys_timeout_abs+0xc6>
    return;
 800c500:	bf00      	nop
      }
    }
  }
}
 800c502:	3718      	adds	r7, #24
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}
 800c508:	08011e88 	.word	0x08011e88
 800c50c:	08011ebc 	.word	0x08011ebc
 800c510:	08011efc 	.word	0x08011efc
 800c514:	20007cc4 	.word	0x20007cc4

0800c518 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b086      	sub	sp, #24
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	685b      	ldr	r3, [r3, #4]
 800c528:	4798      	blx	r3

  now = sys_now();
 800c52a:	f7f8 fe0b 	bl	8005144 <sys_now>
 800c52e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	681a      	ldr	r2, [r3, #0]
 800c534:	4b0f      	ldr	r3, [pc, #60]	@ (800c574 <lwip_cyclic_timer+0x5c>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	4413      	add	r3, r2
 800c53a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c53c:	68fa      	ldr	r2, [r7, #12]
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	1ad3      	subs	r3, r2, r3
 800c542:	0fdb      	lsrs	r3, r3, #31
 800c544:	f003 0301 	and.w	r3, r3, #1
 800c548:	b2db      	uxtb	r3, r3
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d009      	beq.n	800c562 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	681a      	ldr	r2, [r3, #0]
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	4413      	add	r3, r2
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	4907      	ldr	r1, [pc, #28]	@ (800c578 <lwip_cyclic_timer+0x60>)
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7ff ff6e 	bl	800c43c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c560:	e004      	b.n	800c56c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c562:	687a      	ldr	r2, [r7, #4]
 800c564:	4904      	ldr	r1, [pc, #16]	@ (800c578 <lwip_cyclic_timer+0x60>)
 800c566:	68f8      	ldr	r0, [r7, #12]
 800c568:	f7ff ff68 	bl	800c43c <sys_timeout_abs>
}
 800c56c:	bf00      	nop
 800c56e:	3718      	adds	r7, #24
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}
 800c574:	20007cc8 	.word	0x20007cc8
 800c578:	0800c519 	.word	0x0800c519

0800c57c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b082      	sub	sp, #8
 800c580:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c582:	2301      	movs	r3, #1
 800c584:	607b      	str	r3, [r7, #4]
 800c586:	e00e      	b.n	800c5a6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c588:	4a0b      	ldr	r2, [pc, #44]	@ (800c5b8 <sys_timeouts_init+0x3c>)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	00db      	lsls	r3, r3, #3
 800c594:	4a08      	ldr	r2, [pc, #32]	@ (800c5b8 <sys_timeouts_init+0x3c>)
 800c596:	4413      	add	r3, r2
 800c598:	461a      	mov	r2, r3
 800c59a:	4908      	ldr	r1, [pc, #32]	@ (800c5bc <sys_timeouts_init+0x40>)
 800c59c:	f000 f810 	bl	800c5c0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	607b      	str	r3, [r7, #4]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2b02      	cmp	r3, #2
 800c5aa:	d9ed      	bls.n	800c588 <sys_timeouts_init+0xc>
  }
}
 800c5ac:	bf00      	nop
 800c5ae:	bf00      	nop
 800c5b0:	3708      	adds	r7, #8
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}
 800c5b6:	bf00      	nop
 800c5b8:	08012a74 	.word	0x08012a74
 800c5bc:	0800c519 	.word	0x0800c519

0800c5c0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b086      	sub	sp, #24
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	60f8      	str	r0, [r7, #12]
 800c5c8:	60b9      	str	r1, [r7, #8]
 800c5ca:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c5d2:	d306      	bcc.n	800c5e2 <sys_timeout+0x22>
 800c5d4:	4b0a      	ldr	r3, [pc, #40]	@ (800c600 <sys_timeout+0x40>)
 800c5d6:	f240 1229 	movw	r2, #297	@ 0x129
 800c5da:	490a      	ldr	r1, [pc, #40]	@ (800c604 <sys_timeout+0x44>)
 800c5dc:	480a      	ldr	r0, [pc, #40]	@ (800c608 <sys_timeout+0x48>)
 800c5de:	f002 fdd7 	bl	800f190 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c5e2:	f7f8 fdaf 	bl	8005144 <sys_now>
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	4413      	add	r3, r2
 800c5ec:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c5ee:	687a      	ldr	r2, [r7, #4]
 800c5f0:	68b9      	ldr	r1, [r7, #8]
 800c5f2:	6978      	ldr	r0, [r7, #20]
 800c5f4:	f7ff ff22 	bl	800c43c <sys_timeout_abs>
#endif
}
 800c5f8:	bf00      	nop
 800c5fa:	3718      	adds	r7, #24
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}
 800c600:	08011e88 	.word	0x08011e88
 800c604:	08011f24 	.word	0x08011f24
 800c608:	08011efc 	.word	0x08011efc

0800c60c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b084      	sub	sp, #16
 800c610:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c612:	f7f8 fd97 	bl	8005144 <sys_now>
 800c616:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c618:	4b1a      	ldr	r3, [pc, #104]	@ (800c684 <sys_check_timeouts+0x78>)
 800c61a:	781b      	ldrb	r3, [r3, #0]
 800c61c:	b2db      	uxtb	r3, r3
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d001      	beq.n	800c626 <sys_check_timeouts+0x1a>
 800c622:	f7f9 ffcb 	bl	80065bc <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c626:	4b18      	ldr	r3, [pc, #96]	@ (800c688 <sys_check_timeouts+0x7c>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d022      	beq.n	800c678 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	685b      	ldr	r3, [r3, #4]
 800c636:	68fa      	ldr	r2, [r7, #12]
 800c638:	1ad3      	subs	r3, r2, r3
 800c63a:	0fdb      	lsrs	r3, r3, #31
 800c63c:	f003 0301 	and.w	r3, r3, #1
 800c640:	b2db      	uxtb	r3, r3
 800c642:	2b00      	cmp	r3, #0
 800c644:	d11a      	bne.n	800c67c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	4a0f      	ldr	r2, [pc, #60]	@ (800c688 <sys_check_timeouts+0x7c>)
 800c64c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	689b      	ldr	r3, [r3, #8]
 800c652:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	68db      	ldr	r3, [r3, #12]
 800c658:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	4a0b      	ldr	r2, [pc, #44]	@ (800c68c <sys_check_timeouts+0x80>)
 800c660:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c662:	68b9      	ldr	r1, [r7, #8]
 800c664:	2006      	movs	r0, #6
 800c666:	f7f9 fc6d 	bl	8005f44 <memp_free>
    if (handler != NULL) {
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d0d3      	beq.n	800c618 <sys_check_timeouts+0xc>
      handler(arg);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6838      	ldr	r0, [r7, #0]
 800c674:	4798      	blx	r3
  do {
 800c676:	e7cf      	b.n	800c618 <sys_check_timeouts+0xc>
      return;
 800c678:	bf00      	nop
 800c67a:	e000      	b.n	800c67e <sys_check_timeouts+0x72>
      return;
 800c67c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c67e:	3710      	adds	r7, #16
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}
 800c684:	20007c71 	.word	0x20007c71
 800c688:	20007cc4 	.word	0x20007cc4
 800c68c:	20007cc8 	.word	0x20007cc8

0800c690 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c694:	f002 fc7c 	bl	800ef90 <rand>
 800c698:	4603      	mov	r3, r0
 800c69a:	b29b      	uxth	r3, r3
 800c69c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c6a0:	b29b      	uxth	r3, r3
 800c6a2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800c6a6:	b29a      	uxth	r2, r3
 800c6a8:	4b01      	ldr	r3, [pc, #4]	@ (800c6b0 <udp_init+0x20>)
 800c6aa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c6ac:	bf00      	nop
 800c6ae:	bd80      	pop	{r7, pc}
 800c6b0:	20000028 	.word	0x20000028

0800c6b4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b084      	sub	sp, #16
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	60f8      	str	r0, [r7, #12]
 800c6bc:	60b9      	str	r1, [r7, #8]
 800c6be:	4613      	mov	r3, r2
 800c6c0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d105      	bne.n	800c6d4 <udp_input_local_match+0x20>
 800c6c8:	4b27      	ldr	r3, [pc, #156]	@ (800c768 <udp_input_local_match+0xb4>)
 800c6ca:	2287      	movs	r2, #135	@ 0x87
 800c6cc:	4927      	ldr	r1, [pc, #156]	@ (800c76c <udp_input_local_match+0xb8>)
 800c6ce:	4828      	ldr	r0, [pc, #160]	@ (800c770 <udp_input_local_match+0xbc>)
 800c6d0:	f002 fd5e 	bl	800f190 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d105      	bne.n	800c6e6 <udp_input_local_match+0x32>
 800c6da:	4b23      	ldr	r3, [pc, #140]	@ (800c768 <udp_input_local_match+0xb4>)
 800c6dc:	2288      	movs	r2, #136	@ 0x88
 800c6de:	4925      	ldr	r1, [pc, #148]	@ (800c774 <udp_input_local_match+0xc0>)
 800c6e0:	4823      	ldr	r0, [pc, #140]	@ (800c770 <udp_input_local_match+0xbc>)
 800c6e2:	f002 fd55 	bl	800f190 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	7a1b      	ldrb	r3, [r3, #8]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d00b      	beq.n	800c706 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	7a1a      	ldrb	r2, [r3, #8]
 800c6f2:	4b21      	ldr	r3, [pc, #132]	@ (800c778 <udp_input_local_match+0xc4>)
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d001      	beq.n	800c706 <udp_input_local_match+0x52>
    return 0;
 800c702:	2300      	movs	r3, #0
 800c704:	e02b      	b.n	800c75e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c706:	79fb      	ldrb	r3, [r7, #7]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d018      	beq.n	800c73e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d013      	beq.n	800c73a <udp_input_local_match+0x86>
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d00f      	beq.n	800c73a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c71a:	4b17      	ldr	r3, [pc, #92]	@ (800c778 <udp_input_local_match+0xc4>)
 800c71c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c71e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c722:	d00a      	beq.n	800c73a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681a      	ldr	r2, [r3, #0]
 800c728:	4b13      	ldr	r3, [pc, #76]	@ (800c778 <udp_input_local_match+0xc4>)
 800c72a:	695b      	ldr	r3, [r3, #20]
 800c72c:	405a      	eors	r2, r3
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	3308      	adds	r3, #8
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c736:	2b00      	cmp	r3, #0
 800c738:	d110      	bne.n	800c75c <udp_input_local_match+0xa8>
          return 1;
 800c73a:	2301      	movs	r3, #1
 800c73c:	e00f      	b.n	800c75e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d009      	beq.n	800c758 <udp_input_local_match+0xa4>
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d005      	beq.n	800c758 <udp_input_local_match+0xa4>
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	681a      	ldr	r2, [r3, #0]
 800c750:	4b09      	ldr	r3, [pc, #36]	@ (800c778 <udp_input_local_match+0xc4>)
 800c752:	695b      	ldr	r3, [r3, #20]
 800c754:	429a      	cmp	r2, r3
 800c756:	d101      	bne.n	800c75c <udp_input_local_match+0xa8>
        return 1;
 800c758:	2301      	movs	r3, #1
 800c75a:	e000      	b.n	800c75e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c75c:	2300      	movs	r3, #0
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3710      	adds	r7, #16
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
 800c766:	bf00      	nop
 800c768:	08011f70 	.word	0x08011f70
 800c76c:	08011fa0 	.word	0x08011fa0
 800c770:	08011fc4 	.word	0x08011fc4
 800c774:	08011fec 	.word	0x08011fec
 800c778:	20004d58 	.word	0x20004d58

0800c77c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c77c:	b590      	push	{r4, r7, lr}
 800c77e:	b08d      	sub	sp, #52	@ 0x34
 800c780:	af02      	add	r7, sp, #8
 800c782:	6078      	str	r0, [r7, #4]
 800c784:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c786:	2300      	movs	r3, #0
 800c788:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d105      	bne.n	800c79c <udp_input+0x20>
 800c790:	4b7c      	ldr	r3, [pc, #496]	@ (800c984 <udp_input+0x208>)
 800c792:	22cf      	movs	r2, #207	@ 0xcf
 800c794:	497c      	ldr	r1, [pc, #496]	@ (800c988 <udp_input+0x20c>)
 800c796:	487d      	ldr	r0, [pc, #500]	@ (800c98c <udp_input+0x210>)
 800c798:	f002 fcfa 	bl	800f190 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d105      	bne.n	800c7ae <udp_input+0x32>
 800c7a2:	4b78      	ldr	r3, [pc, #480]	@ (800c984 <udp_input+0x208>)
 800c7a4:	22d0      	movs	r2, #208	@ 0xd0
 800c7a6:	497a      	ldr	r1, [pc, #488]	@ (800c990 <udp_input+0x214>)
 800c7a8:	4878      	ldr	r0, [pc, #480]	@ (800c98c <udp_input+0x210>)
 800c7aa:	f002 fcf1 	bl	800f190 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	895b      	ldrh	r3, [r3, #10]
 800c7b2:	2b07      	cmp	r3, #7
 800c7b4:	d803      	bhi.n	800c7be <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f7fa fa3a 	bl	8006c30 <pbuf_free>
    goto end;
 800c7bc:	e0de      	b.n	800c97c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	685b      	ldr	r3, [r3, #4]
 800c7c2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c7c4:	4b73      	ldr	r3, [pc, #460]	@ (800c994 <udp_input+0x218>)
 800c7c6:	695b      	ldr	r3, [r3, #20]
 800c7c8:	4a72      	ldr	r2, [pc, #456]	@ (800c994 <udp_input+0x218>)
 800c7ca:	6812      	ldr	r2, [r2, #0]
 800c7cc:	4611      	mov	r1, r2
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f001 fc88 	bl	800e0e4 <ip4_addr_isbroadcast_u32>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	881b      	ldrh	r3, [r3, #0]
 800c7dc:	b29b      	uxth	r3, r3
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f7f8 fecc 	bl	800557c <lwip_htons>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	885b      	ldrh	r3, [r3, #2]
 800c7ec:	b29b      	uxth	r3, r3
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f7f8 fec4 	bl	800557c <lwip_htons>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c800:	2300      	movs	r3, #0
 800c802:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c804:	4b64      	ldr	r3, [pc, #400]	@ (800c998 <udp_input+0x21c>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	627b      	str	r3, [r7, #36]	@ 0x24
 800c80a:	e054      	b.n	800c8b6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c80c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c80e:	8a5b      	ldrh	r3, [r3, #18]
 800c810:	89fa      	ldrh	r2, [r7, #14]
 800c812:	429a      	cmp	r2, r3
 800c814:	d14a      	bne.n	800c8ac <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c816:	7cfb      	ldrb	r3, [r7, #19]
 800c818:	461a      	mov	r2, r3
 800c81a:	6839      	ldr	r1, [r7, #0]
 800c81c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c81e:	f7ff ff49 	bl	800c6b4 <udp_input_local_match>
 800c822:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c824:	2b00      	cmp	r3, #0
 800c826:	d041      	beq.n	800c8ac <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c82a:	7c1b      	ldrb	r3, [r3, #16]
 800c82c:	f003 0304 	and.w	r3, r3, #4
 800c830:	2b00      	cmp	r3, #0
 800c832:	d11d      	bne.n	800c870 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d102      	bne.n	800c840 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c83c:	61fb      	str	r3, [r7, #28]
 800c83e:	e017      	b.n	800c870 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c840:	7cfb      	ldrb	r3, [r7, #19]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d014      	beq.n	800c870 <udp_input+0xf4>
 800c846:	4b53      	ldr	r3, [pc, #332]	@ (800c994 <udp_input+0x218>)
 800c848:	695b      	ldr	r3, [r3, #20]
 800c84a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c84e:	d10f      	bne.n	800c870 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c850:	69fb      	ldr	r3, [r7, #28]
 800c852:	681a      	ldr	r2, [r3, #0]
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	3304      	adds	r3, #4
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d008      	beq.n	800c870 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c860:	681a      	ldr	r2, [r3, #0]
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	3304      	adds	r3, #4
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d101      	bne.n	800c870 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c86e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c872:	8a9b      	ldrh	r3, [r3, #20]
 800c874:	8a3a      	ldrh	r2, [r7, #16]
 800c876:	429a      	cmp	r2, r3
 800c878:	d118      	bne.n	800c8ac <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c87c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d005      	beq.n	800c88e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c884:	685a      	ldr	r2, [r3, #4]
 800c886:	4b43      	ldr	r3, [pc, #268]	@ (800c994 <udp_input+0x218>)
 800c888:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d10e      	bne.n	800c8ac <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c88e:	6a3b      	ldr	r3, [r7, #32]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d014      	beq.n	800c8be <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c896:	68da      	ldr	r2, [r3, #12]
 800c898:	6a3b      	ldr	r3, [r7, #32]
 800c89a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c89c:	4b3e      	ldr	r3, [pc, #248]	@ (800c998 <udp_input+0x21c>)
 800c89e:	681a      	ldr	r2, [r3, #0]
 800c8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c8a4:	4a3c      	ldr	r2, [pc, #240]	@ (800c998 <udp_input+0x21c>)
 800c8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c8aa:	e008      	b.n	800c8be <udp_input+0x142>
      }
    }

    prev = pcb;
 800c8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ae:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b2:	68db      	ldr	r3, [r3, #12]
 800c8b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c8b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d1a7      	bne.n	800c80c <udp_input+0x90>
 800c8bc:	e000      	b.n	800c8c0 <udp_input+0x144>
        break;
 800c8be:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c8c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d101      	bne.n	800c8ca <udp_input+0x14e>
    pcb = uncon_pcb;
 800c8c6:	69fb      	ldr	r3, [r7, #28]
 800c8c8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d002      	beq.n	800c8d6 <udp_input+0x15a>
    for_us = 1;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	76fb      	strb	r3, [r7, #27]
 800c8d4:	e00a      	b.n	800c8ec <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	3304      	adds	r3, #4
 800c8da:	681a      	ldr	r2, [r3, #0]
 800c8dc:	4b2d      	ldr	r3, [pc, #180]	@ (800c994 <udp_input+0x218>)
 800c8de:	695b      	ldr	r3, [r3, #20]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	bf0c      	ite	eq
 800c8e4:	2301      	moveq	r3, #1
 800c8e6:	2300      	movne	r3, #0
 800c8e8:	b2db      	uxtb	r3, r3
 800c8ea:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c8ec:	7efb      	ldrb	r3, [r7, #27]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d041      	beq.n	800c976 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c8f2:	2108      	movs	r1, #8
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f7fa f915 	bl	8006b24 <pbuf_remove_header>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d00a      	beq.n	800c916 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c900:	4b20      	ldr	r3, [pc, #128]	@ (800c984 <udp_input+0x208>)
 800c902:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800c906:	4925      	ldr	r1, [pc, #148]	@ (800c99c <udp_input+0x220>)
 800c908:	4820      	ldr	r0, [pc, #128]	@ (800c98c <udp_input+0x210>)
 800c90a:	f002 fc41 	bl	800f190 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f7fa f98e 	bl	8006c30 <pbuf_free>
      goto end;
 800c914:	e032      	b.n	800c97c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d012      	beq.n	800c942 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c91e:	699b      	ldr	r3, [r3, #24]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d00a      	beq.n	800c93a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c926:	699c      	ldr	r4, [r3, #24]
 800c928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c92a:	69d8      	ldr	r0, [r3, #28]
 800c92c:	8a3b      	ldrh	r3, [r7, #16]
 800c92e:	9300      	str	r3, [sp, #0]
 800c930:	4b1b      	ldr	r3, [pc, #108]	@ (800c9a0 <udp_input+0x224>)
 800c932:	687a      	ldr	r2, [r7, #4]
 800c934:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c936:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c938:	e021      	b.n	800c97e <udp_input+0x202>
        pbuf_free(p);
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f7fa f978 	bl	8006c30 <pbuf_free>
        goto end;
 800c940:	e01c      	b.n	800c97c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c942:	7cfb      	ldrb	r3, [r7, #19]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d112      	bne.n	800c96e <udp_input+0x1f2>
 800c948:	4b12      	ldr	r3, [pc, #72]	@ (800c994 <udp_input+0x218>)
 800c94a:	695b      	ldr	r3, [r3, #20]
 800c94c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c950:	2be0      	cmp	r3, #224	@ 0xe0
 800c952:	d00c      	beq.n	800c96e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c954:	4b0f      	ldr	r3, [pc, #60]	@ (800c994 <udp_input+0x218>)
 800c956:	899b      	ldrh	r3, [r3, #12]
 800c958:	3308      	adds	r3, #8
 800c95a:	b29b      	uxth	r3, r3
 800c95c:	b21b      	sxth	r3, r3
 800c95e:	4619      	mov	r1, r3
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f7fa f952 	bl	8006c0a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c966:	2103      	movs	r1, #3
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f001 f89b 	bl	800daa4 <icmp_dest_unreach>
      pbuf_free(p);
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f7fa f95e 	bl	8006c30 <pbuf_free>
  return;
 800c974:	e003      	b.n	800c97e <udp_input+0x202>
    pbuf_free(p);
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f7fa f95a 	bl	8006c30 <pbuf_free>
  return;
 800c97c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c97e:	372c      	adds	r7, #44	@ 0x2c
 800c980:	46bd      	mov	sp, r7
 800c982:	bd90      	pop	{r4, r7, pc}
 800c984:	08011f70 	.word	0x08011f70
 800c988:	08012014 	.word	0x08012014
 800c98c:	08011fc4 	.word	0x08011fc4
 800c990:	0801202c 	.word	0x0801202c
 800c994:	20004d58 	.word	0x20004d58
 800c998:	20007cd0 	.word	0x20007cd0
 800c99c:	08012048 	.word	0x08012048
 800c9a0:	20004d68 	.word	0x20004d68

0800c9a4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b085      	sub	sp, #20
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d01e      	beq.n	800c9f2 <udp_netif_ip_addr_changed+0x4e>
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d01a      	beq.n	800c9f2 <udp_netif_ip_addr_changed+0x4e>
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d017      	beq.n	800c9f2 <udp_netif_ip_addr_changed+0x4e>
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d013      	beq.n	800c9f2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c9ca:	4b0d      	ldr	r3, [pc, #52]	@ (800ca00 <udp_netif_ip_addr_changed+0x5c>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	60fb      	str	r3, [r7, #12]
 800c9d0:	e00c      	b.n	800c9ec <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	681a      	ldr	r2, [r3, #0]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d103      	bne.n	800c9e6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	681a      	ldr	r2, [r3, #0]
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	68db      	ldr	r3, [r3, #12]
 800c9ea:	60fb      	str	r3, [r7, #12]
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d1ef      	bne.n	800c9d2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c9f2:	bf00      	nop
 800c9f4:	3714      	adds	r7, #20
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr
 800c9fe:	bf00      	nop
 800ca00:	20007cd0 	.word	0x20007cd0

0800ca04 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b082      	sub	sp, #8
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ca0c:	4915      	ldr	r1, [pc, #84]	@ (800ca64 <etharp_free_entry+0x60>)
 800ca0e:	687a      	ldr	r2, [r7, #4]
 800ca10:	4613      	mov	r3, r2
 800ca12:	005b      	lsls	r3, r3, #1
 800ca14:	4413      	add	r3, r2
 800ca16:	00db      	lsls	r3, r3, #3
 800ca18:	440b      	add	r3, r1
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d013      	beq.n	800ca48 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ca20:	4910      	ldr	r1, [pc, #64]	@ (800ca64 <etharp_free_entry+0x60>)
 800ca22:	687a      	ldr	r2, [r7, #4]
 800ca24:	4613      	mov	r3, r2
 800ca26:	005b      	lsls	r3, r3, #1
 800ca28:	4413      	add	r3, r2
 800ca2a:	00db      	lsls	r3, r3, #3
 800ca2c:	440b      	add	r3, r1
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	4618      	mov	r0, r3
 800ca32:	f7fa f8fd 	bl	8006c30 <pbuf_free>
    arp_table[i].q = NULL;
 800ca36:	490b      	ldr	r1, [pc, #44]	@ (800ca64 <etharp_free_entry+0x60>)
 800ca38:	687a      	ldr	r2, [r7, #4]
 800ca3a:	4613      	mov	r3, r2
 800ca3c:	005b      	lsls	r3, r3, #1
 800ca3e:	4413      	add	r3, r2
 800ca40:	00db      	lsls	r3, r3, #3
 800ca42:	440b      	add	r3, r1
 800ca44:	2200      	movs	r2, #0
 800ca46:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ca48:	4906      	ldr	r1, [pc, #24]	@ (800ca64 <etharp_free_entry+0x60>)
 800ca4a:	687a      	ldr	r2, [r7, #4]
 800ca4c:	4613      	mov	r3, r2
 800ca4e:	005b      	lsls	r3, r3, #1
 800ca50:	4413      	add	r3, r2
 800ca52:	00db      	lsls	r3, r3, #3
 800ca54:	440b      	add	r3, r1
 800ca56:	3314      	adds	r3, #20
 800ca58:	2200      	movs	r2, #0
 800ca5a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ca5c:	bf00      	nop
 800ca5e:	3708      	adds	r7, #8
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}
 800ca64:	20007cd4 	.word	0x20007cd4

0800ca68 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ca6e:	2300      	movs	r3, #0
 800ca70:	607b      	str	r3, [r7, #4]
 800ca72:	e096      	b.n	800cba2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800ca74:	494f      	ldr	r1, [pc, #316]	@ (800cbb4 <etharp_tmr+0x14c>)
 800ca76:	687a      	ldr	r2, [r7, #4]
 800ca78:	4613      	mov	r3, r2
 800ca7a:	005b      	lsls	r3, r3, #1
 800ca7c:	4413      	add	r3, r2
 800ca7e:	00db      	lsls	r3, r3, #3
 800ca80:	440b      	add	r3, r1
 800ca82:	3314      	adds	r3, #20
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800ca88:	78fb      	ldrb	r3, [r7, #3]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	f000 8086 	beq.w	800cb9c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800ca90:	4948      	ldr	r1, [pc, #288]	@ (800cbb4 <etharp_tmr+0x14c>)
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	4613      	mov	r3, r2
 800ca96:	005b      	lsls	r3, r3, #1
 800ca98:	4413      	add	r3, r2
 800ca9a:	00db      	lsls	r3, r3, #3
 800ca9c:	440b      	add	r3, r1
 800ca9e:	3312      	adds	r3, #18
 800caa0:	881b      	ldrh	r3, [r3, #0]
 800caa2:	3301      	adds	r3, #1
 800caa4:	b298      	uxth	r0, r3
 800caa6:	4943      	ldr	r1, [pc, #268]	@ (800cbb4 <etharp_tmr+0x14c>)
 800caa8:	687a      	ldr	r2, [r7, #4]
 800caaa:	4613      	mov	r3, r2
 800caac:	005b      	lsls	r3, r3, #1
 800caae:	4413      	add	r3, r2
 800cab0:	00db      	lsls	r3, r3, #3
 800cab2:	440b      	add	r3, r1
 800cab4:	3312      	adds	r3, #18
 800cab6:	4602      	mov	r2, r0
 800cab8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800caba:	493e      	ldr	r1, [pc, #248]	@ (800cbb4 <etharp_tmr+0x14c>)
 800cabc:	687a      	ldr	r2, [r7, #4]
 800cabe:	4613      	mov	r3, r2
 800cac0:	005b      	lsls	r3, r3, #1
 800cac2:	4413      	add	r3, r2
 800cac4:	00db      	lsls	r3, r3, #3
 800cac6:	440b      	add	r3, r1
 800cac8:	3312      	adds	r3, #18
 800caca:	881b      	ldrh	r3, [r3, #0]
 800cacc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800cad0:	d215      	bcs.n	800cafe <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cad2:	4938      	ldr	r1, [pc, #224]	@ (800cbb4 <etharp_tmr+0x14c>)
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	4613      	mov	r3, r2
 800cad8:	005b      	lsls	r3, r3, #1
 800cada:	4413      	add	r3, r2
 800cadc:	00db      	lsls	r3, r3, #3
 800cade:	440b      	add	r3, r1
 800cae0:	3314      	adds	r3, #20
 800cae2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	d10e      	bne.n	800cb06 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800cae8:	4932      	ldr	r1, [pc, #200]	@ (800cbb4 <etharp_tmr+0x14c>)
 800caea:	687a      	ldr	r2, [r7, #4]
 800caec:	4613      	mov	r3, r2
 800caee:	005b      	lsls	r3, r3, #1
 800caf0:	4413      	add	r3, r2
 800caf2:	00db      	lsls	r3, r3, #3
 800caf4:	440b      	add	r3, r1
 800caf6:	3312      	adds	r3, #18
 800caf8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cafa:	2b04      	cmp	r3, #4
 800cafc:	d903      	bls.n	800cb06 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f7ff ff80 	bl	800ca04 <etharp_free_entry>
 800cb04:	e04a      	b.n	800cb9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800cb06:	492b      	ldr	r1, [pc, #172]	@ (800cbb4 <etharp_tmr+0x14c>)
 800cb08:	687a      	ldr	r2, [r7, #4]
 800cb0a:	4613      	mov	r3, r2
 800cb0c:	005b      	lsls	r3, r3, #1
 800cb0e:	4413      	add	r3, r2
 800cb10:	00db      	lsls	r3, r3, #3
 800cb12:	440b      	add	r3, r1
 800cb14:	3314      	adds	r3, #20
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	2b03      	cmp	r3, #3
 800cb1a:	d10a      	bne.n	800cb32 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800cb1c:	4925      	ldr	r1, [pc, #148]	@ (800cbb4 <etharp_tmr+0x14c>)
 800cb1e:	687a      	ldr	r2, [r7, #4]
 800cb20:	4613      	mov	r3, r2
 800cb22:	005b      	lsls	r3, r3, #1
 800cb24:	4413      	add	r3, r2
 800cb26:	00db      	lsls	r3, r3, #3
 800cb28:	440b      	add	r3, r1
 800cb2a:	3314      	adds	r3, #20
 800cb2c:	2204      	movs	r2, #4
 800cb2e:	701a      	strb	r2, [r3, #0]
 800cb30:	e034      	b.n	800cb9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800cb32:	4920      	ldr	r1, [pc, #128]	@ (800cbb4 <etharp_tmr+0x14c>)
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	4613      	mov	r3, r2
 800cb38:	005b      	lsls	r3, r3, #1
 800cb3a:	4413      	add	r3, r2
 800cb3c:	00db      	lsls	r3, r3, #3
 800cb3e:	440b      	add	r3, r1
 800cb40:	3314      	adds	r3, #20
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	2b04      	cmp	r3, #4
 800cb46:	d10a      	bne.n	800cb5e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800cb48:	491a      	ldr	r1, [pc, #104]	@ (800cbb4 <etharp_tmr+0x14c>)
 800cb4a:	687a      	ldr	r2, [r7, #4]
 800cb4c:	4613      	mov	r3, r2
 800cb4e:	005b      	lsls	r3, r3, #1
 800cb50:	4413      	add	r3, r2
 800cb52:	00db      	lsls	r3, r3, #3
 800cb54:	440b      	add	r3, r1
 800cb56:	3314      	adds	r3, #20
 800cb58:	2202      	movs	r2, #2
 800cb5a:	701a      	strb	r2, [r3, #0]
 800cb5c:	e01e      	b.n	800cb9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cb5e:	4915      	ldr	r1, [pc, #84]	@ (800cbb4 <etharp_tmr+0x14c>)
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	4613      	mov	r3, r2
 800cb64:	005b      	lsls	r3, r3, #1
 800cb66:	4413      	add	r3, r2
 800cb68:	00db      	lsls	r3, r3, #3
 800cb6a:	440b      	add	r3, r1
 800cb6c:	3314      	adds	r3, #20
 800cb6e:	781b      	ldrb	r3, [r3, #0]
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d113      	bne.n	800cb9c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800cb74:	490f      	ldr	r1, [pc, #60]	@ (800cbb4 <etharp_tmr+0x14c>)
 800cb76:	687a      	ldr	r2, [r7, #4]
 800cb78:	4613      	mov	r3, r2
 800cb7a:	005b      	lsls	r3, r3, #1
 800cb7c:	4413      	add	r3, r2
 800cb7e:	00db      	lsls	r3, r3, #3
 800cb80:	440b      	add	r3, r1
 800cb82:	3308      	adds	r3, #8
 800cb84:	6818      	ldr	r0, [r3, #0]
 800cb86:	687a      	ldr	r2, [r7, #4]
 800cb88:	4613      	mov	r3, r2
 800cb8a:	005b      	lsls	r3, r3, #1
 800cb8c:	4413      	add	r3, r2
 800cb8e:	00db      	lsls	r3, r3, #3
 800cb90:	4a08      	ldr	r2, [pc, #32]	@ (800cbb4 <etharp_tmr+0x14c>)
 800cb92:	4413      	add	r3, r2
 800cb94:	3304      	adds	r3, #4
 800cb96:	4619      	mov	r1, r3
 800cb98:	f000 fe6e 	bl	800d878 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	3301      	adds	r3, #1
 800cba0:	607b      	str	r3, [r7, #4]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2b09      	cmp	r3, #9
 800cba6:	f77f af65 	ble.w	800ca74 <etharp_tmr+0xc>
      }
    }
  }
}
 800cbaa:	bf00      	nop
 800cbac:	bf00      	nop
 800cbae:	3708      	adds	r7, #8
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}
 800cbb4:	20007cd4 	.word	0x20007cd4

0800cbb8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b08a      	sub	sp, #40	@ 0x28
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	60f8      	str	r0, [r7, #12]
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	607a      	str	r2, [r7, #4]
 800cbc4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800cbc6:	230a      	movs	r3, #10
 800cbc8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800cbca:	230a      	movs	r3, #10
 800cbcc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800cbce:	230a      	movs	r3, #10
 800cbd0:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800cbd6:	230a      	movs	r3, #10
 800cbd8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	83bb      	strh	r3, [r7, #28]
 800cbde:	2300      	movs	r3, #0
 800cbe0:	837b      	strh	r3, [r7, #26]
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	843b      	strh	r3, [r7, #32]
 800cbea:	e0ae      	b.n	800cd4a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800cbec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cbf0:	49a6      	ldr	r1, [pc, #664]	@ (800ce8c <etharp_find_entry+0x2d4>)
 800cbf2:	4613      	mov	r3, r2
 800cbf4:	005b      	lsls	r3, r3, #1
 800cbf6:	4413      	add	r3, r2
 800cbf8:	00db      	lsls	r3, r3, #3
 800cbfa:	440b      	add	r3, r1
 800cbfc:	3314      	adds	r3, #20
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800cc02:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800cc06:	2b0a      	cmp	r3, #10
 800cc08:	d105      	bne.n	800cc16 <etharp_find_entry+0x5e>
 800cc0a:	7dfb      	ldrb	r3, [r7, #23]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d102      	bne.n	800cc16 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800cc10:	8c3b      	ldrh	r3, [r7, #32]
 800cc12:	847b      	strh	r3, [r7, #34]	@ 0x22
 800cc14:	e095      	b.n	800cd42 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800cc16:	7dfb      	ldrb	r3, [r7, #23]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	f000 8092 	beq.w	800cd42 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800cc1e:	7dfb      	ldrb	r3, [r7, #23]
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d009      	beq.n	800cc38 <etharp_find_entry+0x80>
 800cc24:	7dfb      	ldrb	r3, [r7, #23]
 800cc26:	2b01      	cmp	r3, #1
 800cc28:	d806      	bhi.n	800cc38 <etharp_find_entry+0x80>
 800cc2a:	4b99      	ldr	r3, [pc, #612]	@ (800ce90 <etharp_find_entry+0x2d8>)
 800cc2c:	f240 1223 	movw	r2, #291	@ 0x123
 800cc30:	4998      	ldr	r1, [pc, #608]	@ (800ce94 <etharp_find_entry+0x2dc>)
 800cc32:	4899      	ldr	r0, [pc, #612]	@ (800ce98 <etharp_find_entry+0x2e0>)
 800cc34:	f002 faac 	bl	800f190 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d020      	beq.n	800cc80 <etharp_find_entry+0xc8>
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	6819      	ldr	r1, [r3, #0]
 800cc42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc46:	4891      	ldr	r0, [pc, #580]	@ (800ce8c <etharp_find_entry+0x2d4>)
 800cc48:	4613      	mov	r3, r2
 800cc4a:	005b      	lsls	r3, r3, #1
 800cc4c:	4413      	add	r3, r2
 800cc4e:	00db      	lsls	r3, r3, #3
 800cc50:	4403      	add	r3, r0
 800cc52:	3304      	adds	r3, #4
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	4299      	cmp	r1, r3
 800cc58:	d112      	bne.n	800cc80 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d00c      	beq.n	800cc7a <etharp_find_entry+0xc2>
 800cc60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc64:	4989      	ldr	r1, [pc, #548]	@ (800ce8c <etharp_find_entry+0x2d4>)
 800cc66:	4613      	mov	r3, r2
 800cc68:	005b      	lsls	r3, r3, #1
 800cc6a:	4413      	add	r3, r2
 800cc6c:	00db      	lsls	r3, r3, #3
 800cc6e:	440b      	add	r3, r1
 800cc70:	3308      	adds	r3, #8
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d102      	bne.n	800cc80 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800cc7a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cc7e:	e100      	b.n	800ce82 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800cc80:	7dfb      	ldrb	r3, [r7, #23]
 800cc82:	2b01      	cmp	r3, #1
 800cc84:	d140      	bne.n	800cd08 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800cc86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc8a:	4980      	ldr	r1, [pc, #512]	@ (800ce8c <etharp_find_entry+0x2d4>)
 800cc8c:	4613      	mov	r3, r2
 800cc8e:	005b      	lsls	r3, r3, #1
 800cc90:	4413      	add	r3, r2
 800cc92:	00db      	lsls	r3, r3, #3
 800cc94:	440b      	add	r3, r1
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d01a      	beq.n	800ccd2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800cc9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cca0:	497a      	ldr	r1, [pc, #488]	@ (800ce8c <etharp_find_entry+0x2d4>)
 800cca2:	4613      	mov	r3, r2
 800cca4:	005b      	lsls	r3, r3, #1
 800cca6:	4413      	add	r3, r2
 800cca8:	00db      	lsls	r3, r3, #3
 800ccaa:	440b      	add	r3, r1
 800ccac:	3312      	adds	r3, #18
 800ccae:	881b      	ldrh	r3, [r3, #0]
 800ccb0:	8bba      	ldrh	r2, [r7, #28]
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d845      	bhi.n	800cd42 <etharp_find_entry+0x18a>
            old_queue = i;
 800ccb6:	8c3b      	ldrh	r3, [r7, #32]
 800ccb8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800ccba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ccbe:	4973      	ldr	r1, [pc, #460]	@ (800ce8c <etharp_find_entry+0x2d4>)
 800ccc0:	4613      	mov	r3, r2
 800ccc2:	005b      	lsls	r3, r3, #1
 800ccc4:	4413      	add	r3, r2
 800ccc6:	00db      	lsls	r3, r3, #3
 800ccc8:	440b      	add	r3, r1
 800ccca:	3312      	adds	r3, #18
 800cccc:	881b      	ldrh	r3, [r3, #0]
 800ccce:	83bb      	strh	r3, [r7, #28]
 800ccd0:	e037      	b.n	800cd42 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ccd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ccd6:	496d      	ldr	r1, [pc, #436]	@ (800ce8c <etharp_find_entry+0x2d4>)
 800ccd8:	4613      	mov	r3, r2
 800ccda:	005b      	lsls	r3, r3, #1
 800ccdc:	4413      	add	r3, r2
 800ccde:	00db      	lsls	r3, r3, #3
 800cce0:	440b      	add	r3, r1
 800cce2:	3312      	adds	r3, #18
 800cce4:	881b      	ldrh	r3, [r3, #0]
 800cce6:	8b7a      	ldrh	r2, [r7, #26]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d82a      	bhi.n	800cd42 <etharp_find_entry+0x18a>
            old_pending = i;
 800ccec:	8c3b      	ldrh	r3, [r7, #32]
 800ccee:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800ccf0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ccf4:	4965      	ldr	r1, [pc, #404]	@ (800ce8c <etharp_find_entry+0x2d4>)
 800ccf6:	4613      	mov	r3, r2
 800ccf8:	005b      	lsls	r3, r3, #1
 800ccfa:	4413      	add	r3, r2
 800ccfc:	00db      	lsls	r3, r3, #3
 800ccfe:	440b      	add	r3, r1
 800cd00:	3312      	adds	r3, #18
 800cd02:	881b      	ldrh	r3, [r3, #0]
 800cd04:	837b      	strh	r3, [r7, #26]
 800cd06:	e01c      	b.n	800cd42 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800cd08:	7dfb      	ldrb	r3, [r7, #23]
 800cd0a:	2b01      	cmp	r3, #1
 800cd0c:	d919      	bls.n	800cd42 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800cd0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd12:	495e      	ldr	r1, [pc, #376]	@ (800ce8c <etharp_find_entry+0x2d4>)
 800cd14:	4613      	mov	r3, r2
 800cd16:	005b      	lsls	r3, r3, #1
 800cd18:	4413      	add	r3, r2
 800cd1a:	00db      	lsls	r3, r3, #3
 800cd1c:	440b      	add	r3, r1
 800cd1e:	3312      	adds	r3, #18
 800cd20:	881b      	ldrh	r3, [r3, #0]
 800cd22:	8b3a      	ldrh	r2, [r7, #24]
 800cd24:	429a      	cmp	r2, r3
 800cd26:	d80c      	bhi.n	800cd42 <etharp_find_entry+0x18a>
            old_stable = i;
 800cd28:	8c3b      	ldrh	r3, [r7, #32]
 800cd2a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800cd2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd30:	4956      	ldr	r1, [pc, #344]	@ (800ce8c <etharp_find_entry+0x2d4>)
 800cd32:	4613      	mov	r3, r2
 800cd34:	005b      	lsls	r3, r3, #1
 800cd36:	4413      	add	r3, r2
 800cd38:	00db      	lsls	r3, r3, #3
 800cd3a:	440b      	add	r3, r1
 800cd3c:	3312      	adds	r3, #18
 800cd3e:	881b      	ldrh	r3, [r3, #0]
 800cd40:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cd42:	8c3b      	ldrh	r3, [r7, #32]
 800cd44:	3301      	adds	r3, #1
 800cd46:	b29b      	uxth	r3, r3
 800cd48:	843b      	strh	r3, [r7, #32]
 800cd4a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cd4e:	2b09      	cmp	r3, #9
 800cd50:	f77f af4c 	ble.w	800cbec <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800cd54:	7afb      	ldrb	r3, [r7, #11]
 800cd56:	f003 0302 	and.w	r3, r3, #2
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d108      	bne.n	800cd70 <etharp_find_entry+0x1b8>
 800cd5e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800cd62:	2b0a      	cmp	r3, #10
 800cd64:	d107      	bne.n	800cd76 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800cd66:	7afb      	ldrb	r3, [r7, #11]
 800cd68:	f003 0301 	and.w	r3, r3, #1
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d102      	bne.n	800cd76 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800cd70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cd74:	e085      	b.n	800ce82 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800cd76:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800cd7a:	2b09      	cmp	r3, #9
 800cd7c:	dc02      	bgt.n	800cd84 <etharp_find_entry+0x1cc>
    i = empty;
 800cd7e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cd80:	843b      	strh	r3, [r7, #32]
 800cd82:	e039      	b.n	800cdf8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800cd84:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800cd88:	2b09      	cmp	r3, #9
 800cd8a:	dc14      	bgt.n	800cdb6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800cd8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cd8e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800cd90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd94:	493d      	ldr	r1, [pc, #244]	@ (800ce8c <etharp_find_entry+0x2d4>)
 800cd96:	4613      	mov	r3, r2
 800cd98:	005b      	lsls	r3, r3, #1
 800cd9a:	4413      	add	r3, r2
 800cd9c:	00db      	lsls	r3, r3, #3
 800cd9e:	440b      	add	r3, r1
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d018      	beq.n	800cdd8 <etharp_find_entry+0x220>
 800cda6:	4b3a      	ldr	r3, [pc, #232]	@ (800ce90 <etharp_find_entry+0x2d8>)
 800cda8:	f240 126d 	movw	r2, #365	@ 0x16d
 800cdac:	493b      	ldr	r1, [pc, #236]	@ (800ce9c <etharp_find_entry+0x2e4>)
 800cdae:	483a      	ldr	r0, [pc, #232]	@ (800ce98 <etharp_find_entry+0x2e0>)
 800cdb0:	f002 f9ee 	bl	800f190 <iprintf>
 800cdb4:	e010      	b.n	800cdd8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800cdb6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800cdba:	2b09      	cmp	r3, #9
 800cdbc:	dc02      	bgt.n	800cdc4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800cdbe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cdc0:	843b      	strh	r3, [r7, #32]
 800cdc2:	e009      	b.n	800cdd8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800cdc4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cdc8:	2b09      	cmp	r3, #9
 800cdca:	dc02      	bgt.n	800cdd2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800cdcc:	8bfb      	ldrh	r3, [r7, #30]
 800cdce:	843b      	strh	r3, [r7, #32]
 800cdd0:	e002      	b.n	800cdd8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800cdd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cdd6:	e054      	b.n	800ce82 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cdd8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cddc:	2b09      	cmp	r3, #9
 800cdde:	dd06      	ble.n	800cdee <etharp_find_entry+0x236>
 800cde0:	4b2b      	ldr	r3, [pc, #172]	@ (800ce90 <etharp_find_entry+0x2d8>)
 800cde2:	f240 127f 	movw	r2, #383	@ 0x17f
 800cde6:	492e      	ldr	r1, [pc, #184]	@ (800cea0 <etharp_find_entry+0x2e8>)
 800cde8:	482b      	ldr	r0, [pc, #172]	@ (800ce98 <etharp_find_entry+0x2e0>)
 800cdea:	f002 f9d1 	bl	800f190 <iprintf>
    etharp_free_entry(i);
 800cdee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f7ff fe06 	bl	800ca04 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cdf8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cdfc:	2b09      	cmp	r3, #9
 800cdfe:	dd06      	ble.n	800ce0e <etharp_find_entry+0x256>
 800ce00:	4b23      	ldr	r3, [pc, #140]	@ (800ce90 <etharp_find_entry+0x2d8>)
 800ce02:	f240 1283 	movw	r2, #387	@ 0x183
 800ce06:	4926      	ldr	r1, [pc, #152]	@ (800cea0 <etharp_find_entry+0x2e8>)
 800ce08:	4823      	ldr	r0, [pc, #140]	@ (800ce98 <etharp_find_entry+0x2e0>)
 800ce0a:	f002 f9c1 	bl	800f190 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ce0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce12:	491e      	ldr	r1, [pc, #120]	@ (800ce8c <etharp_find_entry+0x2d4>)
 800ce14:	4613      	mov	r3, r2
 800ce16:	005b      	lsls	r3, r3, #1
 800ce18:	4413      	add	r3, r2
 800ce1a:	00db      	lsls	r3, r3, #3
 800ce1c:	440b      	add	r3, r1
 800ce1e:	3314      	adds	r3, #20
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d006      	beq.n	800ce34 <etharp_find_entry+0x27c>
 800ce26:	4b1a      	ldr	r3, [pc, #104]	@ (800ce90 <etharp_find_entry+0x2d8>)
 800ce28:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800ce2c:	491d      	ldr	r1, [pc, #116]	@ (800cea4 <etharp_find_entry+0x2ec>)
 800ce2e:	481a      	ldr	r0, [pc, #104]	@ (800ce98 <etharp_find_entry+0x2e0>)
 800ce30:	f002 f9ae 	bl	800f190 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d00b      	beq.n	800ce52 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ce3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	6819      	ldr	r1, [r3, #0]
 800ce42:	4812      	ldr	r0, [pc, #72]	@ (800ce8c <etharp_find_entry+0x2d4>)
 800ce44:	4613      	mov	r3, r2
 800ce46:	005b      	lsls	r3, r3, #1
 800ce48:	4413      	add	r3, r2
 800ce4a:	00db      	lsls	r3, r3, #3
 800ce4c:	4403      	add	r3, r0
 800ce4e:	3304      	adds	r3, #4
 800ce50:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ce52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce56:	490d      	ldr	r1, [pc, #52]	@ (800ce8c <etharp_find_entry+0x2d4>)
 800ce58:	4613      	mov	r3, r2
 800ce5a:	005b      	lsls	r3, r3, #1
 800ce5c:	4413      	add	r3, r2
 800ce5e:	00db      	lsls	r3, r3, #3
 800ce60:	440b      	add	r3, r1
 800ce62:	3312      	adds	r3, #18
 800ce64:	2200      	movs	r2, #0
 800ce66:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800ce68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce6c:	4907      	ldr	r1, [pc, #28]	@ (800ce8c <etharp_find_entry+0x2d4>)
 800ce6e:	4613      	mov	r3, r2
 800ce70:	005b      	lsls	r3, r3, #1
 800ce72:	4413      	add	r3, r2
 800ce74:	00db      	lsls	r3, r3, #3
 800ce76:	440b      	add	r3, r1
 800ce78:	3308      	adds	r3, #8
 800ce7a:	687a      	ldr	r2, [r7, #4]
 800ce7c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800ce7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3728      	adds	r7, #40	@ 0x28
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	bf00      	nop
 800ce8c:	20007cd4 	.word	0x20007cd4
 800ce90:	080122d4 	.word	0x080122d4
 800ce94:	0801230c 	.word	0x0801230c
 800ce98:	0801234c 	.word	0x0801234c
 800ce9c:	08012374 	.word	0x08012374
 800cea0:	0801238c 	.word	0x0801238c
 800cea4:	080123a0 	.word	0x080123a0

0800cea8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b088      	sub	sp, #32
 800ceac:	af02      	add	r7, sp, #8
 800ceae:	60f8      	str	r0, [r7, #12]
 800ceb0:	60b9      	str	r1, [r7, #8]
 800ceb2:	607a      	str	r2, [r7, #4]
 800ceb4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cebc:	2b06      	cmp	r3, #6
 800cebe:	d006      	beq.n	800cece <etharp_update_arp_entry+0x26>
 800cec0:	4b48      	ldr	r3, [pc, #288]	@ (800cfe4 <etharp_update_arp_entry+0x13c>)
 800cec2:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800cec6:	4948      	ldr	r1, [pc, #288]	@ (800cfe8 <etharp_update_arp_entry+0x140>)
 800cec8:	4848      	ldr	r0, [pc, #288]	@ (800cfec <etharp_update_arp_entry+0x144>)
 800ceca:	f002 f961 	bl	800f190 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d012      	beq.n	800cefa <etharp_update_arp_entry+0x52>
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d00e      	beq.n	800cefa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	68f9      	ldr	r1, [r7, #12]
 800cee2:	4618      	mov	r0, r3
 800cee4:	f001 f8fe 	bl	800e0e4 <ip4_addr_isbroadcast_u32>
 800cee8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d105      	bne.n	800cefa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cef6:	2be0      	cmp	r3, #224	@ 0xe0
 800cef8:	d102      	bne.n	800cf00 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cefa:	f06f 030f 	mvn.w	r3, #15
 800cefe:	e06c      	b.n	800cfda <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800cf00:	78fb      	ldrb	r3, [r7, #3]
 800cf02:	68fa      	ldr	r2, [r7, #12]
 800cf04:	4619      	mov	r1, r3
 800cf06:	68b8      	ldr	r0, [r7, #8]
 800cf08:	f7ff fe56 	bl	800cbb8 <etharp_find_entry>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800cf10:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	da02      	bge.n	800cf1e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800cf18:	8afb      	ldrh	r3, [r7, #22]
 800cf1a:	b25b      	sxtb	r3, r3
 800cf1c:	e05d      	b.n	800cfda <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800cf1e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cf22:	4933      	ldr	r1, [pc, #204]	@ (800cff0 <etharp_update_arp_entry+0x148>)
 800cf24:	4613      	mov	r3, r2
 800cf26:	005b      	lsls	r3, r3, #1
 800cf28:	4413      	add	r3, r2
 800cf2a:	00db      	lsls	r3, r3, #3
 800cf2c:	440b      	add	r3, r1
 800cf2e:	3314      	adds	r3, #20
 800cf30:	2202      	movs	r2, #2
 800cf32:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800cf34:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cf38:	492d      	ldr	r1, [pc, #180]	@ (800cff0 <etharp_update_arp_entry+0x148>)
 800cf3a:	4613      	mov	r3, r2
 800cf3c:	005b      	lsls	r3, r3, #1
 800cf3e:	4413      	add	r3, r2
 800cf40:	00db      	lsls	r3, r3, #3
 800cf42:	440b      	add	r3, r1
 800cf44:	3308      	adds	r3, #8
 800cf46:	68fa      	ldr	r2, [r7, #12]
 800cf48:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800cf4a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cf4e:	4613      	mov	r3, r2
 800cf50:	005b      	lsls	r3, r3, #1
 800cf52:	4413      	add	r3, r2
 800cf54:	00db      	lsls	r3, r3, #3
 800cf56:	3308      	adds	r3, #8
 800cf58:	4a25      	ldr	r2, [pc, #148]	@ (800cff0 <etharp_update_arp_entry+0x148>)
 800cf5a:	4413      	add	r3, r2
 800cf5c:	3304      	adds	r3, #4
 800cf5e:	2206      	movs	r2, #6
 800cf60:	6879      	ldr	r1, [r7, #4]
 800cf62:	4618      	mov	r0, r3
 800cf64:	f002 f9ef 	bl	800f346 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800cf68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cf6c:	4920      	ldr	r1, [pc, #128]	@ (800cff0 <etharp_update_arp_entry+0x148>)
 800cf6e:	4613      	mov	r3, r2
 800cf70:	005b      	lsls	r3, r3, #1
 800cf72:	4413      	add	r3, r2
 800cf74:	00db      	lsls	r3, r3, #3
 800cf76:	440b      	add	r3, r1
 800cf78:	3312      	adds	r3, #18
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800cf7e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cf82:	491b      	ldr	r1, [pc, #108]	@ (800cff0 <etharp_update_arp_entry+0x148>)
 800cf84:	4613      	mov	r3, r2
 800cf86:	005b      	lsls	r3, r3, #1
 800cf88:	4413      	add	r3, r2
 800cf8a:	00db      	lsls	r3, r3, #3
 800cf8c:	440b      	add	r3, r1
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d021      	beq.n	800cfd8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800cf94:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cf98:	4915      	ldr	r1, [pc, #84]	@ (800cff0 <etharp_update_arp_entry+0x148>)
 800cf9a:	4613      	mov	r3, r2
 800cf9c:	005b      	lsls	r3, r3, #1
 800cf9e:	4413      	add	r3, r2
 800cfa0:	00db      	lsls	r3, r3, #3
 800cfa2:	440b      	add	r3, r1
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800cfa8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cfac:	4910      	ldr	r1, [pc, #64]	@ (800cff0 <etharp_update_arp_entry+0x148>)
 800cfae:	4613      	mov	r3, r2
 800cfb0:	005b      	lsls	r3, r3, #1
 800cfb2:	4413      	add	r3, r2
 800cfb4:	00db      	lsls	r3, r3, #3
 800cfb6:	440b      	add	r3, r1
 800cfb8:	2200      	movs	r2, #0
 800cfba:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800cfc2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cfc6:	9300      	str	r3, [sp, #0]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6939      	ldr	r1, [r7, #16]
 800cfcc:	68f8      	ldr	r0, [r7, #12]
 800cfce:	f001 ff97 	bl	800ef00 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800cfd2:	6938      	ldr	r0, [r7, #16]
 800cfd4:	f7f9 fe2c 	bl	8006c30 <pbuf_free>
  }
  return ERR_OK;
 800cfd8:	2300      	movs	r3, #0
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3718      	adds	r7, #24
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}
 800cfe2:	bf00      	nop
 800cfe4:	080122d4 	.word	0x080122d4
 800cfe8:	080123cc 	.word	0x080123cc
 800cfec:	0801234c 	.word	0x0801234c
 800cff0:	20007cd4 	.word	0x20007cd4

0800cff4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b084      	sub	sp, #16
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cffc:	2300      	movs	r3, #0
 800cffe:	60fb      	str	r3, [r7, #12]
 800d000:	e01e      	b.n	800d040 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d002:	4913      	ldr	r1, [pc, #76]	@ (800d050 <etharp_cleanup_netif+0x5c>)
 800d004:	68fa      	ldr	r2, [r7, #12]
 800d006:	4613      	mov	r3, r2
 800d008:	005b      	lsls	r3, r3, #1
 800d00a:	4413      	add	r3, r2
 800d00c:	00db      	lsls	r3, r3, #3
 800d00e:	440b      	add	r3, r1
 800d010:	3314      	adds	r3, #20
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d016:	7afb      	ldrb	r3, [r7, #11]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d00e      	beq.n	800d03a <etharp_cleanup_netif+0x46>
 800d01c:	490c      	ldr	r1, [pc, #48]	@ (800d050 <etharp_cleanup_netif+0x5c>)
 800d01e:	68fa      	ldr	r2, [r7, #12]
 800d020:	4613      	mov	r3, r2
 800d022:	005b      	lsls	r3, r3, #1
 800d024:	4413      	add	r3, r2
 800d026:	00db      	lsls	r3, r3, #3
 800d028:	440b      	add	r3, r1
 800d02a:	3308      	adds	r3, #8
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	687a      	ldr	r2, [r7, #4]
 800d030:	429a      	cmp	r2, r3
 800d032:	d102      	bne.n	800d03a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800d034:	68f8      	ldr	r0, [r7, #12]
 800d036:	f7ff fce5 	bl	800ca04 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	3301      	adds	r3, #1
 800d03e:	60fb      	str	r3, [r7, #12]
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	2b09      	cmp	r3, #9
 800d044:	dddd      	ble.n	800d002 <etharp_cleanup_netif+0xe>
    }
  }
}
 800d046:	bf00      	nop
 800d048:	bf00      	nop
 800d04a:	3710      	adds	r7, #16
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}
 800d050:	20007cd4 	.word	0x20007cd4

0800d054 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d054:	b5b0      	push	{r4, r5, r7, lr}
 800d056:	b08a      	sub	sp, #40	@ 0x28
 800d058:	af04      	add	r7, sp, #16
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d107      	bne.n	800d074 <etharp_input+0x20>
 800d064:	4b3d      	ldr	r3, [pc, #244]	@ (800d15c <etharp_input+0x108>)
 800d066:	f240 228a 	movw	r2, #650	@ 0x28a
 800d06a:	493d      	ldr	r1, [pc, #244]	@ (800d160 <etharp_input+0x10c>)
 800d06c:	483d      	ldr	r0, [pc, #244]	@ (800d164 <etharp_input+0x110>)
 800d06e:	f002 f88f 	bl	800f190 <iprintf>
 800d072:	e06f      	b.n	800d154 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	685b      	ldr	r3, [r3, #4]
 800d078:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	881b      	ldrh	r3, [r3, #0]
 800d07e:	b29b      	uxth	r3, r3
 800d080:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d084:	d10c      	bne.n	800d0a0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d08a:	2b06      	cmp	r3, #6
 800d08c:	d108      	bne.n	800d0a0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d092:	2b04      	cmp	r3, #4
 800d094:	d104      	bne.n	800d0a0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	885b      	ldrh	r3, [r3, #2]
 800d09a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d09c:	2b08      	cmp	r3, #8
 800d09e:	d003      	beq.n	800d0a8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f7f9 fdc5 	bl	8006c30 <pbuf_free>
    return;
 800d0a6:	e055      	b.n	800d154 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	330e      	adds	r3, #14
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	3318      	adds	r3, #24
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	3304      	adds	r3, #4
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d102      	bne.n	800d0c8 <etharp_input+0x74>
    for_us = 0;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	75fb      	strb	r3, [r7, #23]
 800d0c6:	e009      	b.n	800d0dc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d0c8:	68ba      	ldr	r2, [r7, #8]
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	3304      	adds	r3, #4
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	bf0c      	ite	eq
 800d0d4:	2301      	moveq	r3, #1
 800d0d6:	2300      	movne	r3, #0
 800d0d8:	b2db      	uxtb	r3, r3
 800d0da:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d0dc:	693b      	ldr	r3, [r7, #16]
 800d0de:	f103 0208 	add.w	r2, r3, #8
 800d0e2:	7dfb      	ldrb	r3, [r7, #23]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d001      	beq.n	800d0ec <etharp_input+0x98>
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	e000      	b.n	800d0ee <etharp_input+0x9a>
 800d0ec:	2302      	movs	r3, #2
 800d0ee:	f107 010c 	add.w	r1, r7, #12
 800d0f2:	6838      	ldr	r0, [r7, #0]
 800d0f4:	f7ff fed8 	bl	800cea8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d0f8:	693b      	ldr	r3, [r7, #16]
 800d0fa:	88db      	ldrh	r3, [r3, #6]
 800d0fc:	b29b      	uxth	r3, r3
 800d0fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d102:	d003      	beq.n	800d10c <etharp_input+0xb8>
 800d104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d108:	d01e      	beq.n	800d148 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d10a:	e020      	b.n	800d14e <etharp_input+0xfa>
      if (for_us) {
 800d10c:	7dfb      	ldrb	r3, [r7, #23]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d01c      	beq.n	800d14c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d128:	693a      	ldr	r2, [r7, #16]
 800d12a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d12c:	2102      	movs	r1, #2
 800d12e:	9103      	str	r1, [sp, #12]
 800d130:	f107 010c 	add.w	r1, r7, #12
 800d134:	9102      	str	r1, [sp, #8]
 800d136:	9201      	str	r2, [sp, #4]
 800d138:	9300      	str	r3, [sp, #0]
 800d13a:	462b      	mov	r3, r5
 800d13c:	4622      	mov	r2, r4
 800d13e:	4601      	mov	r1, r0
 800d140:	6838      	ldr	r0, [r7, #0]
 800d142:	f000 faeb 	bl	800d71c <etharp_raw>
      break;
 800d146:	e001      	b.n	800d14c <etharp_input+0xf8>
      break;
 800d148:	bf00      	nop
 800d14a:	e000      	b.n	800d14e <etharp_input+0xfa>
      break;
 800d14c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f7f9 fd6e 	bl	8006c30 <pbuf_free>
}
 800d154:	3718      	adds	r7, #24
 800d156:	46bd      	mov	sp, r7
 800d158:	bdb0      	pop	{r4, r5, r7, pc}
 800d15a:	bf00      	nop
 800d15c:	080122d4 	.word	0x080122d4
 800d160:	08012424 	.word	0x08012424
 800d164:	0801234c 	.word	0x0801234c

0800d168 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b086      	sub	sp, #24
 800d16c:	af02      	add	r7, sp, #8
 800d16e:	60f8      	str	r0, [r7, #12]
 800d170:	60b9      	str	r1, [r7, #8]
 800d172:	4613      	mov	r3, r2
 800d174:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d176:	79fa      	ldrb	r2, [r7, #7]
 800d178:	4944      	ldr	r1, [pc, #272]	@ (800d28c <etharp_output_to_arp_index+0x124>)
 800d17a:	4613      	mov	r3, r2
 800d17c:	005b      	lsls	r3, r3, #1
 800d17e:	4413      	add	r3, r2
 800d180:	00db      	lsls	r3, r3, #3
 800d182:	440b      	add	r3, r1
 800d184:	3314      	adds	r3, #20
 800d186:	781b      	ldrb	r3, [r3, #0]
 800d188:	2b01      	cmp	r3, #1
 800d18a:	d806      	bhi.n	800d19a <etharp_output_to_arp_index+0x32>
 800d18c:	4b40      	ldr	r3, [pc, #256]	@ (800d290 <etharp_output_to_arp_index+0x128>)
 800d18e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800d192:	4940      	ldr	r1, [pc, #256]	@ (800d294 <etharp_output_to_arp_index+0x12c>)
 800d194:	4840      	ldr	r0, [pc, #256]	@ (800d298 <etharp_output_to_arp_index+0x130>)
 800d196:	f001 fffb 	bl	800f190 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d19a:	79fa      	ldrb	r2, [r7, #7]
 800d19c:	493b      	ldr	r1, [pc, #236]	@ (800d28c <etharp_output_to_arp_index+0x124>)
 800d19e:	4613      	mov	r3, r2
 800d1a0:	005b      	lsls	r3, r3, #1
 800d1a2:	4413      	add	r3, r2
 800d1a4:	00db      	lsls	r3, r3, #3
 800d1a6:	440b      	add	r3, r1
 800d1a8:	3314      	adds	r3, #20
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	2b02      	cmp	r3, #2
 800d1ae:	d153      	bne.n	800d258 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d1b0:	79fa      	ldrb	r2, [r7, #7]
 800d1b2:	4936      	ldr	r1, [pc, #216]	@ (800d28c <etharp_output_to_arp_index+0x124>)
 800d1b4:	4613      	mov	r3, r2
 800d1b6:	005b      	lsls	r3, r3, #1
 800d1b8:	4413      	add	r3, r2
 800d1ba:	00db      	lsls	r3, r3, #3
 800d1bc:	440b      	add	r3, r1
 800d1be:	3312      	adds	r3, #18
 800d1c0:	881b      	ldrh	r3, [r3, #0]
 800d1c2:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800d1c6:	d919      	bls.n	800d1fc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d1c8:	79fa      	ldrb	r2, [r7, #7]
 800d1ca:	4613      	mov	r3, r2
 800d1cc:	005b      	lsls	r3, r3, #1
 800d1ce:	4413      	add	r3, r2
 800d1d0:	00db      	lsls	r3, r3, #3
 800d1d2:	4a2e      	ldr	r2, [pc, #184]	@ (800d28c <etharp_output_to_arp_index+0x124>)
 800d1d4:	4413      	add	r3, r2
 800d1d6:	3304      	adds	r3, #4
 800d1d8:	4619      	mov	r1, r3
 800d1da:	68f8      	ldr	r0, [r7, #12]
 800d1dc:	f000 fb4c 	bl	800d878 <etharp_request>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d138      	bne.n	800d258 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d1e6:	79fa      	ldrb	r2, [r7, #7]
 800d1e8:	4928      	ldr	r1, [pc, #160]	@ (800d28c <etharp_output_to_arp_index+0x124>)
 800d1ea:	4613      	mov	r3, r2
 800d1ec:	005b      	lsls	r3, r3, #1
 800d1ee:	4413      	add	r3, r2
 800d1f0:	00db      	lsls	r3, r3, #3
 800d1f2:	440b      	add	r3, r1
 800d1f4:	3314      	adds	r3, #20
 800d1f6:	2203      	movs	r2, #3
 800d1f8:	701a      	strb	r2, [r3, #0]
 800d1fa:	e02d      	b.n	800d258 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d1fc:	79fa      	ldrb	r2, [r7, #7]
 800d1fe:	4923      	ldr	r1, [pc, #140]	@ (800d28c <etharp_output_to_arp_index+0x124>)
 800d200:	4613      	mov	r3, r2
 800d202:	005b      	lsls	r3, r3, #1
 800d204:	4413      	add	r3, r2
 800d206:	00db      	lsls	r3, r3, #3
 800d208:	440b      	add	r3, r1
 800d20a:	3312      	adds	r3, #18
 800d20c:	881b      	ldrh	r3, [r3, #0]
 800d20e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800d212:	d321      	bcc.n	800d258 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d214:	79fa      	ldrb	r2, [r7, #7]
 800d216:	4613      	mov	r3, r2
 800d218:	005b      	lsls	r3, r3, #1
 800d21a:	4413      	add	r3, r2
 800d21c:	00db      	lsls	r3, r3, #3
 800d21e:	4a1b      	ldr	r2, [pc, #108]	@ (800d28c <etharp_output_to_arp_index+0x124>)
 800d220:	4413      	add	r3, r2
 800d222:	1d19      	adds	r1, r3, #4
 800d224:	79fa      	ldrb	r2, [r7, #7]
 800d226:	4613      	mov	r3, r2
 800d228:	005b      	lsls	r3, r3, #1
 800d22a:	4413      	add	r3, r2
 800d22c:	00db      	lsls	r3, r3, #3
 800d22e:	3308      	adds	r3, #8
 800d230:	4a16      	ldr	r2, [pc, #88]	@ (800d28c <etharp_output_to_arp_index+0x124>)
 800d232:	4413      	add	r3, r2
 800d234:	3304      	adds	r3, #4
 800d236:	461a      	mov	r2, r3
 800d238:	68f8      	ldr	r0, [r7, #12]
 800d23a:	f000 fafb 	bl	800d834 <etharp_request_dst>
 800d23e:	4603      	mov	r3, r0
 800d240:	2b00      	cmp	r3, #0
 800d242:	d109      	bne.n	800d258 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d244:	79fa      	ldrb	r2, [r7, #7]
 800d246:	4911      	ldr	r1, [pc, #68]	@ (800d28c <etharp_output_to_arp_index+0x124>)
 800d248:	4613      	mov	r3, r2
 800d24a:	005b      	lsls	r3, r3, #1
 800d24c:	4413      	add	r3, r2
 800d24e:	00db      	lsls	r3, r3, #3
 800d250:	440b      	add	r3, r1
 800d252:	3314      	adds	r3, #20
 800d254:	2203      	movs	r2, #3
 800d256:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800d25e:	79fa      	ldrb	r2, [r7, #7]
 800d260:	4613      	mov	r3, r2
 800d262:	005b      	lsls	r3, r3, #1
 800d264:	4413      	add	r3, r2
 800d266:	00db      	lsls	r3, r3, #3
 800d268:	3308      	adds	r3, #8
 800d26a:	4a08      	ldr	r2, [pc, #32]	@ (800d28c <etharp_output_to_arp_index+0x124>)
 800d26c:	4413      	add	r3, r2
 800d26e:	3304      	adds	r3, #4
 800d270:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d274:	9200      	str	r2, [sp, #0]
 800d276:	460a      	mov	r2, r1
 800d278:	68b9      	ldr	r1, [r7, #8]
 800d27a:	68f8      	ldr	r0, [r7, #12]
 800d27c:	f001 fe40 	bl	800ef00 <ethernet_output>
 800d280:	4603      	mov	r3, r0
}
 800d282:	4618      	mov	r0, r3
 800d284:	3710      	adds	r7, #16
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	bf00      	nop
 800d28c:	20007cd4 	.word	0x20007cd4
 800d290:	080122d4 	.word	0x080122d4
 800d294:	08012444 	.word	0x08012444
 800d298:	0801234c 	.word	0x0801234c

0800d29c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b08a      	sub	sp, #40	@ 0x28
 800d2a0:	af02      	add	r7, sp, #8
 800d2a2:	60f8      	str	r0, [r7, #12]
 800d2a4:	60b9      	str	r1, [r7, #8]
 800d2a6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d106      	bne.n	800d2c0 <etharp_output+0x24>
 800d2b2:	4b73      	ldr	r3, [pc, #460]	@ (800d480 <etharp_output+0x1e4>)
 800d2b4:	f240 321e 	movw	r2, #798	@ 0x31e
 800d2b8:	4972      	ldr	r1, [pc, #456]	@ (800d484 <etharp_output+0x1e8>)
 800d2ba:	4873      	ldr	r0, [pc, #460]	@ (800d488 <etharp_output+0x1ec>)
 800d2bc:	f001 ff68 	bl	800f190 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d106      	bne.n	800d2d4 <etharp_output+0x38>
 800d2c6:	4b6e      	ldr	r3, [pc, #440]	@ (800d480 <etharp_output+0x1e4>)
 800d2c8:	f240 321f 	movw	r2, #799	@ 0x31f
 800d2cc:	496f      	ldr	r1, [pc, #444]	@ (800d48c <etharp_output+0x1f0>)
 800d2ce:	486e      	ldr	r0, [pc, #440]	@ (800d488 <etharp_output+0x1ec>)
 800d2d0:	f001 ff5e 	bl	800f190 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d106      	bne.n	800d2e8 <etharp_output+0x4c>
 800d2da:	4b69      	ldr	r3, [pc, #420]	@ (800d480 <etharp_output+0x1e4>)
 800d2dc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800d2e0:	496b      	ldr	r1, [pc, #428]	@ (800d490 <etharp_output+0x1f4>)
 800d2e2:	4869      	ldr	r0, [pc, #420]	@ (800d488 <etharp_output+0x1ec>)
 800d2e4:	f001 ff54 	bl	800f190 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	68f9      	ldr	r1, [r7, #12]
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f000 fef8 	bl	800e0e4 <ip4_addr_isbroadcast_u32>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d002      	beq.n	800d300 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d2fa:	4b66      	ldr	r3, [pc, #408]	@ (800d494 <etharp_output+0x1f8>)
 800d2fc:	61fb      	str	r3, [r7, #28]
 800d2fe:	e0af      	b.n	800d460 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d308:	2be0      	cmp	r3, #224	@ 0xe0
 800d30a:	d118      	bne.n	800d33e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d30c:	2301      	movs	r3, #1
 800d30e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d310:	2300      	movs	r3, #0
 800d312:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d314:	235e      	movs	r3, #94	@ 0x5e
 800d316:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	3301      	adds	r3, #1
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d322:	b2db      	uxtb	r3, r3
 800d324:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	3302      	adds	r3, #2
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	3303      	adds	r3, #3
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d336:	f107 0310 	add.w	r3, r7, #16
 800d33a:	61fb      	str	r3, [r7, #28]
 800d33c:	e090      	b.n	800d460 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681a      	ldr	r2, [r3, #0]
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	3304      	adds	r3, #4
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	405a      	eors	r2, r3
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	3308      	adds	r3, #8
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	4013      	ands	r3, r2
 800d352:	2b00      	cmp	r3, #0
 800d354:	d012      	beq.n	800d37c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d35c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800d360:	4293      	cmp	r3, r2
 800d362:	d00b      	beq.n	800d37c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	330c      	adds	r3, #12
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d003      	beq.n	800d376 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	330c      	adds	r3, #12
 800d372:	61bb      	str	r3, [r7, #24]
 800d374:	e002      	b.n	800d37c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d376:	f06f 0303 	mvn.w	r3, #3
 800d37a:	e07d      	b.n	800d478 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d37c:	4b46      	ldr	r3, [pc, #280]	@ (800d498 <etharp_output+0x1fc>)
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	4619      	mov	r1, r3
 800d382:	4a46      	ldr	r2, [pc, #280]	@ (800d49c <etharp_output+0x200>)
 800d384:	460b      	mov	r3, r1
 800d386:	005b      	lsls	r3, r3, #1
 800d388:	440b      	add	r3, r1
 800d38a:	00db      	lsls	r3, r3, #3
 800d38c:	4413      	add	r3, r2
 800d38e:	3314      	adds	r3, #20
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	2b01      	cmp	r3, #1
 800d394:	d925      	bls.n	800d3e2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d396:	4b40      	ldr	r3, [pc, #256]	@ (800d498 <etharp_output+0x1fc>)
 800d398:	781b      	ldrb	r3, [r3, #0]
 800d39a:	4619      	mov	r1, r3
 800d39c:	4a3f      	ldr	r2, [pc, #252]	@ (800d49c <etharp_output+0x200>)
 800d39e:	460b      	mov	r3, r1
 800d3a0:	005b      	lsls	r3, r3, #1
 800d3a2:	440b      	add	r3, r1
 800d3a4:	00db      	lsls	r3, r3, #3
 800d3a6:	4413      	add	r3, r2
 800d3a8:	3308      	adds	r3, #8
 800d3aa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d3ac:	68fa      	ldr	r2, [r7, #12]
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	d117      	bne.n	800d3e2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d3b2:	69bb      	ldr	r3, [r7, #24]
 800d3b4:	681a      	ldr	r2, [r3, #0]
 800d3b6:	4b38      	ldr	r3, [pc, #224]	@ (800d498 <etharp_output+0x1fc>)
 800d3b8:	781b      	ldrb	r3, [r3, #0]
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	4937      	ldr	r1, [pc, #220]	@ (800d49c <etharp_output+0x200>)
 800d3be:	4603      	mov	r3, r0
 800d3c0:	005b      	lsls	r3, r3, #1
 800d3c2:	4403      	add	r3, r0
 800d3c4:	00db      	lsls	r3, r3, #3
 800d3c6:	440b      	add	r3, r1
 800d3c8:	3304      	adds	r3, #4
 800d3ca:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	d108      	bne.n	800d3e2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d3d0:	4b31      	ldr	r3, [pc, #196]	@ (800d498 <etharp_output+0x1fc>)
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	461a      	mov	r2, r3
 800d3d6:	68b9      	ldr	r1, [r7, #8]
 800d3d8:	68f8      	ldr	r0, [r7, #12]
 800d3da:	f7ff fec5 	bl	800d168 <etharp_output_to_arp_index>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	e04a      	b.n	800d478 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	75fb      	strb	r3, [r7, #23]
 800d3e6:	e031      	b.n	800d44c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d3e8:	7dfa      	ldrb	r2, [r7, #23]
 800d3ea:	492c      	ldr	r1, [pc, #176]	@ (800d49c <etharp_output+0x200>)
 800d3ec:	4613      	mov	r3, r2
 800d3ee:	005b      	lsls	r3, r3, #1
 800d3f0:	4413      	add	r3, r2
 800d3f2:	00db      	lsls	r3, r3, #3
 800d3f4:	440b      	add	r3, r1
 800d3f6:	3314      	adds	r3, #20
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	2b01      	cmp	r3, #1
 800d3fc:	d923      	bls.n	800d446 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d3fe:	7dfa      	ldrb	r2, [r7, #23]
 800d400:	4926      	ldr	r1, [pc, #152]	@ (800d49c <etharp_output+0x200>)
 800d402:	4613      	mov	r3, r2
 800d404:	005b      	lsls	r3, r3, #1
 800d406:	4413      	add	r3, r2
 800d408:	00db      	lsls	r3, r3, #3
 800d40a:	440b      	add	r3, r1
 800d40c:	3308      	adds	r3, #8
 800d40e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d410:	68fa      	ldr	r2, [r7, #12]
 800d412:	429a      	cmp	r2, r3
 800d414:	d117      	bne.n	800d446 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d416:	69bb      	ldr	r3, [r7, #24]
 800d418:	6819      	ldr	r1, [r3, #0]
 800d41a:	7dfa      	ldrb	r2, [r7, #23]
 800d41c:	481f      	ldr	r0, [pc, #124]	@ (800d49c <etharp_output+0x200>)
 800d41e:	4613      	mov	r3, r2
 800d420:	005b      	lsls	r3, r3, #1
 800d422:	4413      	add	r3, r2
 800d424:	00db      	lsls	r3, r3, #3
 800d426:	4403      	add	r3, r0
 800d428:	3304      	adds	r3, #4
 800d42a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d42c:	4299      	cmp	r1, r3
 800d42e:	d10a      	bne.n	800d446 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d430:	4a19      	ldr	r2, [pc, #100]	@ (800d498 <etharp_output+0x1fc>)
 800d432:	7dfb      	ldrb	r3, [r7, #23]
 800d434:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d436:	7dfb      	ldrb	r3, [r7, #23]
 800d438:	461a      	mov	r2, r3
 800d43a:	68b9      	ldr	r1, [r7, #8]
 800d43c:	68f8      	ldr	r0, [r7, #12]
 800d43e:	f7ff fe93 	bl	800d168 <etharp_output_to_arp_index>
 800d442:	4603      	mov	r3, r0
 800d444:	e018      	b.n	800d478 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d446:	7dfb      	ldrb	r3, [r7, #23]
 800d448:	3301      	adds	r3, #1
 800d44a:	75fb      	strb	r3, [r7, #23]
 800d44c:	7dfb      	ldrb	r3, [r7, #23]
 800d44e:	2b09      	cmp	r3, #9
 800d450:	d9ca      	bls.n	800d3e8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d452:	68ba      	ldr	r2, [r7, #8]
 800d454:	69b9      	ldr	r1, [r7, #24]
 800d456:	68f8      	ldr	r0, [r7, #12]
 800d458:	f000 f822 	bl	800d4a0 <etharp_query>
 800d45c:	4603      	mov	r3, r0
 800d45e:	e00b      	b.n	800d478 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800d466:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d46a:	9300      	str	r3, [sp, #0]
 800d46c:	69fb      	ldr	r3, [r7, #28]
 800d46e:	68b9      	ldr	r1, [r7, #8]
 800d470:	68f8      	ldr	r0, [r7, #12]
 800d472:	f001 fd45 	bl	800ef00 <ethernet_output>
 800d476:	4603      	mov	r3, r0
}
 800d478:	4618      	mov	r0, r3
 800d47a:	3720      	adds	r7, #32
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}
 800d480:	080122d4 	.word	0x080122d4
 800d484:	08012424 	.word	0x08012424
 800d488:	0801234c 	.word	0x0801234c
 800d48c:	08012474 	.word	0x08012474
 800d490:	08012414 	.word	0x08012414
 800d494:	08012a90 	.word	0x08012a90
 800d498:	20007dc4 	.word	0x20007dc4
 800d49c:	20007cd4 	.word	0x20007cd4

0800d4a0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b08c      	sub	sp, #48	@ 0x30
 800d4a4:	af02      	add	r7, sp, #8
 800d4a6:	60f8      	str	r0, [r7, #12]
 800d4a8:	60b9      	str	r1, [r7, #8]
 800d4aa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	3326      	adds	r3, #38	@ 0x26
 800d4b0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d4b2:	23ff      	movs	r3, #255	@ 0xff
 800d4b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	68f9      	ldr	r1, [r7, #12]
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f000 fe0e 	bl	800e0e4 <ip4_addr_isbroadcast_u32>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d10c      	bne.n	800d4e8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d4d6:	2be0      	cmp	r3, #224	@ 0xe0
 800d4d8:	d006      	beq.n	800d4e8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d003      	beq.n	800d4e8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d102      	bne.n	800d4ee <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d4e8:	f06f 030f 	mvn.w	r3, #15
 800d4ec:	e101      	b.n	800d6f2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d4ee:	68fa      	ldr	r2, [r7, #12]
 800d4f0:	2101      	movs	r1, #1
 800d4f2:	68b8      	ldr	r0, [r7, #8]
 800d4f4:	f7ff fb60 	bl	800cbb8 <etharp_find_entry>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d4fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d500:	2b00      	cmp	r3, #0
 800d502:	da02      	bge.n	800d50a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d504:	8a7b      	ldrh	r3, [r7, #18]
 800d506:	b25b      	sxtb	r3, r3
 800d508:	e0f3      	b.n	800d6f2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d50a:	8a7b      	ldrh	r3, [r7, #18]
 800d50c:	2b7e      	cmp	r3, #126	@ 0x7e
 800d50e:	d906      	bls.n	800d51e <etharp_query+0x7e>
 800d510:	4b7a      	ldr	r3, [pc, #488]	@ (800d6fc <etharp_query+0x25c>)
 800d512:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800d516:	497a      	ldr	r1, [pc, #488]	@ (800d700 <etharp_query+0x260>)
 800d518:	487a      	ldr	r0, [pc, #488]	@ (800d704 <etharp_query+0x264>)
 800d51a:	f001 fe39 	bl	800f190 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d51e:	8a7b      	ldrh	r3, [r7, #18]
 800d520:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d522:	7c7a      	ldrb	r2, [r7, #17]
 800d524:	4978      	ldr	r1, [pc, #480]	@ (800d708 <etharp_query+0x268>)
 800d526:	4613      	mov	r3, r2
 800d528:	005b      	lsls	r3, r3, #1
 800d52a:	4413      	add	r3, r2
 800d52c:	00db      	lsls	r3, r3, #3
 800d52e:	440b      	add	r3, r1
 800d530:	3314      	adds	r3, #20
 800d532:	781b      	ldrb	r3, [r3, #0]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d115      	bne.n	800d564 <etharp_query+0xc4>
    is_new_entry = 1;
 800d538:	2301      	movs	r3, #1
 800d53a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d53c:	7c7a      	ldrb	r2, [r7, #17]
 800d53e:	4972      	ldr	r1, [pc, #456]	@ (800d708 <etharp_query+0x268>)
 800d540:	4613      	mov	r3, r2
 800d542:	005b      	lsls	r3, r3, #1
 800d544:	4413      	add	r3, r2
 800d546:	00db      	lsls	r3, r3, #3
 800d548:	440b      	add	r3, r1
 800d54a:	3314      	adds	r3, #20
 800d54c:	2201      	movs	r2, #1
 800d54e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d550:	7c7a      	ldrb	r2, [r7, #17]
 800d552:	496d      	ldr	r1, [pc, #436]	@ (800d708 <etharp_query+0x268>)
 800d554:	4613      	mov	r3, r2
 800d556:	005b      	lsls	r3, r3, #1
 800d558:	4413      	add	r3, r2
 800d55a:	00db      	lsls	r3, r3, #3
 800d55c:	440b      	add	r3, r1
 800d55e:	3308      	adds	r3, #8
 800d560:	68fa      	ldr	r2, [r7, #12]
 800d562:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d564:	7c7a      	ldrb	r2, [r7, #17]
 800d566:	4968      	ldr	r1, [pc, #416]	@ (800d708 <etharp_query+0x268>)
 800d568:	4613      	mov	r3, r2
 800d56a:	005b      	lsls	r3, r3, #1
 800d56c:	4413      	add	r3, r2
 800d56e:	00db      	lsls	r3, r3, #3
 800d570:	440b      	add	r3, r1
 800d572:	3314      	adds	r3, #20
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	2b01      	cmp	r3, #1
 800d578:	d011      	beq.n	800d59e <etharp_query+0xfe>
 800d57a:	7c7a      	ldrb	r2, [r7, #17]
 800d57c:	4962      	ldr	r1, [pc, #392]	@ (800d708 <etharp_query+0x268>)
 800d57e:	4613      	mov	r3, r2
 800d580:	005b      	lsls	r3, r3, #1
 800d582:	4413      	add	r3, r2
 800d584:	00db      	lsls	r3, r3, #3
 800d586:	440b      	add	r3, r1
 800d588:	3314      	adds	r3, #20
 800d58a:	781b      	ldrb	r3, [r3, #0]
 800d58c:	2b01      	cmp	r3, #1
 800d58e:	d806      	bhi.n	800d59e <etharp_query+0xfe>
 800d590:	4b5a      	ldr	r3, [pc, #360]	@ (800d6fc <etharp_query+0x25c>)
 800d592:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800d596:	495d      	ldr	r1, [pc, #372]	@ (800d70c <etharp_query+0x26c>)
 800d598:	485a      	ldr	r0, [pc, #360]	@ (800d704 <etharp_query+0x264>)
 800d59a:	f001 fdf9 	bl	800f190 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d59e:	6a3b      	ldr	r3, [r7, #32]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d102      	bne.n	800d5aa <etharp_query+0x10a>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d10c      	bne.n	800d5c4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d5aa:	68b9      	ldr	r1, [r7, #8]
 800d5ac:	68f8      	ldr	r0, [r7, #12]
 800d5ae:	f000 f963 	bl	800d878 <etharp_request>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d102      	bne.n	800d5c4 <etharp_query+0x124>
      return result;
 800d5be:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d5c2:	e096      	b.n	800d6f2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d106      	bne.n	800d5d8 <etharp_query+0x138>
 800d5ca:	4b4c      	ldr	r3, [pc, #304]	@ (800d6fc <etharp_query+0x25c>)
 800d5cc:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800d5d0:	494f      	ldr	r1, [pc, #316]	@ (800d710 <etharp_query+0x270>)
 800d5d2:	484c      	ldr	r0, [pc, #304]	@ (800d704 <etharp_query+0x264>)
 800d5d4:	f001 fddc 	bl	800f190 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d5d8:	7c7a      	ldrb	r2, [r7, #17]
 800d5da:	494b      	ldr	r1, [pc, #300]	@ (800d708 <etharp_query+0x268>)
 800d5dc:	4613      	mov	r3, r2
 800d5de:	005b      	lsls	r3, r3, #1
 800d5e0:	4413      	add	r3, r2
 800d5e2:	00db      	lsls	r3, r3, #3
 800d5e4:	440b      	add	r3, r1
 800d5e6:	3314      	adds	r3, #20
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	2b01      	cmp	r3, #1
 800d5ec:	d917      	bls.n	800d61e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d5ee:	4a49      	ldr	r2, [pc, #292]	@ (800d714 <etharp_query+0x274>)
 800d5f0:	7c7b      	ldrb	r3, [r7, #17]
 800d5f2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d5f4:	7c7a      	ldrb	r2, [r7, #17]
 800d5f6:	4613      	mov	r3, r2
 800d5f8:	005b      	lsls	r3, r3, #1
 800d5fa:	4413      	add	r3, r2
 800d5fc:	00db      	lsls	r3, r3, #3
 800d5fe:	3308      	adds	r3, #8
 800d600:	4a41      	ldr	r2, [pc, #260]	@ (800d708 <etharp_query+0x268>)
 800d602:	4413      	add	r3, r2
 800d604:	3304      	adds	r3, #4
 800d606:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d60a:	9200      	str	r2, [sp, #0]
 800d60c:	697a      	ldr	r2, [r7, #20]
 800d60e:	6879      	ldr	r1, [r7, #4]
 800d610:	68f8      	ldr	r0, [r7, #12]
 800d612:	f001 fc75 	bl	800ef00 <ethernet_output>
 800d616:	4603      	mov	r3, r0
 800d618:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d61c:	e067      	b.n	800d6ee <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d61e:	7c7a      	ldrb	r2, [r7, #17]
 800d620:	4939      	ldr	r1, [pc, #228]	@ (800d708 <etharp_query+0x268>)
 800d622:	4613      	mov	r3, r2
 800d624:	005b      	lsls	r3, r3, #1
 800d626:	4413      	add	r3, r2
 800d628:	00db      	lsls	r3, r3, #3
 800d62a:	440b      	add	r3, r1
 800d62c:	3314      	adds	r3, #20
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	2b01      	cmp	r3, #1
 800d632:	d15c      	bne.n	800d6ee <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d634:	2300      	movs	r3, #0
 800d636:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d63c:	e01c      	b.n	800d678 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d63e:	69fb      	ldr	r3, [r7, #28]
 800d640:	895a      	ldrh	r2, [r3, #10]
 800d642:	69fb      	ldr	r3, [r7, #28]
 800d644:	891b      	ldrh	r3, [r3, #8]
 800d646:	429a      	cmp	r2, r3
 800d648:	d10a      	bne.n	800d660 <etharp_query+0x1c0>
 800d64a:	69fb      	ldr	r3, [r7, #28]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d006      	beq.n	800d660 <etharp_query+0x1c0>
 800d652:	4b2a      	ldr	r3, [pc, #168]	@ (800d6fc <etharp_query+0x25c>)
 800d654:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800d658:	492f      	ldr	r1, [pc, #188]	@ (800d718 <etharp_query+0x278>)
 800d65a:	482a      	ldr	r0, [pc, #168]	@ (800d704 <etharp_query+0x264>)
 800d65c:	f001 fd98 	bl	800f190 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d660:	69fb      	ldr	r3, [r7, #28]
 800d662:	7b1b      	ldrb	r3, [r3, #12]
 800d664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d002      	beq.n	800d672 <etharp_query+0x1d2>
        copy_needed = 1;
 800d66c:	2301      	movs	r3, #1
 800d66e:	61bb      	str	r3, [r7, #24]
        break;
 800d670:	e005      	b.n	800d67e <etharp_query+0x1de>
      }
      p = p->next;
 800d672:	69fb      	ldr	r3, [r7, #28]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d678:	69fb      	ldr	r3, [r7, #28]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d1df      	bne.n	800d63e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d67e:	69bb      	ldr	r3, [r7, #24]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d007      	beq.n	800d694 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d684:	687a      	ldr	r2, [r7, #4]
 800d686:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800d68a:	200e      	movs	r0, #14
 800d68c:	f7f9 fd2c 	bl	80070e8 <pbuf_clone>
 800d690:	61f8      	str	r0, [r7, #28]
 800d692:	e004      	b.n	800d69e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d698:	69f8      	ldr	r0, [r7, #28]
 800d69a:	f7f9 fb69 	bl	8006d70 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d69e:	69fb      	ldr	r3, [r7, #28]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d021      	beq.n	800d6e8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d6a4:	7c7a      	ldrb	r2, [r7, #17]
 800d6a6:	4918      	ldr	r1, [pc, #96]	@ (800d708 <etharp_query+0x268>)
 800d6a8:	4613      	mov	r3, r2
 800d6aa:	005b      	lsls	r3, r3, #1
 800d6ac:	4413      	add	r3, r2
 800d6ae:	00db      	lsls	r3, r3, #3
 800d6b0:	440b      	add	r3, r1
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d00a      	beq.n	800d6ce <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d6b8:	7c7a      	ldrb	r2, [r7, #17]
 800d6ba:	4913      	ldr	r1, [pc, #76]	@ (800d708 <etharp_query+0x268>)
 800d6bc:	4613      	mov	r3, r2
 800d6be:	005b      	lsls	r3, r3, #1
 800d6c0:	4413      	add	r3, r2
 800d6c2:	00db      	lsls	r3, r3, #3
 800d6c4:	440b      	add	r3, r1
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7f9 fab1 	bl	8006c30 <pbuf_free>
      }
      arp_table[i].q = p;
 800d6ce:	7c7a      	ldrb	r2, [r7, #17]
 800d6d0:	490d      	ldr	r1, [pc, #52]	@ (800d708 <etharp_query+0x268>)
 800d6d2:	4613      	mov	r3, r2
 800d6d4:	005b      	lsls	r3, r3, #1
 800d6d6:	4413      	add	r3, r2
 800d6d8:	00db      	lsls	r3, r3, #3
 800d6da:	440b      	add	r3, r1
 800d6dc:	69fa      	ldr	r2, [r7, #28]
 800d6de:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d6e6:	e002      	b.n	800d6ee <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d6e8:	23ff      	movs	r3, #255	@ 0xff
 800d6ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800d6ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3728      	adds	r7, #40	@ 0x28
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}
 800d6fa:	bf00      	nop
 800d6fc:	080122d4 	.word	0x080122d4
 800d700:	08012480 	.word	0x08012480
 800d704:	0801234c 	.word	0x0801234c
 800d708:	20007cd4 	.word	0x20007cd4
 800d70c:	08012490 	.word	0x08012490
 800d710:	08012474 	.word	0x08012474
 800d714:	20007dc4 	.word	0x20007dc4
 800d718:	080124b8 	.word	0x080124b8

0800d71c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b08a      	sub	sp, #40	@ 0x28
 800d720:	af02      	add	r7, sp, #8
 800d722:	60f8      	str	r0, [r7, #12]
 800d724:	60b9      	str	r1, [r7, #8]
 800d726:	607a      	str	r2, [r7, #4]
 800d728:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d72a:	2300      	movs	r3, #0
 800d72c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d106      	bne.n	800d742 <etharp_raw+0x26>
 800d734:	4b3a      	ldr	r3, [pc, #232]	@ (800d820 <etharp_raw+0x104>)
 800d736:	f240 4257 	movw	r2, #1111	@ 0x457
 800d73a:	493a      	ldr	r1, [pc, #232]	@ (800d824 <etharp_raw+0x108>)
 800d73c:	483a      	ldr	r0, [pc, #232]	@ (800d828 <etharp_raw+0x10c>)
 800d73e:	f001 fd27 	bl	800f190 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d742:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d746:	211c      	movs	r1, #28
 800d748:	200e      	movs	r0, #14
 800d74a:	f7f8 ff8d 	bl	8006668 <pbuf_alloc>
 800d74e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d750:	69bb      	ldr	r3, [r7, #24]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d102      	bne.n	800d75c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d756:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d75a:	e05d      	b.n	800d818 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d75c:	69bb      	ldr	r3, [r7, #24]
 800d75e:	895b      	ldrh	r3, [r3, #10]
 800d760:	2b1b      	cmp	r3, #27
 800d762:	d806      	bhi.n	800d772 <etharp_raw+0x56>
 800d764:	4b2e      	ldr	r3, [pc, #184]	@ (800d820 <etharp_raw+0x104>)
 800d766:	f240 4262 	movw	r2, #1122	@ 0x462
 800d76a:	4930      	ldr	r1, [pc, #192]	@ (800d82c <etharp_raw+0x110>)
 800d76c:	482e      	ldr	r0, [pc, #184]	@ (800d828 <etharp_raw+0x10c>)
 800d76e:	f001 fd0f 	bl	800f190 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d772:	69bb      	ldr	r3, [r7, #24]
 800d774:	685b      	ldr	r3, [r3, #4]
 800d776:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d778:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d77a:	4618      	mov	r0, r3
 800d77c:	f7f7 fefe 	bl	800557c <lwip_htons>
 800d780:	4603      	mov	r3, r0
 800d782:	461a      	mov	r2, r3
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d78e:	2b06      	cmp	r3, #6
 800d790:	d006      	beq.n	800d7a0 <etharp_raw+0x84>
 800d792:	4b23      	ldr	r3, [pc, #140]	@ (800d820 <etharp_raw+0x104>)
 800d794:	f240 4269 	movw	r2, #1129	@ 0x469
 800d798:	4925      	ldr	r1, [pc, #148]	@ (800d830 <etharp_raw+0x114>)
 800d79a:	4823      	ldr	r0, [pc, #140]	@ (800d828 <etharp_raw+0x10c>)
 800d79c:	f001 fcf8 	bl	800f190 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	3308      	adds	r3, #8
 800d7a4:	2206      	movs	r2, #6
 800d7a6:	6839      	ldr	r1, [r7, #0]
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f001 fdcc 	bl	800f346 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	3312      	adds	r3, #18
 800d7b2:	2206      	movs	r2, #6
 800d7b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f001 fdc5 	bl	800f346 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	330e      	adds	r3, #14
 800d7c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d7c2:	6812      	ldr	r2, [r2, #0]
 800d7c4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	3318      	adds	r3, #24
 800d7ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7cc:	6812      	ldr	r2, [r2, #0]
 800d7ce:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	701a      	strb	r2, [r3, #0]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	f042 0201 	orr.w	r2, r2, #1
 800d7dc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	f042 0208 	orr.w	r2, r2, #8
 800d7e6:	709a      	strb	r2, [r3, #2]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d7ec:	697b      	ldr	r3, [r7, #20]
 800d7ee:	2206      	movs	r2, #6
 800d7f0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	2204      	movs	r2, #4
 800d7f6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d7f8:	f640 0306 	movw	r3, #2054	@ 0x806
 800d7fc:	9300      	str	r3, [sp, #0]
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	68ba      	ldr	r2, [r7, #8]
 800d802:	69b9      	ldr	r1, [r7, #24]
 800d804:	68f8      	ldr	r0, [r7, #12]
 800d806:	f001 fb7b 	bl	800ef00 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d80a:	69b8      	ldr	r0, [r7, #24]
 800d80c:	f7f9 fa10 	bl	8006c30 <pbuf_free>
  p = NULL;
 800d810:	2300      	movs	r3, #0
 800d812:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d814:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d818:	4618      	mov	r0, r3
 800d81a:	3720      	adds	r7, #32
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}
 800d820:	080122d4 	.word	0x080122d4
 800d824:	08012424 	.word	0x08012424
 800d828:	0801234c 	.word	0x0801234c
 800d82c:	080124d4 	.word	0x080124d4
 800d830:	08012508 	.word	0x08012508

0800d834 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b088      	sub	sp, #32
 800d838:	af04      	add	r7, sp, #16
 800d83a:	60f8      	str	r0, [r7, #12]
 800d83c:	60b9      	str	r1, [r7, #8]
 800d83e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d850:	2201      	movs	r2, #1
 800d852:	9203      	str	r2, [sp, #12]
 800d854:	68ba      	ldr	r2, [r7, #8]
 800d856:	9202      	str	r2, [sp, #8]
 800d858:	4a06      	ldr	r2, [pc, #24]	@ (800d874 <etharp_request_dst+0x40>)
 800d85a:	9201      	str	r2, [sp, #4]
 800d85c:	9300      	str	r3, [sp, #0]
 800d85e:	4603      	mov	r3, r0
 800d860:	687a      	ldr	r2, [r7, #4]
 800d862:	68f8      	ldr	r0, [r7, #12]
 800d864:	f7ff ff5a 	bl	800d71c <etharp_raw>
 800d868:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3710      	adds	r7, #16
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
 800d872:	bf00      	nop
 800d874:	08012a98 	.word	0x08012a98

0800d878 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b082      	sub	sp, #8
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d882:	4a05      	ldr	r2, [pc, #20]	@ (800d898 <etharp_request+0x20>)
 800d884:	6839      	ldr	r1, [r7, #0]
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f7ff ffd4 	bl	800d834 <etharp_request_dst>
 800d88c:	4603      	mov	r3, r0
}
 800d88e:	4618      	mov	r0, r3
 800d890:	3708      	adds	r7, #8
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}
 800d896:	bf00      	nop
 800d898:	08012a90 	.word	0x08012a90

0800d89c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b08e      	sub	sp, #56	@ 0x38
 800d8a0:	af04      	add	r7, sp, #16
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d8a6:	4b79      	ldr	r3, [pc, #484]	@ (800da8c <icmp_input+0x1f0>)
 800d8a8:	689b      	ldr	r3, [r3, #8]
 800d8aa:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	f003 030f 	and.w	r3, r3, #15
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	009b      	lsls	r3, r3, #2
 800d8b8:	b2db      	uxtb	r3, r3
 800d8ba:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800d8bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d8be:	2b13      	cmp	r3, #19
 800d8c0:	f240 80cd 	bls.w	800da5e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	895b      	ldrh	r3, [r3, #10]
 800d8c8:	2b03      	cmp	r3, #3
 800d8ca:	f240 80ca 	bls.w	800da62 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	685b      	ldr	r3, [r3, #4]
 800d8d2:	781b      	ldrb	r3, [r3, #0]
 800d8d4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d8d8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	f000 80b7 	beq.w	800da50 <icmp_input+0x1b4>
 800d8e2:	2b08      	cmp	r3, #8
 800d8e4:	f040 80b7 	bne.w	800da56 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d8e8:	4b69      	ldr	r3, [pc, #420]	@ (800da90 <icmp_input+0x1f4>)
 800d8ea:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d8ec:	4b67      	ldr	r3, [pc, #412]	@ (800da8c <icmp_input+0x1f0>)
 800d8ee:	695b      	ldr	r3, [r3, #20]
 800d8f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d8f4:	2be0      	cmp	r3, #224	@ 0xe0
 800d8f6:	f000 80bb 	beq.w	800da70 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d8fa:	4b64      	ldr	r3, [pc, #400]	@ (800da8c <icmp_input+0x1f0>)
 800d8fc:	695b      	ldr	r3, [r3, #20]
 800d8fe:	4a63      	ldr	r2, [pc, #396]	@ (800da8c <icmp_input+0x1f0>)
 800d900:	6812      	ldr	r2, [r2, #0]
 800d902:	4611      	mov	r1, r2
 800d904:	4618      	mov	r0, r3
 800d906:	f000 fbed 	bl	800e0e4 <ip4_addr_isbroadcast_u32>
 800d90a:	4603      	mov	r3, r0
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	f040 80b1 	bne.w	800da74 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	891b      	ldrh	r3, [r3, #8]
 800d916:	2b07      	cmp	r3, #7
 800d918:	f240 80a5 	bls.w	800da66 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d91c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d91e:	330e      	adds	r3, #14
 800d920:	4619      	mov	r1, r3
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f7f9 f8ee 	bl	8006b04 <pbuf_add_header>
 800d928:	4603      	mov	r3, r0
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d04b      	beq.n	800d9c6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	891a      	ldrh	r2, [r3, #8]
 800d932:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d934:	4413      	add	r3, r2
 800d936:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	891b      	ldrh	r3, [r3, #8]
 800d93c:	8b7a      	ldrh	r2, [r7, #26]
 800d93e:	429a      	cmp	r2, r3
 800d940:	f0c0 809a 	bcc.w	800da78 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d944:	8b7b      	ldrh	r3, [r7, #26]
 800d946:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d94a:	4619      	mov	r1, r3
 800d94c:	200e      	movs	r0, #14
 800d94e:	f7f8 fe8b 	bl	8006668 <pbuf_alloc>
 800d952:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	2b00      	cmp	r3, #0
 800d958:	f000 8090 	beq.w	800da7c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	895b      	ldrh	r3, [r3, #10]
 800d960:	461a      	mov	r2, r3
 800d962:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d964:	3308      	adds	r3, #8
 800d966:	429a      	cmp	r2, r3
 800d968:	d203      	bcs.n	800d972 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d96a:	6978      	ldr	r0, [r7, #20]
 800d96c:	f7f9 f960 	bl	8006c30 <pbuf_free>
          goto icmperr;
 800d970:	e085      	b.n	800da7e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	685b      	ldr	r3, [r3, #4]
 800d976:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d978:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d97a:	4618      	mov	r0, r3
 800d97c:	f001 fce3 	bl	800f346 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d980:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d982:	4619      	mov	r1, r3
 800d984:	6978      	ldr	r0, [r7, #20]
 800d986:	f7f9 f8cd 	bl	8006b24 <pbuf_remove_header>
 800d98a:	4603      	mov	r3, r0
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d009      	beq.n	800d9a4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d990:	4b40      	ldr	r3, [pc, #256]	@ (800da94 <icmp_input+0x1f8>)
 800d992:	22b6      	movs	r2, #182	@ 0xb6
 800d994:	4940      	ldr	r1, [pc, #256]	@ (800da98 <icmp_input+0x1fc>)
 800d996:	4841      	ldr	r0, [pc, #260]	@ (800da9c <icmp_input+0x200>)
 800d998:	f001 fbfa 	bl	800f190 <iprintf>
          pbuf_free(r);
 800d99c:	6978      	ldr	r0, [r7, #20]
 800d99e:	f7f9 f947 	bl	8006c30 <pbuf_free>
          goto icmperr;
 800d9a2:	e06c      	b.n	800da7e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d9a4:	6879      	ldr	r1, [r7, #4]
 800d9a6:	6978      	ldr	r0, [r7, #20]
 800d9a8:	f7f9 fa5a 	bl	8006e60 <pbuf_copy>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d003      	beq.n	800d9ba <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d9b2:	6978      	ldr	r0, [r7, #20]
 800d9b4:	f7f9 f93c 	bl	8006c30 <pbuf_free>
          goto icmperr;
 800d9b8:	e061      	b.n	800da7e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f7f9 f938 	bl	8006c30 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	607b      	str	r3, [r7, #4]
 800d9c4:	e00f      	b.n	800d9e6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d9c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d9c8:	330e      	adds	r3, #14
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f7f9 f8a9 	bl	8006b24 <pbuf_remove_header>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d006      	beq.n	800d9e6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d9d8:	4b2e      	ldr	r3, [pc, #184]	@ (800da94 <icmp_input+0x1f8>)
 800d9da:	22c7      	movs	r2, #199	@ 0xc7
 800d9dc:	4930      	ldr	r1, [pc, #192]	@ (800daa0 <icmp_input+0x204>)
 800d9de:	482f      	ldr	r0, [pc, #188]	@ (800da9c <icmp_input+0x200>)
 800d9e0:	f001 fbd6 	bl	800f190 <iprintf>
          goto icmperr;
 800d9e4:	e04b      	b.n	800da7e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	685b      	ldr	r3, [r3, #4]
 800d9ea:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d9ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d9ee:	4619      	mov	r1, r3
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f7f9 f887 	bl	8006b04 <pbuf_add_header>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d12b      	bne.n	800da54 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800da02:	69fb      	ldr	r3, [r7, #28]
 800da04:	681a      	ldr	r2, [r3, #0]
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800da0a:	4b20      	ldr	r3, [pc, #128]	@ (800da8c <icmp_input+0x1f0>)
 800da0c:	691a      	ldr	r2, [r3, #16]
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	2200      	movs	r2, #0
 800da16:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800da18:	693b      	ldr	r3, [r7, #16]
 800da1a:	2200      	movs	r2, #0
 800da1c:	709a      	strb	r2, [r3, #2]
 800da1e:	2200      	movs	r2, #0
 800da20:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	22ff      	movs	r2, #255	@ 0xff
 800da26:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	2200      	movs	r2, #0
 800da2c:	729a      	strb	r2, [r3, #10]
 800da2e:	2200      	movs	r2, #0
 800da30:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	9302      	str	r3, [sp, #8]
 800da36:	2301      	movs	r3, #1
 800da38:	9301      	str	r3, [sp, #4]
 800da3a:	2300      	movs	r3, #0
 800da3c:	9300      	str	r3, [sp, #0]
 800da3e:	23ff      	movs	r3, #255	@ 0xff
 800da40:	2200      	movs	r2, #0
 800da42:	69f9      	ldr	r1, [r7, #28]
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f000 fa75 	bl	800df34 <ip4_output_if>
 800da4a:	4603      	mov	r3, r0
 800da4c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800da4e:	e001      	b.n	800da54 <icmp_input+0x1b8>
      break;
 800da50:	bf00      	nop
 800da52:	e000      	b.n	800da56 <icmp_input+0x1ba>
      break;
 800da54:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f7f9 f8ea 	bl	8006c30 <pbuf_free>
  return;
 800da5c:	e013      	b.n	800da86 <icmp_input+0x1ea>
    goto lenerr;
 800da5e:	bf00      	nop
 800da60:	e002      	b.n	800da68 <icmp_input+0x1cc>
    goto lenerr;
 800da62:	bf00      	nop
 800da64:	e000      	b.n	800da68 <icmp_input+0x1cc>
        goto lenerr;
 800da66:	bf00      	nop
lenerr:
  pbuf_free(p);
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f7f9 f8e1 	bl	8006c30 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800da6e:	e00a      	b.n	800da86 <icmp_input+0x1ea>
        goto icmperr;
 800da70:	bf00      	nop
 800da72:	e004      	b.n	800da7e <icmp_input+0x1e2>
        goto icmperr;
 800da74:	bf00      	nop
 800da76:	e002      	b.n	800da7e <icmp_input+0x1e2>
          goto icmperr;
 800da78:	bf00      	nop
 800da7a:	e000      	b.n	800da7e <icmp_input+0x1e2>
          goto icmperr;
 800da7c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f7f9 f8d6 	bl	8006c30 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800da84:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800da86:	3728      	adds	r7, #40	@ 0x28
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}
 800da8c:	20004d58 	.word	0x20004d58
 800da90:	20004d6c 	.word	0x20004d6c
 800da94:	0801254c 	.word	0x0801254c
 800da98:	08012584 	.word	0x08012584
 800da9c:	080125bc 	.word	0x080125bc
 800daa0:	080125e4 	.word	0x080125e4

0800daa4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b082      	sub	sp, #8
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	460b      	mov	r3, r1
 800daae:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800dab0:	78fb      	ldrb	r3, [r7, #3]
 800dab2:	461a      	mov	r2, r3
 800dab4:	2103      	movs	r1, #3
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f000 f814 	bl	800dae4 <icmp_send_response>
}
 800dabc:	bf00      	nop
 800dabe:	3708      	adds	r7, #8
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}

0800dac4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b082      	sub	sp, #8
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
 800dacc:	460b      	mov	r3, r1
 800dace:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800dad0:	78fb      	ldrb	r3, [r7, #3]
 800dad2:	461a      	mov	r2, r3
 800dad4:	210b      	movs	r1, #11
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f000 f804 	bl	800dae4 <icmp_send_response>
}
 800dadc:	bf00      	nop
 800dade:	3708      	adds	r7, #8
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}

0800dae4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b08c      	sub	sp, #48	@ 0x30
 800dae8:	af04      	add	r7, sp, #16
 800daea:	6078      	str	r0, [r7, #4]
 800daec:	460b      	mov	r3, r1
 800daee:	70fb      	strb	r3, [r7, #3]
 800daf0:	4613      	mov	r3, r2
 800daf2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800daf4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800daf8:	2124      	movs	r1, #36	@ 0x24
 800dafa:	2022      	movs	r0, #34	@ 0x22
 800dafc:	f7f8 fdb4 	bl	8006668 <pbuf_alloc>
 800db00:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800db02:	69fb      	ldr	r3, [r7, #28]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d04c      	beq.n	800dba2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800db08:	69fb      	ldr	r3, [r7, #28]
 800db0a:	895b      	ldrh	r3, [r3, #10]
 800db0c:	2b23      	cmp	r3, #35	@ 0x23
 800db0e:	d806      	bhi.n	800db1e <icmp_send_response+0x3a>
 800db10:	4b26      	ldr	r3, [pc, #152]	@ (800dbac <icmp_send_response+0xc8>)
 800db12:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800db16:	4926      	ldr	r1, [pc, #152]	@ (800dbb0 <icmp_send_response+0xcc>)
 800db18:	4826      	ldr	r0, [pc, #152]	@ (800dbb4 <icmp_send_response+0xd0>)
 800db1a:	f001 fb39 	bl	800f190 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	685b      	ldr	r3, [r3, #4]
 800db22:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800db24:	69fb      	ldr	r3, [r7, #28]
 800db26:	685b      	ldr	r3, [r3, #4]
 800db28:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	78fa      	ldrb	r2, [r7, #3]
 800db2e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	78ba      	ldrb	r2, [r7, #2]
 800db34:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	2200      	movs	r2, #0
 800db3a:	711a      	strb	r2, [r3, #4]
 800db3c:	2200      	movs	r2, #0
 800db3e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800db40:	697b      	ldr	r3, [r7, #20]
 800db42:	2200      	movs	r2, #0
 800db44:	719a      	strb	r2, [r3, #6]
 800db46:	2200      	movs	r2, #0
 800db48:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800db4a:	69fb      	ldr	r3, [r7, #28]
 800db4c:	685b      	ldr	r3, [r3, #4]
 800db4e:	f103 0008 	add.w	r0, r3, #8
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	685b      	ldr	r3, [r3, #4]
 800db56:	221c      	movs	r2, #28
 800db58:	4619      	mov	r1, r3
 800db5a:	f001 fbf4 	bl	800f346 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800db5e:	69bb      	ldr	r3, [r7, #24]
 800db60:	68db      	ldr	r3, [r3, #12]
 800db62:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800db64:	f107 030c 	add.w	r3, r7, #12
 800db68:	4618      	mov	r0, r3
 800db6a:	f000 f825 	bl	800dbb8 <ip4_route>
 800db6e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d011      	beq.n	800db9a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800db76:	697b      	ldr	r3, [r7, #20]
 800db78:	2200      	movs	r2, #0
 800db7a:	709a      	strb	r2, [r3, #2]
 800db7c:	2200      	movs	r2, #0
 800db7e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800db80:	f107 020c 	add.w	r2, r7, #12
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	9302      	str	r3, [sp, #8]
 800db88:	2301      	movs	r3, #1
 800db8a:	9301      	str	r3, [sp, #4]
 800db8c:	2300      	movs	r3, #0
 800db8e:	9300      	str	r3, [sp, #0]
 800db90:	23ff      	movs	r3, #255	@ 0xff
 800db92:	2100      	movs	r1, #0
 800db94:	69f8      	ldr	r0, [r7, #28]
 800db96:	f000 f9cd 	bl	800df34 <ip4_output_if>
  }
  pbuf_free(q);
 800db9a:	69f8      	ldr	r0, [r7, #28]
 800db9c:	f7f9 f848 	bl	8006c30 <pbuf_free>
 800dba0:	e000      	b.n	800dba4 <icmp_send_response+0xc0>
    return;
 800dba2:	bf00      	nop
}
 800dba4:	3720      	adds	r7, #32
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}
 800dbaa:	bf00      	nop
 800dbac:	0801254c 	.word	0x0801254c
 800dbb0:	08012618 	.word	0x08012618
 800dbb4:	080125bc 	.word	0x080125bc

0800dbb8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800dbb8:	b480      	push	{r7}
 800dbba:	b085      	sub	sp, #20
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800dbc0:	4b33      	ldr	r3, [pc, #204]	@ (800dc90 <ip4_route+0xd8>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	60fb      	str	r3, [r7, #12]
 800dbc6:	e036      	b.n	800dc36 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dbce:	f003 0301 	and.w	r3, r3, #1
 800dbd2:	b2db      	uxtb	r3, r3
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d02b      	beq.n	800dc30 <ip4_route+0x78>
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dbde:	089b      	lsrs	r3, r3, #2
 800dbe0:	f003 0301 	and.w	r3, r3, #1
 800dbe4:	b2db      	uxtb	r3, r3
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d022      	beq.n	800dc30 <ip4_route+0x78>
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	3304      	adds	r3, #4
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d01d      	beq.n	800dc30 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681a      	ldr	r2, [r3, #0]
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	3304      	adds	r3, #4
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	405a      	eors	r2, r3
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	3308      	adds	r3, #8
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	4013      	ands	r3, r2
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d101      	bne.n	800dc10 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	e038      	b.n	800dc82 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dc16:	f003 0302 	and.w	r3, r3, #2
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d108      	bne.n	800dc30 <ip4_route+0x78>
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681a      	ldr	r2, [r3, #0]
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	330c      	adds	r3, #12
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	429a      	cmp	r2, r3
 800dc2a:	d101      	bne.n	800dc30 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	e028      	b.n	800dc82 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	60fb      	str	r3, [r7, #12]
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d1c5      	bne.n	800dbc8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800dc3c:	4b15      	ldr	r3, [pc, #84]	@ (800dc94 <ip4_route+0xdc>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d01a      	beq.n	800dc7a <ip4_route+0xc2>
 800dc44:	4b13      	ldr	r3, [pc, #76]	@ (800dc94 <ip4_route+0xdc>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dc4c:	f003 0301 	and.w	r3, r3, #1
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d012      	beq.n	800dc7a <ip4_route+0xc2>
 800dc54:	4b0f      	ldr	r3, [pc, #60]	@ (800dc94 <ip4_route+0xdc>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dc5c:	f003 0304 	and.w	r3, r3, #4
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d00a      	beq.n	800dc7a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800dc64:	4b0b      	ldr	r3, [pc, #44]	@ (800dc94 <ip4_route+0xdc>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	3304      	adds	r3, #4
 800dc6a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d004      	beq.n	800dc7a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	b2db      	uxtb	r3, r3
 800dc76:	2b7f      	cmp	r3, #127	@ 0x7f
 800dc78:	d101      	bne.n	800dc7e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	e001      	b.n	800dc82 <ip4_route+0xca>
  }

  return netif_default;
 800dc7e:	4b05      	ldr	r3, [pc, #20]	@ (800dc94 <ip4_route+0xdc>)
 800dc80:	681b      	ldr	r3, [r3, #0]
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3714      	adds	r7, #20
 800dc86:	46bd      	mov	sp, r7
 800dc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8c:	4770      	bx	lr
 800dc8e:	bf00      	nop
 800dc90:	20007c68 	.word	0x20007c68
 800dc94:	20007c6c 	.word	0x20007c6c

0800dc98 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b082      	sub	sp, #8
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dca6:	f003 0301 	and.w	r3, r3, #1
 800dcaa:	b2db      	uxtb	r3, r3
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d016      	beq.n	800dcde <ip4_input_accept+0x46>
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	3304      	adds	r3, #4
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d011      	beq.n	800dcde <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800dcba:	4b0b      	ldr	r3, [pc, #44]	@ (800dce8 <ip4_input_accept+0x50>)
 800dcbc:	695a      	ldr	r2, [r3, #20]
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	3304      	adds	r3, #4
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	429a      	cmp	r2, r3
 800dcc6:	d008      	beq.n	800dcda <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800dcc8:	4b07      	ldr	r3, [pc, #28]	@ (800dce8 <ip4_input_accept+0x50>)
 800dcca:	695b      	ldr	r3, [r3, #20]
 800dccc:	6879      	ldr	r1, [r7, #4]
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f000 fa08 	bl	800e0e4 <ip4_addr_isbroadcast_u32>
 800dcd4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d001      	beq.n	800dcde <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800dcda:	2301      	movs	r3, #1
 800dcdc:	e000      	b.n	800dce0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800dcde:	2300      	movs	r3, #0
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3708      	adds	r7, #8
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}
 800dce8:	20004d58 	.word	0x20004d58

0800dcec <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b086      	sub	sp, #24
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	685b      	ldr	r3, [r3, #4]
 800dcfa:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	781b      	ldrb	r3, [r3, #0]
 800dd00:	091b      	lsrs	r3, r3, #4
 800dd02:	b2db      	uxtb	r3, r3
 800dd04:	2b04      	cmp	r3, #4
 800dd06:	d004      	beq.n	800dd12 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800dd08:	6878      	ldr	r0, [r7, #4]
 800dd0a:	f7f8 ff91 	bl	8006c30 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	e107      	b.n	800df22 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	f003 030f 	and.w	r3, r3, #15
 800dd1a:	b2db      	uxtb	r3, r3
 800dd1c:	009b      	lsls	r3, r3, #2
 800dd1e:	b2db      	uxtb	r3, r3
 800dd20:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	885b      	ldrh	r3, [r3, #2]
 800dd26:	b29b      	uxth	r3, r3
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f7f7 fc27 	bl	800557c <lwip_htons>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	891b      	ldrh	r3, [r3, #8]
 800dd36:	89ba      	ldrh	r2, [r7, #12]
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d204      	bcs.n	800dd46 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800dd3c:	89bb      	ldrh	r3, [r7, #12]
 800dd3e:	4619      	mov	r1, r3
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f7f8 fdef 	bl	8006924 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	895b      	ldrh	r3, [r3, #10]
 800dd4a:	89fa      	ldrh	r2, [r7, #14]
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d807      	bhi.n	800dd60 <ip4_input+0x74>
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	891b      	ldrh	r3, [r3, #8]
 800dd54:	89ba      	ldrh	r2, [r7, #12]
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d802      	bhi.n	800dd60 <ip4_input+0x74>
 800dd5a:	89fb      	ldrh	r3, [r7, #14]
 800dd5c:	2b13      	cmp	r3, #19
 800dd5e:	d804      	bhi.n	800dd6a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f7f8 ff65 	bl	8006c30 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800dd66:	2300      	movs	r3, #0
 800dd68:	e0db      	b.n	800df22 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	691b      	ldr	r3, [r3, #16]
 800dd6e:	4a6f      	ldr	r2, [pc, #444]	@ (800df2c <ip4_input+0x240>)
 800dd70:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	68db      	ldr	r3, [r3, #12]
 800dd76:	4a6d      	ldr	r2, [pc, #436]	@ (800df2c <ip4_input+0x240>)
 800dd78:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dd7a:	4b6c      	ldr	r3, [pc, #432]	@ (800df2c <ip4_input+0x240>)
 800dd7c:	695b      	ldr	r3, [r3, #20]
 800dd7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dd82:	2be0      	cmp	r3, #224	@ 0xe0
 800dd84:	d112      	bne.n	800ddac <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dd8c:	f003 0301 	and.w	r3, r3, #1
 800dd90:	b2db      	uxtb	r3, r3
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d007      	beq.n	800dda6 <ip4_input+0xba>
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	3304      	adds	r3, #4
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d002      	beq.n	800dda6 <ip4_input+0xba>
      netif = inp;
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	613b      	str	r3, [r7, #16]
 800dda4:	e02a      	b.n	800ddfc <ip4_input+0x110>
    } else {
      netif = NULL;
 800dda6:	2300      	movs	r3, #0
 800dda8:	613b      	str	r3, [r7, #16]
 800ddaa:	e027      	b.n	800ddfc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800ddac:	6838      	ldr	r0, [r7, #0]
 800ddae:	f7ff ff73 	bl	800dc98 <ip4_input_accept>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d002      	beq.n	800ddbe <ip4_input+0xd2>
      netif = inp;
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	613b      	str	r3, [r7, #16]
 800ddbc:	e01e      	b.n	800ddfc <ip4_input+0x110>
    } else {
      netif = NULL;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800ddc2:	4b5a      	ldr	r3, [pc, #360]	@ (800df2c <ip4_input+0x240>)
 800ddc4:	695b      	ldr	r3, [r3, #20]
 800ddc6:	b2db      	uxtb	r3, r3
 800ddc8:	2b7f      	cmp	r3, #127	@ 0x7f
 800ddca:	d017      	beq.n	800ddfc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800ddcc:	4b58      	ldr	r3, [pc, #352]	@ (800df30 <ip4_input+0x244>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	613b      	str	r3, [r7, #16]
 800ddd2:	e00e      	b.n	800ddf2 <ip4_input+0x106>
          if (netif == inp) {
 800ddd4:	693a      	ldr	r2, [r7, #16]
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d006      	beq.n	800ddea <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800dddc:	6938      	ldr	r0, [r7, #16]
 800ddde:	f7ff ff5b 	bl	800dc98 <ip4_input_accept>
 800dde2:	4603      	mov	r3, r0
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d108      	bne.n	800ddfa <ip4_input+0x10e>
 800dde8:	e000      	b.n	800ddec <ip4_input+0x100>
            continue;
 800ddea:	bf00      	nop
        NETIF_FOREACH(netif) {
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	613b      	str	r3, [r7, #16]
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d1ed      	bne.n	800ddd4 <ip4_input+0xe8>
 800ddf8:	e000      	b.n	800ddfc <ip4_input+0x110>
            break;
 800ddfa:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ddfc:	4b4b      	ldr	r3, [pc, #300]	@ (800df2c <ip4_input+0x240>)
 800ddfe:	691b      	ldr	r3, [r3, #16]
 800de00:	6839      	ldr	r1, [r7, #0]
 800de02:	4618      	mov	r0, r3
 800de04:	f000 f96e 	bl	800e0e4 <ip4_addr_isbroadcast_u32>
 800de08:	4603      	mov	r3, r0
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d105      	bne.n	800de1a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800de0e:	4b47      	ldr	r3, [pc, #284]	@ (800df2c <ip4_input+0x240>)
 800de10:	691b      	ldr	r3, [r3, #16]
 800de12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800de16:	2be0      	cmp	r3, #224	@ 0xe0
 800de18:	d104      	bne.n	800de24 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f7f8 ff08 	bl	8006c30 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800de20:	2300      	movs	r3, #0
 800de22:	e07e      	b.n	800df22 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d104      	bne.n	800de34 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f7f8 ff00 	bl	8006c30 <pbuf_free>
    return ERR_OK;
 800de30:	2300      	movs	r3, #0
 800de32:	e076      	b.n	800df22 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800de34:	697b      	ldr	r3, [r7, #20]
 800de36:	88db      	ldrh	r3, [r3, #6]
 800de38:	b29b      	uxth	r3, r3
 800de3a:	461a      	mov	r2, r3
 800de3c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800de40:	4013      	ands	r3, r2
 800de42:	2b00      	cmp	r3, #0
 800de44:	d00b      	beq.n	800de5e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f000 fc92 	bl	800e770 <ip4_reass>
 800de4c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d101      	bne.n	800de58 <ip4_input+0x16c>
      return ERR_OK;
 800de54:	2300      	movs	r3, #0
 800de56:	e064      	b.n	800df22 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800de5e:	4a33      	ldr	r2, [pc, #204]	@ (800df2c <ip4_input+0x240>)
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800de64:	4a31      	ldr	r2, [pc, #196]	@ (800df2c <ip4_input+0x240>)
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800de6a:	4a30      	ldr	r2, [pc, #192]	@ (800df2c <ip4_input+0x240>)
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	f003 030f 	and.w	r3, r3, #15
 800de78:	b2db      	uxtb	r3, r3
 800de7a:	009b      	lsls	r3, r3, #2
 800de7c:	b2db      	uxtb	r3, r3
 800de7e:	461a      	mov	r2, r3
 800de80:	4b2a      	ldr	r3, [pc, #168]	@ (800df2c <ip4_input+0x240>)
 800de82:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800de84:	89fb      	ldrh	r3, [r7, #14]
 800de86:	4619      	mov	r1, r3
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f7f8 fe4b 	bl	8006b24 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	7a5b      	ldrb	r3, [r3, #9]
 800de92:	2b11      	cmp	r3, #17
 800de94:	d006      	beq.n	800dea4 <ip4_input+0x1b8>
 800de96:	2b11      	cmp	r3, #17
 800de98:	dc13      	bgt.n	800dec2 <ip4_input+0x1d6>
 800de9a:	2b01      	cmp	r3, #1
 800de9c:	d00c      	beq.n	800deb8 <ip4_input+0x1cc>
 800de9e:	2b06      	cmp	r3, #6
 800dea0:	d005      	beq.n	800deae <ip4_input+0x1c2>
 800dea2:	e00e      	b.n	800dec2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800dea4:	6839      	ldr	r1, [r7, #0]
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f7fe fc68 	bl	800c77c <udp_input>
        break;
 800deac:	e026      	b.n	800defc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800deae:	6839      	ldr	r1, [r7, #0]
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f7fa fce7 	bl	8008884 <tcp_input>
        break;
 800deb6:	e021      	b.n	800defc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800deb8:	6839      	ldr	r1, [r7, #0]
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f7ff fcee 	bl	800d89c <icmp_input>
        break;
 800dec0:	e01c      	b.n	800defc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800dec2:	4b1a      	ldr	r3, [pc, #104]	@ (800df2c <ip4_input+0x240>)
 800dec4:	695b      	ldr	r3, [r3, #20]
 800dec6:	6939      	ldr	r1, [r7, #16]
 800dec8:	4618      	mov	r0, r3
 800deca:	f000 f90b 	bl	800e0e4 <ip4_addr_isbroadcast_u32>
 800dece:	4603      	mov	r3, r0
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d10f      	bne.n	800def4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ded4:	4b15      	ldr	r3, [pc, #84]	@ (800df2c <ip4_input+0x240>)
 800ded6:	695b      	ldr	r3, [r3, #20]
 800ded8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800dedc:	2be0      	cmp	r3, #224	@ 0xe0
 800dede:	d009      	beq.n	800def4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800dee0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dee4:	4619      	mov	r1, r3
 800dee6:	6878      	ldr	r0, [r7, #4]
 800dee8:	f7f8 fe8f 	bl	8006c0a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800deec:	2102      	movs	r1, #2
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f7ff fdd8 	bl	800daa4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f7f8 fe9b 	bl	8006c30 <pbuf_free>
        break;
 800defa:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800defc:	4b0b      	ldr	r3, [pc, #44]	@ (800df2c <ip4_input+0x240>)
 800defe:	2200      	movs	r2, #0
 800df00:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800df02:	4b0a      	ldr	r3, [pc, #40]	@ (800df2c <ip4_input+0x240>)
 800df04:	2200      	movs	r2, #0
 800df06:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800df08:	4b08      	ldr	r3, [pc, #32]	@ (800df2c <ip4_input+0x240>)
 800df0a:	2200      	movs	r2, #0
 800df0c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800df0e:	4b07      	ldr	r3, [pc, #28]	@ (800df2c <ip4_input+0x240>)
 800df10:	2200      	movs	r2, #0
 800df12:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800df14:	4b05      	ldr	r3, [pc, #20]	@ (800df2c <ip4_input+0x240>)
 800df16:	2200      	movs	r2, #0
 800df18:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800df1a:	4b04      	ldr	r3, [pc, #16]	@ (800df2c <ip4_input+0x240>)
 800df1c:	2200      	movs	r2, #0
 800df1e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800df20:	2300      	movs	r3, #0
}
 800df22:	4618      	mov	r0, r3
 800df24:	3718      	adds	r7, #24
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}
 800df2a:	bf00      	nop
 800df2c:	20004d58 	.word	0x20004d58
 800df30:	20007c68 	.word	0x20007c68

0800df34 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b08a      	sub	sp, #40	@ 0x28
 800df38:	af04      	add	r7, sp, #16
 800df3a:	60f8      	str	r0, [r7, #12]
 800df3c:	60b9      	str	r1, [r7, #8]
 800df3e:	607a      	str	r2, [r7, #4]
 800df40:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d009      	beq.n	800df60 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d003      	beq.n	800df5a <ip4_output_if+0x26>
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d102      	bne.n	800df60 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800df5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df5c:	3304      	adds	r3, #4
 800df5e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800df60:	78fa      	ldrb	r2, [r7, #3]
 800df62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df64:	9302      	str	r3, [sp, #8]
 800df66:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800df6a:	9301      	str	r3, [sp, #4]
 800df6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800df70:	9300      	str	r3, [sp, #0]
 800df72:	4613      	mov	r3, r2
 800df74:	687a      	ldr	r2, [r7, #4]
 800df76:	6979      	ldr	r1, [r7, #20]
 800df78:	68f8      	ldr	r0, [r7, #12]
 800df7a:	f000 f805 	bl	800df88 <ip4_output_if_src>
 800df7e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800df80:	4618      	mov	r0, r3
 800df82:	3718      	adds	r7, #24
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}

0800df88 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b088      	sub	sp, #32
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	60f8      	str	r0, [r7, #12]
 800df90:	60b9      	str	r1, [r7, #8]
 800df92:	607a      	str	r2, [r7, #4]
 800df94:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	7b9b      	ldrb	r3, [r3, #14]
 800df9a:	2b01      	cmp	r3, #1
 800df9c:	d006      	beq.n	800dfac <ip4_output_if_src+0x24>
 800df9e:	4b4b      	ldr	r3, [pc, #300]	@ (800e0cc <ip4_output_if_src+0x144>)
 800dfa0:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800dfa4:	494a      	ldr	r1, [pc, #296]	@ (800e0d0 <ip4_output_if_src+0x148>)
 800dfa6:	484b      	ldr	r0, [pc, #300]	@ (800e0d4 <ip4_output_if_src+0x14c>)
 800dfa8:	f001 f8f2 	bl	800f190 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d060      	beq.n	800e074 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800dfb2:	2314      	movs	r3, #20
 800dfb4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800dfb6:	2114      	movs	r1, #20
 800dfb8:	68f8      	ldr	r0, [r7, #12]
 800dfba:	f7f8 fda3 	bl	8006b04 <pbuf_add_header>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d002      	beq.n	800dfca <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800dfc4:	f06f 0301 	mvn.w	r3, #1
 800dfc8:	e07c      	b.n	800e0c4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	685b      	ldr	r3, [r3, #4]
 800dfce:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	895b      	ldrh	r3, [r3, #10]
 800dfd4:	2b13      	cmp	r3, #19
 800dfd6:	d806      	bhi.n	800dfe6 <ip4_output_if_src+0x5e>
 800dfd8:	4b3c      	ldr	r3, [pc, #240]	@ (800e0cc <ip4_output_if_src+0x144>)
 800dfda:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800dfde:	493e      	ldr	r1, [pc, #248]	@ (800e0d8 <ip4_output_if_src+0x150>)
 800dfe0:	483c      	ldr	r0, [pc, #240]	@ (800e0d4 <ip4_output_if_src+0x14c>)
 800dfe2:	f001 f8d5 	bl	800f190 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800dfe6:	69fb      	ldr	r3, [r7, #28]
 800dfe8:	78fa      	ldrb	r2, [r7, #3]
 800dfea:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800dfec:	69fb      	ldr	r3, [r7, #28]
 800dfee:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800dff2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681a      	ldr	r2, [r3, #0]
 800dff8:	69fb      	ldr	r3, [r7, #28]
 800dffa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800dffc:	8b7b      	ldrh	r3, [r7, #26]
 800dffe:	089b      	lsrs	r3, r3, #2
 800e000:	b29b      	uxth	r3, r3
 800e002:	b2db      	uxtb	r3, r3
 800e004:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e008:	b2da      	uxtb	r2, r3
 800e00a:	69fb      	ldr	r3, [r7, #28]
 800e00c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e00e:	69fb      	ldr	r3, [r7, #28]
 800e010:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800e014:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	891b      	ldrh	r3, [r3, #8]
 800e01a:	4618      	mov	r0, r3
 800e01c:	f7f7 faae 	bl	800557c <lwip_htons>
 800e020:	4603      	mov	r3, r0
 800e022:	461a      	mov	r2, r3
 800e024:	69fb      	ldr	r3, [r7, #28]
 800e026:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e028:	69fb      	ldr	r3, [r7, #28]
 800e02a:	2200      	movs	r2, #0
 800e02c:	719a      	strb	r2, [r3, #6]
 800e02e:	2200      	movs	r2, #0
 800e030:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e032:	4b2a      	ldr	r3, [pc, #168]	@ (800e0dc <ip4_output_if_src+0x154>)
 800e034:	881b      	ldrh	r3, [r3, #0]
 800e036:	4618      	mov	r0, r3
 800e038:	f7f7 faa0 	bl	800557c <lwip_htons>
 800e03c:	4603      	mov	r3, r0
 800e03e:	461a      	mov	r2, r3
 800e040:	69fb      	ldr	r3, [r7, #28]
 800e042:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e044:	4b25      	ldr	r3, [pc, #148]	@ (800e0dc <ip4_output_if_src+0x154>)
 800e046:	881b      	ldrh	r3, [r3, #0]
 800e048:	3301      	adds	r3, #1
 800e04a:	b29a      	uxth	r2, r3
 800e04c:	4b23      	ldr	r3, [pc, #140]	@ (800e0dc <ip4_output_if_src+0x154>)
 800e04e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d104      	bne.n	800e060 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e056:	4b22      	ldr	r3, [pc, #136]	@ (800e0e0 <ip4_output_if_src+0x158>)
 800e058:	681a      	ldr	r2, [r3, #0]
 800e05a:	69fb      	ldr	r3, [r7, #28]
 800e05c:	60da      	str	r2, [r3, #12]
 800e05e:	e003      	b.n	800e068 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	681a      	ldr	r2, [r3, #0]
 800e064:	69fb      	ldr	r3, [r7, #28]
 800e066:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e068:	69fb      	ldr	r3, [r7, #28]
 800e06a:	2200      	movs	r2, #0
 800e06c:	729a      	strb	r2, [r3, #10]
 800e06e:	2200      	movs	r2, #0
 800e070:	72da      	strb	r2, [r3, #11]
 800e072:	e00f      	b.n	800e094 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	895b      	ldrh	r3, [r3, #10]
 800e078:	2b13      	cmp	r3, #19
 800e07a:	d802      	bhi.n	800e082 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e07c:	f06f 0301 	mvn.w	r3, #1
 800e080:	e020      	b.n	800e0c4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	685b      	ldr	r3, [r3, #4]
 800e086:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e088:	69fb      	ldr	r3, [r7, #28]
 800e08a:	691b      	ldr	r3, [r3, #16]
 800e08c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e08e:	f107 0314 	add.w	r3, r7, #20
 800e092:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e096:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d00c      	beq.n	800e0b6 <ip4_output_if_src+0x12e>
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	891a      	ldrh	r2, [r3, #8]
 800e0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0a2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d906      	bls.n	800e0b6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e0a8:	687a      	ldr	r2, [r7, #4]
 800e0aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e0ac:	68f8      	ldr	r0, [r7, #12]
 800e0ae:	f000 fd53 	bl	800eb58 <ip4_frag>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	e006      	b.n	800e0c4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0b8:	695b      	ldr	r3, [r3, #20]
 800e0ba:	687a      	ldr	r2, [r7, #4]
 800e0bc:	68f9      	ldr	r1, [r7, #12]
 800e0be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e0c0:	4798      	blx	r3
 800e0c2:	4603      	mov	r3, r0
}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	3720      	adds	r7, #32
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}
 800e0cc:	08012644 	.word	0x08012644
 800e0d0:	08012678 	.word	0x08012678
 800e0d4:	08012684 	.word	0x08012684
 800e0d8:	080126ac 	.word	0x080126ac
 800e0dc:	20007dc6 	.word	0x20007dc6
 800e0e0:	08012a8c 	.word	0x08012a8c

0800e0e4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e0e4:	b480      	push	{r7}
 800e0e6:	b085      	sub	sp, #20
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
 800e0ec:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e0f8:	d002      	beq.n	800e100 <ip4_addr_isbroadcast_u32+0x1c>
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d101      	bne.n	800e104 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e100:	2301      	movs	r3, #1
 800e102:	e02a      	b.n	800e15a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e10a:	f003 0302 	and.w	r3, r3, #2
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d101      	bne.n	800e116 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e112:	2300      	movs	r3, #0
 800e114:	e021      	b.n	800e15a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	3304      	adds	r3, #4
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	687a      	ldr	r2, [r7, #4]
 800e11e:	429a      	cmp	r2, r3
 800e120:	d101      	bne.n	800e126 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e122:	2300      	movs	r3, #0
 800e124:	e019      	b.n	800e15a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e126:	68fa      	ldr	r2, [r7, #12]
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	3304      	adds	r3, #4
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	405a      	eors	r2, r3
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	3308      	adds	r3, #8
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	4013      	ands	r3, r2
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d10d      	bne.n	800e158 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	3308      	adds	r3, #8
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	43da      	mvns	r2, r3
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	3308      	adds	r3, #8
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e150:	429a      	cmp	r2, r3
 800e152:	d101      	bne.n	800e158 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e154:	2301      	movs	r3, #1
 800e156:	e000      	b.n	800e15a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e158:	2300      	movs	r3, #0
  }
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3714      	adds	r7, #20
 800e15e:	46bd      	mov	sp, r7
 800e160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e164:	4770      	bx	lr
	...

0800e168 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b084      	sub	sp, #16
 800e16c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e16e:	2300      	movs	r3, #0
 800e170:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e172:	4b12      	ldr	r3, [pc, #72]	@ (800e1bc <ip_reass_tmr+0x54>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e178:	e018      	b.n	800e1ac <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	7fdb      	ldrb	r3, [r3, #31]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d00b      	beq.n	800e19a <ip_reass_tmr+0x32>
      r->timer--;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	7fdb      	ldrb	r3, [r3, #31]
 800e186:	3b01      	subs	r3, #1
 800e188:	b2da      	uxtb	r2, r3
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	60fb      	str	r3, [r7, #12]
 800e198:	e008      	b.n	800e1ac <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e1a4:	68b9      	ldr	r1, [r7, #8]
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f000 f80a 	bl	800e1c0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d1e3      	bne.n	800e17a <ip_reass_tmr+0x12>
    }
  }
}
 800e1b2:	bf00      	nop
 800e1b4:	bf00      	nop
 800e1b6:	3710      	adds	r7, #16
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}
 800e1bc:	20007dc8 	.word	0x20007dc8

0800e1c0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b088      	sub	sp, #32
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
 800e1c8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e1ce:	683a      	ldr	r2, [r7, #0]
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	d105      	bne.n	800e1e2 <ip_reass_free_complete_datagram+0x22>
 800e1d6:	4b45      	ldr	r3, [pc, #276]	@ (800e2ec <ip_reass_free_complete_datagram+0x12c>)
 800e1d8:	22ab      	movs	r2, #171	@ 0xab
 800e1da:	4945      	ldr	r1, [pc, #276]	@ (800e2f0 <ip_reass_free_complete_datagram+0x130>)
 800e1dc:	4845      	ldr	r0, [pc, #276]	@ (800e2f4 <ip_reass_free_complete_datagram+0x134>)
 800e1de:	f000 ffd7 	bl	800f190 <iprintf>
  if (prev != NULL) {
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d00a      	beq.n	800e1fe <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	687a      	ldr	r2, [r7, #4]
 800e1ee:	429a      	cmp	r2, r3
 800e1f0:	d005      	beq.n	800e1fe <ip_reass_free_complete_datagram+0x3e>
 800e1f2:	4b3e      	ldr	r3, [pc, #248]	@ (800e2ec <ip_reass_free_complete_datagram+0x12c>)
 800e1f4:	22ad      	movs	r2, #173	@ 0xad
 800e1f6:	4940      	ldr	r1, [pc, #256]	@ (800e2f8 <ip_reass_free_complete_datagram+0x138>)
 800e1f8:	483e      	ldr	r0, [pc, #248]	@ (800e2f4 <ip_reass_free_complete_datagram+0x134>)
 800e1fa:	f000 ffc9 	bl	800f190 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	685b      	ldr	r3, [r3, #4]
 800e202:	685b      	ldr	r3, [r3, #4]
 800e204:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	889b      	ldrh	r3, [r3, #4]
 800e20a:	b29b      	uxth	r3, r3
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d12a      	bne.n	800e266 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	685b      	ldr	r3, [r3, #4]
 800e214:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	681a      	ldr	r2, [r3, #0]
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e21e:	69bb      	ldr	r3, [r7, #24]
 800e220:	6858      	ldr	r0, [r3, #4]
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	3308      	adds	r3, #8
 800e226:	2214      	movs	r2, #20
 800e228:	4619      	mov	r1, r3
 800e22a:	f001 f88c 	bl	800f346 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e22e:	2101      	movs	r1, #1
 800e230:	69b8      	ldr	r0, [r7, #24]
 800e232:	f7ff fc47 	bl	800dac4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e236:	69b8      	ldr	r0, [r7, #24]
 800e238:	f7f8 fd82 	bl	8006d40 <pbuf_clen>
 800e23c:	4603      	mov	r3, r0
 800e23e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e240:	8bfa      	ldrh	r2, [r7, #30]
 800e242:	8a7b      	ldrh	r3, [r7, #18]
 800e244:	4413      	add	r3, r2
 800e246:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e24a:	db05      	blt.n	800e258 <ip_reass_free_complete_datagram+0x98>
 800e24c:	4b27      	ldr	r3, [pc, #156]	@ (800e2ec <ip_reass_free_complete_datagram+0x12c>)
 800e24e:	22bc      	movs	r2, #188	@ 0xbc
 800e250:	492a      	ldr	r1, [pc, #168]	@ (800e2fc <ip_reass_free_complete_datagram+0x13c>)
 800e252:	4828      	ldr	r0, [pc, #160]	@ (800e2f4 <ip_reass_free_complete_datagram+0x134>)
 800e254:	f000 ff9c 	bl	800f190 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e258:	8bfa      	ldrh	r2, [r7, #30]
 800e25a:	8a7b      	ldrh	r3, [r7, #18]
 800e25c:	4413      	add	r3, r2
 800e25e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e260:	69b8      	ldr	r0, [r7, #24]
 800e262:	f7f8 fce5 	bl	8006c30 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	685b      	ldr	r3, [r3, #4]
 800e26a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e26c:	e01f      	b.n	800e2ae <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e26e:	69bb      	ldr	r3, [r7, #24]
 800e270:	685b      	ldr	r3, [r3, #4]
 800e272:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e274:	69bb      	ldr	r3, [r7, #24]
 800e276:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e27e:	68f8      	ldr	r0, [r7, #12]
 800e280:	f7f8 fd5e 	bl	8006d40 <pbuf_clen>
 800e284:	4603      	mov	r3, r0
 800e286:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e288:	8bfa      	ldrh	r2, [r7, #30]
 800e28a:	8a7b      	ldrh	r3, [r7, #18]
 800e28c:	4413      	add	r3, r2
 800e28e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e292:	db05      	blt.n	800e2a0 <ip_reass_free_complete_datagram+0xe0>
 800e294:	4b15      	ldr	r3, [pc, #84]	@ (800e2ec <ip_reass_free_complete_datagram+0x12c>)
 800e296:	22cc      	movs	r2, #204	@ 0xcc
 800e298:	4918      	ldr	r1, [pc, #96]	@ (800e2fc <ip_reass_free_complete_datagram+0x13c>)
 800e29a:	4816      	ldr	r0, [pc, #88]	@ (800e2f4 <ip_reass_free_complete_datagram+0x134>)
 800e29c:	f000 ff78 	bl	800f190 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e2a0:	8bfa      	ldrh	r2, [r7, #30]
 800e2a2:	8a7b      	ldrh	r3, [r7, #18]
 800e2a4:	4413      	add	r3, r2
 800e2a6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e2a8:	68f8      	ldr	r0, [r7, #12]
 800e2aa:	f7f8 fcc1 	bl	8006c30 <pbuf_free>
  while (p != NULL) {
 800e2ae:	69bb      	ldr	r3, [r7, #24]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d1dc      	bne.n	800e26e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e2b4:	6839      	ldr	r1, [r7, #0]
 800e2b6:	6878      	ldr	r0, [r7, #4]
 800e2b8:	f000 f8c2 	bl	800e440 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e2bc:	4b10      	ldr	r3, [pc, #64]	@ (800e300 <ip_reass_free_complete_datagram+0x140>)
 800e2be:	881b      	ldrh	r3, [r3, #0]
 800e2c0:	8bfa      	ldrh	r2, [r7, #30]
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	d905      	bls.n	800e2d2 <ip_reass_free_complete_datagram+0x112>
 800e2c6:	4b09      	ldr	r3, [pc, #36]	@ (800e2ec <ip_reass_free_complete_datagram+0x12c>)
 800e2c8:	22d2      	movs	r2, #210	@ 0xd2
 800e2ca:	490e      	ldr	r1, [pc, #56]	@ (800e304 <ip_reass_free_complete_datagram+0x144>)
 800e2cc:	4809      	ldr	r0, [pc, #36]	@ (800e2f4 <ip_reass_free_complete_datagram+0x134>)
 800e2ce:	f000 ff5f 	bl	800f190 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e2d2:	4b0b      	ldr	r3, [pc, #44]	@ (800e300 <ip_reass_free_complete_datagram+0x140>)
 800e2d4:	881a      	ldrh	r2, [r3, #0]
 800e2d6:	8bfb      	ldrh	r3, [r7, #30]
 800e2d8:	1ad3      	subs	r3, r2, r3
 800e2da:	b29a      	uxth	r2, r3
 800e2dc:	4b08      	ldr	r3, [pc, #32]	@ (800e300 <ip_reass_free_complete_datagram+0x140>)
 800e2de:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e2e0:	8bfb      	ldrh	r3, [r7, #30]
}
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	3720      	adds	r7, #32
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}
 800e2ea:	bf00      	nop
 800e2ec:	080126dc 	.word	0x080126dc
 800e2f0:	08012718 	.word	0x08012718
 800e2f4:	08012724 	.word	0x08012724
 800e2f8:	0801274c 	.word	0x0801274c
 800e2fc:	08012760 	.word	0x08012760
 800e300:	20007dcc 	.word	0x20007dcc
 800e304:	08012780 	.word	0x08012780

0800e308 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b08a      	sub	sp, #40	@ 0x28
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
 800e310:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e312:	2300      	movs	r3, #0
 800e314:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e316:	2300      	movs	r3, #0
 800e318:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e31a:	2300      	movs	r3, #0
 800e31c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e31e:	2300      	movs	r3, #0
 800e320:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e322:	2300      	movs	r3, #0
 800e324:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e326:	4b28      	ldr	r3, [pc, #160]	@ (800e3c8 <ip_reass_remove_oldest_datagram+0xc0>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800e32c:	e030      	b.n	800e390 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e330:	695a      	ldr	r2, [r3, #20]
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	68db      	ldr	r3, [r3, #12]
 800e336:	429a      	cmp	r2, r3
 800e338:	d10c      	bne.n	800e354 <ip_reass_remove_oldest_datagram+0x4c>
 800e33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e33c:	699a      	ldr	r2, [r3, #24]
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	691b      	ldr	r3, [r3, #16]
 800e342:	429a      	cmp	r2, r3
 800e344:	d106      	bne.n	800e354 <ip_reass_remove_oldest_datagram+0x4c>
 800e346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e348:	899a      	ldrh	r2, [r3, #12]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	889b      	ldrh	r3, [r3, #4]
 800e34e:	b29b      	uxth	r3, r3
 800e350:	429a      	cmp	r2, r3
 800e352:	d014      	beq.n	800e37e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e354:	693b      	ldr	r3, [r7, #16]
 800e356:	3301      	adds	r3, #1
 800e358:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e35a:	6a3b      	ldr	r3, [r7, #32]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d104      	bne.n	800e36a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e362:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	61bb      	str	r3, [r7, #24]
 800e368:	e009      	b.n	800e37e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e36c:	7fda      	ldrb	r2, [r3, #31]
 800e36e:	6a3b      	ldr	r3, [r7, #32]
 800e370:	7fdb      	ldrb	r3, [r3, #31]
 800e372:	429a      	cmp	r2, r3
 800e374:	d803      	bhi.n	800e37e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e378:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e37a:	69fb      	ldr	r3, [r7, #28]
 800e37c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d001      	beq.n	800e38a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e388:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800e390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e392:	2b00      	cmp	r3, #0
 800e394:	d1cb      	bne.n	800e32e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e396:	6a3b      	ldr	r3, [r7, #32]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d008      	beq.n	800e3ae <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e39c:	69b9      	ldr	r1, [r7, #24]
 800e39e:	6a38      	ldr	r0, [r7, #32]
 800e3a0:	f7ff ff0e 	bl	800e1c0 <ip_reass_free_complete_datagram>
 800e3a4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e3a6:	697a      	ldr	r2, [r7, #20]
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	4413      	add	r3, r2
 800e3ac:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e3ae:	697a      	ldr	r2, [r7, #20]
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	429a      	cmp	r2, r3
 800e3b4:	da02      	bge.n	800e3bc <ip_reass_remove_oldest_datagram+0xb4>
 800e3b6:	693b      	ldr	r3, [r7, #16]
 800e3b8:	2b01      	cmp	r3, #1
 800e3ba:	dcac      	bgt.n	800e316 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e3bc:	697b      	ldr	r3, [r7, #20]
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	3728      	adds	r7, #40	@ 0x28
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}
 800e3c6:	bf00      	nop
 800e3c8:	20007dc8 	.word	0x20007dc8

0800e3cc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b084      	sub	sp, #16
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
 800e3d4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e3d6:	2004      	movs	r0, #4
 800e3d8:	f7f7 fd44 	bl	8005e64 <memp_malloc>
 800e3dc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d110      	bne.n	800e406 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e3e4:	6839      	ldr	r1, [r7, #0]
 800e3e6:	6878      	ldr	r0, [r7, #4]
 800e3e8:	f7ff ff8e 	bl	800e308 <ip_reass_remove_oldest_datagram>
 800e3ec:	4602      	mov	r2, r0
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	4293      	cmp	r3, r2
 800e3f2:	dc03      	bgt.n	800e3fc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e3f4:	2004      	movs	r0, #4
 800e3f6:	f7f7 fd35 	bl	8005e64 <memp_malloc>
 800e3fa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d101      	bne.n	800e406 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e402:	2300      	movs	r3, #0
 800e404:	e016      	b.n	800e434 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e406:	2220      	movs	r2, #32
 800e408:	2100      	movs	r1, #0
 800e40a:	68f8      	ldr	r0, [r7, #12]
 800e40c:	f000 ff25 	bl	800f25a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	220f      	movs	r2, #15
 800e414:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e416:	4b09      	ldr	r3, [pc, #36]	@ (800e43c <ip_reass_enqueue_new_datagram+0x70>)
 800e418:	681a      	ldr	r2, [r3, #0]
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e41e:	4a07      	ldr	r2, [pc, #28]	@ (800e43c <ip_reass_enqueue_new_datagram+0x70>)
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	3308      	adds	r3, #8
 800e428:	2214      	movs	r2, #20
 800e42a:	6879      	ldr	r1, [r7, #4]
 800e42c:	4618      	mov	r0, r3
 800e42e:	f000 ff8a 	bl	800f346 <memcpy>
  return ipr;
 800e432:	68fb      	ldr	r3, [r7, #12]
}
 800e434:	4618      	mov	r0, r3
 800e436:	3710      	adds	r7, #16
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}
 800e43c:	20007dc8 	.word	0x20007dc8

0800e440 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b082      	sub	sp, #8
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
 800e448:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e44a:	4b10      	ldr	r3, [pc, #64]	@ (800e48c <ip_reass_dequeue_datagram+0x4c>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	687a      	ldr	r2, [r7, #4]
 800e450:	429a      	cmp	r2, r3
 800e452:	d104      	bne.n	800e45e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	4a0c      	ldr	r2, [pc, #48]	@ (800e48c <ip_reass_dequeue_datagram+0x4c>)
 800e45a:	6013      	str	r3, [r2, #0]
 800e45c:	e00d      	b.n	800e47a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d106      	bne.n	800e472 <ip_reass_dequeue_datagram+0x32>
 800e464:	4b0a      	ldr	r3, [pc, #40]	@ (800e490 <ip_reass_dequeue_datagram+0x50>)
 800e466:	f240 1245 	movw	r2, #325	@ 0x145
 800e46a:	490a      	ldr	r1, [pc, #40]	@ (800e494 <ip_reass_dequeue_datagram+0x54>)
 800e46c:	480a      	ldr	r0, [pc, #40]	@ (800e498 <ip_reass_dequeue_datagram+0x58>)
 800e46e:	f000 fe8f 	bl	800f190 <iprintf>
    prev->next = ipr->next;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681a      	ldr	r2, [r3, #0]
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e47a:	6879      	ldr	r1, [r7, #4]
 800e47c:	2004      	movs	r0, #4
 800e47e:	f7f7 fd61 	bl	8005f44 <memp_free>
}
 800e482:	bf00      	nop
 800e484:	3708      	adds	r7, #8
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	20007dc8 	.word	0x20007dc8
 800e490:	080126dc 	.word	0x080126dc
 800e494:	080127a4 	.word	0x080127a4
 800e498:	08012724 	.word	0x08012724

0800e49c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b08c      	sub	sp, #48	@ 0x30
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	60f8      	str	r0, [r7, #12]
 800e4a4:	60b9      	str	r1, [r7, #8]
 800e4a6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	685b      	ldr	r3, [r3, #4]
 800e4b4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e4b6:	69fb      	ldr	r3, [r7, #28]
 800e4b8:	885b      	ldrh	r3, [r3, #2]
 800e4ba:	b29b      	uxth	r3, r3
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f7f7 f85d 	bl	800557c <lwip_htons>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e4c6:	69fb      	ldr	r3, [r7, #28]
 800e4c8:	781b      	ldrb	r3, [r3, #0]
 800e4ca:	f003 030f 	and.w	r3, r3, #15
 800e4ce:	b2db      	uxtb	r3, r3
 800e4d0:	009b      	lsls	r3, r3, #2
 800e4d2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e4d4:	7e7b      	ldrb	r3, [r7, #25]
 800e4d6:	b29b      	uxth	r3, r3
 800e4d8:	8b7a      	ldrh	r2, [r7, #26]
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d202      	bcs.n	800e4e4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e4de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e4e2:	e135      	b.n	800e750 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e4e4:	7e7b      	ldrb	r3, [r7, #25]
 800e4e6:	b29b      	uxth	r3, r3
 800e4e8:	8b7a      	ldrh	r2, [r7, #26]
 800e4ea:	1ad3      	subs	r3, r2, r3
 800e4ec:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e4ee:	69fb      	ldr	r3, [r7, #28]
 800e4f0:	88db      	ldrh	r3, [r3, #6]
 800e4f2:	b29b      	uxth	r3, r3
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f7f7 f841 	bl	800557c <lwip_htons>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e500:	b29b      	uxth	r3, r3
 800e502:	00db      	lsls	r3, r3, #3
 800e504:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	685b      	ldr	r3, [r3, #4]
 800e50a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800e50c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e50e:	2200      	movs	r2, #0
 800e510:	701a      	strb	r2, [r3, #0]
 800e512:	2200      	movs	r2, #0
 800e514:	705a      	strb	r2, [r3, #1]
 800e516:	2200      	movs	r2, #0
 800e518:	709a      	strb	r2, [r3, #2]
 800e51a:	2200      	movs	r2, #0
 800e51c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e51e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e520:	8afa      	ldrh	r2, [r7, #22]
 800e522:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e524:	8afa      	ldrh	r2, [r7, #22]
 800e526:	8b7b      	ldrh	r3, [r7, #26]
 800e528:	4413      	add	r3, r2
 800e52a:	b29a      	uxth	r2, r3
 800e52c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e52e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e532:	88db      	ldrh	r3, [r3, #6]
 800e534:	b29b      	uxth	r3, r3
 800e536:	8afa      	ldrh	r2, [r7, #22]
 800e538:	429a      	cmp	r2, r3
 800e53a:	d902      	bls.n	800e542 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e53c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e540:	e106      	b.n	800e750 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	685b      	ldr	r3, [r3, #4]
 800e546:	627b      	str	r3, [r7, #36]	@ 0x24
 800e548:	e068      	b.n	800e61c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e54c:	685b      	ldr	r3, [r3, #4]
 800e54e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e552:	889b      	ldrh	r3, [r3, #4]
 800e554:	b29a      	uxth	r2, r3
 800e556:	693b      	ldr	r3, [r7, #16]
 800e558:	889b      	ldrh	r3, [r3, #4]
 800e55a:	b29b      	uxth	r3, r3
 800e55c:	429a      	cmp	r2, r3
 800e55e:	d235      	bcs.n	800e5cc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e564:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d020      	beq.n	800e5ae <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e56c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e56e:	889b      	ldrh	r3, [r3, #4]
 800e570:	b29a      	uxth	r2, r3
 800e572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e574:	88db      	ldrh	r3, [r3, #6]
 800e576:	b29b      	uxth	r3, r3
 800e578:	429a      	cmp	r2, r3
 800e57a:	d307      	bcc.n	800e58c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e57c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e57e:	88db      	ldrh	r3, [r3, #6]
 800e580:	b29a      	uxth	r2, r3
 800e582:	693b      	ldr	r3, [r7, #16]
 800e584:	889b      	ldrh	r3, [r3, #4]
 800e586:	b29b      	uxth	r3, r3
 800e588:	429a      	cmp	r2, r3
 800e58a:	d902      	bls.n	800e592 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e58c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e590:	e0de      	b.n	800e750 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e594:	68ba      	ldr	r2, [r7, #8]
 800e596:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e59a:	88db      	ldrh	r3, [r3, #6]
 800e59c:	b29a      	uxth	r2, r3
 800e59e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5a0:	889b      	ldrh	r3, [r3, #4]
 800e5a2:	b29b      	uxth	r3, r3
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	d03d      	beq.n	800e624 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e5ac:	e03a      	b.n	800e624 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e5ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5b0:	88db      	ldrh	r3, [r3, #6]
 800e5b2:	b29a      	uxth	r2, r3
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	889b      	ldrh	r3, [r3, #4]
 800e5b8:	b29b      	uxth	r3, r3
 800e5ba:	429a      	cmp	r2, r3
 800e5bc:	d902      	bls.n	800e5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e5be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e5c2:	e0c5      	b.n	800e750 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	68ba      	ldr	r2, [r7, #8]
 800e5c8:	605a      	str	r2, [r3, #4]
      break;
 800e5ca:	e02b      	b.n	800e624 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e5cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5ce:	889b      	ldrh	r3, [r3, #4]
 800e5d0:	b29a      	uxth	r2, r3
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	889b      	ldrh	r3, [r3, #4]
 800e5d6:	b29b      	uxth	r3, r3
 800e5d8:	429a      	cmp	r2, r3
 800e5da:	d102      	bne.n	800e5e2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e5dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e5e0:	e0b6      	b.n	800e750 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e5e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5e4:	889b      	ldrh	r3, [r3, #4]
 800e5e6:	b29a      	uxth	r2, r3
 800e5e8:	693b      	ldr	r3, [r7, #16]
 800e5ea:	88db      	ldrh	r3, [r3, #6]
 800e5ec:	b29b      	uxth	r3, r3
 800e5ee:	429a      	cmp	r2, r3
 800e5f0:	d202      	bcs.n	800e5f8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e5f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e5f6:	e0ab      	b.n	800e750 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e5f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d009      	beq.n	800e612 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e5fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e600:	88db      	ldrh	r3, [r3, #6]
 800e602:	b29a      	uxth	r2, r3
 800e604:	693b      	ldr	r3, [r7, #16]
 800e606:	889b      	ldrh	r3, [r3, #4]
 800e608:	b29b      	uxth	r3, r3
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d001      	beq.n	800e612 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e60e:	2300      	movs	r3, #0
 800e610:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e612:	693b      	ldr	r3, [r7, #16]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800e61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d193      	bne.n	800e54a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e622:	e000      	b.n	800e626 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e624:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d12d      	bne.n	800e688 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e62c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d01c      	beq.n	800e66c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e634:	88db      	ldrh	r3, [r3, #6]
 800e636:	b29a      	uxth	r2, r3
 800e638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e63a:	889b      	ldrh	r3, [r3, #4]
 800e63c:	b29b      	uxth	r3, r3
 800e63e:	429a      	cmp	r2, r3
 800e640:	d906      	bls.n	800e650 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e642:	4b45      	ldr	r3, [pc, #276]	@ (800e758 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e644:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800e648:	4944      	ldr	r1, [pc, #272]	@ (800e75c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e64a:	4845      	ldr	r0, [pc, #276]	@ (800e760 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e64c:	f000 fda0 	bl	800f190 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e652:	68ba      	ldr	r2, [r7, #8]
 800e654:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e658:	88db      	ldrh	r3, [r3, #6]
 800e65a:	b29a      	uxth	r2, r3
 800e65c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e65e:	889b      	ldrh	r3, [r3, #4]
 800e660:	b29b      	uxth	r3, r3
 800e662:	429a      	cmp	r2, r3
 800e664:	d010      	beq.n	800e688 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e666:	2300      	movs	r3, #0
 800e668:	623b      	str	r3, [r7, #32]
 800e66a:	e00d      	b.n	800e688 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	685b      	ldr	r3, [r3, #4]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d006      	beq.n	800e682 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e674:	4b38      	ldr	r3, [pc, #224]	@ (800e758 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e676:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800e67a:	493a      	ldr	r1, [pc, #232]	@ (800e764 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e67c:	4838      	ldr	r0, [pc, #224]	@ (800e760 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e67e:	f000 fd87 	bl	800f190 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	68ba      	ldr	r2, [r7, #8]
 800e686:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d105      	bne.n	800e69a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	7f9b      	ldrb	r3, [r3, #30]
 800e692:	f003 0301 	and.w	r3, r3, #1
 800e696:	2b00      	cmp	r3, #0
 800e698:	d059      	beq.n	800e74e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e69a:	6a3b      	ldr	r3, [r7, #32]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d04f      	beq.n	800e740 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	685b      	ldr	r3, [r3, #4]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d006      	beq.n	800e6b6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	685b      	ldr	r3, [r3, #4]
 800e6ac:	685b      	ldr	r3, [r3, #4]
 800e6ae:	889b      	ldrh	r3, [r3, #4]
 800e6b0:	b29b      	uxth	r3, r3
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d002      	beq.n	800e6bc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	623b      	str	r3, [r7, #32]
 800e6ba:	e041      	b.n	800e740 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e6bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6be:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800e6c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800e6c6:	e012      	b.n	800e6ee <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6ca:	685b      	ldr	r3, [r3, #4]
 800e6cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800e6ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6d0:	88db      	ldrh	r3, [r3, #6]
 800e6d2:	b29a      	uxth	r2, r3
 800e6d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6d6:	889b      	ldrh	r3, [r3, #4]
 800e6d8:	b29b      	uxth	r3, r3
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	d002      	beq.n	800e6e4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	623b      	str	r3, [r7, #32]
            break;
 800e6e2:	e007      	b.n	800e6f4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e6e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6e6:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800e6e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800e6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d1e9      	bne.n	800e6c8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e6f4:	6a3b      	ldr	r3, [r7, #32]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d022      	beq.n	800e740 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	685b      	ldr	r3, [r3, #4]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d106      	bne.n	800e710 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e702:	4b15      	ldr	r3, [pc, #84]	@ (800e758 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e704:	f240 12df 	movw	r2, #479	@ 0x1df
 800e708:	4917      	ldr	r1, [pc, #92]	@ (800e768 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e70a:	4815      	ldr	r0, [pc, #84]	@ (800e760 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e70c:	f000 fd40 	bl	800f190 <iprintf>
          LWIP_ASSERT("sanity check",
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	685b      	ldr	r3, [r3, #4]
 800e714:	685b      	ldr	r3, [r3, #4]
 800e716:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e718:	429a      	cmp	r2, r3
 800e71a:	d106      	bne.n	800e72a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e71c:	4b0e      	ldr	r3, [pc, #56]	@ (800e758 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e71e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800e722:	4911      	ldr	r1, [pc, #68]	@ (800e768 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e724:	480e      	ldr	r0, [pc, #56]	@ (800e760 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e726:	f000 fd33 	bl	800f190 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e72a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d006      	beq.n	800e740 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e732:	4b09      	ldr	r3, [pc, #36]	@ (800e758 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e734:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800e738:	490c      	ldr	r1, [pc, #48]	@ (800e76c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e73a:	4809      	ldr	r0, [pc, #36]	@ (800e760 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e73c:	f000 fd28 	bl	800f190 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e740:	6a3b      	ldr	r3, [r7, #32]
 800e742:	2b00      	cmp	r3, #0
 800e744:	bf14      	ite	ne
 800e746:	2301      	movne	r3, #1
 800e748:	2300      	moveq	r3, #0
 800e74a:	b2db      	uxtb	r3, r3
 800e74c:	e000      	b.n	800e750 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e74e:	2300      	movs	r3, #0
}
 800e750:	4618      	mov	r0, r3
 800e752:	3730      	adds	r7, #48	@ 0x30
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}
 800e758:	080126dc 	.word	0x080126dc
 800e75c:	080127c0 	.word	0x080127c0
 800e760:	08012724 	.word	0x08012724
 800e764:	080127e0 	.word	0x080127e0
 800e768:	08012818 	.word	0x08012818
 800e76c:	08012828 	.word	0x08012828

0800e770 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b08e      	sub	sp, #56	@ 0x38
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	685b      	ldr	r3, [r3, #4]
 800e77c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e77e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e780:	781b      	ldrb	r3, [r3, #0]
 800e782:	f003 030f 	and.w	r3, r3, #15
 800e786:	b2db      	uxtb	r3, r3
 800e788:	009b      	lsls	r3, r3, #2
 800e78a:	b2db      	uxtb	r3, r3
 800e78c:	2b14      	cmp	r3, #20
 800e78e:	f040 8171 	bne.w	800ea74 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e794:	88db      	ldrh	r3, [r3, #6]
 800e796:	b29b      	uxth	r3, r3
 800e798:	4618      	mov	r0, r3
 800e79a:	f7f6 feef 	bl	800557c <lwip_htons>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e7a4:	b29b      	uxth	r3, r3
 800e7a6:	00db      	lsls	r3, r3, #3
 800e7a8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e7aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7ac:	885b      	ldrh	r3, [r3, #2]
 800e7ae:	b29b      	uxth	r3, r3
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7f6 fee3 	bl	800557c <lwip_htons>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7bc:	781b      	ldrb	r3, [r3, #0]
 800e7be:	f003 030f 	and.w	r3, r3, #15
 800e7c2:	b2db      	uxtb	r3, r3
 800e7c4:	009b      	lsls	r3, r3, #2
 800e7c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800e7ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e7ce:	b29b      	uxth	r3, r3
 800e7d0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	f0c0 8150 	bcc.w	800ea78 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e7d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e7dc:	b29b      	uxth	r3, r3
 800e7de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e7e0:	1ad3      	subs	r3, r2, r3
 800e7e2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f7f8 faab 	bl	8006d40 <pbuf_clen>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e7ee:	4b8c      	ldr	r3, [pc, #560]	@ (800ea20 <ip4_reass+0x2b0>)
 800e7f0:	881b      	ldrh	r3, [r3, #0]
 800e7f2:	461a      	mov	r2, r3
 800e7f4:	8c3b      	ldrh	r3, [r7, #32]
 800e7f6:	4413      	add	r3, r2
 800e7f8:	2b0a      	cmp	r3, #10
 800e7fa:	dd10      	ble.n	800e81e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e7fc:	8c3b      	ldrh	r3, [r7, #32]
 800e7fe:	4619      	mov	r1, r3
 800e800:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e802:	f7ff fd81 	bl	800e308 <ip_reass_remove_oldest_datagram>
 800e806:	4603      	mov	r3, r0
 800e808:	2b00      	cmp	r3, #0
 800e80a:	f000 8137 	beq.w	800ea7c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e80e:	4b84      	ldr	r3, [pc, #528]	@ (800ea20 <ip4_reass+0x2b0>)
 800e810:	881b      	ldrh	r3, [r3, #0]
 800e812:	461a      	mov	r2, r3
 800e814:	8c3b      	ldrh	r3, [r7, #32]
 800e816:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e818:	2b0a      	cmp	r3, #10
 800e81a:	f300 812f 	bgt.w	800ea7c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e81e:	4b81      	ldr	r3, [pc, #516]	@ (800ea24 <ip4_reass+0x2b4>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	633b      	str	r3, [r7, #48]	@ 0x30
 800e824:	e015      	b.n	800e852 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e828:	695a      	ldr	r2, [r3, #20]
 800e82a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e82c:	68db      	ldr	r3, [r3, #12]
 800e82e:	429a      	cmp	r2, r3
 800e830:	d10c      	bne.n	800e84c <ip4_reass+0xdc>
 800e832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e834:	699a      	ldr	r2, [r3, #24]
 800e836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e838:	691b      	ldr	r3, [r3, #16]
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d106      	bne.n	800e84c <ip4_reass+0xdc>
 800e83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e840:	899a      	ldrh	r2, [r3, #12]
 800e842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e844:	889b      	ldrh	r3, [r3, #4]
 800e846:	b29b      	uxth	r3, r3
 800e848:	429a      	cmp	r2, r3
 800e84a:	d006      	beq.n	800e85a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e84c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	633b      	str	r3, [r7, #48]	@ 0x30
 800e852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e854:	2b00      	cmp	r3, #0
 800e856:	d1e6      	bne.n	800e826 <ip4_reass+0xb6>
 800e858:	e000      	b.n	800e85c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e85a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e85c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d109      	bne.n	800e876 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e862:	8c3b      	ldrh	r3, [r7, #32]
 800e864:	4619      	mov	r1, r3
 800e866:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e868:	f7ff fdb0 	bl	800e3cc <ip_reass_enqueue_new_datagram>
 800e86c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e870:	2b00      	cmp	r3, #0
 800e872:	d11c      	bne.n	800e8ae <ip4_reass+0x13e>
      goto nullreturn;
 800e874:	e105      	b.n	800ea82 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e878:	88db      	ldrh	r3, [r3, #6]
 800e87a:	b29b      	uxth	r3, r3
 800e87c:	4618      	mov	r0, r3
 800e87e:	f7f6 fe7d 	bl	800557c <lwip_htons>
 800e882:	4603      	mov	r3, r0
 800e884:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d110      	bne.n	800e8ae <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e88c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e88e:	89db      	ldrh	r3, [r3, #14]
 800e890:	4618      	mov	r0, r3
 800e892:	f7f6 fe73 	bl	800557c <lwip_htons>
 800e896:	4603      	mov	r3, r0
 800e898:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d006      	beq.n	800e8ae <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8a2:	3308      	adds	r3, #8
 800e8a4:	2214      	movs	r2, #20
 800e8a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f000 fd4c 	bl	800f346 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e8ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8b0:	88db      	ldrh	r3, [r3, #6]
 800e8b2:	b29b      	uxth	r3, r3
 800e8b4:	f003 0320 	and.w	r3, r3, #32
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	bf0c      	ite	eq
 800e8bc:	2301      	moveq	r3, #1
 800e8be:	2300      	movne	r3, #0
 800e8c0:	b2db      	uxtb	r3, r3
 800e8c2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e8c4:	69fb      	ldr	r3, [r7, #28]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d00e      	beq.n	800e8e8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e8ca:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e8cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e8ce:	4413      	add	r3, r2
 800e8d0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e8d2:	8b7a      	ldrh	r2, [r7, #26]
 800e8d4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	f0c0 80a0 	bcc.w	800ea1c <ip4_reass+0x2ac>
 800e8dc:	8b7b      	ldrh	r3, [r7, #26]
 800e8de:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800e8e2:	4293      	cmp	r3, r2
 800e8e4:	f200 809a 	bhi.w	800ea1c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e8e8:	69fa      	ldr	r2, [r7, #28]
 800e8ea:	6879      	ldr	r1, [r7, #4]
 800e8ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e8ee:	f7ff fdd5 	bl	800e49c <ip_reass_chain_frag_into_datagram_and_validate>
 800e8f2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e8f4:	697b      	ldr	r3, [r7, #20]
 800e8f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e8fa:	f000 809b 	beq.w	800ea34 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e8fe:	4b48      	ldr	r3, [pc, #288]	@ (800ea20 <ip4_reass+0x2b0>)
 800e900:	881a      	ldrh	r2, [r3, #0]
 800e902:	8c3b      	ldrh	r3, [r7, #32]
 800e904:	4413      	add	r3, r2
 800e906:	b29a      	uxth	r2, r3
 800e908:	4b45      	ldr	r3, [pc, #276]	@ (800ea20 <ip4_reass+0x2b0>)
 800e90a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e90c:	69fb      	ldr	r3, [r7, #28]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d00d      	beq.n	800e92e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e912:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e914:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e916:	4413      	add	r3, r2
 800e918:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e91c:	8a7a      	ldrh	r2, [r7, #18]
 800e91e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e922:	7f9b      	ldrb	r3, [r3, #30]
 800e924:	f043 0301 	orr.w	r3, r3, #1
 800e928:	b2da      	uxtb	r2, r3
 800e92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e92c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e92e:	697b      	ldr	r3, [r7, #20]
 800e930:	2b01      	cmp	r3, #1
 800e932:	d171      	bne.n	800ea18 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e936:	8b9b      	ldrh	r3, [r3, #28]
 800e938:	3314      	adds	r3, #20
 800e93a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e93c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e93e:	685b      	ldr	r3, [r3, #4]
 800e940:	685b      	ldr	r3, [r3, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e948:	685b      	ldr	r3, [r3, #4]
 800e94a:	685b      	ldr	r3, [r3, #4]
 800e94c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e950:	3308      	adds	r3, #8
 800e952:	2214      	movs	r2, #20
 800e954:	4619      	mov	r1, r3
 800e956:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e958:	f000 fcf5 	bl	800f346 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e95c:	8a3b      	ldrh	r3, [r7, #16]
 800e95e:	4618      	mov	r0, r3
 800e960:	f7f6 fe0c 	bl	800557c <lwip_htons>
 800e964:	4603      	mov	r3, r0
 800e966:	461a      	mov	r2, r3
 800e968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e96a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e96c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e96e:	2200      	movs	r2, #0
 800e970:	719a      	strb	r2, [r3, #6]
 800e972:	2200      	movs	r2, #0
 800e974:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e978:	2200      	movs	r2, #0
 800e97a:	729a      	strb	r2, [r3, #10]
 800e97c:	2200      	movs	r2, #0
 800e97e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e982:	685b      	ldr	r3, [r3, #4]
 800e984:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e986:	e00d      	b.n	800e9a4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e98a:	685b      	ldr	r3, [r3, #4]
 800e98c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e98e:	2114      	movs	r1, #20
 800e990:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e992:	f7f8 f8c7 	bl	8006b24 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e996:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e998:	6878      	ldr	r0, [r7, #4]
 800e99a:	f7f8 fa0b 	bl	8006db4 <pbuf_cat>
      r = iprh->next_pbuf;
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800e9a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d1ee      	bne.n	800e988 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e9aa:	4b1e      	ldr	r3, [pc, #120]	@ (800ea24 <ip4_reass+0x2b4>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d102      	bne.n	800e9ba <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e9b8:	e010      	b.n	800e9dc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e9ba:	4b1a      	ldr	r3, [pc, #104]	@ (800ea24 <ip4_reass+0x2b4>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e9c0:	e007      	b.n	800e9d2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e9c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d006      	beq.n	800e9da <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e9cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e9d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d1f4      	bne.n	800e9c2 <ip4_reass+0x252>
 800e9d8:	e000      	b.n	800e9dc <ip4_reass+0x26c>
          break;
 800e9da:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e9dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e9de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e9e0:	f7ff fd2e 	bl	800e440 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f7f8 f9ab 	bl	8006d40 <pbuf_clen>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e9ee:	4b0c      	ldr	r3, [pc, #48]	@ (800ea20 <ip4_reass+0x2b0>)
 800e9f0:	881b      	ldrh	r3, [r3, #0]
 800e9f2:	8c3a      	ldrh	r2, [r7, #32]
 800e9f4:	429a      	cmp	r2, r3
 800e9f6:	d906      	bls.n	800ea06 <ip4_reass+0x296>
 800e9f8:	4b0b      	ldr	r3, [pc, #44]	@ (800ea28 <ip4_reass+0x2b8>)
 800e9fa:	f240 229b 	movw	r2, #667	@ 0x29b
 800e9fe:	490b      	ldr	r1, [pc, #44]	@ (800ea2c <ip4_reass+0x2bc>)
 800ea00:	480b      	ldr	r0, [pc, #44]	@ (800ea30 <ip4_reass+0x2c0>)
 800ea02:	f000 fbc5 	bl	800f190 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800ea06:	4b06      	ldr	r3, [pc, #24]	@ (800ea20 <ip4_reass+0x2b0>)
 800ea08:	881a      	ldrh	r2, [r3, #0]
 800ea0a:	8c3b      	ldrh	r3, [r7, #32]
 800ea0c:	1ad3      	subs	r3, r2, r3
 800ea0e:	b29a      	uxth	r2, r3
 800ea10:	4b03      	ldr	r3, [pc, #12]	@ (800ea20 <ip4_reass+0x2b0>)
 800ea12:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	e038      	b.n	800ea8a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	e036      	b.n	800ea8a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800ea1c:	bf00      	nop
 800ea1e:	e00a      	b.n	800ea36 <ip4_reass+0x2c6>
 800ea20:	20007dcc 	.word	0x20007dcc
 800ea24:	20007dc8 	.word	0x20007dc8
 800ea28:	080126dc 	.word	0x080126dc
 800ea2c:	0801284c 	.word	0x0801284c
 800ea30:	08012724 	.word	0x08012724
    goto nullreturn_ipr;
 800ea34:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800ea36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d106      	bne.n	800ea4a <ip4_reass+0x2da>
 800ea3c:	4b15      	ldr	r3, [pc, #84]	@ (800ea94 <ip4_reass+0x324>)
 800ea3e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800ea42:	4915      	ldr	r1, [pc, #84]	@ (800ea98 <ip4_reass+0x328>)
 800ea44:	4815      	ldr	r0, [pc, #84]	@ (800ea9c <ip4_reass+0x32c>)
 800ea46:	f000 fba3 	bl	800f190 <iprintf>
  if (ipr->p == NULL) {
 800ea4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea4c:	685b      	ldr	r3, [r3, #4]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d116      	bne.n	800ea80 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800ea52:	4b13      	ldr	r3, [pc, #76]	@ (800eaa0 <ip4_reass+0x330>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	d006      	beq.n	800ea6a <ip4_reass+0x2fa>
 800ea5c:	4b0d      	ldr	r3, [pc, #52]	@ (800ea94 <ip4_reass+0x324>)
 800ea5e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800ea62:	4910      	ldr	r1, [pc, #64]	@ (800eaa4 <ip4_reass+0x334>)
 800ea64:	480d      	ldr	r0, [pc, #52]	@ (800ea9c <ip4_reass+0x32c>)
 800ea66:	f000 fb93 	bl	800f190 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800ea6a:	2100      	movs	r1, #0
 800ea6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ea6e:	f7ff fce7 	bl	800e440 <ip_reass_dequeue_datagram>
 800ea72:	e006      	b.n	800ea82 <ip4_reass+0x312>
    goto nullreturn;
 800ea74:	bf00      	nop
 800ea76:	e004      	b.n	800ea82 <ip4_reass+0x312>
    goto nullreturn;
 800ea78:	bf00      	nop
 800ea7a:	e002      	b.n	800ea82 <ip4_reass+0x312>
      goto nullreturn;
 800ea7c:	bf00      	nop
 800ea7e:	e000      	b.n	800ea82 <ip4_reass+0x312>
  }

nullreturn:
 800ea80:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f7f8 f8d4 	bl	8006c30 <pbuf_free>
  return NULL;
 800ea88:	2300      	movs	r3, #0
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	3738      	adds	r7, #56	@ 0x38
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}
 800ea92:	bf00      	nop
 800ea94:	080126dc 	.word	0x080126dc
 800ea98:	08012868 	.word	0x08012868
 800ea9c:	08012724 	.word	0x08012724
 800eaa0:	20007dc8 	.word	0x20007dc8
 800eaa4:	08012874 	.word	0x08012874

0800eaa8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800eaac:	2005      	movs	r0, #5
 800eaae:	f7f7 f9d9 	bl	8005e64 <memp_malloc>
 800eab2:	4603      	mov	r3, r0
}
 800eab4:	4618      	mov	r0, r3
 800eab6:	bd80      	pop	{r7, pc}

0800eab8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d106      	bne.n	800ead4 <ip_frag_free_pbuf_custom_ref+0x1c>
 800eac6:	4b07      	ldr	r3, [pc, #28]	@ (800eae4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800eac8:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800eacc:	4906      	ldr	r1, [pc, #24]	@ (800eae8 <ip_frag_free_pbuf_custom_ref+0x30>)
 800eace:	4807      	ldr	r0, [pc, #28]	@ (800eaec <ip_frag_free_pbuf_custom_ref+0x34>)
 800ead0:	f000 fb5e 	bl	800f190 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ead4:	6879      	ldr	r1, [r7, #4]
 800ead6:	2005      	movs	r0, #5
 800ead8:	f7f7 fa34 	bl	8005f44 <memp_free>
}
 800eadc:	bf00      	nop
 800eade:	3708      	adds	r7, #8
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}
 800eae4:	080126dc 	.word	0x080126dc
 800eae8:	08012894 	.word	0x08012894
 800eaec:	08012724 	.word	0x08012724

0800eaf0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b084      	sub	sp, #16
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d106      	bne.n	800eb10 <ipfrag_free_pbuf_custom+0x20>
 800eb02:	4b11      	ldr	r3, [pc, #68]	@ (800eb48 <ipfrag_free_pbuf_custom+0x58>)
 800eb04:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800eb08:	4910      	ldr	r1, [pc, #64]	@ (800eb4c <ipfrag_free_pbuf_custom+0x5c>)
 800eb0a:	4811      	ldr	r0, [pc, #68]	@ (800eb50 <ipfrag_free_pbuf_custom+0x60>)
 800eb0c:	f000 fb40 	bl	800f190 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800eb10:	68fa      	ldr	r2, [r7, #12]
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	429a      	cmp	r2, r3
 800eb16:	d006      	beq.n	800eb26 <ipfrag_free_pbuf_custom+0x36>
 800eb18:	4b0b      	ldr	r3, [pc, #44]	@ (800eb48 <ipfrag_free_pbuf_custom+0x58>)
 800eb1a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800eb1e:	490d      	ldr	r1, [pc, #52]	@ (800eb54 <ipfrag_free_pbuf_custom+0x64>)
 800eb20:	480b      	ldr	r0, [pc, #44]	@ (800eb50 <ipfrag_free_pbuf_custom+0x60>)
 800eb22:	f000 fb35 	bl	800f190 <iprintf>
  if (pcr->original != NULL) {
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	695b      	ldr	r3, [r3, #20]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d004      	beq.n	800eb38 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	695b      	ldr	r3, [r3, #20]
 800eb32:	4618      	mov	r0, r3
 800eb34:	f7f8 f87c 	bl	8006c30 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800eb38:	68f8      	ldr	r0, [r7, #12]
 800eb3a:	f7ff ffbd 	bl	800eab8 <ip_frag_free_pbuf_custom_ref>
}
 800eb3e:	bf00      	nop
 800eb40:	3710      	adds	r7, #16
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}
 800eb46:	bf00      	nop
 800eb48:	080126dc 	.word	0x080126dc
 800eb4c:	080128a0 	.word	0x080128a0
 800eb50:	08012724 	.word	0x08012724
 800eb54:	080128ac 	.word	0x080128ac

0800eb58 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b094      	sub	sp, #80	@ 0x50
 800eb5c:	af02      	add	r7, sp, #8
 800eb5e:	60f8      	str	r0, [r7, #12]
 800eb60:	60b9      	str	r1, [r7, #8]
 800eb62:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800eb64:	2300      	movs	r3, #0
 800eb66:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800eb6e:	3b14      	subs	r3, #20
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	da00      	bge.n	800eb76 <ip4_frag+0x1e>
 800eb74:	3307      	adds	r3, #7
 800eb76:	10db      	asrs	r3, r3, #3
 800eb78:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800eb7a:	2314      	movs	r3, #20
 800eb7c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	685b      	ldr	r3, [r3, #4]
 800eb82:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800eb84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb86:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800eb88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb8a:	781b      	ldrb	r3, [r3, #0]
 800eb8c:	f003 030f 	and.w	r3, r3, #15
 800eb90:	b2db      	uxtb	r3, r3
 800eb92:	009b      	lsls	r3, r3, #2
 800eb94:	b2db      	uxtb	r3, r3
 800eb96:	2b14      	cmp	r3, #20
 800eb98:	d002      	beq.n	800eba0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800eb9a:	f06f 0305 	mvn.w	r3, #5
 800eb9e:	e110      	b.n	800edc2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	895b      	ldrh	r3, [r3, #10]
 800eba4:	2b13      	cmp	r3, #19
 800eba6:	d809      	bhi.n	800ebbc <ip4_frag+0x64>
 800eba8:	4b88      	ldr	r3, [pc, #544]	@ (800edcc <ip4_frag+0x274>)
 800ebaa:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800ebae:	4988      	ldr	r1, [pc, #544]	@ (800edd0 <ip4_frag+0x278>)
 800ebb0:	4888      	ldr	r0, [pc, #544]	@ (800edd4 <ip4_frag+0x27c>)
 800ebb2:	f000 faed 	bl	800f190 <iprintf>
 800ebb6:	f06f 0305 	mvn.w	r3, #5
 800ebba:	e102      	b.n	800edc2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ebbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebbe:	88db      	ldrh	r3, [r3, #6]
 800ebc0:	b29b      	uxth	r3, r3
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f7f6 fcda 	bl	800557c <lwip_htons>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800ebcc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ebce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ebd2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ebd6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ebd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ebdc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	891b      	ldrh	r3, [r3, #8]
 800ebe2:	3b14      	subs	r3, #20
 800ebe4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800ebe8:	e0e1      	b.n	800edae <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ebea:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ebec:	00db      	lsls	r3, r3, #3
 800ebee:	b29b      	uxth	r3, r3
 800ebf0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ebf4:	4293      	cmp	r3, r2
 800ebf6:	bf28      	it	cs
 800ebf8:	4613      	movcs	r3, r2
 800ebfa:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ebfc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ec00:	2114      	movs	r1, #20
 800ec02:	200e      	movs	r0, #14
 800ec04:	f7f7 fd30 	bl	8006668 <pbuf_alloc>
 800ec08:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800ec0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	f000 80d5 	beq.w	800edbc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ec12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec14:	895b      	ldrh	r3, [r3, #10]
 800ec16:	2b13      	cmp	r3, #19
 800ec18:	d806      	bhi.n	800ec28 <ip4_frag+0xd0>
 800ec1a:	4b6c      	ldr	r3, [pc, #432]	@ (800edcc <ip4_frag+0x274>)
 800ec1c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800ec20:	496d      	ldr	r1, [pc, #436]	@ (800edd8 <ip4_frag+0x280>)
 800ec22:	486c      	ldr	r0, [pc, #432]	@ (800edd4 <ip4_frag+0x27c>)
 800ec24:	f000 fab4 	bl	800f190 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ec28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec2a:	685b      	ldr	r3, [r3, #4]
 800ec2c:	2214      	movs	r2, #20
 800ec2e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ec30:	4618      	mov	r0, r3
 800ec32:	f000 fb88 	bl	800f346 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ec36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec38:	685b      	ldr	r3, [r3, #4]
 800ec3a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800ec3c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ec3e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800ec42:	e064      	b.n	800ed0e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	895a      	ldrh	r2, [r3, #10]
 800ec48:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ec4a:	1ad3      	subs	r3, r2, r3
 800ec4c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	895b      	ldrh	r3, [r3, #10]
 800ec52:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d906      	bls.n	800ec66 <ip4_frag+0x10e>
 800ec58:	4b5c      	ldr	r3, [pc, #368]	@ (800edcc <ip4_frag+0x274>)
 800ec5a:	f240 322d 	movw	r2, #813	@ 0x32d
 800ec5e:	495f      	ldr	r1, [pc, #380]	@ (800eddc <ip4_frag+0x284>)
 800ec60:	485c      	ldr	r0, [pc, #368]	@ (800edd4 <ip4_frag+0x27c>)
 800ec62:	f000 fa95 	bl	800f190 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800ec66:	8bfa      	ldrh	r2, [r7, #30]
 800ec68:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	bf28      	it	cs
 800ec70:	4613      	movcs	r3, r2
 800ec72:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800ec76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d105      	bne.n	800ec8a <ip4_frag+0x132>
        poff = 0;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	60fb      	str	r3, [r7, #12]
        continue;
 800ec88:	e041      	b.n	800ed0e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800ec8a:	f7ff ff0d 	bl	800eaa8 <ip_frag_alloc_pbuf_custom_ref>
 800ec8e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800ec90:	69bb      	ldr	r3, [r7, #24]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d103      	bne.n	800ec9e <ip4_frag+0x146>
        pbuf_free(rambuf);
 800ec96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ec98:	f7f7 ffca 	bl	8006c30 <pbuf_free>
        goto memerr;
 800ec9c:	e08f      	b.n	800edbe <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ec9e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800eca4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800eca6:	4413      	add	r3, r2
 800eca8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800ecac:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800ecb0:	9201      	str	r2, [sp, #4]
 800ecb2:	9300      	str	r3, [sp, #0]
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	2241      	movs	r2, #65	@ 0x41
 800ecb8:	2000      	movs	r0, #0
 800ecba:	f7f7 fdff 	bl	80068bc <pbuf_alloced_custom>
 800ecbe:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d106      	bne.n	800ecd4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ecc6:	69b8      	ldr	r0, [r7, #24]
 800ecc8:	f7ff fef6 	bl	800eab8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800eccc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ecce:	f7f7 ffaf 	bl	8006c30 <pbuf_free>
        goto memerr;
 800ecd2:	e074      	b.n	800edbe <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800ecd4:	68f8      	ldr	r0, [r7, #12]
 800ecd6:	f7f8 f84b 	bl	8006d70 <pbuf_ref>
      pcr->original = p;
 800ecda:	69bb      	ldr	r3, [r7, #24]
 800ecdc:	68fa      	ldr	r2, [r7, #12]
 800ecde:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ece0:	69bb      	ldr	r3, [r7, #24]
 800ece2:	4a3f      	ldr	r2, [pc, #252]	@ (800ede0 <ip4_frag+0x288>)
 800ece4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ece6:	6979      	ldr	r1, [r7, #20]
 800ece8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ecea:	f7f8 f863 	bl	8006db4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800ecee:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800ecf2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ecf6:	1ad3      	subs	r3, r2, r3
 800ecf8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800ecfc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d004      	beq.n	800ed0e <ip4_frag+0x1b6>
        poff = 0;
 800ed04:	2300      	movs	r3, #0
 800ed06:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ed0e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d196      	bne.n	800ec44 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800ed16:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800ed18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ed1c:	4413      	add	r3, r2
 800ed1e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ed24:	f1a3 0213 	sub.w	r2, r3, #19
 800ed28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	bfcc      	ite	gt
 800ed30:	2301      	movgt	r3, #1
 800ed32:	2300      	movle	r3, #0
 800ed34:	b2db      	uxtb	r3, r3
 800ed36:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800ed38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ed3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ed40:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800ed42:	6a3b      	ldr	r3, [r7, #32]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d002      	beq.n	800ed4e <ip4_frag+0x1f6>
 800ed48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d003      	beq.n	800ed56 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800ed4e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ed50:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ed54:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800ed56:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f7f6 fc0f 	bl	800557c <lwip_htons>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	461a      	mov	r2, r3
 800ed62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed64:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800ed66:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ed68:	3314      	adds	r3, #20
 800ed6a:	b29b      	uxth	r3, r3
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f7f6 fc05 	bl	800557c <lwip_htons>
 800ed72:	4603      	mov	r3, r0
 800ed74:	461a      	mov	r2, r3
 800ed76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed78:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800ed7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	729a      	strb	r2, [r3, #10]
 800ed80:	2200      	movs	r2, #0
 800ed82:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	695b      	ldr	r3, [r3, #20]
 800ed88:	687a      	ldr	r2, [r7, #4]
 800ed8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ed8c:	68b8      	ldr	r0, [r7, #8]
 800ed8e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800ed90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ed92:	f7f7 ff4d 	bl	8006c30 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800ed96:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ed9a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ed9c:	1ad3      	subs	r3, r2, r3
 800ed9e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800eda2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800eda6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800eda8:	4413      	add	r3, r2
 800edaa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800edae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	f47f af19 	bne.w	800ebea <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800edb8:	2300      	movs	r3, #0
 800edba:	e002      	b.n	800edc2 <ip4_frag+0x26a>
      goto memerr;
 800edbc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800edbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800edc2:	4618      	mov	r0, r3
 800edc4:	3748      	adds	r7, #72	@ 0x48
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}
 800edca:	bf00      	nop
 800edcc:	080126dc 	.word	0x080126dc
 800edd0:	080128b8 	.word	0x080128b8
 800edd4:	08012724 	.word	0x08012724
 800edd8:	080128d4 	.word	0x080128d4
 800eddc:	080128f4 	.word	0x080128f4
 800ede0:	0800eaf1 	.word	0x0800eaf1

0800ede4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b086      	sub	sp, #24
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
 800edec:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800edee:	230e      	movs	r3, #14
 800edf0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	895b      	ldrh	r3, [r3, #10]
 800edf6:	2b0e      	cmp	r3, #14
 800edf8:	d96e      	bls.n	800eed8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	7bdb      	ldrb	r3, [r3, #15]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d106      	bne.n	800ee10 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ee08:	3301      	adds	r3, #1
 800ee0a:	b2da      	uxtb	r2, r3
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	685b      	ldr	r3, [r3, #4]
 800ee14:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ee16:	693b      	ldr	r3, [r7, #16]
 800ee18:	7b1a      	ldrb	r2, [r3, #12]
 800ee1a:	7b5b      	ldrb	r3, [r3, #13]
 800ee1c:	021b      	lsls	r3, r3, #8
 800ee1e:	4313      	orrs	r3, r2
 800ee20:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ee22:	693b      	ldr	r3, [r7, #16]
 800ee24:	781b      	ldrb	r3, [r3, #0]
 800ee26:	f003 0301 	and.w	r3, r3, #1
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d023      	beq.n	800ee76 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ee2e:	693b      	ldr	r3, [r7, #16]
 800ee30:	781b      	ldrb	r3, [r3, #0]
 800ee32:	2b01      	cmp	r3, #1
 800ee34:	d10f      	bne.n	800ee56 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ee36:	693b      	ldr	r3, [r7, #16]
 800ee38:	785b      	ldrb	r3, [r3, #1]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d11b      	bne.n	800ee76 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800ee3e:	693b      	ldr	r3, [r7, #16]
 800ee40:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ee42:	2b5e      	cmp	r3, #94	@ 0x5e
 800ee44:	d117      	bne.n	800ee76 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	7b5b      	ldrb	r3, [r3, #13]
 800ee4a:	f043 0310 	orr.w	r3, r3, #16
 800ee4e:	b2da      	uxtb	r2, r3
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	735a      	strb	r2, [r3, #13]
 800ee54:	e00f      	b.n	800ee76 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800ee56:	693b      	ldr	r3, [r7, #16]
 800ee58:	2206      	movs	r2, #6
 800ee5a:	4928      	ldr	r1, [pc, #160]	@ (800eefc <ethernet_input+0x118>)
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f000 f9ec 	bl	800f23a <memcmp>
 800ee62:	4603      	mov	r3, r0
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d106      	bne.n	800ee76 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	7b5b      	ldrb	r3, [r3, #13]
 800ee6c:	f043 0308 	orr.w	r3, r3, #8
 800ee70:	b2da      	uxtb	r2, r3
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800ee76:	89fb      	ldrh	r3, [r7, #14]
 800ee78:	2b08      	cmp	r3, #8
 800ee7a:	d003      	beq.n	800ee84 <ethernet_input+0xa0>
 800ee7c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800ee80:	d014      	beq.n	800eeac <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800ee82:	e032      	b.n	800eeea <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ee8a:	f003 0308 	and.w	r3, r3, #8
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d024      	beq.n	800eedc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ee92:	8afb      	ldrh	r3, [r7, #22]
 800ee94:	4619      	mov	r1, r3
 800ee96:	6878      	ldr	r0, [r7, #4]
 800ee98:	f7f7 fe44 	bl	8006b24 <pbuf_remove_header>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d11e      	bne.n	800eee0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800eea2:	6839      	ldr	r1, [r7, #0]
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f7fe ff21 	bl	800dcec <ip4_input>
      break;
 800eeaa:	e013      	b.n	800eed4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800eeb2:	f003 0308 	and.w	r3, r3, #8
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d014      	beq.n	800eee4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800eeba:	8afb      	ldrh	r3, [r7, #22]
 800eebc:	4619      	mov	r1, r3
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f7f7 fe30 	bl	8006b24 <pbuf_remove_header>
 800eec4:	4603      	mov	r3, r0
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d10e      	bne.n	800eee8 <ethernet_input+0x104>
        etharp_input(p, netif);
 800eeca:	6839      	ldr	r1, [r7, #0]
 800eecc:	6878      	ldr	r0, [r7, #4]
 800eece:	f7fe f8c1 	bl	800d054 <etharp_input>
      break;
 800eed2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800eed4:	2300      	movs	r3, #0
 800eed6:	e00c      	b.n	800eef2 <ethernet_input+0x10e>
    goto free_and_return;
 800eed8:	bf00      	nop
 800eeda:	e006      	b.n	800eeea <ethernet_input+0x106>
        goto free_and_return;
 800eedc:	bf00      	nop
 800eede:	e004      	b.n	800eeea <ethernet_input+0x106>
        goto free_and_return;
 800eee0:	bf00      	nop
 800eee2:	e002      	b.n	800eeea <ethernet_input+0x106>
        goto free_and_return;
 800eee4:	bf00      	nop
 800eee6:	e000      	b.n	800eeea <ethernet_input+0x106>
        goto free_and_return;
 800eee8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	f7f7 fea0 	bl	8006c30 <pbuf_free>
  return ERR_OK;
 800eef0:	2300      	movs	r3, #0
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3718      	adds	r7, #24
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}
 800eefa:	bf00      	nop
 800eefc:	08012a90 	.word	0x08012a90

0800ef00 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b086      	sub	sp, #24
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	60f8      	str	r0, [r7, #12]
 800ef08:	60b9      	str	r1, [r7, #8]
 800ef0a:	607a      	str	r2, [r7, #4]
 800ef0c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800ef0e:	8c3b      	ldrh	r3, [r7, #32]
 800ef10:	4618      	mov	r0, r3
 800ef12:	f7f6 fb33 	bl	800557c <lwip_htons>
 800ef16:	4603      	mov	r3, r0
 800ef18:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800ef1a:	210e      	movs	r1, #14
 800ef1c:	68b8      	ldr	r0, [r7, #8]
 800ef1e:	f7f7 fdf1 	bl	8006b04 <pbuf_add_header>
 800ef22:	4603      	mov	r3, r0
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d125      	bne.n	800ef74 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	685b      	ldr	r3, [r3, #4]
 800ef2c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800ef2e:	693b      	ldr	r3, [r7, #16]
 800ef30:	8afa      	ldrh	r2, [r7, #22]
 800ef32:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	2206      	movs	r2, #6
 800ef38:	6839      	ldr	r1, [r7, #0]
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f000 fa03 	bl	800f346 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800ef40:	693b      	ldr	r3, [r7, #16]
 800ef42:	3306      	adds	r3, #6
 800ef44:	2206      	movs	r2, #6
 800ef46:	6879      	ldr	r1, [r7, #4]
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f000 f9fc 	bl	800f346 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ef54:	2b06      	cmp	r3, #6
 800ef56:	d006      	beq.n	800ef66 <ethernet_output+0x66>
 800ef58:	4b0a      	ldr	r3, [pc, #40]	@ (800ef84 <ethernet_output+0x84>)
 800ef5a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800ef5e:	490a      	ldr	r1, [pc, #40]	@ (800ef88 <ethernet_output+0x88>)
 800ef60:	480a      	ldr	r0, [pc, #40]	@ (800ef8c <ethernet_output+0x8c>)
 800ef62:	f000 f915 	bl	800f190 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	699b      	ldr	r3, [r3, #24]
 800ef6a:	68b9      	ldr	r1, [r7, #8]
 800ef6c:	68f8      	ldr	r0, [r7, #12]
 800ef6e:	4798      	blx	r3
 800ef70:	4603      	mov	r3, r0
 800ef72:	e002      	b.n	800ef7a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800ef74:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800ef76:	f06f 0301 	mvn.w	r3, #1
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3718      	adds	r7, #24
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
 800ef82:	bf00      	nop
 800ef84:	08012904 	.word	0x08012904
 800ef88:	0801293c 	.word	0x0801293c
 800ef8c:	08012970 	.word	0x08012970

0800ef90 <rand>:
 800ef90:	4b16      	ldr	r3, [pc, #88]	@ (800efec <rand+0x5c>)
 800ef92:	b510      	push	{r4, lr}
 800ef94:	681c      	ldr	r4, [r3, #0]
 800ef96:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ef98:	b9b3      	cbnz	r3, 800efc8 <rand+0x38>
 800ef9a:	2018      	movs	r0, #24
 800ef9c:	f000 fa4a 	bl	800f434 <malloc>
 800efa0:	4602      	mov	r2, r0
 800efa2:	6320      	str	r0, [r4, #48]	@ 0x30
 800efa4:	b920      	cbnz	r0, 800efb0 <rand+0x20>
 800efa6:	4b12      	ldr	r3, [pc, #72]	@ (800eff0 <rand+0x60>)
 800efa8:	4812      	ldr	r0, [pc, #72]	@ (800eff4 <rand+0x64>)
 800efaa:	2152      	movs	r1, #82	@ 0x52
 800efac:	f000 f9da 	bl	800f364 <__assert_func>
 800efb0:	4911      	ldr	r1, [pc, #68]	@ (800eff8 <rand+0x68>)
 800efb2:	4b12      	ldr	r3, [pc, #72]	@ (800effc <rand+0x6c>)
 800efb4:	e9c0 1300 	strd	r1, r3, [r0]
 800efb8:	4b11      	ldr	r3, [pc, #68]	@ (800f000 <rand+0x70>)
 800efba:	6083      	str	r3, [r0, #8]
 800efbc:	230b      	movs	r3, #11
 800efbe:	8183      	strh	r3, [r0, #12]
 800efc0:	2100      	movs	r1, #0
 800efc2:	2001      	movs	r0, #1
 800efc4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800efc8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800efca:	480e      	ldr	r0, [pc, #56]	@ (800f004 <rand+0x74>)
 800efcc:	690b      	ldr	r3, [r1, #16]
 800efce:	694c      	ldr	r4, [r1, #20]
 800efd0:	4a0d      	ldr	r2, [pc, #52]	@ (800f008 <rand+0x78>)
 800efd2:	4358      	muls	r0, r3
 800efd4:	fb02 0004 	mla	r0, r2, r4, r0
 800efd8:	fba3 3202 	umull	r3, r2, r3, r2
 800efdc:	3301      	adds	r3, #1
 800efde:	eb40 0002 	adc.w	r0, r0, r2
 800efe2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800efe6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800efea:	bd10      	pop	{r4, pc}
 800efec:	20000038 	.word	0x20000038
 800eff0:	08012a9e 	.word	0x08012a9e
 800eff4:	08012ab5 	.word	0x08012ab5
 800eff8:	abcd330e 	.word	0xabcd330e
 800effc:	e66d1234 	.word	0xe66d1234
 800f000:	0005deec 	.word	0x0005deec
 800f004:	5851f42d 	.word	0x5851f42d
 800f008:	4c957f2d 	.word	0x4c957f2d

0800f00c <std>:
 800f00c:	2300      	movs	r3, #0
 800f00e:	b510      	push	{r4, lr}
 800f010:	4604      	mov	r4, r0
 800f012:	e9c0 3300 	strd	r3, r3, [r0]
 800f016:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f01a:	6083      	str	r3, [r0, #8]
 800f01c:	8181      	strh	r1, [r0, #12]
 800f01e:	6643      	str	r3, [r0, #100]	@ 0x64
 800f020:	81c2      	strh	r2, [r0, #14]
 800f022:	6183      	str	r3, [r0, #24]
 800f024:	4619      	mov	r1, r3
 800f026:	2208      	movs	r2, #8
 800f028:	305c      	adds	r0, #92	@ 0x5c
 800f02a:	f000 f916 	bl	800f25a <memset>
 800f02e:	4b0d      	ldr	r3, [pc, #52]	@ (800f064 <std+0x58>)
 800f030:	6263      	str	r3, [r4, #36]	@ 0x24
 800f032:	4b0d      	ldr	r3, [pc, #52]	@ (800f068 <std+0x5c>)
 800f034:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f036:	4b0d      	ldr	r3, [pc, #52]	@ (800f06c <std+0x60>)
 800f038:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f03a:	4b0d      	ldr	r3, [pc, #52]	@ (800f070 <std+0x64>)
 800f03c:	6323      	str	r3, [r4, #48]	@ 0x30
 800f03e:	4b0d      	ldr	r3, [pc, #52]	@ (800f074 <std+0x68>)
 800f040:	6224      	str	r4, [r4, #32]
 800f042:	429c      	cmp	r4, r3
 800f044:	d006      	beq.n	800f054 <std+0x48>
 800f046:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f04a:	4294      	cmp	r4, r2
 800f04c:	d002      	beq.n	800f054 <std+0x48>
 800f04e:	33d0      	adds	r3, #208	@ 0xd0
 800f050:	429c      	cmp	r4, r3
 800f052:	d105      	bne.n	800f060 <std+0x54>
 800f054:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f05c:	f000 b970 	b.w	800f340 <__retarget_lock_init_recursive>
 800f060:	bd10      	pop	{r4, pc}
 800f062:	bf00      	nop
 800f064:	0800f1b5 	.word	0x0800f1b5
 800f068:	0800f1d7 	.word	0x0800f1d7
 800f06c:	0800f20f 	.word	0x0800f20f
 800f070:	0800f233 	.word	0x0800f233
 800f074:	20007dd0 	.word	0x20007dd0

0800f078 <stdio_exit_handler>:
 800f078:	4a02      	ldr	r2, [pc, #8]	@ (800f084 <stdio_exit_handler+0xc>)
 800f07a:	4903      	ldr	r1, [pc, #12]	@ (800f088 <stdio_exit_handler+0x10>)
 800f07c:	4803      	ldr	r0, [pc, #12]	@ (800f08c <stdio_exit_handler+0x14>)
 800f07e:	f000 b869 	b.w	800f154 <_fwalk_sglue>
 800f082:	bf00      	nop
 800f084:	2000002c 	.word	0x2000002c
 800f088:	0800fc45 	.word	0x0800fc45
 800f08c:	2000003c 	.word	0x2000003c

0800f090 <cleanup_stdio>:
 800f090:	6841      	ldr	r1, [r0, #4]
 800f092:	4b0c      	ldr	r3, [pc, #48]	@ (800f0c4 <cleanup_stdio+0x34>)
 800f094:	4299      	cmp	r1, r3
 800f096:	b510      	push	{r4, lr}
 800f098:	4604      	mov	r4, r0
 800f09a:	d001      	beq.n	800f0a0 <cleanup_stdio+0x10>
 800f09c:	f000 fdd2 	bl	800fc44 <_fflush_r>
 800f0a0:	68a1      	ldr	r1, [r4, #8]
 800f0a2:	4b09      	ldr	r3, [pc, #36]	@ (800f0c8 <cleanup_stdio+0x38>)
 800f0a4:	4299      	cmp	r1, r3
 800f0a6:	d002      	beq.n	800f0ae <cleanup_stdio+0x1e>
 800f0a8:	4620      	mov	r0, r4
 800f0aa:	f000 fdcb 	bl	800fc44 <_fflush_r>
 800f0ae:	68e1      	ldr	r1, [r4, #12]
 800f0b0:	4b06      	ldr	r3, [pc, #24]	@ (800f0cc <cleanup_stdio+0x3c>)
 800f0b2:	4299      	cmp	r1, r3
 800f0b4:	d004      	beq.n	800f0c0 <cleanup_stdio+0x30>
 800f0b6:	4620      	mov	r0, r4
 800f0b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0bc:	f000 bdc2 	b.w	800fc44 <_fflush_r>
 800f0c0:	bd10      	pop	{r4, pc}
 800f0c2:	bf00      	nop
 800f0c4:	20007dd0 	.word	0x20007dd0
 800f0c8:	20007e38 	.word	0x20007e38
 800f0cc:	20007ea0 	.word	0x20007ea0

0800f0d0 <global_stdio_init.part.0>:
 800f0d0:	b510      	push	{r4, lr}
 800f0d2:	4b0b      	ldr	r3, [pc, #44]	@ (800f100 <global_stdio_init.part.0+0x30>)
 800f0d4:	4c0b      	ldr	r4, [pc, #44]	@ (800f104 <global_stdio_init.part.0+0x34>)
 800f0d6:	4a0c      	ldr	r2, [pc, #48]	@ (800f108 <global_stdio_init.part.0+0x38>)
 800f0d8:	601a      	str	r2, [r3, #0]
 800f0da:	4620      	mov	r0, r4
 800f0dc:	2200      	movs	r2, #0
 800f0de:	2104      	movs	r1, #4
 800f0e0:	f7ff ff94 	bl	800f00c <std>
 800f0e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f0e8:	2201      	movs	r2, #1
 800f0ea:	2109      	movs	r1, #9
 800f0ec:	f7ff ff8e 	bl	800f00c <std>
 800f0f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f0f4:	2202      	movs	r2, #2
 800f0f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0fa:	2112      	movs	r1, #18
 800f0fc:	f7ff bf86 	b.w	800f00c <std>
 800f100:	20007f08 	.word	0x20007f08
 800f104:	20007dd0 	.word	0x20007dd0
 800f108:	0800f079 	.word	0x0800f079

0800f10c <__sfp_lock_acquire>:
 800f10c:	4801      	ldr	r0, [pc, #4]	@ (800f114 <__sfp_lock_acquire+0x8>)
 800f10e:	f000 b918 	b.w	800f342 <__retarget_lock_acquire_recursive>
 800f112:	bf00      	nop
 800f114:	20007f11 	.word	0x20007f11

0800f118 <__sfp_lock_release>:
 800f118:	4801      	ldr	r0, [pc, #4]	@ (800f120 <__sfp_lock_release+0x8>)
 800f11a:	f000 b913 	b.w	800f344 <__retarget_lock_release_recursive>
 800f11e:	bf00      	nop
 800f120:	20007f11 	.word	0x20007f11

0800f124 <__sinit>:
 800f124:	b510      	push	{r4, lr}
 800f126:	4604      	mov	r4, r0
 800f128:	f7ff fff0 	bl	800f10c <__sfp_lock_acquire>
 800f12c:	6a23      	ldr	r3, [r4, #32]
 800f12e:	b11b      	cbz	r3, 800f138 <__sinit+0x14>
 800f130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f134:	f7ff bff0 	b.w	800f118 <__sfp_lock_release>
 800f138:	4b04      	ldr	r3, [pc, #16]	@ (800f14c <__sinit+0x28>)
 800f13a:	6223      	str	r3, [r4, #32]
 800f13c:	4b04      	ldr	r3, [pc, #16]	@ (800f150 <__sinit+0x2c>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d1f5      	bne.n	800f130 <__sinit+0xc>
 800f144:	f7ff ffc4 	bl	800f0d0 <global_stdio_init.part.0>
 800f148:	e7f2      	b.n	800f130 <__sinit+0xc>
 800f14a:	bf00      	nop
 800f14c:	0800f091 	.word	0x0800f091
 800f150:	20007f08 	.word	0x20007f08

0800f154 <_fwalk_sglue>:
 800f154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f158:	4607      	mov	r7, r0
 800f15a:	4688      	mov	r8, r1
 800f15c:	4614      	mov	r4, r2
 800f15e:	2600      	movs	r6, #0
 800f160:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f164:	f1b9 0901 	subs.w	r9, r9, #1
 800f168:	d505      	bpl.n	800f176 <_fwalk_sglue+0x22>
 800f16a:	6824      	ldr	r4, [r4, #0]
 800f16c:	2c00      	cmp	r4, #0
 800f16e:	d1f7      	bne.n	800f160 <_fwalk_sglue+0xc>
 800f170:	4630      	mov	r0, r6
 800f172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f176:	89ab      	ldrh	r3, [r5, #12]
 800f178:	2b01      	cmp	r3, #1
 800f17a:	d907      	bls.n	800f18c <_fwalk_sglue+0x38>
 800f17c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f180:	3301      	adds	r3, #1
 800f182:	d003      	beq.n	800f18c <_fwalk_sglue+0x38>
 800f184:	4629      	mov	r1, r5
 800f186:	4638      	mov	r0, r7
 800f188:	47c0      	blx	r8
 800f18a:	4306      	orrs	r6, r0
 800f18c:	3568      	adds	r5, #104	@ 0x68
 800f18e:	e7e9      	b.n	800f164 <_fwalk_sglue+0x10>

0800f190 <iprintf>:
 800f190:	b40f      	push	{r0, r1, r2, r3}
 800f192:	b507      	push	{r0, r1, r2, lr}
 800f194:	4906      	ldr	r1, [pc, #24]	@ (800f1b0 <iprintf+0x20>)
 800f196:	ab04      	add	r3, sp, #16
 800f198:	6808      	ldr	r0, [r1, #0]
 800f19a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f19e:	6881      	ldr	r1, [r0, #8]
 800f1a0:	9301      	str	r3, [sp, #4]
 800f1a2:	f000 fa27 	bl	800f5f4 <_vfiprintf_r>
 800f1a6:	b003      	add	sp, #12
 800f1a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1ac:	b004      	add	sp, #16
 800f1ae:	4770      	bx	lr
 800f1b0:	20000038 	.word	0x20000038

0800f1b4 <__sread>:
 800f1b4:	b510      	push	{r4, lr}
 800f1b6:	460c      	mov	r4, r1
 800f1b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1bc:	f000 f878 	bl	800f2b0 <_read_r>
 800f1c0:	2800      	cmp	r0, #0
 800f1c2:	bfab      	itete	ge
 800f1c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f1c6:	89a3      	ldrhlt	r3, [r4, #12]
 800f1c8:	181b      	addge	r3, r3, r0
 800f1ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f1ce:	bfac      	ite	ge
 800f1d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f1d2:	81a3      	strhlt	r3, [r4, #12]
 800f1d4:	bd10      	pop	{r4, pc}

0800f1d6 <__swrite>:
 800f1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1da:	461f      	mov	r7, r3
 800f1dc:	898b      	ldrh	r3, [r1, #12]
 800f1de:	05db      	lsls	r3, r3, #23
 800f1e0:	4605      	mov	r5, r0
 800f1e2:	460c      	mov	r4, r1
 800f1e4:	4616      	mov	r6, r2
 800f1e6:	d505      	bpl.n	800f1f4 <__swrite+0x1e>
 800f1e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1ec:	2302      	movs	r3, #2
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	f000 f84c 	bl	800f28c <_lseek_r>
 800f1f4:	89a3      	ldrh	r3, [r4, #12]
 800f1f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f1fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f1fe:	81a3      	strh	r3, [r4, #12]
 800f200:	4632      	mov	r2, r6
 800f202:	463b      	mov	r3, r7
 800f204:	4628      	mov	r0, r5
 800f206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f20a:	f000 b863 	b.w	800f2d4 <_write_r>

0800f20e <__sseek>:
 800f20e:	b510      	push	{r4, lr}
 800f210:	460c      	mov	r4, r1
 800f212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f216:	f000 f839 	bl	800f28c <_lseek_r>
 800f21a:	1c43      	adds	r3, r0, #1
 800f21c:	89a3      	ldrh	r3, [r4, #12]
 800f21e:	bf15      	itete	ne
 800f220:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f222:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f226:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f22a:	81a3      	strheq	r3, [r4, #12]
 800f22c:	bf18      	it	ne
 800f22e:	81a3      	strhne	r3, [r4, #12]
 800f230:	bd10      	pop	{r4, pc}

0800f232 <__sclose>:
 800f232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f236:	f000 b819 	b.w	800f26c <_close_r>

0800f23a <memcmp>:
 800f23a:	b510      	push	{r4, lr}
 800f23c:	3901      	subs	r1, #1
 800f23e:	4402      	add	r2, r0
 800f240:	4290      	cmp	r0, r2
 800f242:	d101      	bne.n	800f248 <memcmp+0xe>
 800f244:	2000      	movs	r0, #0
 800f246:	e005      	b.n	800f254 <memcmp+0x1a>
 800f248:	7803      	ldrb	r3, [r0, #0]
 800f24a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f24e:	42a3      	cmp	r3, r4
 800f250:	d001      	beq.n	800f256 <memcmp+0x1c>
 800f252:	1b18      	subs	r0, r3, r4
 800f254:	bd10      	pop	{r4, pc}
 800f256:	3001      	adds	r0, #1
 800f258:	e7f2      	b.n	800f240 <memcmp+0x6>

0800f25a <memset>:
 800f25a:	4402      	add	r2, r0
 800f25c:	4603      	mov	r3, r0
 800f25e:	4293      	cmp	r3, r2
 800f260:	d100      	bne.n	800f264 <memset+0xa>
 800f262:	4770      	bx	lr
 800f264:	f803 1b01 	strb.w	r1, [r3], #1
 800f268:	e7f9      	b.n	800f25e <memset+0x4>
	...

0800f26c <_close_r>:
 800f26c:	b538      	push	{r3, r4, r5, lr}
 800f26e:	4d06      	ldr	r5, [pc, #24]	@ (800f288 <_close_r+0x1c>)
 800f270:	2300      	movs	r3, #0
 800f272:	4604      	mov	r4, r0
 800f274:	4608      	mov	r0, r1
 800f276:	602b      	str	r3, [r5, #0]
 800f278:	f7f1 fb4a 	bl	8000910 <_close>
 800f27c:	1c43      	adds	r3, r0, #1
 800f27e:	d102      	bne.n	800f286 <_close_r+0x1a>
 800f280:	682b      	ldr	r3, [r5, #0]
 800f282:	b103      	cbz	r3, 800f286 <_close_r+0x1a>
 800f284:	6023      	str	r3, [r4, #0]
 800f286:	bd38      	pop	{r3, r4, r5, pc}
 800f288:	20007f0c 	.word	0x20007f0c

0800f28c <_lseek_r>:
 800f28c:	b538      	push	{r3, r4, r5, lr}
 800f28e:	4d07      	ldr	r5, [pc, #28]	@ (800f2ac <_lseek_r+0x20>)
 800f290:	4604      	mov	r4, r0
 800f292:	4608      	mov	r0, r1
 800f294:	4611      	mov	r1, r2
 800f296:	2200      	movs	r2, #0
 800f298:	602a      	str	r2, [r5, #0]
 800f29a:	461a      	mov	r2, r3
 800f29c:	f7f1 fb5f 	bl	800095e <_lseek>
 800f2a0:	1c43      	adds	r3, r0, #1
 800f2a2:	d102      	bne.n	800f2aa <_lseek_r+0x1e>
 800f2a4:	682b      	ldr	r3, [r5, #0]
 800f2a6:	b103      	cbz	r3, 800f2aa <_lseek_r+0x1e>
 800f2a8:	6023      	str	r3, [r4, #0]
 800f2aa:	bd38      	pop	{r3, r4, r5, pc}
 800f2ac:	20007f0c 	.word	0x20007f0c

0800f2b0 <_read_r>:
 800f2b0:	b538      	push	{r3, r4, r5, lr}
 800f2b2:	4d07      	ldr	r5, [pc, #28]	@ (800f2d0 <_read_r+0x20>)
 800f2b4:	4604      	mov	r4, r0
 800f2b6:	4608      	mov	r0, r1
 800f2b8:	4611      	mov	r1, r2
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	602a      	str	r2, [r5, #0]
 800f2be:	461a      	mov	r2, r3
 800f2c0:	f7f1 faed 	bl	800089e <_read>
 800f2c4:	1c43      	adds	r3, r0, #1
 800f2c6:	d102      	bne.n	800f2ce <_read_r+0x1e>
 800f2c8:	682b      	ldr	r3, [r5, #0]
 800f2ca:	b103      	cbz	r3, 800f2ce <_read_r+0x1e>
 800f2cc:	6023      	str	r3, [r4, #0]
 800f2ce:	bd38      	pop	{r3, r4, r5, pc}
 800f2d0:	20007f0c 	.word	0x20007f0c

0800f2d4 <_write_r>:
 800f2d4:	b538      	push	{r3, r4, r5, lr}
 800f2d6:	4d07      	ldr	r5, [pc, #28]	@ (800f2f4 <_write_r+0x20>)
 800f2d8:	4604      	mov	r4, r0
 800f2da:	4608      	mov	r0, r1
 800f2dc:	4611      	mov	r1, r2
 800f2de:	2200      	movs	r2, #0
 800f2e0:	602a      	str	r2, [r5, #0]
 800f2e2:	461a      	mov	r2, r3
 800f2e4:	f7f1 faf8 	bl	80008d8 <_write>
 800f2e8:	1c43      	adds	r3, r0, #1
 800f2ea:	d102      	bne.n	800f2f2 <_write_r+0x1e>
 800f2ec:	682b      	ldr	r3, [r5, #0]
 800f2ee:	b103      	cbz	r3, 800f2f2 <_write_r+0x1e>
 800f2f0:	6023      	str	r3, [r4, #0]
 800f2f2:	bd38      	pop	{r3, r4, r5, pc}
 800f2f4:	20007f0c 	.word	0x20007f0c

0800f2f8 <__libc_init_array>:
 800f2f8:	b570      	push	{r4, r5, r6, lr}
 800f2fa:	4d0d      	ldr	r5, [pc, #52]	@ (800f330 <__libc_init_array+0x38>)
 800f2fc:	4c0d      	ldr	r4, [pc, #52]	@ (800f334 <__libc_init_array+0x3c>)
 800f2fe:	1b64      	subs	r4, r4, r5
 800f300:	10a4      	asrs	r4, r4, #2
 800f302:	2600      	movs	r6, #0
 800f304:	42a6      	cmp	r6, r4
 800f306:	d109      	bne.n	800f31c <__libc_init_array+0x24>
 800f308:	4d0b      	ldr	r5, [pc, #44]	@ (800f338 <__libc_init_array+0x40>)
 800f30a:	4c0c      	ldr	r4, [pc, #48]	@ (800f33c <__libc_init_array+0x44>)
 800f30c:	f000 fe48 	bl	800ffa0 <_init>
 800f310:	1b64      	subs	r4, r4, r5
 800f312:	10a4      	asrs	r4, r4, #2
 800f314:	2600      	movs	r6, #0
 800f316:	42a6      	cmp	r6, r4
 800f318:	d105      	bne.n	800f326 <__libc_init_array+0x2e>
 800f31a:	bd70      	pop	{r4, r5, r6, pc}
 800f31c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f320:	4798      	blx	r3
 800f322:	3601      	adds	r6, #1
 800f324:	e7ee      	b.n	800f304 <__libc_init_array+0xc>
 800f326:	f855 3b04 	ldr.w	r3, [r5], #4
 800f32a:	4798      	blx	r3
 800f32c:	3601      	adds	r6, #1
 800f32e:	e7f2      	b.n	800f316 <__libc_init_array+0x1e>
 800f330:	08012b84 	.word	0x08012b84
 800f334:	08012b84 	.word	0x08012b84
 800f338:	08012b84 	.word	0x08012b84
 800f33c:	08012b88 	.word	0x08012b88

0800f340 <__retarget_lock_init_recursive>:
 800f340:	4770      	bx	lr

0800f342 <__retarget_lock_acquire_recursive>:
 800f342:	4770      	bx	lr

0800f344 <__retarget_lock_release_recursive>:
 800f344:	4770      	bx	lr

0800f346 <memcpy>:
 800f346:	440a      	add	r2, r1
 800f348:	4291      	cmp	r1, r2
 800f34a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800f34e:	d100      	bne.n	800f352 <memcpy+0xc>
 800f350:	4770      	bx	lr
 800f352:	b510      	push	{r4, lr}
 800f354:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f358:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f35c:	4291      	cmp	r1, r2
 800f35e:	d1f9      	bne.n	800f354 <memcpy+0xe>
 800f360:	bd10      	pop	{r4, pc}
	...

0800f364 <__assert_func>:
 800f364:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f366:	4614      	mov	r4, r2
 800f368:	461a      	mov	r2, r3
 800f36a:	4b09      	ldr	r3, [pc, #36]	@ (800f390 <__assert_func+0x2c>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	4605      	mov	r5, r0
 800f370:	68d8      	ldr	r0, [r3, #12]
 800f372:	b14c      	cbz	r4, 800f388 <__assert_func+0x24>
 800f374:	4b07      	ldr	r3, [pc, #28]	@ (800f394 <__assert_func+0x30>)
 800f376:	9100      	str	r1, [sp, #0]
 800f378:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f37c:	4906      	ldr	r1, [pc, #24]	@ (800f398 <__assert_func+0x34>)
 800f37e:	462b      	mov	r3, r5
 800f380:	f000 fc88 	bl	800fc94 <fiprintf>
 800f384:	f000 fd3c 	bl	800fe00 <abort>
 800f388:	4b04      	ldr	r3, [pc, #16]	@ (800f39c <__assert_func+0x38>)
 800f38a:	461c      	mov	r4, r3
 800f38c:	e7f3      	b.n	800f376 <__assert_func+0x12>
 800f38e:	bf00      	nop
 800f390:	20000038 	.word	0x20000038
 800f394:	08012b0d 	.word	0x08012b0d
 800f398:	08012b1a 	.word	0x08012b1a
 800f39c:	08012b48 	.word	0x08012b48

0800f3a0 <_free_r>:
 800f3a0:	b538      	push	{r3, r4, r5, lr}
 800f3a2:	4605      	mov	r5, r0
 800f3a4:	2900      	cmp	r1, #0
 800f3a6:	d041      	beq.n	800f42c <_free_r+0x8c>
 800f3a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3ac:	1f0c      	subs	r4, r1, #4
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	bfb8      	it	lt
 800f3b2:	18e4      	addlt	r4, r4, r3
 800f3b4:	f000 f8e8 	bl	800f588 <__malloc_lock>
 800f3b8:	4a1d      	ldr	r2, [pc, #116]	@ (800f430 <_free_r+0x90>)
 800f3ba:	6813      	ldr	r3, [r2, #0]
 800f3bc:	b933      	cbnz	r3, 800f3cc <_free_r+0x2c>
 800f3be:	6063      	str	r3, [r4, #4]
 800f3c0:	6014      	str	r4, [r2, #0]
 800f3c2:	4628      	mov	r0, r5
 800f3c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3c8:	f000 b8e4 	b.w	800f594 <__malloc_unlock>
 800f3cc:	42a3      	cmp	r3, r4
 800f3ce:	d908      	bls.n	800f3e2 <_free_r+0x42>
 800f3d0:	6820      	ldr	r0, [r4, #0]
 800f3d2:	1821      	adds	r1, r4, r0
 800f3d4:	428b      	cmp	r3, r1
 800f3d6:	bf01      	itttt	eq
 800f3d8:	6819      	ldreq	r1, [r3, #0]
 800f3da:	685b      	ldreq	r3, [r3, #4]
 800f3dc:	1809      	addeq	r1, r1, r0
 800f3de:	6021      	streq	r1, [r4, #0]
 800f3e0:	e7ed      	b.n	800f3be <_free_r+0x1e>
 800f3e2:	461a      	mov	r2, r3
 800f3e4:	685b      	ldr	r3, [r3, #4]
 800f3e6:	b10b      	cbz	r3, 800f3ec <_free_r+0x4c>
 800f3e8:	42a3      	cmp	r3, r4
 800f3ea:	d9fa      	bls.n	800f3e2 <_free_r+0x42>
 800f3ec:	6811      	ldr	r1, [r2, #0]
 800f3ee:	1850      	adds	r0, r2, r1
 800f3f0:	42a0      	cmp	r0, r4
 800f3f2:	d10b      	bne.n	800f40c <_free_r+0x6c>
 800f3f4:	6820      	ldr	r0, [r4, #0]
 800f3f6:	4401      	add	r1, r0
 800f3f8:	1850      	adds	r0, r2, r1
 800f3fa:	4283      	cmp	r3, r0
 800f3fc:	6011      	str	r1, [r2, #0]
 800f3fe:	d1e0      	bne.n	800f3c2 <_free_r+0x22>
 800f400:	6818      	ldr	r0, [r3, #0]
 800f402:	685b      	ldr	r3, [r3, #4]
 800f404:	6053      	str	r3, [r2, #4]
 800f406:	4408      	add	r0, r1
 800f408:	6010      	str	r0, [r2, #0]
 800f40a:	e7da      	b.n	800f3c2 <_free_r+0x22>
 800f40c:	d902      	bls.n	800f414 <_free_r+0x74>
 800f40e:	230c      	movs	r3, #12
 800f410:	602b      	str	r3, [r5, #0]
 800f412:	e7d6      	b.n	800f3c2 <_free_r+0x22>
 800f414:	6820      	ldr	r0, [r4, #0]
 800f416:	1821      	adds	r1, r4, r0
 800f418:	428b      	cmp	r3, r1
 800f41a:	bf04      	itt	eq
 800f41c:	6819      	ldreq	r1, [r3, #0]
 800f41e:	685b      	ldreq	r3, [r3, #4]
 800f420:	6063      	str	r3, [r4, #4]
 800f422:	bf04      	itt	eq
 800f424:	1809      	addeq	r1, r1, r0
 800f426:	6021      	streq	r1, [r4, #0]
 800f428:	6054      	str	r4, [r2, #4]
 800f42a:	e7ca      	b.n	800f3c2 <_free_r+0x22>
 800f42c:	bd38      	pop	{r3, r4, r5, pc}
 800f42e:	bf00      	nop
 800f430:	20007f18 	.word	0x20007f18

0800f434 <malloc>:
 800f434:	4b02      	ldr	r3, [pc, #8]	@ (800f440 <malloc+0xc>)
 800f436:	4601      	mov	r1, r0
 800f438:	6818      	ldr	r0, [r3, #0]
 800f43a:	f000 b825 	b.w	800f488 <_malloc_r>
 800f43e:	bf00      	nop
 800f440:	20000038 	.word	0x20000038

0800f444 <sbrk_aligned>:
 800f444:	b570      	push	{r4, r5, r6, lr}
 800f446:	4e0f      	ldr	r6, [pc, #60]	@ (800f484 <sbrk_aligned+0x40>)
 800f448:	460c      	mov	r4, r1
 800f44a:	6831      	ldr	r1, [r6, #0]
 800f44c:	4605      	mov	r5, r0
 800f44e:	b911      	cbnz	r1, 800f456 <sbrk_aligned+0x12>
 800f450:	f000 fcc6 	bl	800fde0 <_sbrk_r>
 800f454:	6030      	str	r0, [r6, #0]
 800f456:	4621      	mov	r1, r4
 800f458:	4628      	mov	r0, r5
 800f45a:	f000 fcc1 	bl	800fde0 <_sbrk_r>
 800f45e:	1c43      	adds	r3, r0, #1
 800f460:	d103      	bne.n	800f46a <sbrk_aligned+0x26>
 800f462:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800f466:	4620      	mov	r0, r4
 800f468:	bd70      	pop	{r4, r5, r6, pc}
 800f46a:	1cc4      	adds	r4, r0, #3
 800f46c:	f024 0403 	bic.w	r4, r4, #3
 800f470:	42a0      	cmp	r0, r4
 800f472:	d0f8      	beq.n	800f466 <sbrk_aligned+0x22>
 800f474:	1a21      	subs	r1, r4, r0
 800f476:	4628      	mov	r0, r5
 800f478:	f000 fcb2 	bl	800fde0 <_sbrk_r>
 800f47c:	3001      	adds	r0, #1
 800f47e:	d1f2      	bne.n	800f466 <sbrk_aligned+0x22>
 800f480:	e7ef      	b.n	800f462 <sbrk_aligned+0x1e>
 800f482:	bf00      	nop
 800f484:	20007f14 	.word	0x20007f14

0800f488 <_malloc_r>:
 800f488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f48c:	1ccd      	adds	r5, r1, #3
 800f48e:	f025 0503 	bic.w	r5, r5, #3
 800f492:	3508      	adds	r5, #8
 800f494:	2d0c      	cmp	r5, #12
 800f496:	bf38      	it	cc
 800f498:	250c      	movcc	r5, #12
 800f49a:	2d00      	cmp	r5, #0
 800f49c:	4606      	mov	r6, r0
 800f49e:	db01      	blt.n	800f4a4 <_malloc_r+0x1c>
 800f4a0:	42a9      	cmp	r1, r5
 800f4a2:	d904      	bls.n	800f4ae <_malloc_r+0x26>
 800f4a4:	230c      	movs	r3, #12
 800f4a6:	6033      	str	r3, [r6, #0]
 800f4a8:	2000      	movs	r0, #0
 800f4aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f584 <_malloc_r+0xfc>
 800f4b2:	f000 f869 	bl	800f588 <__malloc_lock>
 800f4b6:	f8d8 3000 	ldr.w	r3, [r8]
 800f4ba:	461c      	mov	r4, r3
 800f4bc:	bb44      	cbnz	r4, 800f510 <_malloc_r+0x88>
 800f4be:	4629      	mov	r1, r5
 800f4c0:	4630      	mov	r0, r6
 800f4c2:	f7ff ffbf 	bl	800f444 <sbrk_aligned>
 800f4c6:	1c43      	adds	r3, r0, #1
 800f4c8:	4604      	mov	r4, r0
 800f4ca:	d158      	bne.n	800f57e <_malloc_r+0xf6>
 800f4cc:	f8d8 4000 	ldr.w	r4, [r8]
 800f4d0:	4627      	mov	r7, r4
 800f4d2:	2f00      	cmp	r7, #0
 800f4d4:	d143      	bne.n	800f55e <_malloc_r+0xd6>
 800f4d6:	2c00      	cmp	r4, #0
 800f4d8:	d04b      	beq.n	800f572 <_malloc_r+0xea>
 800f4da:	6823      	ldr	r3, [r4, #0]
 800f4dc:	4639      	mov	r1, r7
 800f4de:	4630      	mov	r0, r6
 800f4e0:	eb04 0903 	add.w	r9, r4, r3
 800f4e4:	f000 fc7c 	bl	800fde0 <_sbrk_r>
 800f4e8:	4581      	cmp	r9, r0
 800f4ea:	d142      	bne.n	800f572 <_malloc_r+0xea>
 800f4ec:	6821      	ldr	r1, [r4, #0]
 800f4ee:	1a6d      	subs	r5, r5, r1
 800f4f0:	4629      	mov	r1, r5
 800f4f2:	4630      	mov	r0, r6
 800f4f4:	f7ff ffa6 	bl	800f444 <sbrk_aligned>
 800f4f8:	3001      	adds	r0, #1
 800f4fa:	d03a      	beq.n	800f572 <_malloc_r+0xea>
 800f4fc:	6823      	ldr	r3, [r4, #0]
 800f4fe:	442b      	add	r3, r5
 800f500:	6023      	str	r3, [r4, #0]
 800f502:	f8d8 3000 	ldr.w	r3, [r8]
 800f506:	685a      	ldr	r2, [r3, #4]
 800f508:	bb62      	cbnz	r2, 800f564 <_malloc_r+0xdc>
 800f50a:	f8c8 7000 	str.w	r7, [r8]
 800f50e:	e00f      	b.n	800f530 <_malloc_r+0xa8>
 800f510:	6822      	ldr	r2, [r4, #0]
 800f512:	1b52      	subs	r2, r2, r5
 800f514:	d420      	bmi.n	800f558 <_malloc_r+0xd0>
 800f516:	2a0b      	cmp	r2, #11
 800f518:	d917      	bls.n	800f54a <_malloc_r+0xc2>
 800f51a:	1961      	adds	r1, r4, r5
 800f51c:	42a3      	cmp	r3, r4
 800f51e:	6025      	str	r5, [r4, #0]
 800f520:	bf18      	it	ne
 800f522:	6059      	strne	r1, [r3, #4]
 800f524:	6863      	ldr	r3, [r4, #4]
 800f526:	bf08      	it	eq
 800f528:	f8c8 1000 	streq.w	r1, [r8]
 800f52c:	5162      	str	r2, [r4, r5]
 800f52e:	604b      	str	r3, [r1, #4]
 800f530:	4630      	mov	r0, r6
 800f532:	f000 f82f 	bl	800f594 <__malloc_unlock>
 800f536:	f104 000b 	add.w	r0, r4, #11
 800f53a:	1d23      	adds	r3, r4, #4
 800f53c:	f020 0007 	bic.w	r0, r0, #7
 800f540:	1ac2      	subs	r2, r0, r3
 800f542:	bf1c      	itt	ne
 800f544:	1a1b      	subne	r3, r3, r0
 800f546:	50a3      	strne	r3, [r4, r2]
 800f548:	e7af      	b.n	800f4aa <_malloc_r+0x22>
 800f54a:	6862      	ldr	r2, [r4, #4]
 800f54c:	42a3      	cmp	r3, r4
 800f54e:	bf0c      	ite	eq
 800f550:	f8c8 2000 	streq.w	r2, [r8]
 800f554:	605a      	strne	r2, [r3, #4]
 800f556:	e7eb      	b.n	800f530 <_malloc_r+0xa8>
 800f558:	4623      	mov	r3, r4
 800f55a:	6864      	ldr	r4, [r4, #4]
 800f55c:	e7ae      	b.n	800f4bc <_malloc_r+0x34>
 800f55e:	463c      	mov	r4, r7
 800f560:	687f      	ldr	r7, [r7, #4]
 800f562:	e7b6      	b.n	800f4d2 <_malloc_r+0x4a>
 800f564:	461a      	mov	r2, r3
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	42a3      	cmp	r3, r4
 800f56a:	d1fb      	bne.n	800f564 <_malloc_r+0xdc>
 800f56c:	2300      	movs	r3, #0
 800f56e:	6053      	str	r3, [r2, #4]
 800f570:	e7de      	b.n	800f530 <_malloc_r+0xa8>
 800f572:	230c      	movs	r3, #12
 800f574:	6033      	str	r3, [r6, #0]
 800f576:	4630      	mov	r0, r6
 800f578:	f000 f80c 	bl	800f594 <__malloc_unlock>
 800f57c:	e794      	b.n	800f4a8 <_malloc_r+0x20>
 800f57e:	6005      	str	r5, [r0, #0]
 800f580:	e7d6      	b.n	800f530 <_malloc_r+0xa8>
 800f582:	bf00      	nop
 800f584:	20007f18 	.word	0x20007f18

0800f588 <__malloc_lock>:
 800f588:	4801      	ldr	r0, [pc, #4]	@ (800f590 <__malloc_lock+0x8>)
 800f58a:	f7ff beda 	b.w	800f342 <__retarget_lock_acquire_recursive>
 800f58e:	bf00      	nop
 800f590:	20007f10 	.word	0x20007f10

0800f594 <__malloc_unlock>:
 800f594:	4801      	ldr	r0, [pc, #4]	@ (800f59c <__malloc_unlock+0x8>)
 800f596:	f7ff bed5 	b.w	800f344 <__retarget_lock_release_recursive>
 800f59a:	bf00      	nop
 800f59c:	20007f10 	.word	0x20007f10

0800f5a0 <__sfputc_r>:
 800f5a0:	6893      	ldr	r3, [r2, #8]
 800f5a2:	3b01      	subs	r3, #1
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	b410      	push	{r4}
 800f5a8:	6093      	str	r3, [r2, #8]
 800f5aa:	da08      	bge.n	800f5be <__sfputc_r+0x1e>
 800f5ac:	6994      	ldr	r4, [r2, #24]
 800f5ae:	42a3      	cmp	r3, r4
 800f5b0:	db01      	blt.n	800f5b6 <__sfputc_r+0x16>
 800f5b2:	290a      	cmp	r1, #10
 800f5b4:	d103      	bne.n	800f5be <__sfputc_r+0x1e>
 800f5b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5ba:	f000 bb7d 	b.w	800fcb8 <__swbuf_r>
 800f5be:	6813      	ldr	r3, [r2, #0]
 800f5c0:	1c58      	adds	r0, r3, #1
 800f5c2:	6010      	str	r0, [r2, #0]
 800f5c4:	7019      	strb	r1, [r3, #0]
 800f5c6:	4608      	mov	r0, r1
 800f5c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5cc:	4770      	bx	lr

0800f5ce <__sfputs_r>:
 800f5ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5d0:	4606      	mov	r6, r0
 800f5d2:	460f      	mov	r7, r1
 800f5d4:	4614      	mov	r4, r2
 800f5d6:	18d5      	adds	r5, r2, r3
 800f5d8:	42ac      	cmp	r4, r5
 800f5da:	d101      	bne.n	800f5e0 <__sfputs_r+0x12>
 800f5dc:	2000      	movs	r0, #0
 800f5de:	e007      	b.n	800f5f0 <__sfputs_r+0x22>
 800f5e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5e4:	463a      	mov	r2, r7
 800f5e6:	4630      	mov	r0, r6
 800f5e8:	f7ff ffda 	bl	800f5a0 <__sfputc_r>
 800f5ec:	1c43      	adds	r3, r0, #1
 800f5ee:	d1f3      	bne.n	800f5d8 <__sfputs_r+0xa>
 800f5f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f5f4 <_vfiprintf_r>:
 800f5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5f8:	460d      	mov	r5, r1
 800f5fa:	b09d      	sub	sp, #116	@ 0x74
 800f5fc:	4614      	mov	r4, r2
 800f5fe:	4698      	mov	r8, r3
 800f600:	4606      	mov	r6, r0
 800f602:	b118      	cbz	r0, 800f60c <_vfiprintf_r+0x18>
 800f604:	6a03      	ldr	r3, [r0, #32]
 800f606:	b90b      	cbnz	r3, 800f60c <_vfiprintf_r+0x18>
 800f608:	f7ff fd8c 	bl	800f124 <__sinit>
 800f60c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f60e:	07d9      	lsls	r1, r3, #31
 800f610:	d405      	bmi.n	800f61e <_vfiprintf_r+0x2a>
 800f612:	89ab      	ldrh	r3, [r5, #12]
 800f614:	059a      	lsls	r2, r3, #22
 800f616:	d402      	bmi.n	800f61e <_vfiprintf_r+0x2a>
 800f618:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f61a:	f7ff fe92 	bl	800f342 <__retarget_lock_acquire_recursive>
 800f61e:	89ab      	ldrh	r3, [r5, #12]
 800f620:	071b      	lsls	r3, r3, #28
 800f622:	d501      	bpl.n	800f628 <_vfiprintf_r+0x34>
 800f624:	692b      	ldr	r3, [r5, #16]
 800f626:	b99b      	cbnz	r3, 800f650 <_vfiprintf_r+0x5c>
 800f628:	4629      	mov	r1, r5
 800f62a:	4630      	mov	r0, r6
 800f62c:	f000 fb82 	bl	800fd34 <__swsetup_r>
 800f630:	b170      	cbz	r0, 800f650 <_vfiprintf_r+0x5c>
 800f632:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f634:	07dc      	lsls	r4, r3, #31
 800f636:	d504      	bpl.n	800f642 <_vfiprintf_r+0x4e>
 800f638:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f63c:	b01d      	add	sp, #116	@ 0x74
 800f63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f642:	89ab      	ldrh	r3, [r5, #12]
 800f644:	0598      	lsls	r0, r3, #22
 800f646:	d4f7      	bmi.n	800f638 <_vfiprintf_r+0x44>
 800f648:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f64a:	f7ff fe7b 	bl	800f344 <__retarget_lock_release_recursive>
 800f64e:	e7f3      	b.n	800f638 <_vfiprintf_r+0x44>
 800f650:	2300      	movs	r3, #0
 800f652:	9309      	str	r3, [sp, #36]	@ 0x24
 800f654:	2320      	movs	r3, #32
 800f656:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f65a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f65e:	2330      	movs	r3, #48	@ 0x30
 800f660:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f810 <_vfiprintf_r+0x21c>
 800f664:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f668:	f04f 0901 	mov.w	r9, #1
 800f66c:	4623      	mov	r3, r4
 800f66e:	469a      	mov	sl, r3
 800f670:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f674:	b10a      	cbz	r2, 800f67a <_vfiprintf_r+0x86>
 800f676:	2a25      	cmp	r2, #37	@ 0x25
 800f678:	d1f9      	bne.n	800f66e <_vfiprintf_r+0x7a>
 800f67a:	ebba 0b04 	subs.w	fp, sl, r4
 800f67e:	d00b      	beq.n	800f698 <_vfiprintf_r+0xa4>
 800f680:	465b      	mov	r3, fp
 800f682:	4622      	mov	r2, r4
 800f684:	4629      	mov	r1, r5
 800f686:	4630      	mov	r0, r6
 800f688:	f7ff ffa1 	bl	800f5ce <__sfputs_r>
 800f68c:	3001      	adds	r0, #1
 800f68e:	f000 80a7 	beq.w	800f7e0 <_vfiprintf_r+0x1ec>
 800f692:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f694:	445a      	add	r2, fp
 800f696:	9209      	str	r2, [sp, #36]	@ 0x24
 800f698:	f89a 3000 	ldrb.w	r3, [sl]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	f000 809f 	beq.w	800f7e0 <_vfiprintf_r+0x1ec>
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f6a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6ac:	f10a 0a01 	add.w	sl, sl, #1
 800f6b0:	9304      	str	r3, [sp, #16]
 800f6b2:	9307      	str	r3, [sp, #28]
 800f6b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f6b8:	931a      	str	r3, [sp, #104]	@ 0x68
 800f6ba:	4654      	mov	r4, sl
 800f6bc:	2205      	movs	r2, #5
 800f6be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6c2:	4853      	ldr	r0, [pc, #332]	@ (800f810 <_vfiprintf_r+0x21c>)
 800f6c4:	f7f0 fda4 	bl	8000210 <memchr>
 800f6c8:	9a04      	ldr	r2, [sp, #16]
 800f6ca:	b9d8      	cbnz	r0, 800f704 <_vfiprintf_r+0x110>
 800f6cc:	06d1      	lsls	r1, r2, #27
 800f6ce:	bf44      	itt	mi
 800f6d0:	2320      	movmi	r3, #32
 800f6d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f6d6:	0713      	lsls	r3, r2, #28
 800f6d8:	bf44      	itt	mi
 800f6da:	232b      	movmi	r3, #43	@ 0x2b
 800f6dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f6e0:	f89a 3000 	ldrb.w	r3, [sl]
 800f6e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800f6e6:	d015      	beq.n	800f714 <_vfiprintf_r+0x120>
 800f6e8:	9a07      	ldr	r2, [sp, #28]
 800f6ea:	4654      	mov	r4, sl
 800f6ec:	2000      	movs	r0, #0
 800f6ee:	f04f 0c0a 	mov.w	ip, #10
 800f6f2:	4621      	mov	r1, r4
 800f6f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f6f8:	3b30      	subs	r3, #48	@ 0x30
 800f6fa:	2b09      	cmp	r3, #9
 800f6fc:	d94b      	bls.n	800f796 <_vfiprintf_r+0x1a2>
 800f6fe:	b1b0      	cbz	r0, 800f72e <_vfiprintf_r+0x13a>
 800f700:	9207      	str	r2, [sp, #28]
 800f702:	e014      	b.n	800f72e <_vfiprintf_r+0x13a>
 800f704:	eba0 0308 	sub.w	r3, r0, r8
 800f708:	fa09 f303 	lsl.w	r3, r9, r3
 800f70c:	4313      	orrs	r3, r2
 800f70e:	9304      	str	r3, [sp, #16]
 800f710:	46a2      	mov	sl, r4
 800f712:	e7d2      	b.n	800f6ba <_vfiprintf_r+0xc6>
 800f714:	9b03      	ldr	r3, [sp, #12]
 800f716:	1d19      	adds	r1, r3, #4
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	9103      	str	r1, [sp, #12]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	bfbb      	ittet	lt
 800f720:	425b      	neglt	r3, r3
 800f722:	f042 0202 	orrlt.w	r2, r2, #2
 800f726:	9307      	strge	r3, [sp, #28]
 800f728:	9307      	strlt	r3, [sp, #28]
 800f72a:	bfb8      	it	lt
 800f72c:	9204      	strlt	r2, [sp, #16]
 800f72e:	7823      	ldrb	r3, [r4, #0]
 800f730:	2b2e      	cmp	r3, #46	@ 0x2e
 800f732:	d10a      	bne.n	800f74a <_vfiprintf_r+0x156>
 800f734:	7863      	ldrb	r3, [r4, #1]
 800f736:	2b2a      	cmp	r3, #42	@ 0x2a
 800f738:	d132      	bne.n	800f7a0 <_vfiprintf_r+0x1ac>
 800f73a:	9b03      	ldr	r3, [sp, #12]
 800f73c:	1d1a      	adds	r2, r3, #4
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	9203      	str	r2, [sp, #12]
 800f742:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f746:	3402      	adds	r4, #2
 800f748:	9305      	str	r3, [sp, #20]
 800f74a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f820 <_vfiprintf_r+0x22c>
 800f74e:	7821      	ldrb	r1, [r4, #0]
 800f750:	2203      	movs	r2, #3
 800f752:	4650      	mov	r0, sl
 800f754:	f7f0 fd5c 	bl	8000210 <memchr>
 800f758:	b138      	cbz	r0, 800f76a <_vfiprintf_r+0x176>
 800f75a:	9b04      	ldr	r3, [sp, #16]
 800f75c:	eba0 000a 	sub.w	r0, r0, sl
 800f760:	2240      	movs	r2, #64	@ 0x40
 800f762:	4082      	lsls	r2, r0
 800f764:	4313      	orrs	r3, r2
 800f766:	3401      	adds	r4, #1
 800f768:	9304      	str	r3, [sp, #16]
 800f76a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f76e:	4829      	ldr	r0, [pc, #164]	@ (800f814 <_vfiprintf_r+0x220>)
 800f770:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f774:	2206      	movs	r2, #6
 800f776:	f7f0 fd4b 	bl	8000210 <memchr>
 800f77a:	2800      	cmp	r0, #0
 800f77c:	d03f      	beq.n	800f7fe <_vfiprintf_r+0x20a>
 800f77e:	4b26      	ldr	r3, [pc, #152]	@ (800f818 <_vfiprintf_r+0x224>)
 800f780:	bb1b      	cbnz	r3, 800f7ca <_vfiprintf_r+0x1d6>
 800f782:	9b03      	ldr	r3, [sp, #12]
 800f784:	3307      	adds	r3, #7
 800f786:	f023 0307 	bic.w	r3, r3, #7
 800f78a:	3308      	adds	r3, #8
 800f78c:	9303      	str	r3, [sp, #12]
 800f78e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f790:	443b      	add	r3, r7
 800f792:	9309      	str	r3, [sp, #36]	@ 0x24
 800f794:	e76a      	b.n	800f66c <_vfiprintf_r+0x78>
 800f796:	fb0c 3202 	mla	r2, ip, r2, r3
 800f79a:	460c      	mov	r4, r1
 800f79c:	2001      	movs	r0, #1
 800f79e:	e7a8      	b.n	800f6f2 <_vfiprintf_r+0xfe>
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	3401      	adds	r4, #1
 800f7a4:	9305      	str	r3, [sp, #20]
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	f04f 0c0a 	mov.w	ip, #10
 800f7ac:	4620      	mov	r0, r4
 800f7ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7b2:	3a30      	subs	r2, #48	@ 0x30
 800f7b4:	2a09      	cmp	r2, #9
 800f7b6:	d903      	bls.n	800f7c0 <_vfiprintf_r+0x1cc>
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d0c6      	beq.n	800f74a <_vfiprintf_r+0x156>
 800f7bc:	9105      	str	r1, [sp, #20]
 800f7be:	e7c4      	b.n	800f74a <_vfiprintf_r+0x156>
 800f7c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f7c4:	4604      	mov	r4, r0
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	e7f0      	b.n	800f7ac <_vfiprintf_r+0x1b8>
 800f7ca:	ab03      	add	r3, sp, #12
 800f7cc:	9300      	str	r3, [sp, #0]
 800f7ce:	462a      	mov	r2, r5
 800f7d0:	4b12      	ldr	r3, [pc, #72]	@ (800f81c <_vfiprintf_r+0x228>)
 800f7d2:	a904      	add	r1, sp, #16
 800f7d4:	4630      	mov	r0, r6
 800f7d6:	f3af 8000 	nop.w
 800f7da:	4607      	mov	r7, r0
 800f7dc:	1c78      	adds	r0, r7, #1
 800f7de:	d1d6      	bne.n	800f78e <_vfiprintf_r+0x19a>
 800f7e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f7e2:	07d9      	lsls	r1, r3, #31
 800f7e4:	d405      	bmi.n	800f7f2 <_vfiprintf_r+0x1fe>
 800f7e6:	89ab      	ldrh	r3, [r5, #12]
 800f7e8:	059a      	lsls	r2, r3, #22
 800f7ea:	d402      	bmi.n	800f7f2 <_vfiprintf_r+0x1fe>
 800f7ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f7ee:	f7ff fda9 	bl	800f344 <__retarget_lock_release_recursive>
 800f7f2:	89ab      	ldrh	r3, [r5, #12]
 800f7f4:	065b      	lsls	r3, r3, #25
 800f7f6:	f53f af1f 	bmi.w	800f638 <_vfiprintf_r+0x44>
 800f7fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f7fc:	e71e      	b.n	800f63c <_vfiprintf_r+0x48>
 800f7fe:	ab03      	add	r3, sp, #12
 800f800:	9300      	str	r3, [sp, #0]
 800f802:	462a      	mov	r2, r5
 800f804:	4b05      	ldr	r3, [pc, #20]	@ (800f81c <_vfiprintf_r+0x228>)
 800f806:	a904      	add	r1, sp, #16
 800f808:	4630      	mov	r0, r6
 800f80a:	f000 f879 	bl	800f900 <_printf_i>
 800f80e:	e7e4      	b.n	800f7da <_vfiprintf_r+0x1e6>
 800f810:	08012b49 	.word	0x08012b49
 800f814:	08012b53 	.word	0x08012b53
 800f818:	00000000 	.word	0x00000000
 800f81c:	0800f5cf 	.word	0x0800f5cf
 800f820:	08012b4f 	.word	0x08012b4f

0800f824 <_printf_common>:
 800f824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f828:	4616      	mov	r6, r2
 800f82a:	4698      	mov	r8, r3
 800f82c:	688a      	ldr	r2, [r1, #8]
 800f82e:	690b      	ldr	r3, [r1, #16]
 800f830:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f834:	4293      	cmp	r3, r2
 800f836:	bfb8      	it	lt
 800f838:	4613      	movlt	r3, r2
 800f83a:	6033      	str	r3, [r6, #0]
 800f83c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f840:	4607      	mov	r7, r0
 800f842:	460c      	mov	r4, r1
 800f844:	b10a      	cbz	r2, 800f84a <_printf_common+0x26>
 800f846:	3301      	adds	r3, #1
 800f848:	6033      	str	r3, [r6, #0]
 800f84a:	6823      	ldr	r3, [r4, #0]
 800f84c:	0699      	lsls	r1, r3, #26
 800f84e:	bf42      	ittt	mi
 800f850:	6833      	ldrmi	r3, [r6, #0]
 800f852:	3302      	addmi	r3, #2
 800f854:	6033      	strmi	r3, [r6, #0]
 800f856:	6825      	ldr	r5, [r4, #0]
 800f858:	f015 0506 	ands.w	r5, r5, #6
 800f85c:	d106      	bne.n	800f86c <_printf_common+0x48>
 800f85e:	f104 0a19 	add.w	sl, r4, #25
 800f862:	68e3      	ldr	r3, [r4, #12]
 800f864:	6832      	ldr	r2, [r6, #0]
 800f866:	1a9b      	subs	r3, r3, r2
 800f868:	42ab      	cmp	r3, r5
 800f86a:	dc26      	bgt.n	800f8ba <_printf_common+0x96>
 800f86c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f870:	6822      	ldr	r2, [r4, #0]
 800f872:	3b00      	subs	r3, #0
 800f874:	bf18      	it	ne
 800f876:	2301      	movne	r3, #1
 800f878:	0692      	lsls	r2, r2, #26
 800f87a:	d42b      	bmi.n	800f8d4 <_printf_common+0xb0>
 800f87c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f880:	4641      	mov	r1, r8
 800f882:	4638      	mov	r0, r7
 800f884:	47c8      	blx	r9
 800f886:	3001      	adds	r0, #1
 800f888:	d01e      	beq.n	800f8c8 <_printf_common+0xa4>
 800f88a:	6823      	ldr	r3, [r4, #0]
 800f88c:	6922      	ldr	r2, [r4, #16]
 800f88e:	f003 0306 	and.w	r3, r3, #6
 800f892:	2b04      	cmp	r3, #4
 800f894:	bf02      	ittt	eq
 800f896:	68e5      	ldreq	r5, [r4, #12]
 800f898:	6833      	ldreq	r3, [r6, #0]
 800f89a:	1aed      	subeq	r5, r5, r3
 800f89c:	68a3      	ldr	r3, [r4, #8]
 800f89e:	bf0c      	ite	eq
 800f8a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f8a4:	2500      	movne	r5, #0
 800f8a6:	4293      	cmp	r3, r2
 800f8a8:	bfc4      	itt	gt
 800f8aa:	1a9b      	subgt	r3, r3, r2
 800f8ac:	18ed      	addgt	r5, r5, r3
 800f8ae:	2600      	movs	r6, #0
 800f8b0:	341a      	adds	r4, #26
 800f8b2:	42b5      	cmp	r5, r6
 800f8b4:	d11a      	bne.n	800f8ec <_printf_common+0xc8>
 800f8b6:	2000      	movs	r0, #0
 800f8b8:	e008      	b.n	800f8cc <_printf_common+0xa8>
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	4652      	mov	r2, sl
 800f8be:	4641      	mov	r1, r8
 800f8c0:	4638      	mov	r0, r7
 800f8c2:	47c8      	blx	r9
 800f8c4:	3001      	adds	r0, #1
 800f8c6:	d103      	bne.n	800f8d0 <_printf_common+0xac>
 800f8c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f8cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8d0:	3501      	adds	r5, #1
 800f8d2:	e7c6      	b.n	800f862 <_printf_common+0x3e>
 800f8d4:	18e1      	adds	r1, r4, r3
 800f8d6:	1c5a      	adds	r2, r3, #1
 800f8d8:	2030      	movs	r0, #48	@ 0x30
 800f8da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f8de:	4422      	add	r2, r4
 800f8e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f8e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f8e8:	3302      	adds	r3, #2
 800f8ea:	e7c7      	b.n	800f87c <_printf_common+0x58>
 800f8ec:	2301      	movs	r3, #1
 800f8ee:	4622      	mov	r2, r4
 800f8f0:	4641      	mov	r1, r8
 800f8f2:	4638      	mov	r0, r7
 800f8f4:	47c8      	blx	r9
 800f8f6:	3001      	adds	r0, #1
 800f8f8:	d0e6      	beq.n	800f8c8 <_printf_common+0xa4>
 800f8fa:	3601      	adds	r6, #1
 800f8fc:	e7d9      	b.n	800f8b2 <_printf_common+0x8e>
	...

0800f900 <_printf_i>:
 800f900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f904:	7e0f      	ldrb	r7, [r1, #24]
 800f906:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f908:	2f78      	cmp	r7, #120	@ 0x78
 800f90a:	4691      	mov	r9, r2
 800f90c:	4680      	mov	r8, r0
 800f90e:	460c      	mov	r4, r1
 800f910:	469a      	mov	sl, r3
 800f912:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f916:	d807      	bhi.n	800f928 <_printf_i+0x28>
 800f918:	2f62      	cmp	r7, #98	@ 0x62
 800f91a:	d80a      	bhi.n	800f932 <_printf_i+0x32>
 800f91c:	2f00      	cmp	r7, #0
 800f91e:	f000 80d1 	beq.w	800fac4 <_printf_i+0x1c4>
 800f922:	2f58      	cmp	r7, #88	@ 0x58
 800f924:	f000 80b8 	beq.w	800fa98 <_printf_i+0x198>
 800f928:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f92c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f930:	e03a      	b.n	800f9a8 <_printf_i+0xa8>
 800f932:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f936:	2b15      	cmp	r3, #21
 800f938:	d8f6      	bhi.n	800f928 <_printf_i+0x28>
 800f93a:	a101      	add	r1, pc, #4	@ (adr r1, 800f940 <_printf_i+0x40>)
 800f93c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f940:	0800f999 	.word	0x0800f999
 800f944:	0800f9ad 	.word	0x0800f9ad
 800f948:	0800f929 	.word	0x0800f929
 800f94c:	0800f929 	.word	0x0800f929
 800f950:	0800f929 	.word	0x0800f929
 800f954:	0800f929 	.word	0x0800f929
 800f958:	0800f9ad 	.word	0x0800f9ad
 800f95c:	0800f929 	.word	0x0800f929
 800f960:	0800f929 	.word	0x0800f929
 800f964:	0800f929 	.word	0x0800f929
 800f968:	0800f929 	.word	0x0800f929
 800f96c:	0800faab 	.word	0x0800faab
 800f970:	0800f9d7 	.word	0x0800f9d7
 800f974:	0800fa65 	.word	0x0800fa65
 800f978:	0800f929 	.word	0x0800f929
 800f97c:	0800f929 	.word	0x0800f929
 800f980:	0800facd 	.word	0x0800facd
 800f984:	0800f929 	.word	0x0800f929
 800f988:	0800f9d7 	.word	0x0800f9d7
 800f98c:	0800f929 	.word	0x0800f929
 800f990:	0800f929 	.word	0x0800f929
 800f994:	0800fa6d 	.word	0x0800fa6d
 800f998:	6833      	ldr	r3, [r6, #0]
 800f99a:	1d1a      	adds	r2, r3, #4
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	6032      	str	r2, [r6, #0]
 800f9a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f9a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f9a8:	2301      	movs	r3, #1
 800f9aa:	e09c      	b.n	800fae6 <_printf_i+0x1e6>
 800f9ac:	6833      	ldr	r3, [r6, #0]
 800f9ae:	6820      	ldr	r0, [r4, #0]
 800f9b0:	1d19      	adds	r1, r3, #4
 800f9b2:	6031      	str	r1, [r6, #0]
 800f9b4:	0606      	lsls	r6, r0, #24
 800f9b6:	d501      	bpl.n	800f9bc <_printf_i+0xbc>
 800f9b8:	681d      	ldr	r5, [r3, #0]
 800f9ba:	e003      	b.n	800f9c4 <_printf_i+0xc4>
 800f9bc:	0645      	lsls	r5, r0, #25
 800f9be:	d5fb      	bpl.n	800f9b8 <_printf_i+0xb8>
 800f9c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f9c4:	2d00      	cmp	r5, #0
 800f9c6:	da03      	bge.n	800f9d0 <_printf_i+0xd0>
 800f9c8:	232d      	movs	r3, #45	@ 0x2d
 800f9ca:	426d      	negs	r5, r5
 800f9cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f9d0:	4858      	ldr	r0, [pc, #352]	@ (800fb34 <_printf_i+0x234>)
 800f9d2:	230a      	movs	r3, #10
 800f9d4:	e011      	b.n	800f9fa <_printf_i+0xfa>
 800f9d6:	6821      	ldr	r1, [r4, #0]
 800f9d8:	6833      	ldr	r3, [r6, #0]
 800f9da:	0608      	lsls	r0, r1, #24
 800f9dc:	f853 5b04 	ldr.w	r5, [r3], #4
 800f9e0:	d402      	bmi.n	800f9e8 <_printf_i+0xe8>
 800f9e2:	0649      	lsls	r1, r1, #25
 800f9e4:	bf48      	it	mi
 800f9e6:	b2ad      	uxthmi	r5, r5
 800f9e8:	2f6f      	cmp	r7, #111	@ 0x6f
 800f9ea:	4852      	ldr	r0, [pc, #328]	@ (800fb34 <_printf_i+0x234>)
 800f9ec:	6033      	str	r3, [r6, #0]
 800f9ee:	bf14      	ite	ne
 800f9f0:	230a      	movne	r3, #10
 800f9f2:	2308      	moveq	r3, #8
 800f9f4:	2100      	movs	r1, #0
 800f9f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f9fa:	6866      	ldr	r6, [r4, #4]
 800f9fc:	60a6      	str	r6, [r4, #8]
 800f9fe:	2e00      	cmp	r6, #0
 800fa00:	db05      	blt.n	800fa0e <_printf_i+0x10e>
 800fa02:	6821      	ldr	r1, [r4, #0]
 800fa04:	432e      	orrs	r6, r5
 800fa06:	f021 0104 	bic.w	r1, r1, #4
 800fa0a:	6021      	str	r1, [r4, #0]
 800fa0c:	d04b      	beq.n	800faa6 <_printf_i+0x1a6>
 800fa0e:	4616      	mov	r6, r2
 800fa10:	fbb5 f1f3 	udiv	r1, r5, r3
 800fa14:	fb03 5711 	mls	r7, r3, r1, r5
 800fa18:	5dc7      	ldrb	r7, [r0, r7]
 800fa1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fa1e:	462f      	mov	r7, r5
 800fa20:	42bb      	cmp	r3, r7
 800fa22:	460d      	mov	r5, r1
 800fa24:	d9f4      	bls.n	800fa10 <_printf_i+0x110>
 800fa26:	2b08      	cmp	r3, #8
 800fa28:	d10b      	bne.n	800fa42 <_printf_i+0x142>
 800fa2a:	6823      	ldr	r3, [r4, #0]
 800fa2c:	07df      	lsls	r7, r3, #31
 800fa2e:	d508      	bpl.n	800fa42 <_printf_i+0x142>
 800fa30:	6923      	ldr	r3, [r4, #16]
 800fa32:	6861      	ldr	r1, [r4, #4]
 800fa34:	4299      	cmp	r1, r3
 800fa36:	bfde      	ittt	le
 800fa38:	2330      	movle	r3, #48	@ 0x30
 800fa3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fa3e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800fa42:	1b92      	subs	r2, r2, r6
 800fa44:	6122      	str	r2, [r4, #16]
 800fa46:	f8cd a000 	str.w	sl, [sp]
 800fa4a:	464b      	mov	r3, r9
 800fa4c:	aa03      	add	r2, sp, #12
 800fa4e:	4621      	mov	r1, r4
 800fa50:	4640      	mov	r0, r8
 800fa52:	f7ff fee7 	bl	800f824 <_printf_common>
 800fa56:	3001      	adds	r0, #1
 800fa58:	d14a      	bne.n	800faf0 <_printf_i+0x1f0>
 800fa5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fa5e:	b004      	add	sp, #16
 800fa60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa64:	6823      	ldr	r3, [r4, #0]
 800fa66:	f043 0320 	orr.w	r3, r3, #32
 800fa6a:	6023      	str	r3, [r4, #0]
 800fa6c:	4832      	ldr	r0, [pc, #200]	@ (800fb38 <_printf_i+0x238>)
 800fa6e:	2778      	movs	r7, #120	@ 0x78
 800fa70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fa74:	6823      	ldr	r3, [r4, #0]
 800fa76:	6831      	ldr	r1, [r6, #0]
 800fa78:	061f      	lsls	r7, r3, #24
 800fa7a:	f851 5b04 	ldr.w	r5, [r1], #4
 800fa7e:	d402      	bmi.n	800fa86 <_printf_i+0x186>
 800fa80:	065f      	lsls	r7, r3, #25
 800fa82:	bf48      	it	mi
 800fa84:	b2ad      	uxthmi	r5, r5
 800fa86:	6031      	str	r1, [r6, #0]
 800fa88:	07d9      	lsls	r1, r3, #31
 800fa8a:	bf44      	itt	mi
 800fa8c:	f043 0320 	orrmi.w	r3, r3, #32
 800fa90:	6023      	strmi	r3, [r4, #0]
 800fa92:	b11d      	cbz	r5, 800fa9c <_printf_i+0x19c>
 800fa94:	2310      	movs	r3, #16
 800fa96:	e7ad      	b.n	800f9f4 <_printf_i+0xf4>
 800fa98:	4826      	ldr	r0, [pc, #152]	@ (800fb34 <_printf_i+0x234>)
 800fa9a:	e7e9      	b.n	800fa70 <_printf_i+0x170>
 800fa9c:	6823      	ldr	r3, [r4, #0]
 800fa9e:	f023 0320 	bic.w	r3, r3, #32
 800faa2:	6023      	str	r3, [r4, #0]
 800faa4:	e7f6      	b.n	800fa94 <_printf_i+0x194>
 800faa6:	4616      	mov	r6, r2
 800faa8:	e7bd      	b.n	800fa26 <_printf_i+0x126>
 800faaa:	6833      	ldr	r3, [r6, #0]
 800faac:	6825      	ldr	r5, [r4, #0]
 800faae:	6961      	ldr	r1, [r4, #20]
 800fab0:	1d18      	adds	r0, r3, #4
 800fab2:	6030      	str	r0, [r6, #0]
 800fab4:	062e      	lsls	r6, r5, #24
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	d501      	bpl.n	800fabe <_printf_i+0x1be>
 800faba:	6019      	str	r1, [r3, #0]
 800fabc:	e002      	b.n	800fac4 <_printf_i+0x1c4>
 800fabe:	0668      	lsls	r0, r5, #25
 800fac0:	d5fb      	bpl.n	800faba <_printf_i+0x1ba>
 800fac2:	8019      	strh	r1, [r3, #0]
 800fac4:	2300      	movs	r3, #0
 800fac6:	6123      	str	r3, [r4, #16]
 800fac8:	4616      	mov	r6, r2
 800faca:	e7bc      	b.n	800fa46 <_printf_i+0x146>
 800facc:	6833      	ldr	r3, [r6, #0]
 800face:	1d1a      	adds	r2, r3, #4
 800fad0:	6032      	str	r2, [r6, #0]
 800fad2:	681e      	ldr	r6, [r3, #0]
 800fad4:	6862      	ldr	r2, [r4, #4]
 800fad6:	2100      	movs	r1, #0
 800fad8:	4630      	mov	r0, r6
 800fada:	f7f0 fb99 	bl	8000210 <memchr>
 800fade:	b108      	cbz	r0, 800fae4 <_printf_i+0x1e4>
 800fae0:	1b80      	subs	r0, r0, r6
 800fae2:	6060      	str	r0, [r4, #4]
 800fae4:	6863      	ldr	r3, [r4, #4]
 800fae6:	6123      	str	r3, [r4, #16]
 800fae8:	2300      	movs	r3, #0
 800faea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800faee:	e7aa      	b.n	800fa46 <_printf_i+0x146>
 800faf0:	6923      	ldr	r3, [r4, #16]
 800faf2:	4632      	mov	r2, r6
 800faf4:	4649      	mov	r1, r9
 800faf6:	4640      	mov	r0, r8
 800faf8:	47d0      	blx	sl
 800fafa:	3001      	adds	r0, #1
 800fafc:	d0ad      	beq.n	800fa5a <_printf_i+0x15a>
 800fafe:	6823      	ldr	r3, [r4, #0]
 800fb00:	079b      	lsls	r3, r3, #30
 800fb02:	d413      	bmi.n	800fb2c <_printf_i+0x22c>
 800fb04:	68e0      	ldr	r0, [r4, #12]
 800fb06:	9b03      	ldr	r3, [sp, #12]
 800fb08:	4298      	cmp	r0, r3
 800fb0a:	bfb8      	it	lt
 800fb0c:	4618      	movlt	r0, r3
 800fb0e:	e7a6      	b.n	800fa5e <_printf_i+0x15e>
 800fb10:	2301      	movs	r3, #1
 800fb12:	4632      	mov	r2, r6
 800fb14:	4649      	mov	r1, r9
 800fb16:	4640      	mov	r0, r8
 800fb18:	47d0      	blx	sl
 800fb1a:	3001      	adds	r0, #1
 800fb1c:	d09d      	beq.n	800fa5a <_printf_i+0x15a>
 800fb1e:	3501      	adds	r5, #1
 800fb20:	68e3      	ldr	r3, [r4, #12]
 800fb22:	9903      	ldr	r1, [sp, #12]
 800fb24:	1a5b      	subs	r3, r3, r1
 800fb26:	42ab      	cmp	r3, r5
 800fb28:	dcf2      	bgt.n	800fb10 <_printf_i+0x210>
 800fb2a:	e7eb      	b.n	800fb04 <_printf_i+0x204>
 800fb2c:	2500      	movs	r5, #0
 800fb2e:	f104 0619 	add.w	r6, r4, #25
 800fb32:	e7f5      	b.n	800fb20 <_printf_i+0x220>
 800fb34:	08012b5a 	.word	0x08012b5a
 800fb38:	08012b6b 	.word	0x08012b6b

0800fb3c <__sflush_r>:
 800fb3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fb40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb44:	0716      	lsls	r6, r2, #28
 800fb46:	4605      	mov	r5, r0
 800fb48:	460c      	mov	r4, r1
 800fb4a:	d454      	bmi.n	800fbf6 <__sflush_r+0xba>
 800fb4c:	684b      	ldr	r3, [r1, #4]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	dc02      	bgt.n	800fb58 <__sflush_r+0x1c>
 800fb52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	dd48      	ble.n	800fbea <__sflush_r+0xae>
 800fb58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fb5a:	2e00      	cmp	r6, #0
 800fb5c:	d045      	beq.n	800fbea <__sflush_r+0xae>
 800fb5e:	2300      	movs	r3, #0
 800fb60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fb64:	682f      	ldr	r7, [r5, #0]
 800fb66:	6a21      	ldr	r1, [r4, #32]
 800fb68:	602b      	str	r3, [r5, #0]
 800fb6a:	d030      	beq.n	800fbce <__sflush_r+0x92>
 800fb6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fb6e:	89a3      	ldrh	r3, [r4, #12]
 800fb70:	0759      	lsls	r1, r3, #29
 800fb72:	d505      	bpl.n	800fb80 <__sflush_r+0x44>
 800fb74:	6863      	ldr	r3, [r4, #4]
 800fb76:	1ad2      	subs	r2, r2, r3
 800fb78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fb7a:	b10b      	cbz	r3, 800fb80 <__sflush_r+0x44>
 800fb7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fb7e:	1ad2      	subs	r2, r2, r3
 800fb80:	2300      	movs	r3, #0
 800fb82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fb84:	6a21      	ldr	r1, [r4, #32]
 800fb86:	4628      	mov	r0, r5
 800fb88:	47b0      	blx	r6
 800fb8a:	1c43      	adds	r3, r0, #1
 800fb8c:	89a3      	ldrh	r3, [r4, #12]
 800fb8e:	d106      	bne.n	800fb9e <__sflush_r+0x62>
 800fb90:	6829      	ldr	r1, [r5, #0]
 800fb92:	291d      	cmp	r1, #29
 800fb94:	d82b      	bhi.n	800fbee <__sflush_r+0xb2>
 800fb96:	4a2a      	ldr	r2, [pc, #168]	@ (800fc40 <__sflush_r+0x104>)
 800fb98:	40ca      	lsrs	r2, r1
 800fb9a:	07d6      	lsls	r6, r2, #31
 800fb9c:	d527      	bpl.n	800fbee <__sflush_r+0xb2>
 800fb9e:	2200      	movs	r2, #0
 800fba0:	6062      	str	r2, [r4, #4]
 800fba2:	04d9      	lsls	r1, r3, #19
 800fba4:	6922      	ldr	r2, [r4, #16]
 800fba6:	6022      	str	r2, [r4, #0]
 800fba8:	d504      	bpl.n	800fbb4 <__sflush_r+0x78>
 800fbaa:	1c42      	adds	r2, r0, #1
 800fbac:	d101      	bne.n	800fbb2 <__sflush_r+0x76>
 800fbae:	682b      	ldr	r3, [r5, #0]
 800fbb0:	b903      	cbnz	r3, 800fbb4 <__sflush_r+0x78>
 800fbb2:	6560      	str	r0, [r4, #84]	@ 0x54
 800fbb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fbb6:	602f      	str	r7, [r5, #0]
 800fbb8:	b1b9      	cbz	r1, 800fbea <__sflush_r+0xae>
 800fbba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fbbe:	4299      	cmp	r1, r3
 800fbc0:	d002      	beq.n	800fbc8 <__sflush_r+0x8c>
 800fbc2:	4628      	mov	r0, r5
 800fbc4:	f7ff fbec 	bl	800f3a0 <_free_r>
 800fbc8:	2300      	movs	r3, #0
 800fbca:	6363      	str	r3, [r4, #52]	@ 0x34
 800fbcc:	e00d      	b.n	800fbea <__sflush_r+0xae>
 800fbce:	2301      	movs	r3, #1
 800fbd0:	4628      	mov	r0, r5
 800fbd2:	47b0      	blx	r6
 800fbd4:	4602      	mov	r2, r0
 800fbd6:	1c50      	adds	r0, r2, #1
 800fbd8:	d1c9      	bne.n	800fb6e <__sflush_r+0x32>
 800fbda:	682b      	ldr	r3, [r5, #0]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d0c6      	beq.n	800fb6e <__sflush_r+0x32>
 800fbe0:	2b1d      	cmp	r3, #29
 800fbe2:	d001      	beq.n	800fbe8 <__sflush_r+0xac>
 800fbe4:	2b16      	cmp	r3, #22
 800fbe6:	d11e      	bne.n	800fc26 <__sflush_r+0xea>
 800fbe8:	602f      	str	r7, [r5, #0]
 800fbea:	2000      	movs	r0, #0
 800fbec:	e022      	b.n	800fc34 <__sflush_r+0xf8>
 800fbee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fbf2:	b21b      	sxth	r3, r3
 800fbf4:	e01b      	b.n	800fc2e <__sflush_r+0xf2>
 800fbf6:	690f      	ldr	r7, [r1, #16]
 800fbf8:	2f00      	cmp	r7, #0
 800fbfa:	d0f6      	beq.n	800fbea <__sflush_r+0xae>
 800fbfc:	0793      	lsls	r3, r2, #30
 800fbfe:	680e      	ldr	r6, [r1, #0]
 800fc00:	bf08      	it	eq
 800fc02:	694b      	ldreq	r3, [r1, #20]
 800fc04:	600f      	str	r7, [r1, #0]
 800fc06:	bf18      	it	ne
 800fc08:	2300      	movne	r3, #0
 800fc0a:	eba6 0807 	sub.w	r8, r6, r7
 800fc0e:	608b      	str	r3, [r1, #8]
 800fc10:	f1b8 0f00 	cmp.w	r8, #0
 800fc14:	dde9      	ble.n	800fbea <__sflush_r+0xae>
 800fc16:	6a21      	ldr	r1, [r4, #32]
 800fc18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fc1a:	4643      	mov	r3, r8
 800fc1c:	463a      	mov	r2, r7
 800fc1e:	4628      	mov	r0, r5
 800fc20:	47b0      	blx	r6
 800fc22:	2800      	cmp	r0, #0
 800fc24:	dc08      	bgt.n	800fc38 <__sflush_r+0xfc>
 800fc26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc2e:	81a3      	strh	r3, [r4, #12]
 800fc30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fc34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc38:	4407      	add	r7, r0
 800fc3a:	eba8 0800 	sub.w	r8, r8, r0
 800fc3e:	e7e7      	b.n	800fc10 <__sflush_r+0xd4>
 800fc40:	20400001 	.word	0x20400001

0800fc44 <_fflush_r>:
 800fc44:	b538      	push	{r3, r4, r5, lr}
 800fc46:	690b      	ldr	r3, [r1, #16]
 800fc48:	4605      	mov	r5, r0
 800fc4a:	460c      	mov	r4, r1
 800fc4c:	b913      	cbnz	r3, 800fc54 <_fflush_r+0x10>
 800fc4e:	2500      	movs	r5, #0
 800fc50:	4628      	mov	r0, r5
 800fc52:	bd38      	pop	{r3, r4, r5, pc}
 800fc54:	b118      	cbz	r0, 800fc5e <_fflush_r+0x1a>
 800fc56:	6a03      	ldr	r3, [r0, #32]
 800fc58:	b90b      	cbnz	r3, 800fc5e <_fflush_r+0x1a>
 800fc5a:	f7ff fa63 	bl	800f124 <__sinit>
 800fc5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d0f3      	beq.n	800fc4e <_fflush_r+0xa>
 800fc66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fc68:	07d0      	lsls	r0, r2, #31
 800fc6a:	d404      	bmi.n	800fc76 <_fflush_r+0x32>
 800fc6c:	0599      	lsls	r1, r3, #22
 800fc6e:	d402      	bmi.n	800fc76 <_fflush_r+0x32>
 800fc70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fc72:	f7ff fb66 	bl	800f342 <__retarget_lock_acquire_recursive>
 800fc76:	4628      	mov	r0, r5
 800fc78:	4621      	mov	r1, r4
 800fc7a:	f7ff ff5f 	bl	800fb3c <__sflush_r>
 800fc7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fc80:	07da      	lsls	r2, r3, #31
 800fc82:	4605      	mov	r5, r0
 800fc84:	d4e4      	bmi.n	800fc50 <_fflush_r+0xc>
 800fc86:	89a3      	ldrh	r3, [r4, #12]
 800fc88:	059b      	lsls	r3, r3, #22
 800fc8a:	d4e1      	bmi.n	800fc50 <_fflush_r+0xc>
 800fc8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fc8e:	f7ff fb59 	bl	800f344 <__retarget_lock_release_recursive>
 800fc92:	e7dd      	b.n	800fc50 <_fflush_r+0xc>

0800fc94 <fiprintf>:
 800fc94:	b40e      	push	{r1, r2, r3}
 800fc96:	b503      	push	{r0, r1, lr}
 800fc98:	4601      	mov	r1, r0
 800fc9a:	ab03      	add	r3, sp, #12
 800fc9c:	4805      	ldr	r0, [pc, #20]	@ (800fcb4 <fiprintf+0x20>)
 800fc9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fca2:	6800      	ldr	r0, [r0, #0]
 800fca4:	9301      	str	r3, [sp, #4]
 800fca6:	f7ff fca5 	bl	800f5f4 <_vfiprintf_r>
 800fcaa:	b002      	add	sp, #8
 800fcac:	f85d eb04 	ldr.w	lr, [sp], #4
 800fcb0:	b003      	add	sp, #12
 800fcb2:	4770      	bx	lr
 800fcb4:	20000038 	.word	0x20000038

0800fcb8 <__swbuf_r>:
 800fcb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcba:	460e      	mov	r6, r1
 800fcbc:	4614      	mov	r4, r2
 800fcbe:	4605      	mov	r5, r0
 800fcc0:	b118      	cbz	r0, 800fcca <__swbuf_r+0x12>
 800fcc2:	6a03      	ldr	r3, [r0, #32]
 800fcc4:	b90b      	cbnz	r3, 800fcca <__swbuf_r+0x12>
 800fcc6:	f7ff fa2d 	bl	800f124 <__sinit>
 800fcca:	69a3      	ldr	r3, [r4, #24]
 800fccc:	60a3      	str	r3, [r4, #8]
 800fcce:	89a3      	ldrh	r3, [r4, #12]
 800fcd0:	071a      	lsls	r2, r3, #28
 800fcd2:	d501      	bpl.n	800fcd8 <__swbuf_r+0x20>
 800fcd4:	6923      	ldr	r3, [r4, #16]
 800fcd6:	b943      	cbnz	r3, 800fcea <__swbuf_r+0x32>
 800fcd8:	4621      	mov	r1, r4
 800fcda:	4628      	mov	r0, r5
 800fcdc:	f000 f82a 	bl	800fd34 <__swsetup_r>
 800fce0:	b118      	cbz	r0, 800fcea <__swbuf_r+0x32>
 800fce2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800fce6:	4638      	mov	r0, r7
 800fce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcea:	6823      	ldr	r3, [r4, #0]
 800fcec:	6922      	ldr	r2, [r4, #16]
 800fcee:	1a98      	subs	r0, r3, r2
 800fcf0:	6963      	ldr	r3, [r4, #20]
 800fcf2:	b2f6      	uxtb	r6, r6
 800fcf4:	4283      	cmp	r3, r0
 800fcf6:	4637      	mov	r7, r6
 800fcf8:	dc05      	bgt.n	800fd06 <__swbuf_r+0x4e>
 800fcfa:	4621      	mov	r1, r4
 800fcfc:	4628      	mov	r0, r5
 800fcfe:	f7ff ffa1 	bl	800fc44 <_fflush_r>
 800fd02:	2800      	cmp	r0, #0
 800fd04:	d1ed      	bne.n	800fce2 <__swbuf_r+0x2a>
 800fd06:	68a3      	ldr	r3, [r4, #8]
 800fd08:	3b01      	subs	r3, #1
 800fd0a:	60a3      	str	r3, [r4, #8]
 800fd0c:	6823      	ldr	r3, [r4, #0]
 800fd0e:	1c5a      	adds	r2, r3, #1
 800fd10:	6022      	str	r2, [r4, #0]
 800fd12:	701e      	strb	r6, [r3, #0]
 800fd14:	6962      	ldr	r2, [r4, #20]
 800fd16:	1c43      	adds	r3, r0, #1
 800fd18:	429a      	cmp	r2, r3
 800fd1a:	d004      	beq.n	800fd26 <__swbuf_r+0x6e>
 800fd1c:	89a3      	ldrh	r3, [r4, #12]
 800fd1e:	07db      	lsls	r3, r3, #31
 800fd20:	d5e1      	bpl.n	800fce6 <__swbuf_r+0x2e>
 800fd22:	2e0a      	cmp	r6, #10
 800fd24:	d1df      	bne.n	800fce6 <__swbuf_r+0x2e>
 800fd26:	4621      	mov	r1, r4
 800fd28:	4628      	mov	r0, r5
 800fd2a:	f7ff ff8b 	bl	800fc44 <_fflush_r>
 800fd2e:	2800      	cmp	r0, #0
 800fd30:	d0d9      	beq.n	800fce6 <__swbuf_r+0x2e>
 800fd32:	e7d6      	b.n	800fce2 <__swbuf_r+0x2a>

0800fd34 <__swsetup_r>:
 800fd34:	b538      	push	{r3, r4, r5, lr}
 800fd36:	4b29      	ldr	r3, [pc, #164]	@ (800fddc <__swsetup_r+0xa8>)
 800fd38:	4605      	mov	r5, r0
 800fd3a:	6818      	ldr	r0, [r3, #0]
 800fd3c:	460c      	mov	r4, r1
 800fd3e:	b118      	cbz	r0, 800fd48 <__swsetup_r+0x14>
 800fd40:	6a03      	ldr	r3, [r0, #32]
 800fd42:	b90b      	cbnz	r3, 800fd48 <__swsetup_r+0x14>
 800fd44:	f7ff f9ee 	bl	800f124 <__sinit>
 800fd48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd4c:	0719      	lsls	r1, r3, #28
 800fd4e:	d422      	bmi.n	800fd96 <__swsetup_r+0x62>
 800fd50:	06da      	lsls	r2, r3, #27
 800fd52:	d407      	bmi.n	800fd64 <__swsetup_r+0x30>
 800fd54:	2209      	movs	r2, #9
 800fd56:	602a      	str	r2, [r5, #0]
 800fd58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd5c:	81a3      	strh	r3, [r4, #12]
 800fd5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fd62:	e033      	b.n	800fdcc <__swsetup_r+0x98>
 800fd64:	0758      	lsls	r0, r3, #29
 800fd66:	d512      	bpl.n	800fd8e <__swsetup_r+0x5a>
 800fd68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fd6a:	b141      	cbz	r1, 800fd7e <__swsetup_r+0x4a>
 800fd6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fd70:	4299      	cmp	r1, r3
 800fd72:	d002      	beq.n	800fd7a <__swsetup_r+0x46>
 800fd74:	4628      	mov	r0, r5
 800fd76:	f7ff fb13 	bl	800f3a0 <_free_r>
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	6363      	str	r3, [r4, #52]	@ 0x34
 800fd7e:	89a3      	ldrh	r3, [r4, #12]
 800fd80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fd84:	81a3      	strh	r3, [r4, #12]
 800fd86:	2300      	movs	r3, #0
 800fd88:	6063      	str	r3, [r4, #4]
 800fd8a:	6923      	ldr	r3, [r4, #16]
 800fd8c:	6023      	str	r3, [r4, #0]
 800fd8e:	89a3      	ldrh	r3, [r4, #12]
 800fd90:	f043 0308 	orr.w	r3, r3, #8
 800fd94:	81a3      	strh	r3, [r4, #12]
 800fd96:	6923      	ldr	r3, [r4, #16]
 800fd98:	b94b      	cbnz	r3, 800fdae <__swsetup_r+0x7a>
 800fd9a:	89a3      	ldrh	r3, [r4, #12]
 800fd9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fda0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fda4:	d003      	beq.n	800fdae <__swsetup_r+0x7a>
 800fda6:	4621      	mov	r1, r4
 800fda8:	4628      	mov	r0, r5
 800fdaa:	f000 f856 	bl	800fe5a <__smakebuf_r>
 800fdae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fdb2:	f013 0201 	ands.w	r2, r3, #1
 800fdb6:	d00a      	beq.n	800fdce <__swsetup_r+0x9a>
 800fdb8:	2200      	movs	r2, #0
 800fdba:	60a2      	str	r2, [r4, #8]
 800fdbc:	6962      	ldr	r2, [r4, #20]
 800fdbe:	4252      	negs	r2, r2
 800fdc0:	61a2      	str	r2, [r4, #24]
 800fdc2:	6922      	ldr	r2, [r4, #16]
 800fdc4:	b942      	cbnz	r2, 800fdd8 <__swsetup_r+0xa4>
 800fdc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fdca:	d1c5      	bne.n	800fd58 <__swsetup_r+0x24>
 800fdcc:	bd38      	pop	{r3, r4, r5, pc}
 800fdce:	0799      	lsls	r1, r3, #30
 800fdd0:	bf58      	it	pl
 800fdd2:	6962      	ldrpl	r2, [r4, #20]
 800fdd4:	60a2      	str	r2, [r4, #8]
 800fdd6:	e7f4      	b.n	800fdc2 <__swsetup_r+0x8e>
 800fdd8:	2000      	movs	r0, #0
 800fdda:	e7f7      	b.n	800fdcc <__swsetup_r+0x98>
 800fddc:	20000038 	.word	0x20000038

0800fde0 <_sbrk_r>:
 800fde0:	b538      	push	{r3, r4, r5, lr}
 800fde2:	4d06      	ldr	r5, [pc, #24]	@ (800fdfc <_sbrk_r+0x1c>)
 800fde4:	2300      	movs	r3, #0
 800fde6:	4604      	mov	r4, r0
 800fde8:	4608      	mov	r0, r1
 800fdea:	602b      	str	r3, [r5, #0]
 800fdec:	f7f0 fdc4 	bl	8000978 <_sbrk>
 800fdf0:	1c43      	adds	r3, r0, #1
 800fdf2:	d102      	bne.n	800fdfa <_sbrk_r+0x1a>
 800fdf4:	682b      	ldr	r3, [r5, #0]
 800fdf6:	b103      	cbz	r3, 800fdfa <_sbrk_r+0x1a>
 800fdf8:	6023      	str	r3, [r4, #0]
 800fdfa:	bd38      	pop	{r3, r4, r5, pc}
 800fdfc:	20007f0c 	.word	0x20007f0c

0800fe00 <abort>:
 800fe00:	b508      	push	{r3, lr}
 800fe02:	2006      	movs	r0, #6
 800fe04:	f000 f88e 	bl	800ff24 <raise>
 800fe08:	2001      	movs	r0, #1
 800fe0a:	f7f0 fd3d 	bl	8000888 <_exit>

0800fe0e <__swhatbuf_r>:
 800fe0e:	b570      	push	{r4, r5, r6, lr}
 800fe10:	460c      	mov	r4, r1
 800fe12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe16:	2900      	cmp	r1, #0
 800fe18:	b096      	sub	sp, #88	@ 0x58
 800fe1a:	4615      	mov	r5, r2
 800fe1c:	461e      	mov	r6, r3
 800fe1e:	da0d      	bge.n	800fe3c <__swhatbuf_r+0x2e>
 800fe20:	89a3      	ldrh	r3, [r4, #12]
 800fe22:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fe26:	f04f 0100 	mov.w	r1, #0
 800fe2a:	bf14      	ite	ne
 800fe2c:	2340      	movne	r3, #64	@ 0x40
 800fe2e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fe32:	2000      	movs	r0, #0
 800fe34:	6031      	str	r1, [r6, #0]
 800fe36:	602b      	str	r3, [r5, #0]
 800fe38:	b016      	add	sp, #88	@ 0x58
 800fe3a:	bd70      	pop	{r4, r5, r6, pc}
 800fe3c:	466a      	mov	r2, sp
 800fe3e:	f000 f879 	bl	800ff34 <_fstat_r>
 800fe42:	2800      	cmp	r0, #0
 800fe44:	dbec      	blt.n	800fe20 <__swhatbuf_r+0x12>
 800fe46:	9901      	ldr	r1, [sp, #4]
 800fe48:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fe4c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fe50:	4259      	negs	r1, r3
 800fe52:	4159      	adcs	r1, r3
 800fe54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fe58:	e7eb      	b.n	800fe32 <__swhatbuf_r+0x24>

0800fe5a <__smakebuf_r>:
 800fe5a:	898b      	ldrh	r3, [r1, #12]
 800fe5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe5e:	079d      	lsls	r5, r3, #30
 800fe60:	4606      	mov	r6, r0
 800fe62:	460c      	mov	r4, r1
 800fe64:	d507      	bpl.n	800fe76 <__smakebuf_r+0x1c>
 800fe66:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fe6a:	6023      	str	r3, [r4, #0]
 800fe6c:	6123      	str	r3, [r4, #16]
 800fe6e:	2301      	movs	r3, #1
 800fe70:	6163      	str	r3, [r4, #20]
 800fe72:	b003      	add	sp, #12
 800fe74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe76:	ab01      	add	r3, sp, #4
 800fe78:	466a      	mov	r2, sp
 800fe7a:	f7ff ffc8 	bl	800fe0e <__swhatbuf_r>
 800fe7e:	9f00      	ldr	r7, [sp, #0]
 800fe80:	4605      	mov	r5, r0
 800fe82:	4639      	mov	r1, r7
 800fe84:	4630      	mov	r0, r6
 800fe86:	f7ff faff 	bl	800f488 <_malloc_r>
 800fe8a:	b948      	cbnz	r0, 800fea0 <__smakebuf_r+0x46>
 800fe8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe90:	059a      	lsls	r2, r3, #22
 800fe92:	d4ee      	bmi.n	800fe72 <__smakebuf_r+0x18>
 800fe94:	f023 0303 	bic.w	r3, r3, #3
 800fe98:	f043 0302 	orr.w	r3, r3, #2
 800fe9c:	81a3      	strh	r3, [r4, #12]
 800fe9e:	e7e2      	b.n	800fe66 <__smakebuf_r+0xc>
 800fea0:	89a3      	ldrh	r3, [r4, #12]
 800fea2:	6020      	str	r0, [r4, #0]
 800fea4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fea8:	81a3      	strh	r3, [r4, #12]
 800feaa:	9b01      	ldr	r3, [sp, #4]
 800feac:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800feb0:	b15b      	cbz	r3, 800feca <__smakebuf_r+0x70>
 800feb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800feb6:	4630      	mov	r0, r6
 800feb8:	f000 f84e 	bl	800ff58 <_isatty_r>
 800febc:	b128      	cbz	r0, 800feca <__smakebuf_r+0x70>
 800febe:	89a3      	ldrh	r3, [r4, #12]
 800fec0:	f023 0303 	bic.w	r3, r3, #3
 800fec4:	f043 0301 	orr.w	r3, r3, #1
 800fec8:	81a3      	strh	r3, [r4, #12]
 800feca:	89a3      	ldrh	r3, [r4, #12]
 800fecc:	431d      	orrs	r5, r3
 800fece:	81a5      	strh	r5, [r4, #12]
 800fed0:	e7cf      	b.n	800fe72 <__smakebuf_r+0x18>

0800fed2 <_raise_r>:
 800fed2:	291f      	cmp	r1, #31
 800fed4:	b538      	push	{r3, r4, r5, lr}
 800fed6:	4605      	mov	r5, r0
 800fed8:	460c      	mov	r4, r1
 800feda:	d904      	bls.n	800fee6 <_raise_r+0x14>
 800fedc:	2316      	movs	r3, #22
 800fede:	6003      	str	r3, [r0, #0]
 800fee0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fee4:	bd38      	pop	{r3, r4, r5, pc}
 800fee6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fee8:	b112      	cbz	r2, 800fef0 <_raise_r+0x1e>
 800feea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800feee:	b94b      	cbnz	r3, 800ff04 <_raise_r+0x32>
 800fef0:	4628      	mov	r0, r5
 800fef2:	f000 f853 	bl	800ff9c <_getpid_r>
 800fef6:	4622      	mov	r2, r4
 800fef8:	4601      	mov	r1, r0
 800fefa:	4628      	mov	r0, r5
 800fefc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff00:	f000 b83a 	b.w	800ff78 <_kill_r>
 800ff04:	2b01      	cmp	r3, #1
 800ff06:	d00a      	beq.n	800ff1e <_raise_r+0x4c>
 800ff08:	1c59      	adds	r1, r3, #1
 800ff0a:	d103      	bne.n	800ff14 <_raise_r+0x42>
 800ff0c:	2316      	movs	r3, #22
 800ff0e:	6003      	str	r3, [r0, #0]
 800ff10:	2001      	movs	r0, #1
 800ff12:	e7e7      	b.n	800fee4 <_raise_r+0x12>
 800ff14:	2100      	movs	r1, #0
 800ff16:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ff1a:	4620      	mov	r0, r4
 800ff1c:	4798      	blx	r3
 800ff1e:	2000      	movs	r0, #0
 800ff20:	e7e0      	b.n	800fee4 <_raise_r+0x12>
	...

0800ff24 <raise>:
 800ff24:	4b02      	ldr	r3, [pc, #8]	@ (800ff30 <raise+0xc>)
 800ff26:	4601      	mov	r1, r0
 800ff28:	6818      	ldr	r0, [r3, #0]
 800ff2a:	f7ff bfd2 	b.w	800fed2 <_raise_r>
 800ff2e:	bf00      	nop
 800ff30:	20000038 	.word	0x20000038

0800ff34 <_fstat_r>:
 800ff34:	b538      	push	{r3, r4, r5, lr}
 800ff36:	4d07      	ldr	r5, [pc, #28]	@ (800ff54 <_fstat_r+0x20>)
 800ff38:	2300      	movs	r3, #0
 800ff3a:	4604      	mov	r4, r0
 800ff3c:	4608      	mov	r0, r1
 800ff3e:	4611      	mov	r1, r2
 800ff40:	602b      	str	r3, [r5, #0]
 800ff42:	f7f0 fcf1 	bl	8000928 <_fstat>
 800ff46:	1c43      	adds	r3, r0, #1
 800ff48:	d102      	bne.n	800ff50 <_fstat_r+0x1c>
 800ff4a:	682b      	ldr	r3, [r5, #0]
 800ff4c:	b103      	cbz	r3, 800ff50 <_fstat_r+0x1c>
 800ff4e:	6023      	str	r3, [r4, #0]
 800ff50:	bd38      	pop	{r3, r4, r5, pc}
 800ff52:	bf00      	nop
 800ff54:	20007f0c 	.word	0x20007f0c

0800ff58 <_isatty_r>:
 800ff58:	b538      	push	{r3, r4, r5, lr}
 800ff5a:	4d06      	ldr	r5, [pc, #24]	@ (800ff74 <_isatty_r+0x1c>)
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	4604      	mov	r4, r0
 800ff60:	4608      	mov	r0, r1
 800ff62:	602b      	str	r3, [r5, #0]
 800ff64:	f7f0 fcf0 	bl	8000948 <_isatty>
 800ff68:	1c43      	adds	r3, r0, #1
 800ff6a:	d102      	bne.n	800ff72 <_isatty_r+0x1a>
 800ff6c:	682b      	ldr	r3, [r5, #0]
 800ff6e:	b103      	cbz	r3, 800ff72 <_isatty_r+0x1a>
 800ff70:	6023      	str	r3, [r4, #0]
 800ff72:	bd38      	pop	{r3, r4, r5, pc}
 800ff74:	20007f0c 	.word	0x20007f0c

0800ff78 <_kill_r>:
 800ff78:	b538      	push	{r3, r4, r5, lr}
 800ff7a:	4d07      	ldr	r5, [pc, #28]	@ (800ff98 <_kill_r+0x20>)
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	4604      	mov	r4, r0
 800ff80:	4608      	mov	r0, r1
 800ff82:	4611      	mov	r1, r2
 800ff84:	602b      	str	r3, [r5, #0]
 800ff86:	f7f0 fc6d 	bl	8000864 <_kill>
 800ff8a:	1c43      	adds	r3, r0, #1
 800ff8c:	d102      	bne.n	800ff94 <_kill_r+0x1c>
 800ff8e:	682b      	ldr	r3, [r5, #0]
 800ff90:	b103      	cbz	r3, 800ff94 <_kill_r+0x1c>
 800ff92:	6023      	str	r3, [r4, #0]
 800ff94:	bd38      	pop	{r3, r4, r5, pc}
 800ff96:	bf00      	nop
 800ff98:	20007f0c 	.word	0x20007f0c

0800ff9c <_getpid_r>:
 800ff9c:	f7f0 bc5a 	b.w	8000854 <_getpid>

0800ffa0 <_init>:
 800ffa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffa2:	bf00      	nop
 800ffa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffa6:	bc08      	pop	{r3}
 800ffa8:	469e      	mov	lr, r3
 800ffaa:	4770      	bx	lr

0800ffac <_fini>:
 800ffac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffae:	bf00      	nop
 800ffb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffb2:	bc08      	pop	{r3}
 800ffb4:	469e      	mov	lr, r3
 800ffb6:	4770      	bx	lr
