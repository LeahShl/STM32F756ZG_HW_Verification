
HW_Verification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015c74  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003760  08015e44  08015e44  00016e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080195a4  080195a4  0001b20c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080195a4  080195a4  0001a5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080195ac  080195ac  0001b20c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080195ac  080195ac  0001a5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080195b0  080195b0  0001a5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  080195b4  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000cc  08019680  0001b0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000016c  08019720  0001b16c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000851c  2000020c  080197c0  0001b20c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20008728  080197c0  0001b728  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001b20c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00028360  00000000  00000000  0001b23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007080  00000000  00000000  0004359c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001d38  00000000  00000000  0004a620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001701  00000000  00000000  0004c358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00036509  00000000  00000000  0004da59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00032ef3  00000000  00000000  00083f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00105ea6  00000000  00000000  000b6e55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001bccfb  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007cfc  00000000  00000000  001bcd40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  001c4a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000020c 	.word	0x2000020c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015e2c 	.word	0x08015e2c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000210 	.word	0x20000210
 800020c:	08015e2c 	.word	0x08015e2c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000618 <MX_CRC_Init+0x3c>)
 80005e2:	4a0e      	ldr	r2, [pc, #56]	@ (800061c <MX_CRC_Init+0x40>)
 80005e4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80005e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <MX_CRC_Init+0x3c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <MX_CRC_Init+0x3c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80005f2:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <MX_CRC_Init+0x3c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80005f8:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <MX_CRC_Init+0x3c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80005fe:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <MX_CRC_Init+0x3c>)
 8000600:	2201      	movs	r2, #1
 8000602:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000604:	4804      	ldr	r0, [pc, #16]	@ (8000618 <MX_CRC_Init+0x3c>)
 8000606:	f001 fc61 	bl	8001ecc <HAL_CRC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000610:	f000 fbae 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000228 	.word	0x20000228
 800061c:	40023000 	.word	0x40023000

08000620 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a0a      	ldr	r2, [pc, #40]	@ (8000658 <HAL_CRC_MspInit+0x38>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d10b      	bne.n	800064a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000632:	4b0a      	ldr	r3, [pc, #40]	@ (800065c <HAL_CRC_MspInit+0x3c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	4a09      	ldr	r2, [pc, #36]	@ (800065c <HAL_CRC_MspInit+0x3c>)
 8000638:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800063c:	6313      	str	r3, [r2, #48]	@ 0x30
 800063e:	4b07      	ldr	r3, [pc, #28]	@ (800065c <HAL_CRC_MspInit+0x3c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40023000 	.word	0x40023000
 800065c:	40023800 	.word	0x40023800

08000660 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000666:	4b36      	ldr	r3, [pc, #216]	@ (8000740 <MX_DMA_Init+0xe0>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	4a35      	ldr	r2, [pc, #212]	@ (8000740 <MX_DMA_Init+0xe0>)
 800066c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000670:	6313      	str	r3, [r2, #48]	@ 0x30
 8000672:	4b33      	ldr	r3, [pc, #204]	@ (8000740 <MX_DMA_Init+0xe0>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800067e:	4b30      	ldr	r3, [pc, #192]	@ (8000740 <MX_DMA_Init+0xe0>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	4a2f      	ldr	r2, [pc, #188]	@ (8000740 <MX_DMA_Init+0xe0>)
 8000684:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000688:	6313      	str	r3, [r2, #48]	@ 0x30
 800068a:	4b2d      	ldr	r3, [pc, #180]	@ (8000740 <MX_DMA_Init+0xe0>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	2100      	movs	r1, #0
 800069a:	200b      	movs	r0, #11
 800069c:	f001 fbdf 	bl	8001e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006a0:	200b      	movs	r0, #11
 80006a2:	f001 fbf8 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2100      	movs	r1, #0
 80006aa:	200d      	movs	r0, #13
 80006ac:	f001 fbd7 	bl	8001e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80006b0:	200d      	movs	r0, #13
 80006b2:	f001 fbf0 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	200e      	movs	r0, #14
 80006bc:	f001 fbcf 	bl	8001e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80006c0:	200e      	movs	r0, #14
 80006c2:	f001 fbe8 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	2010      	movs	r0, #16
 80006cc:	f001 fbc7 	bl	8001e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80006d0:	2010      	movs	r0, #16
 80006d2:	f001 fbe0 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	2011      	movs	r0, #17
 80006dc:	f001 fbbf 	bl	8001e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80006e0:	2011      	movs	r0, #17
 80006e2:	f001 fbd8 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	202f      	movs	r0, #47	@ 0x2f
 80006ec:	f001 fbb7 	bl	8001e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80006f0:	202f      	movs	r0, #47	@ 0x2f
 80006f2:	f001 fbd0 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	2038      	movs	r0, #56	@ 0x38
 80006fc:	f001 fbaf 	bl	8001e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000700:	2038      	movs	r0, #56	@ 0x38
 8000702:	f001 fbc8 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2039      	movs	r0, #57	@ 0x39
 800070c:	f001 fba7 	bl	8001e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000710:	2039      	movs	r0, #57	@ 0x39
 8000712:	f001 fbc0 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	203a      	movs	r0, #58	@ 0x3a
 800071c:	f001 fb9f 	bl	8001e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000720:	203a      	movs	r0, #58	@ 0x3a
 8000722:	f001 fbb8 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	2100      	movs	r1, #0
 800072a:	203b      	movs	r0, #59	@ 0x3b
 800072c:	f001 fb97 	bl	8001e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000730:	203b      	movs	r0, #59	@ 0x3b
 8000732:	f001 fbb0 	bl	8001e96 <HAL_NVIC_EnableIRQ>

}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800

08000744 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000744:	b480      	push	{r7}
 8000746:	b087      	sub	sp, #28
 8000748:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800074a:	4b27      	ldr	r3, [pc, #156]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a26      	ldr	r2, [pc, #152]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 8000750:	f043 0310 	orr.w	r3, r3, #16
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b24      	ldr	r3, [pc, #144]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0310 	and.w	r3, r3, #16
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	4b21      	ldr	r3, [pc, #132]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a20      	ldr	r2, [pc, #128]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b1e      	ldr	r3, [pc, #120]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	4b1b      	ldr	r3, [pc, #108]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a1a      	ldr	r2, [pc, #104]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a14      	ldr	r2, [pc, #80]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007aa:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a0e      	ldr	r2, [pc, #56]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 80007b0:	f043 0308 	orr.w	r3, r3, #8
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0308 	and.w	r3, r3, #8
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007c2:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a08      	ldr	r2, [pc, #32]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 80007c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_GPIO_Init+0xa4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

}
 80007da:	bf00      	nop
 80007dc:	371c      	adds	r7, #28
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800

080007ec <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000860 <MX_I2C1_Init+0x74>)
 80007f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000864 <MX_I2C1_Init+0x78>)
 80007f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80007f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000860 <MX_I2C1_Init+0x74>)
 80007f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000868 <MX_I2C1_Init+0x7c>)
 80007fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007fc:	4b18      	ldr	r3, [pc, #96]	@ (8000860 <MX_I2C1_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000802:	4b17      	ldr	r3, [pc, #92]	@ (8000860 <MX_I2C1_Init+0x74>)
 8000804:	2201      	movs	r2, #1
 8000806:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000808:	4b15      	ldr	r3, [pc, #84]	@ (8000860 <MX_I2C1_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800080e:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <MX_I2C1_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000814:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <MX_I2C1_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081a:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <MX_I2C1_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000820:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <MX_I2C1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000826:	480e      	ldr	r0, [pc, #56]	@ (8000860 <MX_I2C1_Init+0x74>)
 8000828:	f003 fd78 	bl	800431c <HAL_I2C_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000832:	f000 fa9d 	bl	8000d70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000836:	2100      	movs	r1, #0
 8000838:	4809      	ldr	r0, [pc, #36]	@ (8000860 <MX_I2C1_Init+0x74>)
 800083a:	f005 ff1b 	bl	8006674 <HAL_I2CEx_ConfigAnalogFilter>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000844:	f000 fa94 	bl	8000d70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000848:	2100      	movs	r1, #0
 800084a:	4805      	ldr	r0, [pc, #20]	@ (8000860 <MX_I2C1_Init+0x74>)
 800084c:	f005 ff5d 	bl	800670a <HAL_I2CEx_ConfigDigitalFilter>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000856:	f000 fa8b 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	2000024c 	.word	0x2000024c
 8000864:	40005400 	.word	0x40005400
 8000868:	20404768 	.word	0x20404768

0800086c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000870:	4b1b      	ldr	r3, [pc, #108]	@ (80008e0 <MX_I2C2_Init+0x74>)
 8000872:	4a1c      	ldr	r2, [pc, #112]	@ (80008e4 <MX_I2C2_Init+0x78>)
 8000874:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000876:	4b1a      	ldr	r3, [pc, #104]	@ (80008e0 <MX_I2C2_Init+0x74>)
 8000878:	4a1b      	ldr	r2, [pc, #108]	@ (80008e8 <MX_I2C2_Init+0x7c>)
 800087a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 20;
 800087c:	4b18      	ldr	r3, [pc, #96]	@ (80008e0 <MX_I2C2_Init+0x74>)
 800087e:	2214      	movs	r2, #20
 8000880:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000882:	4b17      	ldr	r3, [pc, #92]	@ (80008e0 <MX_I2C2_Init+0x74>)
 8000884:	2201      	movs	r2, #1
 8000886:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000888:	4b15      	ldr	r3, [pc, #84]	@ (80008e0 <MX_I2C2_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800088e:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <MX_I2C2_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000894:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <MX_I2C2_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089a:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <MX_I2C2_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <MX_I2C2_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008a6:	480e      	ldr	r0, [pc, #56]	@ (80008e0 <MX_I2C2_Init+0x74>)
 80008a8:	f003 fd38 	bl	800431c <HAL_I2C_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008b2:	f000 fa5d 	bl	8000d70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008b6:	2100      	movs	r1, #0
 80008b8:	4809      	ldr	r0, [pc, #36]	@ (80008e0 <MX_I2C2_Init+0x74>)
 80008ba:	f005 fedb 	bl	8006674 <HAL_I2CEx_ConfigAnalogFilter>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008c4:	f000 fa54 	bl	8000d70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008c8:	2100      	movs	r1, #0
 80008ca:	4805      	ldr	r0, [pc, #20]	@ (80008e0 <MX_I2C2_Init+0x74>)
 80008cc:	f005 ff1d 	bl	800670a <HAL_I2CEx_ConfigDigitalFilter>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008d6:	f000 fa4b 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200002a0 	.word	0x200002a0
 80008e4:	40005800 	.word	0x40005800
 80008e8:	20404768 	.word	0x20404768

080008ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b0ac      	sub	sp, #176	@ 0xb0
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000904:	f107 0318 	add.w	r3, r7, #24
 8000908:	2284      	movs	r2, #132	@ 0x84
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f014 fc4b 	bl	80151a8 <memset>
  if(i2cHandle->Instance==I2C1)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a57      	ldr	r2, [pc, #348]	@ (8000a74 <HAL_I2C_MspInit+0x188>)
 8000918:	4293      	cmp	r3, r2
 800091a:	f040 80b9 	bne.w	8000a90 <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800091e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000922:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000924:	2300      	movs	r3, #0
 8000926:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000928:	f107 0318 	add.w	r3, r7, #24
 800092c:	4618      	mov	r0, r3
 800092e:	f006 fc13 	bl	8007158 <HAL_RCCEx_PeriphCLKConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000938:	f000 fa1a 	bl	8000d70 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800093c:	4b4e      	ldr	r3, [pc, #312]	@ (8000a78 <HAL_I2C_MspInit+0x18c>)
 800093e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000940:	4a4d      	ldr	r2, [pc, #308]	@ (8000a78 <HAL_I2C_MspInit+0x18c>)
 8000942:	f043 0302 	orr.w	r3, r3, #2
 8000946:	6313      	str	r3, [r2, #48]	@ 0x30
 8000948:	4b4b      	ldr	r3, [pc, #300]	@ (8000a78 <HAL_I2C_MspInit+0x18c>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094c:	f003 0302 	and.w	r3, r3, #2
 8000950:	617b      	str	r3, [r7, #20]
 8000952:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000954:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000958:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800095c:	2312      	movs	r3, #18
 800095e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000962:	2301      	movs	r3, #1
 8000964:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000968:	2303      	movs	r3, #3
 800096a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800096e:	2304      	movs	r3, #4
 8000970:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000974:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000978:	4619      	mov	r1, r3
 800097a:	4840      	ldr	r0, [pc, #256]	@ (8000a7c <HAL_I2C_MspInit+0x190>)
 800097c:	f003 fb22 	bl	8003fc4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000980:	4b3d      	ldr	r3, [pc, #244]	@ (8000a78 <HAL_I2C_MspInit+0x18c>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000984:	4a3c      	ldr	r2, [pc, #240]	@ (8000a78 <HAL_I2C_MspInit+0x18c>)
 8000986:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800098a:	6413      	str	r3, [r2, #64]	@ 0x40
 800098c:	4b3a      	ldr	r3, [pc, #232]	@ (8000a78 <HAL_I2C_MspInit+0x18c>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000990:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8000998:	4b39      	ldr	r3, [pc, #228]	@ (8000a80 <HAL_I2C_MspInit+0x194>)
 800099a:	4a3a      	ldr	r2, [pc, #232]	@ (8000a84 <HAL_I2C_MspInit+0x198>)
 800099c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800099e:	4b38      	ldr	r3, [pc, #224]	@ (8000a80 <HAL_I2C_MspInit+0x194>)
 80009a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80009a4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009a6:	4b36      	ldr	r3, [pc, #216]	@ (8000a80 <HAL_I2C_MspInit+0x194>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ac:	4b34      	ldr	r3, [pc, #208]	@ (8000a80 <HAL_I2C_MspInit+0x194>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009b2:	4b33      	ldr	r3, [pc, #204]	@ (8000a80 <HAL_I2C_MspInit+0x194>)
 80009b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009b8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009ba:	4b31      	ldr	r3, [pc, #196]	@ (8000a80 <HAL_I2C_MspInit+0x194>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000a80 <HAL_I2C_MspInit+0x194>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80009c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000a80 <HAL_I2C_MspInit+0x194>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000a80 <HAL_I2C_MspInit+0x194>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000a80 <HAL_I2C_MspInit+0x194>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80009d8:	4829      	ldr	r0, [pc, #164]	@ (8000a80 <HAL_I2C_MspInit+0x194>)
 80009da:	f001 fc81 	bl	80022e0 <HAL_DMA_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 80009e4:	f000 f9c4 	bl	8000d70 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a25      	ldr	r2, [pc, #148]	@ (8000a80 <HAL_I2C_MspInit+0x194>)
 80009ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009ee:	4a24      	ldr	r2, [pc, #144]	@ (8000a80 <HAL_I2C_MspInit+0x194>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80009f4:	4b24      	ldr	r3, [pc, #144]	@ (8000a88 <HAL_I2C_MspInit+0x19c>)
 80009f6:	4a25      	ldr	r2, [pc, #148]	@ (8000a8c <HAL_I2C_MspInit+0x1a0>)
 80009f8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80009fa:	4b23      	ldr	r3, [pc, #140]	@ (8000a88 <HAL_I2C_MspInit+0x19c>)
 80009fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000a00:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a02:	4b21      	ldr	r3, [pc, #132]	@ (8000a88 <HAL_I2C_MspInit+0x19c>)
 8000a04:	2240      	movs	r2, #64	@ 0x40
 8000a06:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a08:	4b1f      	ldr	r3, [pc, #124]	@ (8000a88 <HAL_I2C_MspInit+0x19c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a88 <HAL_I2C_MspInit+0x19c>)
 8000a10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a14:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	@ (8000a88 <HAL_I2C_MspInit+0x19c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <HAL_I2C_MspInit+0x19c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000a22:	4b19      	ldr	r3, [pc, #100]	@ (8000a88 <HAL_I2C_MspInit+0x19c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a28:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <HAL_I2C_MspInit+0x19c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a2e:	4b16      	ldr	r3, [pc, #88]	@ (8000a88 <HAL_I2C_MspInit+0x19c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000a34:	4814      	ldr	r0, [pc, #80]	@ (8000a88 <HAL_I2C_MspInit+0x19c>)
 8000a36:	f001 fc53 	bl	80022e0 <HAL_DMA_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 8000a40:	f000 f996 	bl	8000d70 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a10      	ldr	r2, [pc, #64]	@ (8000a88 <HAL_I2C_MspInit+0x19c>)
 8000a48:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a88 <HAL_I2C_MspInit+0x19c>)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2100      	movs	r1, #0
 8000a54:	201f      	movs	r0, #31
 8000a56:	f001 fa02 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a5a:	201f      	movs	r0, #31
 8000a5c:	f001 fa1b 	bl	8001e96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2100      	movs	r1, #0
 8000a64:	2020      	movs	r0, #32
 8000a66:	f001 f9fa 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a6a:	2020      	movs	r0, #32
 8000a6c:	f001 fa13 	bl	8001e96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000a70:	e0be      	b.n	8000bf0 <HAL_I2C_MspInit+0x304>
 8000a72:	bf00      	nop
 8000a74:	40005400 	.word	0x40005400
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020400 	.word	0x40020400
 8000a80:	200002f4 	.word	0x200002f4
 8000a84:	40026088 	.word	0x40026088
 8000a88:	20000354 	.word	0x20000354
 8000a8c:	400260a0 	.word	0x400260a0
  else if(i2cHandle->Instance==I2C2)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a58      	ldr	r2, [pc, #352]	@ (8000bf8 <HAL_I2C_MspInit+0x30c>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	f040 80aa 	bne.w	8000bf0 <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000aa0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aa8:	f107 0318 	add.w	r3, r7, #24
 8000aac:	4618      	mov	r0, r3
 8000aae:	f006 fb53 	bl	8007158 <HAL_RCCEx_PeriphCLKConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 8000ab8:	f000 f95a 	bl	8000d70 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abc:	4b4f      	ldr	r3, [pc, #316]	@ (8000bfc <HAL_I2C_MspInit+0x310>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac0:	4a4e      	ldr	r2, [pc, #312]	@ (8000bfc <HAL_I2C_MspInit+0x310>)
 8000ac2:	f043 0302 	orr.w	r3, r3, #2
 8000ac6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac8:	4b4c      	ldr	r3, [pc, #304]	@ (8000bfc <HAL_I2C_MspInit+0x310>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000acc:	f003 0302 	and.w	r3, r3, #2
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ad4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ad8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000adc:	2312      	movs	r3, #18
 8000ade:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000aee:	2304      	movs	r3, #4
 8000af0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000af8:	4619      	mov	r1, r3
 8000afa:	4841      	ldr	r0, [pc, #260]	@ (8000c00 <HAL_I2C_MspInit+0x314>)
 8000afc:	f003 fa62 	bl	8003fc4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b00:	4b3e      	ldr	r3, [pc, #248]	@ (8000bfc <HAL_I2C_MspInit+0x310>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b04:	4a3d      	ldr	r2, [pc, #244]	@ (8000bfc <HAL_I2C_MspInit+0x310>)
 8000b06:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8000bfc <HAL_I2C_MspInit+0x310>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 8000b18:	4b3a      	ldr	r3, [pc, #232]	@ (8000c04 <HAL_I2C_MspInit+0x318>)
 8000b1a:	4a3b      	ldr	r2, [pc, #236]	@ (8000c08 <HAL_I2C_MspInit+0x31c>)
 8000b1c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8000b1e:	4b39      	ldr	r3, [pc, #228]	@ (8000c04 <HAL_I2C_MspInit+0x318>)
 8000b20:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000b24:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b26:	4b37      	ldr	r3, [pc, #220]	@ (8000c04 <HAL_I2C_MspInit+0x318>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b2c:	4b35      	ldr	r3, [pc, #212]	@ (8000c04 <HAL_I2C_MspInit+0x318>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b32:	4b34      	ldr	r3, [pc, #208]	@ (8000c04 <HAL_I2C_MspInit+0x318>)
 8000b34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b38:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b3a:	4b32      	ldr	r3, [pc, #200]	@ (8000c04 <HAL_I2C_MspInit+0x318>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b40:	4b30      	ldr	r3, [pc, #192]	@ (8000c04 <HAL_I2C_MspInit+0x318>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000b46:	4b2f      	ldr	r3, [pc, #188]	@ (8000c04 <HAL_I2C_MspInit+0x318>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b4c:	4b2d      	ldr	r3, [pc, #180]	@ (8000c04 <HAL_I2C_MspInit+0x318>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b52:	4b2c      	ldr	r3, [pc, #176]	@ (8000c04 <HAL_I2C_MspInit+0x318>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000b58:	482a      	ldr	r0, [pc, #168]	@ (8000c04 <HAL_I2C_MspInit+0x318>)
 8000b5a:	f001 fbc1 	bl	80022e0 <HAL_DMA_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 8000b64:	f000 f904 	bl	8000d70 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a26      	ldr	r2, [pc, #152]	@ (8000c04 <HAL_I2C_MspInit+0x318>)
 8000b6c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b6e:	4a25      	ldr	r2, [pc, #148]	@ (8000c04 <HAL_I2C_MspInit+0x318>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8000b74:	4b25      	ldr	r3, [pc, #148]	@ (8000c0c <HAL_I2C_MspInit+0x320>)
 8000b76:	4a26      	ldr	r2, [pc, #152]	@ (8000c10 <HAL_I2C_MspInit+0x324>)
 8000b78:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8000b7a:	4b24      	ldr	r3, [pc, #144]	@ (8000c0c <HAL_I2C_MspInit+0x320>)
 8000b7c:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000b80:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b82:	4b22      	ldr	r3, [pc, #136]	@ (8000c0c <HAL_I2C_MspInit+0x320>)
 8000b84:	2240      	movs	r2, #64	@ 0x40
 8000b86:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b88:	4b20      	ldr	r3, [pc, #128]	@ (8000c0c <HAL_I2C_MspInit+0x320>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <HAL_I2C_MspInit+0x320>)
 8000b90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b94:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b96:	4b1d      	ldr	r3, [pc, #116]	@ (8000c0c <HAL_I2C_MspInit+0x320>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c0c <HAL_I2C_MspInit+0x320>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8000ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c0c <HAL_I2C_MspInit+0x320>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ba8:	4b18      	ldr	r3, [pc, #96]	@ (8000c0c <HAL_I2C_MspInit+0x320>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bae:	4b17      	ldr	r3, [pc, #92]	@ (8000c0c <HAL_I2C_MspInit+0x320>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000bb4:	4815      	ldr	r0, [pc, #84]	@ (8000c0c <HAL_I2C_MspInit+0x320>)
 8000bb6:	f001 fb93 	bl	80022e0 <HAL_DMA_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 8000bc0:	f000 f8d6 	bl	8000d70 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a11      	ldr	r2, [pc, #68]	@ (8000c0c <HAL_I2C_MspInit+0x320>)
 8000bc8:	639a      	str	r2, [r3, #56]	@ 0x38
 8000bca:	4a10      	ldr	r2, [pc, #64]	@ (8000c0c <HAL_I2C_MspInit+0x320>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	2021      	movs	r0, #33	@ 0x21
 8000bd6:	f001 f942 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000bda:	2021      	movs	r0, #33	@ 0x21
 8000bdc:	f001 f95b 	bl	8001e96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2100      	movs	r1, #0
 8000be4:	2022      	movs	r0, #34	@ 0x22
 8000be6:	f001 f93a 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000bea:	2022      	movs	r0, #34	@ 0x22
 8000bec:	f001 f953 	bl	8001e96 <HAL_NVIC_EnableIRQ>
}
 8000bf0:	bf00      	nop
 8000bf2:	37b0      	adds	r7, #176	@ 0xb0
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40005800 	.word	0x40005800
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020400 	.word	0x40020400
 8000c04:	200003b4 	.word	0x200003b4
 8000c08:	40026058 	.word	0x40026058
 8000c0c:	20000414 	.word	0x20000414
 8000c10:	400260b8 	.word	0x400260b8

08000c14 <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
	char *cr = "\r";
 8000c20:	4b0b      	ldr	r3, [pc, #44]	@ (8000c50 <_write+0x3c>)
 8000c22:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c2c:	68b9      	ldr	r1, [r7, #8]
 8000c2e:	4809      	ldr	r0, [pc, #36]	@ (8000c54 <_write+0x40>)
 8000c30:	f007 f89b 	bl	8007d6a <HAL_UART_Transmit>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) cr, 1, 0xFFFF);
 8000c34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c38:	2201      	movs	r2, #1
 8000c3a:	6979      	ldr	r1, [r7, #20]
 8000c3c:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <_write+0x40>)
 8000c3e:	f007 f894 	bl	8007d6a <HAL_UART_Transmit>
	return len + 1;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3301      	adds	r3, #1
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	08015e44 	.word	0x08015e44
 8000c54:	200007d0 	.word	0x200007d0

08000c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c5c:	f000 ffa3 	bl	8001ba6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c60:	f000 f81a 	bl	8000c98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c64:	f7ff fd6e 	bl	8000744 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c68:	f7ff fcfa 	bl	8000660 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000c6c:	f000 fcb2 	bl	80015d4 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8000c70:	f008 fbce 	bl	8009410 <MX_LWIP_Init>
  MX_CRC_Init();
 8000c74:	f7ff fcb2 	bl	80005dc <MX_CRC_Init>
  MX_UART4_Init();
 8000c78:	f000 fc4c 	bl	8001514 <MX_UART4_Init>
  MX_UART5_Init();
 8000c7c:	f000 fc7a 	bl	8001574 <MX_UART5_Init>
  MX_I2C1_Init();
 8000c80:	f7ff fdb4 	bl	80007ec <MX_I2C1_Init>
  MX_I2C2_Init();
 8000c84:	f7ff fdf2 	bl	800086c <MX_I2C2_Init>
  MX_SPI1_Init();
 8000c88:	f000 f878 	bl	8000d7c <MX_SPI1_Init>
  MX_SPI4_Init();
 8000c8c:	f000 f8b4 	bl	8000df8 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  HW_Verification_Proccess();
 8000c90:	f013 fccc 	bl	801462c <HW_Verification_Proccess>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <main+0x3c>

08000c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b094      	sub	sp, #80	@ 0x50
 8000c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9e:	f107 0320 	add.w	r3, r7, #32
 8000ca2:	2230      	movs	r2, #48	@ 0x30
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f014 fa7e 	bl	80151a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8000d68 <SystemClock_Config+0xd0>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc0:	4a29      	ldr	r2, [pc, #164]	@ (8000d68 <SystemClock_Config+0xd0>)
 8000cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc8:	4b27      	ldr	r3, [pc, #156]	@ (8000d68 <SystemClock_Config+0xd0>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cd4:	4b25      	ldr	r3, [pc, #148]	@ (8000d6c <SystemClock_Config+0xd4>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a24      	ldr	r2, [pc, #144]	@ (8000d6c <SystemClock_Config+0xd4>)
 8000cda:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cde:	6013      	str	r3, [r2, #0]
 8000ce0:	4b22      	ldr	r3, [pc, #136]	@ (8000d6c <SystemClock_Config+0xd4>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cec:	2302      	movs	r3, #2
 8000cee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf4:	2310      	movs	r3, #16
 8000cf6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d00:	2308      	movs	r3, #8
 8000d02:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000d04:	23d8      	movs	r3, #216	@ 0xd8
 8000d06:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d10:	f107 0320 	add.w	r3, r7, #32
 8000d14:	4618      	mov	r0, r3
 8000d16:	f005 fd95 	bl	8006844 <HAL_RCC_OscConfig>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000d20:	f000 f826 	bl	8000d70 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d24:	f005 fd3e 	bl	80067a4 <HAL_PWREx_EnableOverDrive>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d2e:	f000 f81f 	bl	8000d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d32:	230f      	movs	r3, #15
 8000d34:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d36:	2302      	movs	r3, #2
 8000d38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d3e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	2107      	movs	r1, #7
 8000d50:	4618      	mov	r0, r3
 8000d52:	f006 f81b 	bl	8006d8c <HAL_RCC_ClockConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000d5c:	f000 f808 	bl	8000d70 <Error_Handler>
  }
}
 8000d60:	bf00      	nop
 8000d62:	3750      	adds	r7, #80	@ 0x50
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40007000 	.word	0x40007000

08000d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d74:	b672      	cpsid	i
}
 8000d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <Error_Handler+0x8>

08000d7c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d80:	4b1b      	ldr	r3, [pc, #108]	@ (8000df0 <MX_SPI1_Init+0x74>)
 8000d82:	4a1c      	ldr	r2, [pc, #112]	@ (8000df4 <MX_SPI1_Init+0x78>)
 8000d84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d86:	4b1a      	ldr	r3, [pc, #104]	@ (8000df0 <MX_SPI1_Init+0x74>)
 8000d88:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d8e:	4b18      	ldr	r3, [pc, #96]	@ (8000df0 <MX_SPI1_Init+0x74>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d94:	4b16      	ldr	r3, [pc, #88]	@ (8000df0 <MX_SPI1_Init+0x74>)
 8000d96:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000d9a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d9c:	4b14      	ldr	r3, [pc, #80]	@ (8000df0 <MX_SPI1_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000da2:	4b13      	ldr	r3, [pc, #76]	@ (8000df0 <MX_SPI1_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000da8:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <MX_SPI1_Init+0x74>)
 8000daa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	@ (8000df0 <MX_SPI1_Init+0x74>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <MX_SPI1_Init+0x74>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <MX_SPI1_Init+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <MX_SPI1_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000dc8:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <MX_SPI1_Init+0x74>)
 8000dca:	2207      	movs	r2, #7
 8000dcc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dce:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <MX_SPI1_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <MX_SPI1_Init+0x74>)
 8000dd6:	2208      	movs	r2, #8
 8000dd8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dda:	4805      	ldr	r0, [pc, #20]	@ (8000df0 <MX_SPI1_Init+0x74>)
 8000ddc:	f006 fdac 	bl	8007938 <HAL_SPI_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000de6:	f7ff ffc3 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000474 	.word	0x20000474
 8000df4:	40013000 	.word	0x40013000

08000df8 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000dfc:	4b19      	ldr	r3, [pc, #100]	@ (8000e64 <MX_SPI4_Init+0x6c>)
 8000dfe:	4a1a      	ldr	r2, [pc, #104]	@ (8000e68 <MX_SPI4_Init+0x70>)
 8000e00:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 8000e02:	4b18      	ldr	r3, [pc, #96]	@ (8000e64 <MX_SPI4_Init+0x6c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000e08:	4b16      	ldr	r3, [pc, #88]	@ (8000e64 <MX_SPI4_Init+0x6c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e0e:	4b15      	ldr	r3, [pc, #84]	@ (8000e64 <MX_SPI4_Init+0x6c>)
 8000e10:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000e14:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e16:	4b13      	ldr	r3, [pc, #76]	@ (8000e64 <MX_SPI4_Init+0x6c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <MX_SPI4_Init+0x6c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000e22:	4b10      	ldr	r3, [pc, #64]	@ (8000e64 <MX_SPI4_Init+0x6c>)
 8000e24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e28:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e64 <MX_SPI4_Init+0x6c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e30:	4b0c      	ldr	r3, [pc, #48]	@ (8000e64 <MX_SPI4_Init+0x6c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e36:	4b0b      	ldr	r3, [pc, #44]	@ (8000e64 <MX_SPI4_Init+0x6c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000e3c:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <MX_SPI4_Init+0x6c>)
 8000e3e:	2207      	movs	r2, #7
 8000e40:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e42:	4b08      	ldr	r3, [pc, #32]	@ (8000e64 <MX_SPI4_Init+0x6c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e48:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <MX_SPI4_Init+0x6c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000e4e:	4805      	ldr	r0, [pc, #20]	@ (8000e64 <MX_SPI4_Init+0x6c>)
 8000e50:	f006 fd72 	bl	8007938 <HAL_SPI_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_SPI4_Init+0x66>
  {
    Error_Handler();
 8000e5a:	f7ff ff89 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200004d8 	.word	0x200004d8
 8000e68:	40013400 	.word	0x40013400

08000e6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08c      	sub	sp, #48	@ 0x30
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4aa1      	ldr	r2, [pc, #644]	@ (8001110 <HAL_SPI_MspInit+0x2a4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	f040 80a9 	bne.w	8000fe2 <HAL_SPI_MspInit+0x176>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e90:	4ba0      	ldr	r3, [pc, #640]	@ (8001114 <HAL_SPI_MspInit+0x2a8>)
 8000e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e94:	4a9f      	ldr	r2, [pc, #636]	@ (8001114 <HAL_SPI_MspInit+0x2a8>)
 8000e96:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e9a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e9c:	4b9d      	ldr	r3, [pc, #628]	@ (8001114 <HAL_SPI_MspInit+0x2a8>)
 8000e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ea4:	61bb      	str	r3, [r7, #24]
 8000ea6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea8:	4b9a      	ldr	r3, [pc, #616]	@ (8001114 <HAL_SPI_MspInit+0x2a8>)
 8000eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eac:	4a99      	ldr	r2, [pc, #612]	@ (8001114 <HAL_SPI_MspInit+0x2a8>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb4:	4b97      	ldr	r3, [pc, #604]	@ (8001114 <HAL_SPI_MspInit+0x2a8>)
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	617b      	str	r3, [r7, #20]
 8000ebe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec0:	4b94      	ldr	r3, [pc, #592]	@ (8001114 <HAL_SPI_MspInit+0x2a8>)
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec4:	4a93      	ldr	r2, [pc, #588]	@ (8001114 <HAL_SPI_MspInit+0x2a8>)
 8000ec6:	f043 0302 	orr.w	r3, r3, #2
 8000eca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ecc:	4b91      	ldr	r3, [pc, #580]	@ (8001114 <HAL_SPI_MspInit+0x2a8>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000ed8:	2360      	movs	r3, #96	@ 0x60
 8000eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ee8:	2305      	movs	r3, #5
 8000eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4889      	ldr	r0, [pc, #548]	@ (8001118 <HAL_SPI_MspInit+0x2ac>)
 8000ef4:	f003 f866 	bl	8003fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ef8:	2320      	movs	r3, #32
 8000efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f08:	2305      	movs	r3, #5
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	4882      	ldr	r0, [pc, #520]	@ (800111c <HAL_SPI_MspInit+0x2b0>)
 8000f14:	f003 f856 	bl	8003fc4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8000f18:	4b81      	ldr	r3, [pc, #516]	@ (8001120 <HAL_SPI_MspInit+0x2b4>)
 8000f1a:	4a82      	ldr	r2, [pc, #520]	@ (8001124 <HAL_SPI_MspInit+0x2b8>)
 8000f1c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000f1e:	4b80      	ldr	r3, [pc, #512]	@ (8001120 <HAL_SPI_MspInit+0x2b4>)
 8000f20:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000f24:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f26:	4b7e      	ldr	r3, [pc, #504]	@ (8001120 <HAL_SPI_MspInit+0x2b4>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f2c:	4b7c      	ldr	r3, [pc, #496]	@ (8001120 <HAL_SPI_MspInit+0x2b4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f32:	4b7b      	ldr	r3, [pc, #492]	@ (8001120 <HAL_SPI_MspInit+0x2b4>)
 8000f34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f38:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f3a:	4b79      	ldr	r3, [pc, #484]	@ (8001120 <HAL_SPI_MspInit+0x2b4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f40:	4b77      	ldr	r3, [pc, #476]	@ (8001120 <HAL_SPI_MspInit+0x2b4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000f46:	4b76      	ldr	r3, [pc, #472]	@ (8001120 <HAL_SPI_MspInit+0x2b4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f4c:	4b74      	ldr	r3, [pc, #464]	@ (8001120 <HAL_SPI_MspInit+0x2b4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f52:	4b73      	ldr	r3, [pc, #460]	@ (8001120 <HAL_SPI_MspInit+0x2b4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000f58:	4871      	ldr	r0, [pc, #452]	@ (8001120 <HAL_SPI_MspInit+0x2b4>)
 8000f5a:	f001 f9c1 	bl	80022e0 <HAL_DMA_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 8000f64:	f7ff ff04 	bl	8000d70 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a6d      	ldr	r2, [pc, #436]	@ (8001120 <HAL_SPI_MspInit+0x2b4>)
 8000f6c:	659a      	str	r2, [r3, #88]	@ 0x58
 8000f6e:	4a6c      	ldr	r2, [pc, #432]	@ (8001120 <HAL_SPI_MspInit+0x2b4>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000f74:	4b6c      	ldr	r3, [pc, #432]	@ (8001128 <HAL_SPI_MspInit+0x2bc>)
 8000f76:	4a6d      	ldr	r2, [pc, #436]	@ (800112c <HAL_SPI_MspInit+0x2c0>)
 8000f78:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000f7a:	4b6b      	ldr	r3, [pc, #428]	@ (8001128 <HAL_SPI_MspInit+0x2bc>)
 8000f7c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000f80:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f82:	4b69      	ldr	r3, [pc, #420]	@ (8001128 <HAL_SPI_MspInit+0x2bc>)
 8000f84:	2240      	movs	r2, #64	@ 0x40
 8000f86:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f88:	4b67      	ldr	r3, [pc, #412]	@ (8001128 <HAL_SPI_MspInit+0x2bc>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f8e:	4b66      	ldr	r3, [pc, #408]	@ (8001128 <HAL_SPI_MspInit+0x2bc>)
 8000f90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f94:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f96:	4b64      	ldr	r3, [pc, #400]	@ (8001128 <HAL_SPI_MspInit+0x2bc>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f9c:	4b62      	ldr	r3, [pc, #392]	@ (8001128 <HAL_SPI_MspInit+0x2bc>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000fa2:	4b61      	ldr	r3, [pc, #388]	@ (8001128 <HAL_SPI_MspInit+0x2bc>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fa8:	4b5f      	ldr	r3, [pc, #380]	@ (8001128 <HAL_SPI_MspInit+0x2bc>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fae:	4b5e      	ldr	r3, [pc, #376]	@ (8001128 <HAL_SPI_MspInit+0x2bc>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000fb4:	485c      	ldr	r0, [pc, #368]	@ (8001128 <HAL_SPI_MspInit+0x2bc>)
 8000fb6:	f001 f993 	bl	80022e0 <HAL_DMA_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8000fc0:	f7ff fed6 	bl	8000d70 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a58      	ldr	r2, [pc, #352]	@ (8001128 <HAL_SPI_MspInit+0x2bc>)
 8000fc8:	655a      	str	r2, [r3, #84]	@ 0x54
 8000fca:	4a57      	ldr	r2, [pc, #348]	@ (8001128 <HAL_SPI_MspInit+0x2bc>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	2023      	movs	r0, #35	@ 0x23
 8000fd6:	f000 ff42 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000fda:	2023      	movs	r0, #35	@ 0x23
 8000fdc:	f000 ff5b 	bl	8001e96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8000fe0:	e091      	b.n	8001106 <HAL_SPI_MspInit+0x29a>
  else if(spiHandle->Instance==SPI4)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a52      	ldr	r2, [pc, #328]	@ (8001130 <HAL_SPI_MspInit+0x2c4>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	f040 808c 	bne.w	8001106 <HAL_SPI_MspInit+0x29a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000fee:	4b49      	ldr	r3, [pc, #292]	@ (8001114 <HAL_SPI_MspInit+0x2a8>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff2:	4a48      	ldr	r2, [pc, #288]	@ (8001114 <HAL_SPI_MspInit+0x2a8>)
 8000ff4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ff8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ffa:	4b46      	ldr	r3, [pc, #280]	@ (8001114 <HAL_SPI_MspInit+0x2a8>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001006:	4b43      	ldr	r3, [pc, #268]	@ (8001114 <HAL_SPI_MspInit+0x2a8>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	4a42      	ldr	r2, [pc, #264]	@ (8001114 <HAL_SPI_MspInit+0x2a8>)
 800100c:	f043 0310 	orr.w	r3, r3, #16
 8001010:	6313      	str	r3, [r2, #48]	@ 0x30
 8001012:	4b40      	ldr	r3, [pc, #256]	@ (8001114 <HAL_SPI_MspInit+0x2a8>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	f003 0310 	and.w	r3, r3, #16
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800101e:	2364      	movs	r3, #100	@ 0x64
 8001020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102a:	2303      	movs	r3, #3
 800102c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800102e:	2305      	movs	r3, #5
 8001030:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	4619      	mov	r1, r3
 8001038:	483e      	ldr	r0, [pc, #248]	@ (8001134 <HAL_SPI_MspInit+0x2c8>)
 800103a:	f002 ffc3 	bl	8003fc4 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 800103e:	4b3e      	ldr	r3, [pc, #248]	@ (8001138 <HAL_SPI_MspInit+0x2cc>)
 8001040:	4a3e      	ldr	r2, [pc, #248]	@ (800113c <HAL_SPI_MspInit+0x2d0>)
 8001042:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8001044:	4b3c      	ldr	r3, [pc, #240]	@ (8001138 <HAL_SPI_MspInit+0x2cc>)
 8001046:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800104a:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800104c:	4b3a      	ldr	r3, [pc, #232]	@ (8001138 <HAL_SPI_MspInit+0x2cc>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001052:	4b39      	ldr	r3, [pc, #228]	@ (8001138 <HAL_SPI_MspInit+0x2cc>)
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001058:	4b37      	ldr	r3, [pc, #220]	@ (8001138 <HAL_SPI_MspInit+0x2cc>)
 800105a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800105e:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001060:	4b35      	ldr	r3, [pc, #212]	@ (8001138 <HAL_SPI_MspInit+0x2cc>)
 8001062:	2200      	movs	r2, #0
 8001064:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001066:	4b34      	ldr	r3, [pc, #208]	@ (8001138 <HAL_SPI_MspInit+0x2cc>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 800106c:	4b32      	ldr	r3, [pc, #200]	@ (8001138 <HAL_SPI_MspInit+0x2cc>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001072:	4b31      	ldr	r3, [pc, #196]	@ (8001138 <HAL_SPI_MspInit+0x2cc>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001078:	4b2f      	ldr	r3, [pc, #188]	@ (8001138 <HAL_SPI_MspInit+0x2cc>)
 800107a:	2200      	movs	r2, #0
 800107c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 800107e:	482e      	ldr	r0, [pc, #184]	@ (8001138 <HAL_SPI_MspInit+0x2cc>)
 8001080:	f001 f92e 	bl	80022e0 <HAL_DMA_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_SPI_MspInit+0x222>
      Error_Handler();
 800108a:	f7ff fe71 	bl	8000d70 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a29      	ldr	r2, [pc, #164]	@ (8001138 <HAL_SPI_MspInit+0x2cc>)
 8001092:	659a      	str	r2, [r3, #88]	@ 0x58
 8001094:	4a28      	ldr	r2, [pc, #160]	@ (8001138 <HAL_SPI_MspInit+0x2cc>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 800109a:	4b29      	ldr	r3, [pc, #164]	@ (8001140 <HAL_SPI_MspInit+0x2d4>)
 800109c:	4a29      	ldr	r2, [pc, #164]	@ (8001144 <HAL_SPI_MspInit+0x2d8>)
 800109e:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 80010a0:	4b27      	ldr	r3, [pc, #156]	@ (8001140 <HAL_SPI_MspInit+0x2d4>)
 80010a2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010a6:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010a8:	4b25      	ldr	r3, [pc, #148]	@ (8001140 <HAL_SPI_MspInit+0x2d4>)
 80010aa:	2240      	movs	r2, #64	@ 0x40
 80010ac:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ae:	4b24      	ldr	r3, [pc, #144]	@ (8001140 <HAL_SPI_MspInit+0x2d4>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010b4:	4b22      	ldr	r3, [pc, #136]	@ (8001140 <HAL_SPI_MspInit+0x2d4>)
 80010b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010ba:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010bc:	4b20      	ldr	r3, [pc, #128]	@ (8001140 <HAL_SPI_MspInit+0x2d4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001140 <HAL_SPI_MspInit+0x2d4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80010c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001140 <HAL_SPI_MspInit+0x2d4>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001140 <HAL_SPI_MspInit+0x2d4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001140 <HAL_SPI_MspInit+0x2d4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80010da:	4819      	ldr	r0, [pc, #100]	@ (8001140 <HAL_SPI_MspInit+0x2d4>)
 80010dc:	f001 f900 	bl	80022e0 <HAL_DMA_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 80010e6:	f7ff fe43 	bl	8000d70 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a14      	ldr	r2, [pc, #80]	@ (8001140 <HAL_SPI_MspInit+0x2d4>)
 80010ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80010f0:	4a13      	ldr	r2, [pc, #76]	@ (8001140 <HAL_SPI_MspInit+0x2d4>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2100      	movs	r1, #0
 80010fa:	2054      	movs	r0, #84	@ 0x54
 80010fc:	f000 feaf 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001100:	2054      	movs	r0, #84	@ 0x54
 8001102:	f000 fec8 	bl	8001e96 <HAL_NVIC_EnableIRQ>
}
 8001106:	bf00      	nop
 8001108:	3730      	adds	r7, #48	@ 0x30
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40013000 	.word	0x40013000
 8001114:	40023800 	.word	0x40023800
 8001118:	40020000 	.word	0x40020000
 800111c:	40020400 	.word	0x40020400
 8001120:	2000053c 	.word	0x2000053c
 8001124:	40026440 	.word	0x40026440
 8001128:	2000059c 	.word	0x2000059c
 800112c:	40026458 	.word	0x40026458
 8001130:	40013400 	.word	0x40013400
 8001134:	40021000 	.word	0x40021000
 8001138:	200005fc 	.word	0x200005fc
 800113c:	40026410 	.word	0x40026410
 8001140:	2000065c 	.word	0x2000065c
 8001144:	40026428 	.word	0x40026428

08001148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800114e:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <HAL_MspInit+0x44>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001152:	4a0e      	ldr	r2, [pc, #56]	@ (800118c <HAL_MspInit+0x44>)
 8001154:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001158:	6413      	str	r3, [r2, #64]	@ 0x40
 800115a:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <HAL_MspInit+0x44>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001166:	4b09      	ldr	r3, [pc, #36]	@ (800118c <HAL_MspInit+0x44>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116a:	4a08      	ldr	r2, [pc, #32]	@ (800118c <HAL_MspInit+0x44>)
 800116c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001170:	6453      	str	r3, [r2, #68]	@ 0x44
 8001172:	4b06      	ldr	r3, [pc, #24]	@ (800118c <HAL_MspInit+0x44>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001176:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800

08001190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <NMI_Handler+0x4>

08001198 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <HardFault_Handler+0x4>

080011a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <MemManage_Handler+0x4>

080011a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <BusFault_Handler+0x4>

080011b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <UsageFault_Handler+0x4>

080011b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e6:	f000 fd1b 	bl	8001c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80011f4:	4802      	ldr	r0, [pc, #8]	@ (8001200 <DMA1_Stream0_IRQHandler+0x10>)
 80011f6:	f001 fa13 	bl	8002620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200008b8 	.word	0x200008b8

08001204 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001208:	4802      	ldr	r0, [pc, #8]	@ (8001214 <DMA1_Stream2_IRQHandler+0x10>)
 800120a:	f001 fa09 	bl	8002620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000858 	.word	0x20000858

08001218 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 800121c:	4802      	ldr	r0, [pc, #8]	@ (8001228 <DMA1_Stream3_IRQHandler+0x10>)
 800121e:	f001 f9ff 	bl	8002620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200003b4 	.word	0x200003b4

0800122c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001230:	4802      	ldr	r0, [pc, #8]	@ (800123c <DMA1_Stream5_IRQHandler+0x10>)
 8001232:	f001 f9f5 	bl	8002620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200002f4 	.word	0x200002f4

08001240 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001244:	4802      	ldr	r0, [pc, #8]	@ (8001250 <DMA1_Stream6_IRQHandler+0x10>)
 8001246:	f001 f9eb 	bl	8002620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000354 	.word	0x20000354

08001254 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001258:	4802      	ldr	r0, [pc, #8]	@ (8001264 <I2C1_EV_IRQHandler+0x10>)
 800125a:	f003 fca1 	bl	8004ba0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	2000024c 	.word	0x2000024c

08001268 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800126c:	4802      	ldr	r0, [pc, #8]	@ (8001278 <I2C1_ER_IRQHandler+0x10>)
 800126e:	f003 fcb1 	bl	8004bd4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2000024c 	.word	0x2000024c

0800127c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001280:	4802      	ldr	r0, [pc, #8]	@ (800128c <I2C2_EV_IRQHandler+0x10>)
 8001282:	f003 fc8d 	bl	8004ba0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200002a0 	.word	0x200002a0

08001290 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001294:	4802      	ldr	r0, [pc, #8]	@ (80012a0 <I2C2_ER_IRQHandler+0x10>)
 8001296:	f003 fc9d 	bl	8004bd4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200002a0 	.word	0x200002a0

080012a4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80012a8:	4802      	ldr	r0, [pc, #8]	@ (80012b4 <SPI1_IRQHandler+0x10>)
 80012aa:	f006 fbf1 	bl	8007a90 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000474 	.word	0x20000474

080012b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012bc:	4802      	ldr	r0, [pc, #8]	@ (80012c8 <USART3_IRQHandler+0x10>)
 80012be:	f006 fe7f 	bl	8007fc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200007d0 	.word	0x200007d0

080012cc <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80012d0:	4802      	ldr	r0, [pc, #8]	@ (80012dc <DMA1_Stream7_IRQHandler+0x10>)
 80012d2:	f001 f9a5 	bl	8002620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000414 	.word	0x20000414

080012e0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80012e4:	4802      	ldr	r0, [pc, #8]	@ (80012f0 <UART4_IRQHandler+0x10>)
 80012e6:	f006 fe6b 	bl	8007fc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200006c0 	.word	0x200006c0

080012f4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80012f8:	4802      	ldr	r0, [pc, #8]	@ (8001304 <UART5_IRQHandler+0x10>)
 80012fa:	f006 fe61 	bl	8007fc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000748 	.word	0x20000748

08001308 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 800130c:	4802      	ldr	r0, [pc, #8]	@ (8001318 <DMA2_Stream0_IRQHandler+0x10>)
 800130e:	f001 f987 	bl	8002620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200005fc 	.word	0x200005fc

0800131c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001320:	4802      	ldr	r0, [pc, #8]	@ (800132c <DMA2_Stream1_IRQHandler+0x10>)
 8001322:	f001 f97d 	bl	8002620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000065c 	.word	0x2000065c

08001330 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001334:	4802      	ldr	r0, [pc, #8]	@ (8001340 <DMA2_Stream2_IRQHandler+0x10>)
 8001336:	f001 f973 	bl	8002620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000053c 	.word	0x2000053c

08001344 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001348:	4802      	ldr	r0, [pc, #8]	@ (8001354 <DMA2_Stream3_IRQHandler+0x10>)
 800134a:	f001 f969 	bl	8002620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2000059c 	.word	0x2000059c

08001358 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800135c:	4802      	ldr	r0, [pc, #8]	@ (8001368 <ETH_IRQHandler+0x10>)
 800135e:	f001 ff45 	bl	80031ec <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200052f8 	.word	0x200052f8

0800136c <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001370:	4802      	ldr	r0, [pc, #8]	@ (800137c <ETH_WKUP_IRQHandler+0x10>)
 8001372:	f001 ff3b 	bl	80031ec <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200052f8 	.word	0x200052f8

08001380 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001384:	4802      	ldr	r0, [pc, #8]	@ (8001390 <SPI4_IRQHandler+0x10>)
 8001386:	f006 fb83 	bl	8007a90 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200004d8 	.word	0x200004d8

08001394 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return 1;
 8001398:	2301      	movs	r3, #1
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <_kill>:

int _kill(int pid, int sig)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013ae:	4b05      	ldr	r3, [pc, #20]	@ (80013c4 <_kill+0x20>)
 80013b0:	2216      	movs	r2, #22
 80013b2:	601a      	str	r2, [r3, #0]
  return -1;
 80013b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	20008718 	.word	0x20008718

080013c8 <_exit>:

void _exit (int status)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ffe5 	bl	80013a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013da:	bf00      	nop
 80013dc:	e7fd      	b.n	80013da <_exit+0x12>

080013de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b086      	sub	sp, #24
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	60f8      	str	r0, [r7, #12]
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	e00a      	b.n	8001406 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013f0:	f3af 8000 	nop.w
 80013f4:	4601      	mov	r1, r0
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	1c5a      	adds	r2, r3, #1
 80013fa:	60ba      	str	r2, [r7, #8]
 80013fc:	b2ca      	uxtb	r2, r1
 80013fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	3301      	adds	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	429a      	cmp	r2, r3
 800140c:	dbf0      	blt.n	80013f0 <_read+0x12>
  }

  return len;
 800140e:	687b      	ldr	r3, [r7, #4]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001420:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001440:	605a      	str	r2, [r3, #4]
  return 0;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <_isatty>:

int _isatty(int file)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001458:	2301      	movs	r3, #1
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001466:	b480      	push	{r7}
 8001468:	b085      	sub	sp, #20
 800146a:	af00      	add	r7, sp, #0
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001480:	b480      	push	{r7}
 8001482:	b087      	sub	sp, #28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001488:	4a14      	ldr	r2, [pc, #80]	@ (80014dc <_sbrk+0x5c>)
 800148a:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <_sbrk+0x60>)
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001494:	4b13      	ldr	r3, [pc, #76]	@ (80014e4 <_sbrk+0x64>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d102      	bne.n	80014a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800149c:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <_sbrk+0x64>)
 800149e:	4a12      	ldr	r2, [pc, #72]	@ (80014e8 <_sbrk+0x68>)
 80014a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014a2:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <_sbrk+0x64>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d205      	bcs.n	80014bc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80014b0:	4b0e      	ldr	r3, [pc, #56]	@ (80014ec <_sbrk+0x6c>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014ba:	e009      	b.n	80014d0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80014bc:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <_sbrk+0x64>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014c2:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <_sbrk+0x64>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	4a06      	ldr	r2, [pc, #24]	@ (80014e4 <_sbrk+0x64>)
 80014cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ce:	68fb      	ldr	r3, [r7, #12]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	371c      	adds	r7, #28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	20050000 	.word	0x20050000
 80014e0:	00000400 	.word	0x00000400
 80014e4:	200006bc 	.word	0x200006bc
 80014e8:	20008728 	.word	0x20008728
 80014ec:	20008718 	.word	0x20008718

080014f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014f4:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <SystemInit+0x20>)
 80014f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014fa:	4a05      	ldr	r2, [pc, #20]	@ (8001510 <SystemInit+0x20>)
 80014fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001500:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001518:	4b14      	ldr	r3, [pc, #80]	@ (800156c <MX_UART4_Init+0x58>)
 800151a:	4a15      	ldr	r2, [pc, #84]	@ (8001570 <MX_UART4_Init+0x5c>)
 800151c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800151e:	4b13      	ldr	r3, [pc, #76]	@ (800156c <MX_UART4_Init+0x58>)
 8001520:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001524:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001526:	4b11      	ldr	r3, [pc, #68]	@ (800156c <MX_UART4_Init+0x58>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800152c:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <MX_UART4_Init+0x58>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001532:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <MX_UART4_Init+0x58>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001538:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <MX_UART4_Init+0x58>)
 800153a:	220c      	movs	r2, #12
 800153c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153e:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <MX_UART4_Init+0x58>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001544:	4b09      	ldr	r3, [pc, #36]	@ (800156c <MX_UART4_Init+0x58>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800154a:	4b08      	ldr	r3, [pc, #32]	@ (800156c <MX_UART4_Init+0x58>)
 800154c:	2200      	movs	r2, #0
 800154e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001550:	4b06      	ldr	r3, [pc, #24]	@ (800156c <MX_UART4_Init+0x58>)
 8001552:	2200      	movs	r2, #0
 8001554:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001556:	4805      	ldr	r0, [pc, #20]	@ (800156c <MX_UART4_Init+0x58>)
 8001558:	f006 fbb9 	bl	8007cce <HAL_UART_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001562:	f7ff fc05 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200006c0 	.word	0x200006c0
 8001570:	40004c00 	.word	0x40004c00

08001574 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001578:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <MX_UART5_Init+0x58>)
 800157a:	4a15      	ldr	r2, [pc, #84]	@ (80015d0 <MX_UART5_Init+0x5c>)
 800157c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800157e:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <MX_UART5_Init+0x58>)
 8001580:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001584:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001586:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <MX_UART5_Init+0x58>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800158c:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <MX_UART5_Init+0x58>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001592:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <MX_UART5_Init+0x58>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001598:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <MX_UART5_Init+0x58>)
 800159a:	220c      	movs	r2, #12
 800159c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159e:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <MX_UART5_Init+0x58>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a4:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <MX_UART5_Init+0x58>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015aa:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <MX_UART5_Init+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b0:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <MX_UART5_Init+0x58>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80015b6:	4805      	ldr	r0, [pc, #20]	@ (80015cc <MX_UART5_Init+0x58>)
 80015b8:	f006 fb89 	bl	8007cce <HAL_UART_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80015c2:	f7ff fbd5 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000748 	.word	0x20000748
 80015d0:	40005000 	.word	0x40005000

080015d4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015d8:	4b14      	ldr	r3, [pc, #80]	@ (800162c <MX_USART3_UART_Init+0x58>)
 80015da:	4a15      	ldr	r2, [pc, #84]	@ (8001630 <MX_USART3_UART_Init+0x5c>)
 80015dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015de:	4b13      	ldr	r3, [pc, #76]	@ (800162c <MX_USART3_UART_Init+0x58>)
 80015e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015e6:	4b11      	ldr	r3, [pc, #68]	@ (800162c <MX_USART3_UART_Init+0x58>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	@ (800162c <MX_USART3_UART_Init+0x58>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <MX_USART3_UART_Init+0x58>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <MX_USART3_UART_Init+0x58>)
 80015fa:	220c      	movs	r2, #12
 80015fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fe:	4b0b      	ldr	r3, [pc, #44]	@ (800162c <MX_USART3_UART_Init+0x58>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001604:	4b09      	ldr	r3, [pc, #36]	@ (800162c <MX_USART3_UART_Init+0x58>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800160a:	4b08      	ldr	r3, [pc, #32]	@ (800162c <MX_USART3_UART_Init+0x58>)
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001610:	4b06      	ldr	r3, [pc, #24]	@ (800162c <MX_USART3_UART_Init+0x58>)
 8001612:	2200      	movs	r2, #0
 8001614:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001616:	4805      	ldr	r0, [pc, #20]	@ (800162c <MX_USART3_UART_Init+0x58>)
 8001618:	f006 fb59 	bl	8007cce <HAL_UART_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001622:	f7ff fba5 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200007d0 	.word	0x200007d0
 8001630:	40004800 	.word	0x40004800

08001634 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b0b0      	sub	sp, #192	@ 0xc0
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800164c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001650:	2284      	movs	r2, #132	@ 0x84
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f013 fda7 	bl	80151a8 <memset>
  if(uartHandle->Instance==UART4)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4ab0      	ldr	r2, [pc, #704]	@ (8001920 <HAL_UART_MspInit+0x2ec>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d173      	bne.n	800174c <HAL_UART_MspInit+0x118>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001664:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001668:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800166a:	2300      	movs	r3, #0
 800166c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800166e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001672:	4618      	mov	r0, r3
 8001674:	f005 fd70 	bl	8007158 <HAL_RCCEx_PeriphCLKConfig>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800167e:	f7ff fb77 	bl	8000d70 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001682:	4ba8      	ldr	r3, [pc, #672]	@ (8001924 <HAL_UART_MspInit+0x2f0>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001686:	4aa7      	ldr	r2, [pc, #668]	@ (8001924 <HAL_UART_MspInit+0x2f0>)
 8001688:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800168c:	6413      	str	r3, [r2, #64]	@ 0x40
 800168e:	4ba5      	ldr	r3, [pc, #660]	@ (8001924 <HAL_UART_MspInit+0x2f0>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001696:	627b      	str	r3, [r7, #36]	@ 0x24
 8001698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800169a:	4ba2      	ldr	r3, [pc, #648]	@ (8001924 <HAL_UART_MspInit+0x2f0>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	4aa1      	ldr	r2, [pc, #644]	@ (8001924 <HAL_UART_MspInit+0x2f0>)
 80016a0:	f043 0304 	orr.w	r3, r3, #4
 80016a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a6:	4b9f      	ldr	r3, [pc, #636]	@ (8001924 <HAL_UART_MspInit+0x2f0>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	623b      	str	r3, [r7, #32]
 80016b0:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016b2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80016b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c6:	2303      	movs	r3, #3
 80016c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80016cc:	2308      	movs	r3, #8
 80016ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80016d6:	4619      	mov	r1, r3
 80016d8:	4893      	ldr	r0, [pc, #588]	@ (8001928 <HAL_UART_MspInit+0x2f4>)
 80016da:	f002 fc73 	bl	8003fc4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80016de:	4b93      	ldr	r3, [pc, #588]	@ (800192c <HAL_UART_MspInit+0x2f8>)
 80016e0:	4a93      	ldr	r2, [pc, #588]	@ (8001930 <HAL_UART_MspInit+0x2fc>)
 80016e2:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80016e4:	4b91      	ldr	r3, [pc, #580]	@ (800192c <HAL_UART_MspInit+0x2f8>)
 80016e6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80016ea:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016ec:	4b8f      	ldr	r3, [pc, #572]	@ (800192c <HAL_UART_MspInit+0x2f8>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016f2:	4b8e      	ldr	r3, [pc, #568]	@ (800192c <HAL_UART_MspInit+0x2f8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016f8:	4b8c      	ldr	r3, [pc, #560]	@ (800192c <HAL_UART_MspInit+0x2f8>)
 80016fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016fe:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001700:	4b8a      	ldr	r3, [pc, #552]	@ (800192c <HAL_UART_MspInit+0x2f8>)
 8001702:	2200      	movs	r2, #0
 8001704:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001706:	4b89      	ldr	r3, [pc, #548]	@ (800192c <HAL_UART_MspInit+0x2f8>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800170c:	4b87      	ldr	r3, [pc, #540]	@ (800192c <HAL_UART_MspInit+0x2f8>)
 800170e:	2200      	movs	r2, #0
 8001710:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001712:	4b86      	ldr	r3, [pc, #536]	@ (800192c <HAL_UART_MspInit+0x2f8>)
 8001714:	2200      	movs	r2, #0
 8001716:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001718:	4b84      	ldr	r3, [pc, #528]	@ (800192c <HAL_UART_MspInit+0x2f8>)
 800171a:	2200      	movs	r2, #0
 800171c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800171e:	4883      	ldr	r0, [pc, #524]	@ (800192c <HAL_UART_MspInit+0x2f8>)
 8001720:	f000 fdde 	bl	80022e0 <HAL_DMA_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 800172a:	f7ff fb21 	bl	8000d70 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a7e      	ldr	r2, [pc, #504]	@ (800192c <HAL_UART_MspInit+0x2f8>)
 8001732:	675a      	str	r2, [r3, #116]	@ 0x74
 8001734:	4a7d      	ldr	r2, [pc, #500]	@ (800192c <HAL_UART_MspInit+0x2f8>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	2100      	movs	r1, #0
 800173e:	2034      	movs	r0, #52	@ 0x34
 8001740:	f000 fb8d 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001744:	2034      	movs	r0, #52	@ 0x34
 8001746:	f000 fba6 	bl	8001e96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800174a:	e0e4      	b.n	8001916 <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==UART5)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a78      	ldr	r2, [pc, #480]	@ (8001934 <HAL_UART_MspInit+0x300>)
 8001752:	4293      	cmp	r3, r2
 8001754:	f040 8095 	bne.w	8001882 <HAL_UART_MspInit+0x24e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001758:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800175c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800175e:	2300      	movs	r3, #0
 8001760:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001762:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001766:	4618      	mov	r0, r3
 8001768:	f005 fcf6 	bl	8007158 <HAL_RCCEx_PeriphCLKConfig>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_UART_MspInit+0x142>
      Error_Handler();
 8001772:	f7ff fafd 	bl	8000d70 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001776:	4b6b      	ldr	r3, [pc, #428]	@ (8001924 <HAL_UART_MspInit+0x2f0>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	4a6a      	ldr	r2, [pc, #424]	@ (8001924 <HAL_UART_MspInit+0x2f0>)
 800177c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001780:	6413      	str	r3, [r2, #64]	@ 0x40
 8001782:	4b68      	ldr	r3, [pc, #416]	@ (8001924 <HAL_UART_MspInit+0x2f0>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800178a:	61fb      	str	r3, [r7, #28]
 800178c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800178e:	4b65      	ldr	r3, [pc, #404]	@ (8001924 <HAL_UART_MspInit+0x2f0>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	4a64      	ldr	r2, [pc, #400]	@ (8001924 <HAL_UART_MspInit+0x2f0>)
 8001794:	f043 0304 	orr.w	r3, r3, #4
 8001798:	6313      	str	r3, [r2, #48]	@ 0x30
 800179a:	4b62      	ldr	r3, [pc, #392]	@ (8001924 <HAL_UART_MspInit+0x2f0>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	61bb      	str	r3, [r7, #24]
 80017a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001924 <HAL_UART_MspInit+0x2f0>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	4a5e      	ldr	r2, [pc, #376]	@ (8001924 <HAL_UART_MspInit+0x2f0>)
 80017ac:	f043 0308 	orr.w	r3, r3, #8
 80017b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b2:	4b5c      	ldr	r3, [pc, #368]	@ (8001924 <HAL_UART_MspInit+0x2f0>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	2302      	movs	r3, #2
 80017c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d2:	2303      	movs	r3, #3
 80017d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80017d8:	2308      	movs	r3, #8
 80017da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017de:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80017e2:	4619      	mov	r1, r3
 80017e4:	4850      	ldr	r0, [pc, #320]	@ (8001928 <HAL_UART_MspInit+0x2f4>)
 80017e6:	f002 fbed 	bl	8003fc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017ea:	2304      	movs	r3, #4
 80017ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001802:	2308      	movs	r3, #8
 8001804:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001808:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800180c:	4619      	mov	r1, r3
 800180e:	484a      	ldr	r0, [pc, #296]	@ (8001938 <HAL_UART_MspInit+0x304>)
 8001810:	f002 fbd8 	bl	8003fc4 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001814:	4b49      	ldr	r3, [pc, #292]	@ (800193c <HAL_UART_MspInit+0x308>)
 8001816:	4a4a      	ldr	r2, [pc, #296]	@ (8001940 <HAL_UART_MspInit+0x30c>)
 8001818:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800181a:	4b48      	ldr	r3, [pc, #288]	@ (800193c <HAL_UART_MspInit+0x308>)
 800181c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001820:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001822:	4b46      	ldr	r3, [pc, #280]	@ (800193c <HAL_UART_MspInit+0x308>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001828:	4b44      	ldr	r3, [pc, #272]	@ (800193c <HAL_UART_MspInit+0x308>)
 800182a:	2200      	movs	r2, #0
 800182c:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800182e:	4b43      	ldr	r3, [pc, #268]	@ (800193c <HAL_UART_MspInit+0x308>)
 8001830:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001834:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001836:	4b41      	ldr	r3, [pc, #260]	@ (800193c <HAL_UART_MspInit+0x308>)
 8001838:	2200      	movs	r2, #0
 800183a:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800183c:	4b3f      	ldr	r3, [pc, #252]	@ (800193c <HAL_UART_MspInit+0x308>)
 800183e:	2200      	movs	r2, #0
 8001840:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8001842:	4b3e      	ldr	r3, [pc, #248]	@ (800193c <HAL_UART_MspInit+0x308>)
 8001844:	2200      	movs	r2, #0
 8001846:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001848:	4b3c      	ldr	r3, [pc, #240]	@ (800193c <HAL_UART_MspInit+0x308>)
 800184a:	2200      	movs	r2, #0
 800184c:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800184e:	4b3b      	ldr	r3, [pc, #236]	@ (800193c <HAL_UART_MspInit+0x308>)
 8001850:	2200      	movs	r2, #0
 8001852:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001854:	4839      	ldr	r0, [pc, #228]	@ (800193c <HAL_UART_MspInit+0x308>)
 8001856:	f000 fd43 	bl	80022e0 <HAL_DMA_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <HAL_UART_MspInit+0x230>
      Error_Handler();
 8001860:	f7ff fa86 	bl	8000d70 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a35      	ldr	r2, [pc, #212]	@ (800193c <HAL_UART_MspInit+0x308>)
 8001868:	675a      	str	r2, [r3, #116]	@ 0x74
 800186a:	4a34      	ldr	r2, [pc, #208]	@ (800193c <HAL_UART_MspInit+0x308>)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001870:	2200      	movs	r2, #0
 8001872:	2100      	movs	r1, #0
 8001874:	2035      	movs	r0, #53	@ 0x35
 8001876:	f000 faf2 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800187a:	2035      	movs	r0, #53	@ 0x35
 800187c:	f000 fb0b 	bl	8001e96 <HAL_NVIC_EnableIRQ>
}
 8001880:	e049      	b.n	8001916 <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==USART3)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a2f      	ldr	r2, [pc, #188]	@ (8001944 <HAL_UART_MspInit+0x310>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d144      	bne.n	8001916 <HAL_UART_MspInit+0x2e2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800188c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001890:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001892:	2300      	movs	r3, #0
 8001894:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001896:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800189a:	4618      	mov	r0, r3
 800189c:	f005 fc5c 	bl	8007158 <HAL_RCCEx_PeriphCLKConfig>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_UART_MspInit+0x276>
      Error_Handler();
 80018a6:	f7ff fa63 	bl	8000d70 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001924 <HAL_UART_MspInit+0x2f0>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001924 <HAL_UART_MspInit+0x2f0>)
 80018b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001924 <HAL_UART_MspInit+0x2f0>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018c2:	4b18      	ldr	r3, [pc, #96]	@ (8001924 <HAL_UART_MspInit+0x2f0>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	4a17      	ldr	r2, [pc, #92]	@ (8001924 <HAL_UART_MspInit+0x2f0>)
 80018c8:	f043 0308 	orr.w	r3, r3, #8
 80018cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ce:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <HAL_UART_MspInit+0x2f0>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018da:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ee:	2303      	movs	r3, #3
 80018f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018f4:	2307      	movs	r3, #7
 80018f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fa:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80018fe:	4619      	mov	r1, r3
 8001900:	480d      	ldr	r0, [pc, #52]	@ (8001938 <HAL_UART_MspInit+0x304>)
 8001902:	f002 fb5f 	bl	8003fc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2100      	movs	r1, #0
 800190a:	2027      	movs	r0, #39	@ 0x27
 800190c:	f000 faa7 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001910:	2027      	movs	r0, #39	@ 0x27
 8001912:	f000 fac0 	bl	8001e96 <HAL_NVIC_EnableIRQ>
}
 8001916:	bf00      	nop
 8001918:	37c0      	adds	r7, #192	@ 0xc0
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40004c00 	.word	0x40004c00
 8001924:	40023800 	.word	0x40023800
 8001928:	40020800 	.word	0x40020800
 800192c:	20000858 	.word	0x20000858
 8001930:	40026040 	.word	0x40026040
 8001934:	40005000 	.word	0x40005000
 8001938:	40020c00 	.word	0x40020c00
 800193c:	200008b8 	.word	0x200008b8
 8001940:	40026010 	.word	0x40026010
 8001944:	40004800 	.word	0x40004800

08001948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001948:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001980 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800194c:	f7ff fdd0 	bl	80014f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001950:	480c      	ldr	r0, [pc, #48]	@ (8001984 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001952:	490d      	ldr	r1, [pc, #52]	@ (8001988 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001954:	4a0d      	ldr	r2, [pc, #52]	@ (800198c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001958:	e002      	b.n	8001960 <LoopCopyDataInit>

0800195a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800195a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800195c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195e:	3304      	adds	r3, #4

08001960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001964:	d3f9      	bcc.n	800195a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001966:	4a0a      	ldr	r2, [pc, #40]	@ (8001990 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001968:	4c0a      	ldr	r4, [pc, #40]	@ (8001994 <LoopFillZerobss+0x22>)
  movs r3, #0
 800196a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800196c:	e001      	b.n	8001972 <LoopFillZerobss>

0800196e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001970:	3204      	adds	r2, #4

08001972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001974:	d3fb      	bcc.n	800196e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001976:	f013 fc65 	bl	8015244 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800197a:	f7ff f96d 	bl	8000c58 <main>
  bx  lr    
 800197e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001980:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001988:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 800198c:	080195b4 	.word	0x080195b4
  ldr r2, =_sbss
 8001990:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8001994:	20008728 	.word	0x20008728

08001998 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001998:	e7fe      	b.n	8001998 <ADC_IRQHandler>

0800199a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00b      	beq.n	80019c2 <LAN8742_RegisterBusIO+0x28>
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d007      	beq.n	80019c2 <LAN8742_RegisterBusIO+0x28>
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <LAN8742_RegisterBusIO+0x28>
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d102      	bne.n	80019c8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019c6:	e014      	b.n	80019f2 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	68da      	ldr	r2, [r3, #12]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	691a      	ldr	r2, [r3, #16]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d139      	bne.n	8001a8e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d002      	beq.n	8001a28 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	e01c      	b.n	8001a6e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	f107 020c 	add.w	r2, r7, #12
 8001a3c:	2112      	movs	r1, #18
 8001a3e:	6978      	ldr	r0, [r7, #20]
 8001a40:	4798      	blx	r3
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	da03      	bge.n	8001a50 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001a48:	f06f 0304 	mvn.w	r3, #4
 8001a4c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001a4e:	e00b      	b.n	8001a68 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d105      	bne.n	8001a68 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
         break;
 8001a66:	e005      	b.n	8001a74 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2b1f      	cmp	r3, #31
 8001a72:	d9df      	bls.n	8001a34 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b1f      	cmp	r3, #31
 8001a7a:	d902      	bls.n	8001a82 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001a7c:	f06f 0302 	mvn.w	r3, #2
 8001a80:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d102      	bne.n	8001a8e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001a8e:	693b      	ldr	r3, [r7, #16]
 }
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6810      	ldr	r0, [r2, #0]
 8001aac:	f107 020c 	add.w	r2, r7, #12
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	4798      	blx	r3
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	da02      	bge.n	8001ac0 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001aba:	f06f 0304 	mvn.w	r3, #4
 8001abe:	e06e      	b.n	8001b9e <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	6810      	ldr	r0, [r2, #0]
 8001ac8:	f107 020c 	add.w	r2, r7, #12
 8001acc:	2101      	movs	r1, #1
 8001ace:	4798      	blx	r3
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	da02      	bge.n	8001adc <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001ad6:	f06f 0304 	mvn.w	r3, #4
 8001ada:	e060      	b.n	8001b9e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e059      	b.n	8001b9e <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6810      	ldr	r0, [r2, #0]
 8001af2:	f107 020c 	add.w	r2, r7, #12
 8001af6:	2100      	movs	r1, #0
 8001af8:	4798      	blx	r3
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	da02      	bge.n	8001b06 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b00:	f06f 0304 	mvn.w	r3, #4
 8001b04:	e04b      	b.n	8001b9e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d11b      	bne.n	8001b48 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d006      	beq.n	8001b28 <LAN8742_GetLinkState+0x90>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001b24:	2302      	movs	r3, #2
 8001b26:	e03a      	b.n	8001b9e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e033      	b.n	8001b9e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001b40:	2304      	movs	r3, #4
 8001b42:	e02c      	b.n	8001b9e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001b44:	2305      	movs	r3, #5
 8001b46:	e02a      	b.n	8001b9e <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6810      	ldr	r0, [r2, #0]
 8001b50:	f107 020c 	add.w	r2, r7, #12
 8001b54:	211f      	movs	r1, #31
 8001b56:	4798      	blx	r3
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	da02      	bge.n	8001b64 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001b5e:	f06f 0304 	mvn.w	r3, #4
 8001b62:	e01c      	b.n	8001b9e <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001b6e:	2306      	movs	r3, #6
 8001b70:	e015      	b.n	8001b9e <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f003 031c 	and.w	r3, r3, #28
 8001b78:	2b18      	cmp	r3, #24
 8001b7a:	d101      	bne.n	8001b80 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e00e      	b.n	8001b9e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 031c 	and.w	r3, r3, #28
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d101      	bne.n	8001b8e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e007      	b.n	8001b9e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f003 031c 	and.w	r3, r3, #28
 8001b94:	2b14      	cmp	r3, #20
 8001b96:	d101      	bne.n	8001b9c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001b98:	2304      	movs	r3, #4
 8001b9a:	e000      	b.n	8001b9e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001b9c:	2305      	movs	r3, #5
    }
  }
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001baa:	2003      	movs	r0, #3
 8001bac:	f000 f94c 	bl	8001e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb0:	200f      	movs	r0, #15
 8001bb2:	f000 f805 	bl	8001bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb6:	f7ff fac7 	bl	8001148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc8:	4b12      	ldr	r3, [pc, #72]	@ (8001c14 <HAL_InitTick+0x54>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b12      	ldr	r3, [pc, #72]	@ (8001c18 <HAL_InitTick+0x58>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f967 	bl	8001eb2 <HAL_SYSTICK_Config>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e00e      	b.n	8001c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b0f      	cmp	r3, #15
 8001bf2:	d80a      	bhi.n	8001c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bfc:	f000 f92f 	bl	8001e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c00:	4a06      	ldr	r2, [pc, #24]	@ (8001c1c <HAL_InitTick+0x5c>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	e000      	b.n	8001c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000000 	.word	0x20000000
 8001c18:	20000008 	.word	0x20000008
 8001c1c:	20000004 	.word	0x20000004

08001c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c24:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <HAL_IncTick+0x20>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <HAL_IncTick+0x24>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4413      	add	r3, r2
 8001c30:	4a04      	ldr	r2, [pc, #16]	@ (8001c44 <HAL_IncTick+0x24>)
 8001c32:	6013      	str	r3, [r2, #0]
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000008 	.word	0x20000008
 8001c44:	20000918 	.word	0x20000918

08001c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c4c:	4b03      	ldr	r3, [pc, #12]	@ (8001c5c <HAL_GetTick+0x14>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000918 	.word	0x20000918

08001c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c68:	f7ff ffee 	bl	8001c48 <HAL_GetTick>
 8001c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c78:	d005      	beq.n	8001c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca4 <HAL_Delay+0x44>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4413      	add	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c86:	bf00      	nop
 8001c88:	f7ff ffde 	bl	8001c48 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d8f7      	bhi.n	8001c88 <HAL_Delay+0x28>
  {
  }
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000008 	.word	0x20000008

08001ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce8 <__NVIC_SetPriorityGrouping+0x40>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cd0:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <__NVIC_SetPriorityGrouping+0x44>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd6:	4a04      	ldr	r2, [pc, #16]	@ (8001ce8 <__NVIC_SetPriorityGrouping+0x40>)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	60d3      	str	r3, [r2, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00
 8001cec:	05fa0000 	.word	0x05fa0000

08001cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf4:	4b04      	ldr	r3, [pc, #16]	@ (8001d08 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	0a1b      	lsrs	r3, r3, #8
 8001cfa:	f003 0307 	and.w	r3, r3, #7
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	db0b      	blt.n	8001d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	f003 021f 	and.w	r2, r3, #31
 8001d24:	4907      	ldr	r1, [pc, #28]	@ (8001d44 <__NVIC_EnableIRQ+0x38>)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000e100 	.word	0xe000e100

08001d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db0a      	blt.n	8001d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	490c      	ldr	r1, [pc, #48]	@ (8001d94 <__NVIC_SetPriority+0x4c>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d70:	e00a      	b.n	8001d88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4908      	ldr	r1, [pc, #32]	@ (8001d98 <__NVIC_SetPriority+0x50>)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3b04      	subs	r3, #4
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	440b      	add	r3, r1
 8001d86:	761a      	strb	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000e100 	.word	0xe000e100
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	@ 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f1c3 0307 	rsb	r3, r3, #7
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	bf28      	it	cs
 8001dba:	2304      	movcs	r3, #4
 8001dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d902      	bls.n	8001dcc <NVIC_EncodePriority+0x30>
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3b03      	subs	r3, #3
 8001dca:	e000      	b.n	8001dce <NVIC_EncodePriority+0x32>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	401a      	ands	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	43d9      	mvns	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	4313      	orrs	r3, r2
         );
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	@ 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e14:	d301      	bcc.n	8001e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e16:	2301      	movs	r3, #1
 8001e18:	e00f      	b.n	8001e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e44 <SysTick_Config+0x40>)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e22:	210f      	movs	r1, #15
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e28:	f7ff ff8e 	bl	8001d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e2c:	4b05      	ldr	r3, [pc, #20]	@ (8001e44 <SysTick_Config+0x40>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e32:	4b04      	ldr	r3, [pc, #16]	@ (8001e44 <SysTick_Config+0x40>)
 8001e34:	2207      	movs	r2, #7
 8001e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	e000e010 	.word	0xe000e010

08001e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff ff29 	bl	8001ca8 <__NVIC_SetPriorityGrouping>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	4603      	mov	r3, r0
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
 8001e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e70:	f7ff ff3e 	bl	8001cf0 <__NVIC_GetPriorityGrouping>
 8001e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68b9      	ldr	r1, [r7, #8]
 8001e7a:	6978      	ldr	r0, [r7, #20]
 8001e7c:	f7ff ff8e 	bl	8001d9c <NVIC_EncodePriority>
 8001e80:	4602      	mov	r2, r0
 8001e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff5d 	bl	8001d48 <__NVIC_SetPriority>
}
 8001e8e:	bf00      	nop
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff31 	bl	8001d0c <__NVIC_EnableIRQ>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ffa2 	bl	8001e04 <SysTick_Config>
 8001ec0:	4603      	mov	r3, r0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e054      	b.n	8001f88 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	7f5b      	ldrb	r3, [r3, #29]
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d105      	bne.n	8001ef4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7fe fb96 	bl	8000620 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	791b      	ldrb	r3, [r3, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10c      	bne.n	8001f1c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a22      	ldr	r2, [pc, #136]	@ (8001f90 <HAL_CRC_Init+0xc4>)
 8001f08:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0218 	bic.w	r2, r2, #24
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	e00c      	b.n	8001f36 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6899      	ldr	r1, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	461a      	mov	r2, r3
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f94c 	bl	80021c4 <HAL_CRCEx_Polynomial_Set>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e028      	b.n	8001f88 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	795b      	ldrb	r3, [r3, #5]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d105      	bne.n	8001f4a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f46:	611a      	str	r2, [r3, #16]
 8001f48:	e004      	b.n	8001f54 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6912      	ldr	r2, [r2, #16]
 8001f52:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695a      	ldr	r2, [r3, #20]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	699a      	ldr	r2, [r3, #24]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	04c11db7 	.word	0x04c11db7

08001f94 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f042 0201 	orr.w	r2, r2, #1
 8001fb8:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	d006      	beq.n	8001fd0 <HAL_CRC_Calculate+0x3c>
 8001fc2:	2b03      	cmp	r3, #3
 8001fc4:	d829      	bhi.n	800201a <HAL_CRC_Calculate+0x86>
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d019      	beq.n	8001ffe <HAL_CRC_Calculate+0x6a>
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d01e      	beq.n	800200c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8001fce:	e024      	b.n	800201a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	e00a      	b.n	8001fec <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	441a      	add	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6812      	ldr	r2, [r2, #0]
 8001fe4:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d3f0      	bcc.n	8001fd6 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	613b      	str	r3, [r7, #16]
      break;
 8001ffc:	e00e      	b.n	800201c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	68b9      	ldr	r1, [r7, #8]
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f000 f812 	bl	800202c <CRC_Handle_8>
 8002008:	6138      	str	r0, [r7, #16]
      break;
 800200a:	e007      	b.n	800201c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	68b9      	ldr	r1, [r7, #8]
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 f89d 	bl	8002150 <CRC_Handle_16>
 8002016:	6138      	str	r0, [r7, #16]
      break;
 8002018:	e000      	b.n	800201c <HAL_CRC_Calculate+0x88>
      break;
 800201a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2201      	movs	r2, #1
 8002020:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002022:	693b      	ldr	r3, [r7, #16]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800202c:	b480      	push	{r7}
 800202e:	b089      	sub	sp, #36	@ 0x24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002038:	2300      	movs	r3, #0
 800203a:	61fb      	str	r3, [r7, #28]
 800203c:	e023      	b.n	8002086 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	4413      	add	r3, r2
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	3301      	adds	r3, #1
 8002050:	68b9      	ldr	r1, [r7, #8]
 8002052:	440b      	add	r3, r1
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002058:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	3302      	adds	r3, #2
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	440b      	add	r3, r1
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002068:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	3303      	adds	r3, #3
 8002070:	68b9      	ldr	r1, [r7, #8]
 8002072:	440b      	add	r3, r1
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800207c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800207e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	3301      	adds	r3, #1
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	089b      	lsrs	r3, r3, #2
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	429a      	cmp	r2, r3
 800208e:	d3d6      	bcc.n	800203e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d051      	beq.n	800213e <CRC_Handle_8+0x112>
  {
    if ((BufferLength % 4U) == 1U)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d108      	bne.n	80020b6 <CRC_Handle_8+0x8a>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	4413      	add	r3, r2
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	6812      	ldr	r2, [r2, #0]
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	7013      	strb	r3, [r2, #0]
 80020b4:	e043      	b.n	800213e <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 2U)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d118      	bne.n	80020f2 <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	4413      	add	r3, r2
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	b21b      	sxth	r3, r3
 80020cc:	021b      	lsls	r3, r3, #8
 80020ce:	b21a      	sxth	r2, r3
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	3301      	adds	r3, #1
 80020d6:	68b9      	ldr	r1, [r7, #8]
 80020d8:	440b      	add	r3, r1
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	b21b      	sxth	r3, r3
 80020de:	4313      	orrs	r3, r2
 80020e0:	b21b      	sxth	r3, r3
 80020e2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	8b7a      	ldrh	r2, [r7, #26]
 80020ee:	801a      	strh	r2, [r3, #0]
 80020f0:	e025      	b.n	800213e <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 3U)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d120      	bne.n	800213e <CRC_Handle_8+0x112>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	4413      	add	r3, r2
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	b21b      	sxth	r3, r3
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	b21a      	sxth	r2, r3
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	3301      	adds	r3, #1
 8002112:	68b9      	ldr	r1, [r7, #8]
 8002114:	440b      	add	r3, r1
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	b21b      	sxth	r3, r3
 800211a:	4313      	orrs	r3, r2
 800211c:	b21b      	sxth	r3, r3
 800211e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	8b7a      	ldrh	r2, [r7, #26]
 800212a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	3302      	adds	r3, #2
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	4413      	add	r3, r2
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	7013      	strb	r3, [r2, #0]
      /* Nothing to do */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3724      	adds	r7, #36	@ 0x24
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8002150:	b480      	push	{r7}
 8002152:	b087      	sub	sp, #28
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	e013      	b.n	800218a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	4413      	add	r3, r2
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	041a      	lsls	r2, r3, #16
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	3302      	adds	r3, #2
 8002174:	68b9      	ldr	r1, [r7, #8]
 8002176:	440b      	add	r3, r1
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	4619      	mov	r1, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	430a      	orrs	r2, r1
 8002182:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	3301      	adds	r3, #1
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	085b      	lsrs	r3, r3, #1
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	429a      	cmp	r2, r3
 8002192:	d3e6      	bcc.n	8002162 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d009      	beq.n	80021b2 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	4413      	add	r3, r2
 80021ac:	881a      	ldrh	r2, [r3, #0]
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	371c      	adds	r7, #28
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80021d4:	231f      	movs	r3, #31
 80021d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d102      	bne.n	80021e8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	75fb      	strb	r3, [r7, #23]
 80021e6:	e063      	b.n	80022b0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80021e8:	bf00      	nop
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1e5a      	subs	r2, r3, #1
 80021ee:	613a      	str	r2, [r7, #16]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d009      	beq.n	8002208 <HAL_CRCEx_Polynomial_Set+0x44>
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	f003 031f 	and.w	r3, r3, #31
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0f0      	beq.n	80021ea <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b18      	cmp	r3, #24
 800220c:	d846      	bhi.n	800229c <HAL_CRCEx_Polynomial_Set+0xd8>
 800220e:	a201      	add	r2, pc, #4	@ (adr r2, 8002214 <HAL_CRCEx_Polynomial_Set+0x50>)
 8002210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002214:	080022a3 	.word	0x080022a3
 8002218:	0800229d 	.word	0x0800229d
 800221c:	0800229d 	.word	0x0800229d
 8002220:	0800229d 	.word	0x0800229d
 8002224:	0800229d 	.word	0x0800229d
 8002228:	0800229d 	.word	0x0800229d
 800222c:	0800229d 	.word	0x0800229d
 8002230:	0800229d 	.word	0x0800229d
 8002234:	08002291 	.word	0x08002291
 8002238:	0800229d 	.word	0x0800229d
 800223c:	0800229d 	.word	0x0800229d
 8002240:	0800229d 	.word	0x0800229d
 8002244:	0800229d 	.word	0x0800229d
 8002248:	0800229d 	.word	0x0800229d
 800224c:	0800229d 	.word	0x0800229d
 8002250:	0800229d 	.word	0x0800229d
 8002254:	08002285 	.word	0x08002285
 8002258:	0800229d 	.word	0x0800229d
 800225c:	0800229d 	.word	0x0800229d
 8002260:	0800229d 	.word	0x0800229d
 8002264:	0800229d 	.word	0x0800229d
 8002268:	0800229d 	.word	0x0800229d
 800226c:	0800229d 	.word	0x0800229d
 8002270:	0800229d 	.word	0x0800229d
 8002274:	08002279 	.word	0x08002279
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	2b06      	cmp	r3, #6
 800227c:	d913      	bls.n	80022a6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002282:	e010      	b.n	80022a6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	2b07      	cmp	r3, #7
 8002288:	d90f      	bls.n	80022aa <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800228e:	e00c      	b.n	80022aa <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	2b0f      	cmp	r3, #15
 8002294:	d90b      	bls.n	80022ae <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800229a:	e008      	b.n	80022ae <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	75fb      	strb	r3, [r7, #23]
        break;
 80022a0:	e006      	b.n	80022b0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80022a2:	bf00      	nop
 80022a4:	e004      	b.n	80022b0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80022a6:	bf00      	nop
 80022a8:	e002      	b.n	80022b0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80022aa:	bf00      	nop
 80022ac:	e000      	b.n	80022b0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80022ae:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80022b0:	7dfb      	ldrb	r3, [r7, #23]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10d      	bne.n	80022d2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f023 0118 	bic.w	r1, r3, #24
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80022d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	371c      	adds	r7, #28
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022ec:	f7ff fcac 	bl	8001c48 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e099      	b.n	8002430 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2202      	movs	r2, #2
 8002300:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0201 	bic.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800231c:	e00f      	b.n	800233e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800231e:	f7ff fc93 	bl	8001c48 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b05      	cmp	r3, #5
 800232a:	d908      	bls.n	800233e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2220      	movs	r2, #32
 8002330:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2203      	movs	r2, #3
 8002336:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e078      	b.n	8002430 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1e8      	bne.n	800231e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	4b38      	ldr	r3, [pc, #224]	@ (8002438 <HAL_DMA_Init+0x158>)
 8002358:	4013      	ands	r3, r2
 800235a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800236a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002376:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002382:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4313      	orrs	r3, r2
 800238e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002394:	2b04      	cmp	r3, #4
 8002396:	d107      	bne.n	80023a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a0:	4313      	orrs	r3, r2
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f023 0307 	bic.w	r3, r3, #7
 80023be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ce:	2b04      	cmp	r3, #4
 80023d0:	d117      	bne.n	8002402 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	4313      	orrs	r3, r2
 80023da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00e      	beq.n	8002402 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 fb23 	bl	8002a30 <DMA_CheckFifoParam>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d008      	beq.n	8002402 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2240      	movs	r2, #64	@ 0x40
 80023f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80023fe:	2301      	movs	r3, #1
 8002400:	e016      	b.n	8002430 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 fada 	bl	80029c4 <DMA_CalcBaseAndBitshift>
 8002410:	4603      	mov	r3, r0
 8002412:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002418:	223f      	movs	r2, #63	@ 0x3f
 800241a:	409a      	lsls	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	f010803f 	.word	0xf010803f

0800243c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002452:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_DMA_Start_IT+0x26>
 800245e:	2302      	movs	r3, #2
 8002460:	e048      	b.n	80024f4 <HAL_DMA_Start_IT+0xb8>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b01      	cmp	r3, #1
 8002474:	d137      	bne.n	80024e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2202      	movs	r2, #2
 800247a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68b9      	ldr	r1, [r7, #8]
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 fa6c 	bl	8002968 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002494:	223f      	movs	r2, #63	@ 0x3f
 8002496:	409a      	lsls	r2, r3
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0216 	orr.w	r2, r2, #22
 80024aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695a      	ldr	r2, [r3, #20]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80024ba:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d007      	beq.n	80024d4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0208 	orr.w	r2, r2, #8
 80024d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	e005      	b.n	80024f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024ee:	2302      	movs	r3, #2
 80024f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002508:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800250a:	f7ff fb9d 	bl	8001c48 <HAL_GetTick>
 800250e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d008      	beq.n	800252e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2280      	movs	r2, #128	@ 0x80
 8002520:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e052      	b.n	80025d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0216 	bic.w	r2, r2, #22
 800253c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695a      	ldr	r2, [r3, #20]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800254c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002552:	2b00      	cmp	r3, #0
 8002554:	d103      	bne.n	800255e <HAL_DMA_Abort+0x62>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800255a:	2b00      	cmp	r3, #0
 800255c:	d007      	beq.n	800256e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0208 	bic.w	r2, r2, #8
 800256c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0201 	bic.w	r2, r2, #1
 800257c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800257e:	e013      	b.n	80025a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002580:	f7ff fb62 	bl	8001c48 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b05      	cmp	r3, #5
 800258c:	d90c      	bls.n	80025a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2220      	movs	r2, #32
 8002592:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2203      	movs	r2, #3
 8002598:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e015      	b.n	80025d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1e4      	bne.n	8002580 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ba:	223f      	movs	r2, #63	@ 0x3f
 80025bc:	409a      	lsls	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d004      	beq.n	80025fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2280      	movs	r2, #128	@ 0x80
 80025f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e00c      	b.n	8002614 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2205      	movs	r2, #5
 80025fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0201 	bic.w	r2, r2, #1
 8002610:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800262c:	4b8e      	ldr	r3, [pc, #568]	@ (8002868 <HAL_DMA_IRQHandler+0x248>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a8e      	ldr	r2, [pc, #568]	@ (800286c <HAL_DMA_IRQHandler+0x24c>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	0a9b      	lsrs	r3, r3, #10
 8002638:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264a:	2208      	movs	r2, #8
 800264c:	409a      	lsls	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4013      	ands	r3, r2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d01a      	beq.n	800268c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d013      	beq.n	800268c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0204 	bic.w	r2, r2, #4
 8002672:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002678:	2208      	movs	r2, #8
 800267a:	409a      	lsls	r2, r3
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002684:	f043 0201 	orr.w	r2, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002690:	2201      	movs	r2, #1
 8002692:	409a      	lsls	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4013      	ands	r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d012      	beq.n	80026c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00b      	beq.n	80026c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ae:	2201      	movs	r2, #1
 80026b0:	409a      	lsls	r2, r3
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ba:	f043 0202 	orr.w	r2, r3, #2
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c6:	2204      	movs	r2, #4
 80026c8:	409a      	lsls	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4013      	ands	r3, r2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d012      	beq.n	80026f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00b      	beq.n	80026f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e4:	2204      	movs	r2, #4
 80026e6:	409a      	lsls	r2, r3
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f0:	f043 0204 	orr.w	r2, r3, #4
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fc:	2210      	movs	r2, #16
 80026fe:	409a      	lsls	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4013      	ands	r3, r2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d043      	beq.n	8002790 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d03c      	beq.n	8002790 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271a:	2210      	movs	r2, #16
 800271c:	409a      	lsls	r2, r3
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d018      	beq.n	8002762 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d108      	bne.n	8002750 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002742:	2b00      	cmp	r3, #0
 8002744:	d024      	beq.n	8002790 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	4798      	blx	r3
 800274e:	e01f      	b.n	8002790 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002754:	2b00      	cmp	r3, #0
 8002756:	d01b      	beq.n	8002790 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	4798      	blx	r3
 8002760:	e016      	b.n	8002790 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276c:	2b00      	cmp	r3, #0
 800276e:	d107      	bne.n	8002780 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0208 	bic.w	r2, r2, #8
 800277e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002794:	2220      	movs	r2, #32
 8002796:	409a      	lsls	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4013      	ands	r3, r2
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 808f 	beq.w	80028c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0310 	and.w	r3, r3, #16
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 8087 	beq.w	80028c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b6:	2220      	movs	r2, #32
 80027b8:	409a      	lsls	r2, r3
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b05      	cmp	r3, #5
 80027c8:	d136      	bne.n	8002838 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 0216 	bic.w	r2, r2, #22
 80027d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695a      	ldr	r2, [r3, #20]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d103      	bne.n	80027fa <HAL_DMA_IRQHandler+0x1da>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d007      	beq.n	800280a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0208 	bic.w	r2, r2, #8
 8002808:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800280e:	223f      	movs	r2, #63	@ 0x3f
 8002810:	409a      	lsls	r2, r3
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800282a:	2b00      	cmp	r3, #0
 800282c:	d07e      	beq.n	800292c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	4798      	blx	r3
        }
        return;
 8002836:	e079      	b.n	800292c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d01d      	beq.n	8002882 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10d      	bne.n	8002870 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002858:	2b00      	cmp	r3, #0
 800285a:	d031      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	4798      	blx	r3
 8002864:	e02c      	b.n	80028c0 <HAL_DMA_IRQHandler+0x2a0>
 8002866:	bf00      	nop
 8002868:	20000000 	.word	0x20000000
 800286c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002874:	2b00      	cmp	r3, #0
 8002876:	d023      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	4798      	blx	r3
 8002880:	e01e      	b.n	80028c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10f      	bne.n	80028b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0210 	bic.w	r2, r2, #16
 800289e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d032      	beq.n	800292e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d022      	beq.n	800291a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2205      	movs	r2, #5
 80028d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0201 	bic.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	3301      	adds	r3, #1
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d307      	bcc.n	8002908 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f2      	bne.n	80028ec <HAL_DMA_IRQHandler+0x2cc>
 8002906:	e000      	b.n	800290a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002908:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800291e:	2b00      	cmp	r3, #0
 8002920:	d005      	beq.n	800292e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	4798      	blx	r3
 800292a:	e000      	b.n	800292e <HAL_DMA_IRQHandler+0x30e>
        return;
 800292c:	bf00      	nop
    }
  }
}
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002942:	b2db      	uxtb	r3, r3
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800295c:	4618      	mov	r0, r3
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002984:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b40      	cmp	r3, #64	@ 0x40
 8002994:	d108      	bne.n	80029a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029a6:	e007      	b.n	80029b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	60da      	str	r2, [r3, #12]
}
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	3b10      	subs	r3, #16
 80029d4:	4a13      	ldr	r2, [pc, #76]	@ (8002a24 <DMA_CalcBaseAndBitshift+0x60>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	091b      	lsrs	r3, r3, #4
 80029dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029de:	4a12      	ldr	r2, [pc, #72]	@ (8002a28 <DMA_CalcBaseAndBitshift+0x64>)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4413      	add	r3, r2
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d908      	bls.n	8002a04 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	4b0c      	ldr	r3, [pc, #48]	@ (8002a2c <DMA_CalcBaseAndBitshift+0x68>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	1d1a      	adds	r2, r3, #4
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a02:	e006      	b.n	8002a12 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4b08      	ldr	r3, [pc, #32]	@ (8002a2c <DMA_CalcBaseAndBitshift+0x68>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	aaaaaaab 	.word	0xaaaaaaab
 8002a28:	080193a8 	.word	0x080193a8
 8002a2c:	fffffc00 	.word	0xfffffc00

08002a30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d11f      	bne.n	8002a8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d856      	bhi.n	8002afe <DMA_CheckFifoParam+0xce>
 8002a50:	a201      	add	r2, pc, #4	@ (adr r2, 8002a58 <DMA_CheckFifoParam+0x28>)
 8002a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a56:	bf00      	nop
 8002a58:	08002a69 	.word	0x08002a69
 8002a5c:	08002a7b 	.word	0x08002a7b
 8002a60:	08002a69 	.word	0x08002a69
 8002a64:	08002aff 	.word	0x08002aff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d046      	beq.n	8002b02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a78:	e043      	b.n	8002b02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a82:	d140      	bne.n	8002b06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a88:	e03d      	b.n	8002b06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a92:	d121      	bne.n	8002ad8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b03      	cmp	r3, #3
 8002a98:	d837      	bhi.n	8002b0a <DMA_CheckFifoParam+0xda>
 8002a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8002aa0 <DMA_CheckFifoParam+0x70>)
 8002a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa0:	08002ab1 	.word	0x08002ab1
 8002aa4:	08002ab7 	.word	0x08002ab7
 8002aa8:	08002ab1 	.word	0x08002ab1
 8002aac:	08002ac9 	.word	0x08002ac9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab4:	e030      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d025      	beq.n	8002b0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac6:	e022      	b.n	8002b0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002acc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ad0:	d11f      	bne.n	8002b12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ad6:	e01c      	b.n	8002b12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d903      	bls.n	8002ae6 <DMA_CheckFifoParam+0xb6>
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d003      	beq.n	8002aec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ae4:	e018      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	73fb      	strb	r3, [r7, #15]
      break;
 8002aea:	e015      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00e      	beq.n	8002b16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	73fb      	strb	r3, [r7, #15]
      break;
 8002afc:	e00b      	b.n	8002b16 <DMA_CheckFifoParam+0xe6>
      break;
 8002afe:	bf00      	nop
 8002b00:	e00a      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      break;
 8002b02:	bf00      	nop
 8002b04:	e008      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      break;
 8002b06:	bf00      	nop
 8002b08:	e006      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      break;
 8002b0a:	bf00      	nop
 8002b0c:	e004      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      break;
 8002b0e:	bf00      	nop
 8002b10:	e002      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b12:	bf00      	nop
 8002b14:	e000      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      break;
 8002b16:	bf00      	nop
    }
  } 
  
  return status; 
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop

08002b28 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e086      	b.n	8002c48 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d106      	bne.n	8002b52 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f006 ff8f 	bl	8009a70 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b52:	4b3f      	ldr	r3, [pc, #252]	@ (8002c50 <HAL_ETH_Init+0x128>)
 8002b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b56:	4a3e      	ldr	r2, [pc, #248]	@ (8002c50 <HAL_ETH_Init+0x128>)
 8002b58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b5e:	4b3c      	ldr	r3, [pc, #240]	@ (8002c50 <HAL_ETH_Init+0x128>)
 8002b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b66:	60bb      	str	r3, [r7, #8]
 8002b68:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002b6a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c54 <HAL_ETH_Init+0x12c>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	4a39      	ldr	r2, [pc, #228]	@ (8002c54 <HAL_ETH_Init+0x12c>)
 8002b70:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002b74:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002b76:	4b37      	ldr	r3, [pc, #220]	@ (8002c54 <HAL_ETH_Init+0x12c>)
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	4935      	ldr	r1, [pc, #212]	@ (8002c54 <HAL_ETH_Init+0x12c>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002b84:	4b33      	ldr	r3, [pc, #204]	@ (8002c54 <HAL_ETH_Init+0x12c>)
 8002b86:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	f043 0301 	orr.w	r3, r3, #1
 8002b9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b9e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ba0:	f7ff f852 	bl	8001c48 <HAL_GetTick>
 8002ba4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002ba6:	e011      	b.n	8002bcc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002ba8:	f7ff f84e 	bl	8001c48 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002bb6:	d909      	bls.n	8002bcc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2204      	movs	r2, #4
 8002bbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	22e0      	movs	r2, #224	@ 0xe0
 8002bc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e03d      	b.n	8002c48 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1e4      	bne.n	8002ba8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 ff34 	bl	8003a4c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 ffdf 	bl	8003ba8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f001 f835 	bl	8003c5a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 ff9d 	bl	8003b38 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002c0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c58 <HAL_ETH_Init+0x130>)
 8002c1c:	430b      	orrs	r3, r1
 8002c1e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002c32:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2210      	movs	r2, #16
 8002c42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40023800 	.word	0x40023800
 8002c54:	40013800 	.word	0x40013800
 8002c58:	00020060 	.word	0x00020060

08002c5c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c6a:	2b10      	cmp	r3, #16
 8002c6c:	d15f      	bne.n	8002d2e <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2220      	movs	r2, #32
 8002c72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2204      	movs	r2, #4
 8002c80:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 fa2e 	bl	80030e4 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c90:	2001      	movs	r0, #1
 8002c92:	f7fe ffe5 	bl	8001c60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6812      	ldr	r2, [r2, #0]
 8002cac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002cb0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002cb4:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	f043 0302 	orr.w	r3, r3, #2
 8002cc8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ccc:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fd58 	bl	8003784 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0208 	orr.w	r2, r2, #8
 8002ce2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cec:	2001      	movs	r0, #1
 8002cee:	f7fe ffb7 	bl	8001c60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f042 0204 	orr.w	r2, r2, #4
 8002d08:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d12:	69d9      	ldr	r1, [r3, #28]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b07      	ldr	r3, [pc, #28]	@ (8002d38 <HAL_ETH_Start_IT+0xdc>)
 8002d1a:	430b      	orrs	r3, r1
 8002d1c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d20:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2240      	movs	r2, #64	@ 0x40
 8002d26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	e000      	b.n	8002d30 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
  }
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	0001a0c1 	.word	0x0001a0c1

08002d3c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d4a:	2b40      	cmp	r3, #64	@ 0x40
 8002d4c:	d16e      	bne.n	8002e2c <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d5e:	69d9      	ldr	r1, [r3, #28]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	4b34      	ldr	r3, [pc, #208]	@ (8002e38 <HAL_ETH_Stop_IT+0xfc>)
 8002d66:	400b      	ands	r3, r1
 8002d68:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d6c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6812      	ldr	r2, [r2, #0]
 8002d7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d80:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d84:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	f023 0302 	bic.w	r3, r3, #2
 8002d98:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d9c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0204 	bic.w	r2, r2, #4
 8002dac:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002db6:	2001      	movs	r0, #1
 8002db8:	f7fe ff52 	bl	8001c60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 fcdd 	bl	8003784 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0208 	bic.w	r2, r2, #8
 8002dd8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002de2:	2001      	movs	r0, #1
 8002de4:	f7fe ff3c 	bl	8001c60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	e00e      	b.n	8002e14 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	3212      	adds	r2, #18
 8002dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e00:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	3301      	adds	r3, #1
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	d9ed      	bls.n	8002df6 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2210      	movs	r2, #16
 8002e24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e000      	b.n	8002e2e <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
  }
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	fffe5f3e 	.word	0xfffe5f3e

08002e3c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d109      	bne.n	8002e62 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e54:	f043 0201 	orr.w	r2, r3, #1
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e07c      	b.n	8002f5c <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e68:	2b40      	cmp	r3, #64	@ 0x40
 8002e6a:	d176      	bne.n	8002f5a <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	68b9      	ldr	r1, [r7, #8]
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 ff61 	bl	8003d38 <ETH_Prepare_Tx_Descriptors>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d009      	beq.n	8002e90 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e82:	f043 0202 	orr.w	r2, r3, #2
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e065      	b.n	8002f5c <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e90:	f3bf 8f4f 	dsb	sy
}
 8002e94:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	3206      	adds	r2, #6
 8002e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea2:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	629a      	str	r2, [r3, #40]	@ 0x28
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d904      	bls.n	8002ec0 <HAL_ETH_Transmit+0x84>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eba:	1f1a      	subs	r2, r3, #4
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	3106      	adds	r1, #6
 8002ecc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ed0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ed4:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8002ed6:	f7fe feb7 	bl	8001c48 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002edc:	e037      	b.n	8002f4e <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d011      	beq.n	8002f14 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef6:	f043 0208 	orr.w	r2, r3, #8
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f08:	695a      	ldr	r2, [r3, #20]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e023      	b.n	8002f5c <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f1a:	d018      	beq.n	8002f4e <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f1c:	f7fe fe94 	bl	8001c48 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d302      	bcc.n	8002f32 <HAL_ETH_Transmit+0xf6>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10d      	bne.n	8002f4e <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f38:	f043 0204 	orr.w	r2, r3, #4
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8002f48:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e006      	b.n	8002f5c <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	dbc3      	blt.n	8002ede <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	e000      	b.n	8002f5c <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
  }
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d109      	bne.n	8002f90 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f82:	f043 0201 	orr.w	r2, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e0a4      	b.n	80030da <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f96:	2b40      	cmp	r3, #64	@ 0x40
 8002f98:	d001      	beq.n	8002f9e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e09d      	b.n	80030da <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	69fa      	ldr	r2, [r7, #28]
 8002fa8:	3212      	adds	r2, #18
 8002faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fae:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fb4:	f1c3 0304 	rsb	r3, r3, #4
 8002fb8:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002fba:	e066      	b.n	800308a <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d007      	beq.n	8002fd8 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	69da      	ldr	r2, [r3, #28]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	699a      	ldr	r2, [r3, #24]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d103      	bne.n	8002fec <HAL_ETH_ReadData+0x88>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d03c      	beq.n	8003066 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	0c1b      	lsrs	r3, r3, #16
 800300a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800300e:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8003024:	2301      	movs	r3, #1
 8003026:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003040:	461a      	mov	r2, r3
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	b29b      	uxth	r3, r3
 8003046:	f006 fee5 	bl	8009e14 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	441a      	add	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	2200      	movs	r2, #0
 8003064:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	3301      	adds	r3, #1
 800306a:	61fb      	str	r3, [r7, #28]
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	2b03      	cmp	r3, #3
 8003070:	d902      	bls.n	8003078 <HAL_ETH_ReadData+0x114>
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	3b04      	subs	r3, #4
 8003076:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69fa      	ldr	r2, [r7, #28]
 800307c:	3212      	adds	r2, #18
 800307e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003082:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	3301      	adds	r3, #1
 8003088:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800308e:	2b00      	cmp	r3, #0
 8003090:	db06      	blt.n	80030a0 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	429a      	cmp	r2, r3
 8003098:	d202      	bcs.n	80030a0 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 800309a:	7cfb      	ldrb	r3, [r7, #19]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d08d      	beq.n	8002fbc <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	441a      	add	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f815 	bl	80030e4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69fa      	ldr	r2, [r7, #28]
 80030be:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80030c0:	7cfb      	ldrb	r3, [r7, #19]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d108      	bne.n	80030d8 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80030d4:	2300      	movs	r3, #0
 80030d6:	e000      	b.n	80030da <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3720      	adds	r7, #32
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b088      	sub	sp, #32
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80030f0:	2301      	movs	r3, #1
 80030f2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030f8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69fa      	ldr	r2, [r7, #28]
 80030fe:	3212      	adds	r2, #18
 8003100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003104:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800310a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800310c:	e042      	b.n	8003194 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d112      	bne.n	800313c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003116:	f107 0308 	add.w	r3, r7, #8
 800311a:	4618      	mov	r0, r3
 800311c:	f006 fe4a 	bl	8009db4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d102      	bne.n	800312c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003126:	2300      	movs	r3, #0
 8003128:	74fb      	strb	r3, [r7, #19]
 800312a:	e007      	b.n	800313c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	461a      	mov	r2, r3
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	461a      	mov	r2, r3
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800313c:	7cfb      	ldrb	r3, [r7, #19]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d028      	beq.n	8003194 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695a      	ldr	r2, [r3, #20]
 800314e:	4b26      	ldr	r3, [pc, #152]	@ (80031e8 <ETH_UpdateDescriptor+0x104>)
 8003150:	4313      	orrs	r3, r2
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	6053      	str	r3, [r2, #4]
 8003156:	e005      	b.n	8003164 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	3301      	adds	r3, #1
 8003174:	61fb      	str	r3, [r7, #28]
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	2b03      	cmp	r3, #3
 800317a:	d902      	bls.n	8003182 <ETH_UpdateDescriptor+0x9e>
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	3b04      	subs	r3, #4
 8003180:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69fa      	ldr	r2, [r7, #28]
 8003186:	3212      	adds	r2, #18
 8003188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800318c:	617b      	str	r3, [r7, #20]
      desccount--;
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	3b01      	subs	r3, #1
 8003192:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <ETH_UpdateDescriptor+0xbc>
 800319a:	7cfb      	ldrb	r3, [r7, #19]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1b6      	bne.n	800310e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d01a      	beq.n	80031e0 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	3303      	adds	r3, #3
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80031b4:	f3bf 8f5f 	dmb	sy
}
 80031b8:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6919      	ldr	r1, [r3, #16]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	18ca      	adds	r2, r1, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031d2:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80031e0:	bf00      	nop
 80031e2:	3720      	adds	r7, #32
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	80004000 	.word	0x80004000

080031ec <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031fa:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8003214:	4b4b      	ldr	r3, [pc, #300]	@ (8003344 <HAL_ETH_IRQHandler+0x158>)
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00e      	beq.n	8003242 <HAL_ETH_IRQHandler+0x56>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800322a:	2b00      	cmp	r3, #0
 800322c:	d009      	beq.n	8003242 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003236:	461a      	mov	r2, r3
 8003238:	4b43      	ldr	r3, [pc, #268]	@ (8003348 <HAL_ETH_IRQHandler+0x15c>)
 800323a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f891 	bl	8003364 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00f      	beq.n	800326c <HAL_ETH_IRQHandler+0x80>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00a      	beq.n	800326c <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800325e:	461a      	mov	r2, r3
 8003260:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8003264:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f872 	bl	8003350 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d042      	beq.n	80032fc <HAL_ETH_IRQHandler+0x110>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d03d      	beq.n	80032fc <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003286:	f043 0208 	orr.w	r2, r3, #8
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d01a      	beq.n	80032d0 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032a2:	695a      	ldr	r2, [r3, #20]
 80032a4:	4b29      	ldr	r3, [pc, #164]	@ (800334c <HAL_ETH_IRQHandler+0x160>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 80032c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80032c4:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	22e0      	movs	r2, #224	@ 0xe0
 80032ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80032ce:	e012      	b.n	80032f6 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	f248 6380 	movw	r3, #34432	@ 0x8680
 80032de:	4013      	ands	r3, r2
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032ee:	461a      	mov	r2, r3
 80032f0:	f248 6380 	movw	r3, #34432	@ 0x8680
 80032f4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f83e 	bl	8003378 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00e      	beq.n	8003324 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f838 	bl	800338c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d006      	beq.n	800333c <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800332e:	4b05      	ldr	r3, [pc, #20]	@ (8003344 <HAL_ETH_IRQHandler+0x158>)
 8003330:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003334:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f832 	bl	80033a0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800333c:	bf00      	nop
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40013c00 	.word	0x40013c00
 8003348:	00010040 	.word	0x00010040
 800334c:	007e2000 	.word	0x007e2000

08003350 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
 80033c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f003 031c 	and.w	r3, r3, #28
 80033d0:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	02db      	lsls	r3, r3, #11
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	019b      	lsls	r3, r3, #6
 80033e2:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f023 0302 	bic.w	r3, r3, #2
 80033f2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003404:	f7fe fc20 	bl	8001c48 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800340a:	e00d      	b.n	8003428 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800340c:	f7fe fc1c 	bl	8001c48 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800341a:	d301      	bcc.n	8003420 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e010      	b.n	8003442 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1ec      	bne.n	800340c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	b29b      	uxth	r3, r3
 800343a:	461a      	mov	r2, r3
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3718      	adds	r7, #24
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b086      	sub	sp, #24
 800344e:	af00      	add	r7, sp, #0
 8003450:	60f8      	str	r0, [r7, #12]
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f003 031c 	and.w	r3, r3, #28
 8003466:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	02db      	lsls	r3, r3, #11
 800346c:	b29b      	uxth	r3, r3
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	4313      	orrs	r3, r2
 8003472:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	019b      	lsls	r3, r3, #6
 8003478:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	4313      	orrs	r3, r2
 8003480:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f043 0302 	orr.w	r3, r3, #2
 8003488:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034a4:	f7fe fbd0 	bl	8001c48 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80034aa:	e00d      	b.n	80034c8 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80034ac:	f7fe fbcc 	bl	8001c48 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034ba:	d301      	bcc.n	80034c0 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e009      	b.n	80034d4 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1ec      	bne.n	80034ac <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0e6      	b.n	80036be <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0310 	and.w	r3, r3, #16
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	bf14      	ite	ne
 80034fe:	2301      	movne	r3, #1
 8003500:	2300      	moveq	r3, #0
 8003502:	b2db      	uxtb	r3, r3
 8003504:	461a      	mov	r2, r3
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003524:	2b00      	cmp	r3, #0
 8003526:	bf0c      	ite	eq
 8003528:	2301      	moveq	r3, #1
 800352a:	2300      	movne	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	461a      	mov	r2, r3
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8003540:	2b00      	cmp	r3, #0
 8003542:	bf14      	ite	ne
 8003544:	2301      	movne	r3, #1
 8003546:	2300      	moveq	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800355a:	2b00      	cmp	r3, #0
 800355c:	bf0c      	ite	eq
 800355e:	2301      	moveq	r3, #1
 8003560:	2300      	movne	r3, #0
 8003562:	b2db      	uxtb	r3, r3
 8003564:	461a      	mov	r2, r3
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003574:	2b00      	cmp	r3, #0
 8003576:	bf14      	ite	ne
 8003578:	2301      	movne	r3, #1
 800357a:	2300      	moveq	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	461a      	mov	r2, r3
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	bf0c      	ite	eq
 80035ae:	2301      	moveq	r3, #1
 80035b0:	2300      	movne	r3, #0
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	461a      	mov	r2, r3
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bf0c      	ite	eq
 80035c8:	2301      	moveq	r3, #1
 80035ca:	2300      	movne	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	461a      	mov	r2, r3
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035de:	2b00      	cmp	r3, #0
 80035e0:	bf14      	ite	ne
 80035e2:	2301      	movne	r3, #1
 80035e4:	2300      	moveq	r3, #0
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	461a      	mov	r2, r3
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003606:	2b00      	cmp	r3, #0
 8003608:	bf14      	ite	ne
 800360a:	2301      	movne	r3, #1
 800360c:	2300      	moveq	r3, #0
 800360e:	b2db      	uxtb	r3, r3
 8003610:	461a      	mov	r2, r3
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	bf14      	ite	ne
 8003624:	2301      	movne	r3, #1
 8003626:	2300      	moveq	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	461a      	mov	r2, r3
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	bf14      	ite	ne
 800363e:	2301      	movne	r3, #1
 8003640:	2300      	moveq	r3, #0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	461a      	mov	r2, r3
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003656:	2b00      	cmp	r3, #0
 8003658:	bf0c      	ite	eq
 800365a:	2301      	moveq	r3, #1
 800365c:	2300      	movne	r3, #0
 800365e:	b2db      	uxtb	r3, r3
 8003660:	461a      	mov	r2, r3
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	0c1b      	lsrs	r3, r3, #16
 800367e:	b29a      	uxth	r2, r3
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	2b00      	cmp	r3, #0
 8003690:	bf14      	ite	ne
 8003692:	2301      	movne	r3, #1
 8003694:	2300      	moveq	r3, #0
 8003696:	b2db      	uxtb	r3, r3
 8003698:	461a      	mov	r2, r3
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	bf14      	ite	ne
 80036ae:	2301      	movne	r3, #1
 80036b0:	2300      	moveq	r3, #0
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b082      	sub	sp, #8
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
 80036d2:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e00b      	b.n	80036f6 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036e4:	2b10      	cmp	r3, #16
 80036e6:	d105      	bne.n	80036f4 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80036e8:	6839      	ldr	r1, [r7, #0]
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f870 	bl	80037d0 <ETH_SetMACConfig>

    return HAL_OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	e000      	b.n	80036f6 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
  }
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f023 031c 	bic.w	r3, r3, #28
 8003716:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003718:	f003 fcea 	bl	80070f0 <HAL_RCC_GetHCLKFreq>
 800371c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	4a14      	ldr	r2, [pc, #80]	@ (8003774 <HAL_ETH_SetMDIOClockRange+0x74>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d804      	bhi.n	8003730 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f043 0308 	orr.w	r3, r3, #8
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	e019      	b.n	8003764 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	4a11      	ldr	r2, [pc, #68]	@ (8003778 <HAL_ETH_SetMDIOClockRange+0x78>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d204      	bcs.n	8003742 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f043 030c 	orr.w	r3, r3, #12
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	e010      	b.n	8003764 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	4a0d      	ldr	r2, [pc, #52]	@ (800377c <HAL_ETH_SetMDIOClockRange+0x7c>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d90c      	bls.n	8003764 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	4a0c      	ldr	r2, [pc, #48]	@ (8003780 <HAL_ETH_SetMDIOClockRange+0x80>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d804      	bhi.n	800375c <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f043 0304 	orr.w	r3, r3, #4
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	e003      	b.n	8003764 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f043 0310 	orr.w	r3, r3, #16
 8003762:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	611a      	str	r2, [r3, #16]
}
 800376c:	bf00      	nop
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	02160ebf 	.word	0x02160ebf
 8003778:	03938700 	.word	0x03938700
 800377c:	05f5e0ff 	.word	0x05f5e0ff
 8003780:	08f0d17f 	.word	0x08f0d17f

08003784 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6812      	ldr	r2, [r2, #0]
 800379e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80037a6:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80037b4:	2001      	movs	r0, #1
 80037b6:	f7fe fa53 	bl	8001c60 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80037c4:	6193      	str	r3, [r2, #24]
}
 80037c6:	bf00      	nop
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	4b53      	ldr	r3, [pc, #332]	@ (8003934 <ETH_SetMACConfig+0x164>)
 80037e6:	4013      	ands	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	7b9b      	ldrb	r3, [r3, #14]
 80037ee:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	7c12      	ldrb	r2, [r2, #16]
 80037f4:	2a00      	cmp	r2, #0
 80037f6:	d102      	bne.n	80037fe <ETH_SetMACConfig+0x2e>
 80037f8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80037fc:	e000      	b.n	8003800 <ETH_SetMACConfig+0x30>
 80037fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003800:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	7c52      	ldrb	r2, [r2, #17]
 8003806:	2a00      	cmp	r2, #0
 8003808:	d102      	bne.n	8003810 <ETH_SetMACConfig+0x40>
 800380a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800380e:	e000      	b.n	8003812 <ETH_SetMACConfig+0x42>
 8003810:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003812:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003818:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	7fdb      	ldrb	r3, [r3, #31]
 800381e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003820:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003826:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	7f92      	ldrb	r2, [r2, #30]
 800382c:	2a00      	cmp	r2, #0
 800382e:	d102      	bne.n	8003836 <ETH_SetMACConfig+0x66>
 8003830:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003834:	e000      	b.n	8003838 <ETH_SetMACConfig+0x68>
 8003836:	2200      	movs	r2, #0
                        macconf->Speed |
 8003838:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	7f1b      	ldrb	r3, [r3, #28]
 800383e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003840:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003846:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	791b      	ldrb	r3, [r3, #4]
 800384c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800384e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003856:	2a00      	cmp	r2, #0
 8003858:	d102      	bne.n	8003860 <ETH_SetMACConfig+0x90>
 800385a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800385e:	e000      	b.n	8003862 <ETH_SetMACConfig+0x92>
 8003860:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003862:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	7bdb      	ldrb	r3, [r3, #15]
 8003868:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800386a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003870:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003878:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800387a:	4313      	orrs	r3, r2
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003892:	2001      	movs	r0, #1
 8003894:	f7fe f9e4 	bl	8001c60 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80038ae:	4013      	ands	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038b6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80038be:	2a00      	cmp	r2, #0
 80038c0:	d101      	bne.n	80038c6 <ETH_SetMACConfig+0xf6>
 80038c2:	2280      	movs	r2, #128	@ 0x80
 80038c4:	e000      	b.n	80038c8 <ETH_SetMACConfig+0xf8>
 80038c6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80038c8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80038ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80038d6:	2a01      	cmp	r2, #1
 80038d8:	d101      	bne.n	80038de <ETH_SetMACConfig+0x10e>
 80038da:	2208      	movs	r2, #8
 80038dc:	e000      	b.n	80038e0 <ETH_SetMACConfig+0x110>
 80038de:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80038e0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80038e8:	2a01      	cmp	r2, #1
 80038ea:	d101      	bne.n	80038f0 <ETH_SetMACConfig+0x120>
 80038ec:	2204      	movs	r2, #4
 80038ee:	e000      	b.n	80038f2 <ETH_SetMACConfig+0x122>
 80038f0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80038f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80038fa:	2a01      	cmp	r2, #1
 80038fc:	d101      	bne.n	8003902 <ETH_SetMACConfig+0x132>
 80038fe:	2202      	movs	r2, #2
 8003900:	e000      	b.n	8003904 <ETH_SetMACConfig+0x134>
 8003902:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003904:	4313      	orrs	r3, r2
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	4313      	orrs	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800391c:	2001      	movs	r0, #1
 800391e:	f7fe f99f 	bl	8001c60 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	619a      	str	r2, [r3, #24]
}
 800392a:	bf00      	nop
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	fd20810f 	.word	0xfd20810f

08003938 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	4b3d      	ldr	r3, [pc, #244]	@ (8003a48 <ETH_SetDMAConfig+0x110>)
 8003952:	4013      	ands	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	7b1b      	ldrb	r3, [r3, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d102      	bne.n	8003964 <ETH_SetDMAConfig+0x2c>
 800395e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003962:	e000      	b.n	8003966 <ETH_SetDMAConfig+0x2e>
 8003964:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	7b5b      	ldrb	r3, [r3, #13]
 800396a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800396c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	7f52      	ldrb	r2, [r2, #29]
 8003972:	2a00      	cmp	r2, #0
 8003974:	d102      	bne.n	800397c <ETH_SetDMAConfig+0x44>
 8003976:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800397a:	e000      	b.n	800397e <ETH_SetDMAConfig+0x46>
 800397c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800397e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	7b9b      	ldrb	r3, [r3, #14]
 8003984:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003986:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800398c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	7f1b      	ldrb	r3, [r3, #28]
 8003992:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003994:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	7f9b      	ldrb	r3, [r3, #30]
 800399a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800399c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80039a2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80039aa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80039ac:	4313      	orrs	r3, r2
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039bc:	461a      	mov	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80039ce:	2001      	movs	r0, #1
 80039d0:	f7fe f946 	bl	8001c60 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039dc:	461a      	mov	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	791b      	ldrb	r3, [r3, #4]
 80039e6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80039ec:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80039f2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80039f8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a00:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003a02:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a08:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003a0a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003a10:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6812      	ldr	r2, [r2, #0]
 8003a16:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a1e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	f7fe f917 	bl	8001c60 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6013      	str	r3, [r2, #0]
}
 8003a40:	bf00      	nop
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	f8de3f23 	.word	0xf8de3f23

08003a4c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b0a6      	sub	sp, #152	@ 0x98
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003a54:	2301      	movs	r3, #1
 8003a56:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003a60:	2300      	movs	r3, #0
 8003a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003a64:	2300      	movs	r3, #0
 8003a66:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003a70:	2300      	movs	r3, #0
 8003a72:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003a76:	2301      	movs	r3, #1
 8003a78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003a82:	2300      	movs	r3, #0
 8003a84:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003a92:	2300      	movs	r3, #0
 8003a94:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003ab4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003aba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003ac6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003aca:	4619      	mov	r1, r3
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff fe7f 	bl	80037d0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003aee:	2300      	movs	r3, #0
 8003af0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003af4:	2300      	movs	r3, #0
 8003af6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003af8:	2301      	movs	r3, #1
 8003afa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003afe:	2301      	movs	r3, #1
 8003b00:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003b02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b06:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003b08:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003b0c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003b0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b12:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003b14:	2301      	movs	r3, #1
 8003b16:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003b22:	f107 0308 	add.w	r3, r7, #8
 8003b26:	4619      	mov	r1, r3
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff ff05 	bl	8003938 <ETH_SetDMAConfig>
}
 8003b2e:	bf00      	nop
 8003b30:	3798      	adds	r7, #152	@ 0x98
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b087      	sub	sp, #28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3305      	adds	r3, #5
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	021b      	lsls	r3, r3, #8
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	3204      	adds	r2, #4
 8003b50:	7812      	ldrb	r2, [r2, #0]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	4b11      	ldr	r3, [pc, #68]	@ (8003ba0 <ETH_MACAddressConfig+0x68>)
 8003b5a:	4413      	add	r3, r2
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3303      	adds	r3, #3
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	061a      	lsls	r2, r3, #24
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3302      	adds	r3, #2
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	041b      	lsls	r3, r3, #16
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3301      	adds	r3, #1
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	021b      	lsls	r3, r3, #8
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	7812      	ldrb	r2, [r2, #0]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	4b06      	ldr	r3, [pc, #24]	@ (8003ba4 <ETH_MACAddressConfig+0x6c>)
 8003b8a:	4413      	add	r3, r2
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	6013      	str	r3, [r2, #0]
}
 8003b92:	bf00      	nop
 8003b94:	371c      	adds	r7, #28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40028040 	.word	0x40028040
 8003ba4:	40028044 	.word	0x40028044

08003ba8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	60fb      	str	r3, [r7, #12]
 8003bb4:	e03e      	b.n	8003c34 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68d9      	ldr	r1, [r3, #12]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	440b      	add	r3, r1
 8003bc6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003be0:	68b9      	ldr	r1, [r7, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	3206      	adds	r2, #6
 8003be8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d80c      	bhi.n	8003c18 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68d9      	ldr	r1, [r3, #12]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1c5a      	adds	r2, r3, #1
 8003c06:	4613      	mov	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	440b      	add	r3, r1
 8003c10:	461a      	mov	r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	60da      	str	r2, [r3, #12]
 8003c16:	e004      	b.n	8003c22 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	3301      	adds	r3, #1
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2b03      	cmp	r3, #3
 8003c38:	d9bd      	bls.n	8003bb6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c4c:	611a      	str	r2, [r3, #16]
}
 8003c4e:	bf00      	nop
 8003c50:	3714      	adds	r7, #20
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b085      	sub	sp, #20
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	e048      	b.n	8003cfa <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6919      	ldr	r1, [r3, #16]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	440b      	add	r3, r1
 8003c78:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	2200      	movs	r2, #0
 8003c84:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2200      	movs	r2, #0
 8003c96:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003ca4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	3212      	adds	r2, #18
 8003cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d80c      	bhi.n	8003cea <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6919      	ldr	r1, [r3, #16]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	4613      	mov	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	440b      	add	r3, r1
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	60da      	str	r2, [r3, #12]
 8003ce8:	e004      	b.n	8003cf4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2b03      	cmp	r3, #3
 8003cfe:	d9b3      	bls.n	8003c68 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691a      	ldr	r2, [r3, #16]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d2a:	60da      	str	r2, [r3, #12]
}
 8003d2c:	bf00      	nop
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b091      	sub	sp, #68	@ 0x44
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	3318      	adds	r3, #24
 8003d48:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003d56:	2300      	movs	r3, #0
 8003d58:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d62:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d7a:	d007      	beq.n	8003d8c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003d7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d80:	3304      	adds	r3, #4
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e111      	b.n	8003fb4 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8003d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d92:	3301      	adds	r3, #1
 8003d94:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	4b86      	ldr	r3, [pc, #536]	@ (8003fc0 <ETH_Prepare_Tx_Descriptors+0x288>)
 8003da6:	4013      	ands	r3, r2
 8003da8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003daa:	6852      	ldr	r2, [r2, #4]
 8003dac:	431a      	orrs	r2, r3
 8003dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d008      	beq.n	8003dd0 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dce:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0320 	and.w	r3, r3, #32
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d008      	beq.n	8003dee <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	431a      	orrs	r2, r3
 8003dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dec:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d005      	beq.n	8003e06 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e04:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e10:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003e12:	e082      	b.n	8003f1a <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1e:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d006      	beq.n	8003e34 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	e005      	b.n	8003e40 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3e:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003e40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e42:	3301      	adds	r3, #1
 8003e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e48:	2b03      	cmp	r3, #3
 8003e4a:	d902      	bls.n	8003e52 <ETH_Prepare_Tx_Descriptors+0x11a>
 8003e4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e4e:	3b04      	subs	r3, #4
 8003e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e54:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e5a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e68:	d007      	beq.n	8003e7a <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003e6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e6e:	3304      	adds	r3, #4
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d029      	beq.n	8003ece <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8003e7a:	6a3b      	ldr	r3, [r7, #32]
 8003e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e86:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003e88:	2300      	movs	r3, #0
 8003e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e8c:	e019      	b.n	8003ec2 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8003e8e:	f3bf 8f5f 	dmb	sy
}
 8003e92:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9e:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003ea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d902      	bls.n	8003eb2 <ETH_Prepare_Tx_Descriptors+0x17a>
 8003eac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eae:	3b04      	subs	r3, #4
 8003eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eba:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ec2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d3e1      	bcc.n	8003e8e <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8003eca:	2302      	movs	r3, #2
 8003ecc:	e072      	b.n	8003fb4 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed8:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8003eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003edc:	3301      	adds	r3, #1
 8003ede:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eee:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	4b32      	ldr	r3, [pc, #200]	@ (8003fc0 <ETH_Prepare_Tx_Descriptors+0x288>)
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003efa:	6852      	ldr	r2, [r2, #4]
 8003efc:	431a      	orrs	r2, r3
 8003efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f00:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f04:	3301      	adds	r3, #1
 8003f06:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003f08:	f3bf 8f5f 	dmb	sy
}
 8003f0c:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f18:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f47f af78 	bne.w	8003e14 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d006      	beq.n	8003f38 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	e005      	b.n	8003f44 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f42:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f4e:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f52:	6a3a      	ldr	r2, [r7, #32]
 8003f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f58:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003f5a:	f3bf 8f5f 	dmb	sy
}
 8003f5e:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f6a:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f74:	3304      	adds	r3, #4
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	440b      	add	r3, r1
 8003f7a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f80:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f82:	f3ef 8310 	mrs	r3, PRIMASK
 8003f86:	613b      	str	r3, [r7, #16]
  return(result);
 8003f88:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003f8a:	61fb      	str	r3, [r7, #28]
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f383 8810 	msr	PRIMASK, r3
}
 8003f96:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f9e:	4413      	add	r3, r2
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa4:	629a      	str	r2, [r3, #40]	@ 0x28
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	f383 8810 	msr	PRIMASK, r3
}
 8003fb0:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3744      	adds	r7, #68	@ 0x44
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	ffffe000 	.word	0xffffe000

08003fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b089      	sub	sp, #36	@ 0x24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	e175      	b.n	80042d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	f040 8164 	bne.w	80042ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	2b01      	cmp	r3, #1
 800400c:	d005      	beq.n	800401a <HAL_GPIO_Init+0x56>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d130      	bne.n	800407c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	2203      	movs	r2, #3
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	43db      	mvns	r3, r3
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	4013      	ands	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	4313      	orrs	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004050:	2201      	movs	r2, #1
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	43db      	mvns	r3, r3
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	4013      	ands	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	091b      	lsrs	r3, r3, #4
 8004066:	f003 0201 	and.w	r2, r3, #1
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	4313      	orrs	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f003 0303 	and.w	r3, r3, #3
 8004084:	2b03      	cmp	r3, #3
 8004086:	d017      	beq.n	80040b8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	2203      	movs	r2, #3
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	43db      	mvns	r3, r3
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	4013      	ands	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d123      	bne.n	800410c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	08da      	lsrs	r2, r3, #3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3208      	adds	r2, #8
 80040cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	220f      	movs	r2, #15
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	43db      	mvns	r3, r3
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	4013      	ands	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	08da      	lsrs	r2, r3, #3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3208      	adds	r2, #8
 8004106:	69b9      	ldr	r1, [r7, #24]
 8004108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	2203      	movs	r2, #3
 8004118:	fa02 f303 	lsl.w	r3, r2, r3
 800411c:	43db      	mvns	r3, r3
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	4013      	ands	r3, r2
 8004122:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f003 0203 	and.w	r2, r3, #3
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	fa02 f303 	lsl.w	r3, r2, r3
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	4313      	orrs	r3, r2
 8004138:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 80be 	beq.w	80042ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800414e:	4b66      	ldr	r3, [pc, #408]	@ (80042e8 <HAL_GPIO_Init+0x324>)
 8004150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004152:	4a65      	ldr	r2, [pc, #404]	@ (80042e8 <HAL_GPIO_Init+0x324>)
 8004154:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004158:	6453      	str	r3, [r2, #68]	@ 0x44
 800415a:	4b63      	ldr	r3, [pc, #396]	@ (80042e8 <HAL_GPIO_Init+0x324>)
 800415c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800415e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004166:	4a61      	ldr	r2, [pc, #388]	@ (80042ec <HAL_GPIO_Init+0x328>)
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	089b      	lsrs	r3, r3, #2
 800416c:	3302      	adds	r3, #2
 800416e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004172:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	220f      	movs	r2, #15
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	43db      	mvns	r3, r3
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	4013      	ands	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a58      	ldr	r2, [pc, #352]	@ (80042f0 <HAL_GPIO_Init+0x32c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d037      	beq.n	8004202 <HAL_GPIO_Init+0x23e>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a57      	ldr	r2, [pc, #348]	@ (80042f4 <HAL_GPIO_Init+0x330>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d031      	beq.n	80041fe <HAL_GPIO_Init+0x23a>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a56      	ldr	r2, [pc, #344]	@ (80042f8 <HAL_GPIO_Init+0x334>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d02b      	beq.n	80041fa <HAL_GPIO_Init+0x236>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a55      	ldr	r2, [pc, #340]	@ (80042fc <HAL_GPIO_Init+0x338>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d025      	beq.n	80041f6 <HAL_GPIO_Init+0x232>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a54      	ldr	r2, [pc, #336]	@ (8004300 <HAL_GPIO_Init+0x33c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d01f      	beq.n	80041f2 <HAL_GPIO_Init+0x22e>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a53      	ldr	r2, [pc, #332]	@ (8004304 <HAL_GPIO_Init+0x340>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d019      	beq.n	80041ee <HAL_GPIO_Init+0x22a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a52      	ldr	r2, [pc, #328]	@ (8004308 <HAL_GPIO_Init+0x344>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d013      	beq.n	80041ea <HAL_GPIO_Init+0x226>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a51      	ldr	r2, [pc, #324]	@ (800430c <HAL_GPIO_Init+0x348>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d00d      	beq.n	80041e6 <HAL_GPIO_Init+0x222>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a50      	ldr	r2, [pc, #320]	@ (8004310 <HAL_GPIO_Init+0x34c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d007      	beq.n	80041e2 <HAL_GPIO_Init+0x21e>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a4f      	ldr	r2, [pc, #316]	@ (8004314 <HAL_GPIO_Init+0x350>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d101      	bne.n	80041de <HAL_GPIO_Init+0x21a>
 80041da:	2309      	movs	r3, #9
 80041dc:	e012      	b.n	8004204 <HAL_GPIO_Init+0x240>
 80041de:	230a      	movs	r3, #10
 80041e0:	e010      	b.n	8004204 <HAL_GPIO_Init+0x240>
 80041e2:	2308      	movs	r3, #8
 80041e4:	e00e      	b.n	8004204 <HAL_GPIO_Init+0x240>
 80041e6:	2307      	movs	r3, #7
 80041e8:	e00c      	b.n	8004204 <HAL_GPIO_Init+0x240>
 80041ea:	2306      	movs	r3, #6
 80041ec:	e00a      	b.n	8004204 <HAL_GPIO_Init+0x240>
 80041ee:	2305      	movs	r3, #5
 80041f0:	e008      	b.n	8004204 <HAL_GPIO_Init+0x240>
 80041f2:	2304      	movs	r3, #4
 80041f4:	e006      	b.n	8004204 <HAL_GPIO_Init+0x240>
 80041f6:	2303      	movs	r3, #3
 80041f8:	e004      	b.n	8004204 <HAL_GPIO_Init+0x240>
 80041fa:	2302      	movs	r3, #2
 80041fc:	e002      	b.n	8004204 <HAL_GPIO_Init+0x240>
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <HAL_GPIO_Init+0x240>
 8004202:	2300      	movs	r3, #0
 8004204:	69fa      	ldr	r2, [r7, #28]
 8004206:	f002 0203 	and.w	r2, r2, #3
 800420a:	0092      	lsls	r2, r2, #2
 800420c:	4093      	lsls	r3, r2
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	4313      	orrs	r3, r2
 8004212:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004214:	4935      	ldr	r1, [pc, #212]	@ (80042ec <HAL_GPIO_Init+0x328>)
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	089b      	lsrs	r3, r3, #2
 800421a:	3302      	adds	r3, #2
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004222:	4b3d      	ldr	r3, [pc, #244]	@ (8004318 <HAL_GPIO_Init+0x354>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	43db      	mvns	r3, r3
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	4013      	ands	r3, r2
 8004230:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004246:	4a34      	ldr	r2, [pc, #208]	@ (8004318 <HAL_GPIO_Init+0x354>)
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800424c:	4b32      	ldr	r3, [pc, #200]	@ (8004318 <HAL_GPIO_Init+0x354>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	43db      	mvns	r3, r3
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	4013      	ands	r3, r2
 800425a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	4313      	orrs	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004270:	4a29      	ldr	r2, [pc, #164]	@ (8004318 <HAL_GPIO_Init+0x354>)
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004276:	4b28      	ldr	r3, [pc, #160]	@ (8004318 <HAL_GPIO_Init+0x354>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	43db      	mvns	r3, r3
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	4013      	ands	r3, r2
 8004284:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	4313      	orrs	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800429a:	4a1f      	ldr	r2, [pc, #124]	@ (8004318 <HAL_GPIO_Init+0x354>)
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004318 <HAL_GPIO_Init+0x354>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	43db      	mvns	r3, r3
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	4013      	ands	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042c4:	4a14      	ldr	r2, [pc, #80]	@ (8004318 <HAL_GPIO_Init+0x354>)
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	3301      	adds	r3, #1
 80042ce:	61fb      	str	r3, [r7, #28]
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	2b0f      	cmp	r3, #15
 80042d4:	f67f ae86 	bls.w	8003fe4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80042d8:	bf00      	nop
 80042da:	bf00      	nop
 80042dc:	3724      	adds	r7, #36	@ 0x24
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	40023800 	.word	0x40023800
 80042ec:	40013800 	.word	0x40013800
 80042f0:	40020000 	.word	0x40020000
 80042f4:	40020400 	.word	0x40020400
 80042f8:	40020800 	.word	0x40020800
 80042fc:	40020c00 	.word	0x40020c00
 8004300:	40021000 	.word	0x40021000
 8004304:	40021400 	.word	0x40021400
 8004308:	40021800 	.word	0x40021800
 800430c:	40021c00 	.word	0x40021c00
 8004310:	40022000 	.word	0x40022000
 8004314:	40022400 	.word	0x40022400
 8004318:	40013c00 	.word	0x40013c00

0800431c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e08b      	b.n	8004446 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d106      	bne.n	8004348 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7fc fad2 	bl	80008ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2224      	movs	r2, #36	@ 0x24
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0201 	bic.w	r2, r2, #1
 800435e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800436c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800437c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d107      	bne.n	8004396 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004392:	609a      	str	r2, [r3, #8]
 8004394:	e006      	b.n	80043a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80043a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d108      	bne.n	80043be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043ba:	605a      	str	r2, [r3, #4]
 80043bc:	e007      	b.n	80043ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6859      	ldr	r1, [r3, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004450 <HAL_I2C_Init+0x134>)
 80043da:	430b      	orrs	r3, r1
 80043dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691a      	ldr	r2, [r3, #16]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	69d9      	ldr	r1, [r3, #28]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a1a      	ldr	r2, [r3, #32]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0201 	orr.w	r2, r2, #1
 8004426:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2220      	movs	r2, #32
 8004432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	02008000 	.word	0x02008000

08004454 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08a      	sub	sp, #40	@ 0x28
 8004458:	af02      	add	r7, sp, #8
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	607a      	str	r2, [r7, #4]
 800445e:	461a      	mov	r2, r3
 8004460:	460b      	mov	r3, r1
 8004462:	817b      	strh	r3, [r7, #10]
 8004464:	4613      	mov	r3, r2
 8004466:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8004468:	2300      	movs	r3, #0
 800446a:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b20      	cmp	r3, #32
 8004476:	f040 80ef 	bne.w	8004658 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004484:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004488:	d101      	bne.n	800448e <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800448a:	2302      	movs	r3, #2
 800448c:	e0e5      	b.n	800465a <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <HAL_I2C_Master_Transmit_DMA+0x48>
 8004498:	2302      	movs	r3, #2
 800449a:	e0de      	b.n	800465a <HAL_I2C_Master_Transmit_DMA+0x206>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2221      	movs	r2, #33	@ 0x21
 80044a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2210      	movs	r2, #16
 80044b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	893a      	ldrh	r2, [r7, #8]
 80044c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4a66      	ldr	r2, [pc, #408]	@ (8004664 <HAL_I2C_Master_Transmit_DMA+0x210>)
 80044ca:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4a66      	ldr	r2, [pc, #408]	@ (8004668 <HAL_I2C_Master_Transmit_DMA+0x214>)
 80044d0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	2bff      	cmp	r3, #255	@ 0xff
 80044da:	d906      	bls.n	80044ea <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	22ff      	movs	r2, #255	@ 0xff
 80044e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80044e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044e6:	61fb      	str	r3, [r7, #28]
 80044e8:	e007      	b.n	80044fa <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80044f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044f8:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d01a      	beq.n	8004538 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004506:	781a      	ldrb	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800451c:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004522:	b29b      	uxth	r3, r3
 8004524:	3b01      	subs	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004530:	3b01      	subs	r3, #1
 8004532:	b29a      	uxth	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800453c:	2b00      	cmp	r3, #0
 800453e:	d074      	beq.n	800462a <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004544:	2b00      	cmp	r3, #0
 8004546:	d022      	beq.n	800458e <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800454c:	4a47      	ldr	r2, [pc, #284]	@ (800466c <HAL_I2C_Master_Transmit_DMA+0x218>)
 800454e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004554:	4a46      	ldr	r2, [pc, #280]	@ (8004670 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8004556:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800455c:	2200      	movs	r2, #0
 800455e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004564:	2200      	movs	r2, #0
 8004566:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004570:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004578:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800457e:	f7fd ff5d 	bl	800243c <HAL_DMA_Start_IT>
 8004582:	4603      	mov	r3, r0
 8004584:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004586:	7dfb      	ldrb	r3, [r7, #23]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d13a      	bne.n	8004602 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800458c:	e013      	b.n	80045b6 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2220      	movs	r2, #32
 8004592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e051      	b.n	800465a <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	3301      	adds	r3, #1
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	8979      	ldrh	r1, [r7, #10]
 80045c2:	4b2c      	ldr	r3, [pc, #176]	@ (8004674 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f001 ff3f 	bl	800644c <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	b29a      	uxth	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80045e8:	2110      	movs	r1, #16
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f001 ff60 	bl	80064b0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	e028      	b.n	8004654 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2220      	movs	r2, #32
 8004606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004616:	f043 0210 	orr.w	r2, r3, #16
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e017      	b.n	800465a <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4a12      	ldr	r2, [pc, #72]	@ (8004678 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800462e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	b2da      	uxtb	r2, r3
 8004634:	8979      	ldrh	r1, [r7, #10]
 8004636:	4b0f      	ldr	r3, [pc, #60]	@ (8004674 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f001 ff04 	bl	800644c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800464c:	2101      	movs	r1, #1
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f001 ff2e 	bl	80064b0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	e000      	b.n	800465a <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004658:	2302      	movs	r3, #2
  }
}
 800465a:	4618      	mov	r0, r3
 800465c:	3720      	adds	r7, #32
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	ffff0000 	.word	0xffff0000
 8004668:	080051a3 	.word	0x080051a3
 800466c:	080061cf 	.word	0x080061cf
 8004670:	0800639d 	.word	0x0800639d
 8004674:	80002000 	.word	0x80002000
 8004678:	08004d17 	.word	0x08004d17

0800467c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b088      	sub	sp, #32
 8004680:	af02      	add	r7, sp, #8
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	607a      	str	r2, [r7, #4]
 8004686:	461a      	mov	r2, r3
 8004688:	460b      	mov	r3, r1
 800468a:	817b      	strh	r3, [r7, #10]
 800468c:	4613      	mov	r3, r2
 800468e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b20      	cmp	r3, #32
 800469a:	f040 80cd 	bne.w	8004838 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046ac:	d101      	bne.n	80046b2 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 80046ae:	2302      	movs	r3, #2
 80046b0:	e0c3      	b.n	800483a <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_I2C_Master_Receive_DMA+0x44>
 80046bc:	2302      	movs	r3, #2
 80046be:	e0bc      	b.n	800483a <HAL_I2C_Master_Receive_DMA+0x1be>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2222      	movs	r2, #34	@ 0x22
 80046cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2210      	movs	r2, #16
 80046d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	893a      	ldrh	r2, [r7, #8]
 80046e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4a55      	ldr	r2, [pc, #340]	@ (8004844 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80046ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4a55      	ldr	r2, [pc, #340]	@ (8004848 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80046f4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	2bff      	cmp	r3, #255	@ 0xff
 80046fe:	d906      	bls.n	800470e <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = 1U;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2201      	movs	r2, #1
 8004704:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004706:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	e007      	b.n	800471e <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004718:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800471c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004722:	2b00      	cmp	r3, #0
 8004724:	d070      	beq.n	8004808 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800472a:	2b00      	cmp	r3, #0
 800472c:	d020      	beq.n	8004770 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004732:	4a46      	ldr	r2, [pc, #280]	@ (800484c <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8004734:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800473a:	4a45      	ldr	r2, [pc, #276]	@ (8004850 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800473c:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004742:	2200      	movs	r2, #0
 8004744:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800474a:	2200      	movs	r2, #0
 800474c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	3324      	adds	r3, #36	@ 0x24
 8004758:	4619      	mov	r1, r3
 800475a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004760:	f7fd fe6c 	bl	800243c <HAL_DMA_Start_IT>
 8004764:	4603      	mov	r3, r0
 8004766:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004768:	7cfb      	ldrb	r3, [r7, #19]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d138      	bne.n	80047e0 <HAL_I2C_Master_Receive_DMA+0x164>
 800476e:	e013      	b.n	8004798 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2220      	movs	r2, #32
 8004774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004784:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e050      	b.n	800483a <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800479c:	b2da      	uxtb	r2, r3
 800479e:	8979      	ldrh	r1, [r7, #10]
 80047a0:	4b2c      	ldr	r3, [pc, #176]	@ (8004854 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f001 fe50 	bl	800644c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80047c6:	2110      	movs	r1, #16
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f001 fe71 	bl	80064b0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	e029      	b.n	8004834 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2220      	movs	r2, #32
 80047e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f4:	f043 0210 	orr.w	r2, r3, #16
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e018      	b.n	800483a <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4a13      	ldr	r2, [pc, #76]	@ (8004858 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800480c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004812:	b2da      	uxtb	r2, r3
 8004814:	8979      	ldrh	r1, [r7, #10]
 8004816:	4b0f      	ldr	r3, [pc, #60]	@ (8004854 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f001 fe14 	bl	800644c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800482c:	2102      	movs	r1, #2
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f001 fe3e 	bl	80064b0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8004834:	2300      	movs	r3, #0
 8004836:	e000      	b.n	800483a <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8004838:	2302      	movs	r3, #2
  }
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	ffff0000 	.word	0xffff0000
 8004848:	080051a3 	.word	0x080051a3
 800484c:	080062a5 	.word	0x080062a5
 8004850:	0800639d 	.word	0x0800639d
 8004854:	80002400 	.word	0x80002400
 8004858:	08004d17 	.word	0x08004d17

0800485c <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	4613      	mov	r3, r2
 8004868:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b20      	cmp	r3, #32
 8004874:	f040 80d1 	bne.w	8004a1a <HAL_I2C_Slave_Transmit_DMA+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d002      	beq.n	8004884 <HAL_I2C_Slave_Transmit_DMA+0x28>
 800487e:	88fb      	ldrh	r3, [r7, #6]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d105      	bne.n	8004890 <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800488a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e0c5      	b.n	8004a1c <HAL_I2C_Slave_Transmit_DMA+0x1c0>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004896:	2b01      	cmp	r3, #1
 8004898:	d101      	bne.n	800489e <HAL_I2C_Slave_Transmit_DMA+0x42>
 800489a:	2302      	movs	r3, #2
 800489c:	e0be      	b.n	8004a1c <HAL_I2C_Slave_Transmit_DMA+0x1c0>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2221      	movs	r2, #33	@ 0x21
 80048aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	88fa      	ldrh	r2, [r7, #6]
 80048c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	4a53      	ldr	r2, [pc, #332]	@ (8004a24 <HAL_I2C_Slave_Transmit_DMA+0x1c8>)
 80048d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4a53      	ldr	r2, [pc, #332]	@ (8004a28 <HAL_I2C_Slave_Transmit_DMA+0x1cc>)
 80048dc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048e6:	d117      	bne.n	8004918 <HAL_I2C_Slave_Transmit_DMA+0xbc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ec:	781a      	ldrb	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004902:	b29b      	uxth	r3, r3
 8004904:	3b01      	subs	r3, #1
 8004906:	b29a      	uxth	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferCount != 0U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d068      	beq.n	80049f4 <HAL_I2C_Slave_Transmit_DMA+0x198>
    {
      if (hi2c->hdmatx != NULL)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004926:	2b00      	cmp	r3, #0
 8004928:	d022      	beq.n	8004970 <HAL_I2C_Slave_Transmit_DMA+0x114>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492e:	4a3f      	ldr	r2, [pc, #252]	@ (8004a2c <HAL_I2C_Slave_Transmit_DMA+0x1d0>)
 8004930:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004936:	4a3e      	ldr	r2, [pc, #248]	@ (8004a30 <HAL_I2C_Slave_Transmit_DMA+0x1d4>)
 8004938:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493e:	2200      	movs	r2, #0
 8004940:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004946:	2200      	movs	r2, #0
 8004948:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8004952:	4619      	mov	r1, r3
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 800495a:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8004960:	f7fd fd6c 	bl	800243c <HAL_DMA_Start_IT>
 8004964:	4603      	mov	r3, r0
 8004966:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004968:	7dfb      	ldrb	r3, [r7, #23]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d12e      	bne.n	80049cc <HAL_I2C_Slave_Transmit_DMA+0x170>
 800496e:	e013      	b.n	8004998 <HAL_I2C_Slave_Transmit_DMA+0x13c>
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2228      	movs	r2, #40	@ 0x28
 8004974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004984:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e041      	b.n	8004a1c <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      {
        /* Enable Address Acknowledge */
        hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049a6:	605a      	str	r2, [r3, #4]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR, STOP, NACK, ADDR interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80049b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f001 fd7b 	bl	80064b0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	e024      	b.n	8004a16 <HAL_I2C_Slave_Transmit_DMA+0x1ba>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2228      	movs	r2, #40	@ 0x28
 80049d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e0:	f043 0210 	orr.w	r2, r3, #16
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e013      	b.n	8004a1c <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      }
    }
    else
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a02:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004a0c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f001 fd4d 	bl	80064b0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	e000      	b.n	8004a1c <HAL_I2C_Slave_Transmit_DMA+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8004a1a:	2302      	movs	r3, #2
  }
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3718      	adds	r7, #24
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	ffff0000 	.word	0xffff0000
 8004a28:	08005645 	.word	0x08005645
 8004a2c:	08006265 	.word	0x08006265
 8004a30:	0800639d 	.word	0x0800639d

08004a34 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b20      	cmp	r3, #32
 8004a4c:	f040 809b 	bne.w	8004b86 <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <HAL_I2C_Slave_Receive_DMA+0x28>
 8004a56:	88fb      	ldrh	r3, [r7, #6]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d105      	bne.n	8004a68 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a62:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e08f      	b.n	8004b88 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d101      	bne.n	8004a76 <HAL_I2C_Slave_Receive_DMA+0x42>
 8004a72:	2302      	movs	r3, #2
 8004a74:	e088      	b.n	8004b88 <HAL_I2C_Slave_Receive_DMA+0x154>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2222      	movs	r2, #34	@ 0x22
 8004a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	88fa      	ldrh	r2, [r7, #6]
 8004a9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	4a38      	ldr	r2, [pc, #224]	@ (8004b90 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8004aae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4a38      	ldr	r2, [pc, #224]	@ (8004b94 <HAL_I2C_Slave_Receive_DMA+0x160>)
 8004ab4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d020      	beq.n	8004b00 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac2:	4a35      	ldr	r2, [pc, #212]	@ (8004b98 <HAL_I2C_Slave_Receive_DMA+0x164>)
 8004ac4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aca:	4a34      	ldr	r2, [pc, #208]	@ (8004b9c <HAL_I2C_Slave_Receive_DMA+0x168>)
 8004acc:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ada:	2200      	movs	r2, #0
 8004adc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3324      	adds	r3, #36	@ 0x24
 8004ae8:	4619      	mov	r1, r3
 8004aea:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004af0:	f7fd fca4 	bl	800243c <HAL_DMA_Start_IT>
 8004af4:	4603      	mov	r3, r0
 8004af6:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8004af8:	7dfb      	ldrb	r3, [r7, #23]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d12f      	bne.n	8004b5e <HAL_I2C_Slave_Receive_DMA+0x12a>
 8004afe:	e013      	b.n	8004b28 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2228      	movs	r2, #40	@ 0x28
 8004b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b14:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e02f      	b.n	8004b88 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b36:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004b40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f001 fcb3 	bl	80064b0 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b58:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	e014      	b.n	8004b88 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2228      	movs	r2, #40	@ 0x28
 8004b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b72:	f043 0210 	orr.w	r2, r3, #16
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e000      	b.n	8004b88 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8004b86:	2302      	movs	r3, #2
  }
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	ffff0000 	.word	0xffff0000
 8004b94:	08005645 	.word	0x08005645
 8004b98:	08006357 	.word	0x08006357
 8004b9c:	0800639d 	.word	0x0800639d

08004ba0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d005      	beq.n	8004bcc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	68f9      	ldr	r1, [r7, #12]
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	4798      	blx	r3
  }
}
 8004bcc:	bf00      	nop
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	0a1b      	lsrs	r3, r3, #8
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d010      	beq.n	8004c1a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	09db      	lsrs	r3, r3, #7
 8004bfc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00a      	beq.n	8004c1a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c08:	f043 0201 	orr.w	r2, r3, #1
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c18:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	0a9b      	lsrs	r3, r3, #10
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d010      	beq.n	8004c48 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	09db      	lsrs	r3, r3, #7
 8004c2a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c36:	f043 0208 	orr.w	r2, r3, #8
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c46:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	0a5b      	lsrs	r3, r3, #9
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d010      	beq.n	8004c76 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	09db      	lsrs	r3, r3, #7
 8004c58:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c64:	f043 0202 	orr.w	r2, r3, #2
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c74:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f003 030b 	and.w	r3, r3, #11
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004c86:	68f9      	ldr	r1, [r7, #12]
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f001 f965 	bl	8005f58 <I2C_ITError>
  }
}
 8004c8e:	bf00      	nop
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	70fb      	strb	r3, [r7, #3]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004cba:	bf00      	nop
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b083      	sub	sp, #12
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b088      	sub	sp, #32
 8004d1a:	af02      	add	r7, sp, #8
 8004d1c:	60f8      	str	r0, [r7, #12]
 8004d1e:	60b9      	str	r1, [r7, #8]
 8004d20:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d101      	bne.n	8004d34 <I2C_Master_ISR_IT+0x1e>
 8004d30:	2302      	movs	r3, #2
 8004d32:	e12e      	b.n	8004f92 <I2C_Master_ISR_IT+0x27c>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	091b      	lsrs	r3, r3, #4
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d013      	beq.n	8004d70 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	091b      	lsrs	r3, r3, #4
 8004d4c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00d      	beq.n	8004d70 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2210      	movs	r2, #16
 8004d5a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d60:	f043 0204 	orr.w	r2, r3, #4
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f001 fa0c 	bl	8006186 <I2C_Flush_TXDR>
 8004d6e:	e0fb      	b.n	8004f68 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	089b      	lsrs	r3, r3, #2
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d023      	beq.n	8004dc4 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	089b      	lsrs	r3, r3, #2
 8004d80:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d01d      	beq.n	8004dc4 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f023 0304 	bic.w	r3, r3, #4
 8004d8e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dac:	3b01      	subs	r3, #1
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004dc2:	e0d1      	b.n	8004f68 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	099b      	lsrs	r3, r3, #6
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d12a      	bne.n	8004e26 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	085b      	lsrs	r3, r3, #1
 8004dd4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d024      	beq.n	8004e26 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	085b      	lsrs	r3, r3, #1
 8004de0:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d01e      	beq.n	8004e26 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 80ba 	beq.w	8004f68 <I2C_Master_ISR_IT+0x252>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df8:	781a      	ldrb	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8004e24:	e0a0      	b.n	8004f68 <I2C_Master_ISR_IT+0x252>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	09db      	lsrs	r3, r3, #7
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d06b      	beq.n	8004f0a <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	099b      	lsrs	r3, r3, #6
 8004e36:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d065      	beq.n	8004f0a <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d04e      	beq.n	8004ee6 <I2C_Master_ISR_IT+0x1d0>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d14a      	bne.n	8004ee6 <I2C_Master_ISR_IT+0x1d0>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e5c:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2bff      	cmp	r3, #255	@ 0xff
 8004e66:	d91c      	bls.n	8004ea2 <I2C_Master_ISR_IT+0x18c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	0c1b      	lsrs	r3, r3, #16
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d103      	bne.n	8004e84 <I2C_Master_ISR_IT+0x16e>
        {
          hi2c->XferSize = 1U;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004e82:	e002      	b.n	8004e8a <I2C_Master_ISR_IT+0x174>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	22ff      	movs	r2, #255	@ 0xff
 8004e88:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	8a79      	ldrh	r1, [r7, #18]
 8004e92:	2300      	movs	r3, #0
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f001 fad6 	bl	800644c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ea0:	e032      	b.n	8004f08 <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004eb4:	d00b      	beq.n	8004ece <I2C_Master_ISR_IT+0x1b8>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eba:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004ec0:	8a79      	ldrh	r1, [r7, #18]
 8004ec2:	2000      	movs	r0, #0
 8004ec4:	9000      	str	r0, [sp, #0]
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f001 fac0 	bl	800644c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ecc:	e01c      	b.n	8004f08 <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	8a79      	ldrh	r1, [r7, #18]
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f001 fab4 	bl	800644c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ee4:	e010      	b.n	8004f08 <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ef0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ef4:	d003      	beq.n	8004efe <I2C_Master_ISR_IT+0x1e8>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 fd09 	bl	800590e <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004efc:	e034      	b.n	8004f68 <I2C_Master_ISR_IT+0x252>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004efe:	2140      	movs	r1, #64	@ 0x40
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f001 f829 	bl	8005f58 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f06:	e02f      	b.n	8004f68 <I2C_Master_ISR_IT+0x252>
 8004f08:	e02e      	b.n	8004f68 <I2C_Master_ISR_IT+0x252>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	099b      	lsrs	r3, r3, #6
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d028      	beq.n	8004f68 <I2C_Master_ISR_IT+0x252>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	099b      	lsrs	r3, r3, #6
 8004f1a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d022      	beq.n	8004f68 <I2C_Master_ISR_IT+0x252>
  {
    if (hi2c->XferCount == 0U)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d119      	bne.n	8004f60 <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f3a:	d015      	beq.n	8004f68 <I2C_Master_ISR_IT+0x252>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f40:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004f44:	d108      	bne.n	8004f58 <I2C_Master_ISR_IT+0x242>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f54:	605a      	str	r2, [r3, #4]
 8004f56:	e007      	b.n	8004f68 <I2C_Master_ISR_IT+0x252>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 fcd8 	bl	800590e <I2C_ITMasterSeqCplt>
 8004f5e:	e003      	b.n	8004f68 <I2C_Master_ISR_IT+0x252>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004f60:	2140      	movs	r1, #64	@ 0x40
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 fff8 	bl	8005f58 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	095b      	lsrs	r3, r3, #5
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d009      	beq.n	8004f88 <I2C_Master_ISR_IT+0x272>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	095b      	lsrs	r3, r3, #5
 8004f78:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d003      	beq.n	8004f88 <I2C_Master_ISR_IT+0x272>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8004f80:	6979      	ldr	r1, [r7, #20]
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 fd5e 	bl	8005a44 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b086      	sub	sp, #24
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	60f8      	str	r0, [r7, #12]
 8004fa2:	60b9      	str	r1, [r7, #8]
 8004fa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004faa:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d101      	bne.n	8004fbe <I2C_Slave_ISR_IT+0x24>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	e0ed      	b.n	800519a <I2C_Slave_ISR_IT+0x200>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	095b      	lsrs	r3, r3, #5
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	095b      	lsrs	r3, r3, #5
 8004fd6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d004      	beq.n	8004fe8 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004fde:	6939      	ldr	r1, [r7, #16]
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 fdf9 	bl	8005bd8 <I2C_ITSlaveCplt>
 8004fe6:	e0d3      	b.n	8005190 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	091b      	lsrs	r3, r3, #4
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d04d      	beq.n	8005090 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	091b      	lsrs	r3, r3, #4
 8004ff8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d047      	beq.n	8005090 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005004:	b29b      	uxth	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d128      	bne.n	800505c <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b28      	cmp	r3, #40	@ 0x28
 8005014:	d108      	bne.n	8005028 <I2C_Slave_ISR_IT+0x8e>
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800501c:	d104      	bne.n	8005028 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800501e:	6939      	ldr	r1, [r7, #16]
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f000 ff43 	bl	8005eac <I2C_ITListenCplt>
 8005026:	e032      	b.n	800508e <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b29      	cmp	r3, #41	@ 0x29
 8005032:	d10e      	bne.n	8005052 <I2C_Slave_ISR_IT+0xb8>
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800503a:	d00a      	beq.n	8005052 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2210      	movs	r2, #16
 8005042:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f001 f89e 	bl	8006186 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f000 fc9c 	bl	8005988 <I2C_ITSlaveSeqCplt>
 8005050:	e01d      	b.n	800508e <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2210      	movs	r2, #16
 8005058:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800505a:	e096      	b.n	800518a <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2210      	movs	r2, #16
 8005062:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005068:	f043 0204 	orr.w	r2, r3, #4
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d004      	beq.n	8005080 <I2C_Slave_ISR_IT+0xe6>
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800507c:	f040 8085 	bne.w	800518a <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005084:	4619      	mov	r1, r3
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 ff66 	bl	8005f58 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800508c:	e07d      	b.n	800518a <I2C_Slave_ISR_IT+0x1f0>
 800508e:	e07c      	b.n	800518a <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	089b      	lsrs	r3, r3, #2
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b00      	cmp	r3, #0
 800509a:	d030      	beq.n	80050fe <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	089b      	lsrs	r3, r3, #2
 80050a0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d02a      	beq.n	80050fe <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d018      	beq.n	80050e4 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050da:	b29b      	uxth	r3, r3
 80050dc:	3b01      	subs	r3, #1
 80050de:	b29a      	uxth	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d14f      	bne.n	800518e <I2C_Slave_ISR_IT+0x1f4>
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80050f4:	d04b      	beq.n	800518e <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f000 fc46 	bl	8005988 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80050fc:	e047      	b.n	800518e <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	08db      	lsrs	r3, r3, #3
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	08db      	lsrs	r3, r3, #3
 800510e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005112:	2b00      	cmp	r3, #0
 8005114:	d004      	beq.n	8005120 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005116:	6939      	ldr	r1, [r7, #16]
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f000 fb74 	bl	8005806 <I2C_ITAddrCplt>
 800511e:	e037      	b.n	8005190 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	085b      	lsrs	r3, r3, #1
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d031      	beq.n	8005190 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	085b      	lsrs	r3, r3, #1
 8005130:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005134:	2b00      	cmp	r3, #0
 8005136:	d02b      	beq.n	8005190 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800513c:	b29b      	uxth	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d018      	beq.n	8005174 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005146:	781a      	ldrb	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005152:	1c5a      	adds	r2, r3, #1
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800515c:	b29b      	uxth	r3, r3
 800515e:	3b01      	subs	r3, #1
 8005160:	b29a      	uxth	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800516a:	3b01      	subs	r3, #1
 800516c:	b29a      	uxth	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005172:	e00d      	b.n	8005190 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800517a:	d002      	beq.n	8005182 <I2C_Slave_ISR_IT+0x1e8>
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 fc00 	bl	8005988 <I2C_ITSlaveSeqCplt>
 8005188:	e002      	b.n	8005190 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800518a:	bf00      	nop
 800518c:	e000      	b.n	8005190 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800518e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3718      	adds	r7, #24
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b088      	sub	sp, #32
 80051a6:	af02      	add	r7, sp, #8
 80051a8:	60f8      	str	r0, [r7, #12]
 80051aa:	60b9      	str	r1, [r7, #8]
 80051ac:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d101      	bne.n	80051bc <I2C_Master_ISR_DMA+0x1a>
 80051b8:	2302      	movs	r3, #2
 80051ba:	e0f0      	b.n	800539e <I2C_Master_ISR_DMA+0x1fc>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	091b      	lsrs	r3, r3, #4
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d017      	beq.n	8005200 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	091b      	lsrs	r3, r3, #4
 80051d4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d011      	beq.n	8005200 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2210      	movs	r2, #16
 80051e2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e8:	f043 0204 	orr.w	r2, r3, #4
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80051f0:	2120      	movs	r1, #32
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f001 f95c 	bl	80064b0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f000 ffc4 	bl	8006186 <I2C_Flush_TXDR>
 80051fe:	e0c9      	b.n	8005394 <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	09db      	lsrs	r3, r3, #7
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 8081 	beq.w	8005310 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	099b      	lsrs	r3, r3, #6
 8005212:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005216:	2b00      	cmp	r3, #0
 8005218:	d07a      	beq.n	8005310 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005228:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800522e:	b29b      	uxth	r3, r3
 8005230:	2b00      	cmp	r3, #0
 8005232:	d05c      	beq.n	80052ee <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	b29b      	uxth	r3, r3
 800523c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005240:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005246:	b29b      	uxth	r3, r3
 8005248:	2bff      	cmp	r3, #255	@ 0xff
 800524a:	d914      	bls.n	8005276 <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	0c1b      	lsrs	r3, r3, #16
 8005254:	b2db      	uxtb	r3, r3
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b01      	cmp	r3, #1
 800525e:	d103      	bne.n	8005268 <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2201      	movs	r2, #1
 8005264:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005266:	e002      	b.n	800526e <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	22ff      	movs	r2, #255	@ 0xff
 800526c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 800526e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	e010      	b.n	8005298 <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005284:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005288:	d003      	beq.n	8005292 <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	e002      	b.n	8005298 <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005292:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005296:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800529c:	b2da      	uxtb	r2, r3
 800529e:	8a79      	ldrh	r1, [r7, #18]
 80052a0:	2300      	movs	r3, #0
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f001 f8d0 	bl	800644c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b22      	cmp	r3, #34	@ 0x22
 80052c8:	d108      	bne.n	80052dc <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052d8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80052da:	e05b      	b.n	8005394 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052ea:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80052ec:	e052      	b.n	8005394 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052fc:	d003      	beq.n	8005306 <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 fb05 	bl	800590e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005304:	e046      	b.n	8005394 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005306:	2140      	movs	r1, #64	@ 0x40
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 fe25 	bl	8005f58 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800530e:	e041      	b.n	8005394 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	099b      	lsrs	r3, r3, #6
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d029      	beq.n	8005370 <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	099b      	lsrs	r3, r3, #6
 8005320:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005324:	2b00      	cmp	r3, #0
 8005326:	d023      	beq.n	8005370 <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800532c:	b29b      	uxth	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d119      	bne.n	8005366 <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800533c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005340:	d027      	beq.n	8005392 <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005346:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800534a:	d108      	bne.n	800535e <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800535a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800535c:	e019      	b.n	8005392 <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f000 fad5 	bl	800590e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005364:	e015      	b.n	8005392 <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005366:	2140      	movs	r1, #64	@ 0x40
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 fdf5 	bl	8005f58 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800536e:	e010      	b.n	8005392 <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00b      	beq.n	8005394 <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	095b      	lsrs	r3, r3, #5
 8005380:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005384:	2b00      	cmp	r3, #0
 8005386:	d005      	beq.n	8005394 <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005388:	68b9      	ldr	r1, [r7, #8]
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 fb5a 	bl	8005a44 <I2C_ITMasterCplt>
 8005390:	e000      	b.n	8005394 <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 8005392:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3718      	adds	r7, #24
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
	...

080053a8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b088      	sub	sp, #32
 80053ac:	af02      	add	r7, sp, #8
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80053b4:	4b94      	ldr	r3, [pc, #592]	@ (8005608 <I2C_Mem_ISR_DMA+0x260>)
 80053b6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d101      	bne.n	80053c6 <I2C_Mem_ISR_DMA+0x1e>
 80053c2:	2302      	movs	r3, #2
 80053c4:	e139      	b.n	800563a <I2C_Mem_ISR_DMA+0x292>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	091b      	lsrs	r3, r3, #4
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d017      	beq.n	800540a <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	091b      	lsrs	r3, r3, #4
 80053de:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d011      	beq.n	800540a <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2210      	movs	r2, #16
 80053ec:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f2:	f043 0204 	orr.w	r2, r3, #4
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80053fa:	2120      	movs	r1, #32
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f001 f857 	bl	80064b0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 febf 	bl	8006186 <I2C_Flush_TXDR>
 8005408:	e112      	b.n	8005630 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	085b      	lsrs	r3, r3, #1
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00f      	beq.n	8005436 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	085b      	lsrs	r3, r3, #1
 800541a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800541e:	2b00      	cmp	r3, #0
 8005420:	d009      	beq.n	8005436 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800542a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005432:	651a      	str	r2, [r3, #80]	@ 0x50
 8005434:	e0fc      	b.n	8005630 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	09db      	lsrs	r3, r3, #7
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d06e      	beq.n	8005520 <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	099b      	lsrs	r3, r3, #6
 8005446:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800544a:	2b00      	cmp	r3, #0
 800544c:	d068      	beq.n	8005520 <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800544e:	2101      	movs	r1, #1
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f001 f8b1 	bl	80065b8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005456:	2110      	movs	r1, #16
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f001 f829 	bl	80064b0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005462:	b29b      	uxth	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	d056      	beq.n	8005516 <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800546c:	b29b      	uxth	r3, r3
 800546e:	2bff      	cmp	r3, #255	@ 0xff
 8005470:	d91e      	bls.n	80054b0 <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	0c1b      	lsrs	r3, r3, #16
 800547a:	b2db      	uxtb	r3, r3
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b01      	cmp	r3, #1
 8005484:	d103      	bne.n	800548e <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2201      	movs	r2, #1
 800548a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800548c:	e002      	b.n	8005494 <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	22ff      	movs	r2, #255	@ 0xff
 8005492:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005498:	b299      	uxth	r1, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	2300      	movs	r3, #0
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 ffcf 	bl	800644c <I2C_TransferConfig>
 80054ae:	e011      	b.n	80054d4 <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054be:	b299      	uxth	r1, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	2300      	movs	r3, #0
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 ffbc 	bl	800644c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054d8:	b29a      	uxth	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b22      	cmp	r3, #34	@ 0x22
 80054f0:	d108      	bne.n	8005504 <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005500:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005502:	e095      	b.n	8005630 <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005512:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005514:	e08c      	b.n	8005630 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005516:	2140      	movs	r1, #64	@ 0x40
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 fd1d 	bl	8005f58 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800551e:	e087      	b.n	8005630 <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	099b      	lsrs	r3, r3, #6
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	2b00      	cmp	r3, #0
 800552a:	d071      	beq.n	8005610 <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	099b      	lsrs	r3, r3, #6
 8005530:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005534:	2b00      	cmp	r3, #0
 8005536:	d06b      	beq.n	8005610 <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005538:	2101      	movs	r1, #1
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f001 f83c 	bl	80065b8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005540:	2110      	movs	r1, #16
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f000 ffb4 	bl	80064b0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b22      	cmp	r3, #34	@ 0x22
 8005552:	d101      	bne.n	8005558 <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 8005554:	4b2d      	ldr	r3, [pc, #180]	@ (800560c <I2C_Mem_ISR_DMA+0x264>)
 8005556:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800555c:	b29b      	uxth	r3, r3
 800555e:	2bff      	cmp	r3, #255	@ 0xff
 8005560:	d91e      	bls.n	80055a0 <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	0c1b      	lsrs	r3, r3, #16
 800556a:	b2db      	uxtb	r3, r3
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b01      	cmp	r3, #1
 8005574:	d103      	bne.n	800557e <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2201      	movs	r2, #1
 800557a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800557c:	e002      	b.n	8005584 <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	22ff      	movs	r2, #255	@ 0xff
 8005582:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005588:	b299      	uxth	r1, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800558e:	b2da      	uxtb	r2, r3
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 ff57 	bl	800644c <I2C_TransferConfig>
 800559e:	e011      	b.n	80055c4 <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055ae:	b299      	uxth	r1, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 ff44 	bl	800644c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b22      	cmp	r3, #34	@ 0x22
 80055e0:	d108      	bne.n	80055f4 <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80055f0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80055f2:	e01d      	b.n	8005630 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005602:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005604:	e014      	b.n	8005630 <I2C_Mem_ISR_DMA+0x288>
 8005606:	bf00      	nop
 8005608:	80002000 	.word	0x80002000
 800560c:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	095b      	lsrs	r3, r3, #5
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b00      	cmp	r3, #0
 800561a:	d009      	beq.n	8005630 <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	095b      	lsrs	r3, r3, #5
 8005620:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005624:	2b00      	cmp	r3, #0
 8005626:	d003      	beq.n	8005630 <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005628:	68b9      	ldr	r1, [r7, #8]
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 fa0a 	bl	8005a44 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3718      	adds	r7, #24
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop

08005644 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b088      	sub	sp, #32
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005654:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005656:	2300      	movs	r3, #0
 8005658:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005660:	2b01      	cmp	r3, #1
 8005662:	d101      	bne.n	8005668 <I2C_Slave_ISR_DMA+0x24>
 8005664:	2302      	movs	r3, #2
 8005666:	e0ca      	b.n	80057fe <I2C_Slave_ISR_DMA+0x1ba>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	095b      	lsrs	r3, r3, #5
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00a      	beq.n	8005692 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	095b      	lsrs	r3, r3, #5
 8005680:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005684:	2b00      	cmp	r3, #0
 8005686:	d004      	beq.n	8005692 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005688:	68b9      	ldr	r1, [r7, #8]
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 faa4 	bl	8005bd8 <I2C_ITSlaveCplt>
 8005690:	e0b0      	b.n	80057f4 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	091b      	lsrs	r3, r3, #4
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 809a 	beq.w	80057d4 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	091b      	lsrs	r3, r3, #4
 80056a4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 8093 	beq.w	80057d4 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	0b9b      	lsrs	r3, r3, #14
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d105      	bne.n	80056c6 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	0bdb      	lsrs	r3, r3, #15
 80056be:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d07f      	beq.n	80057c6 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00d      	beq.n	80056ea <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	0bdb      	lsrs	r3, r3, #15
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d007      	beq.n	80056ea <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 80056e6:	2301      	movs	r3, #1
 80056e8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00d      	beq.n	800570e <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	0b9b      	lsrs	r3, r3, #14
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d007      	beq.n	800570e <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 800570a:	2301      	movs	r3, #1
 800570c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d128      	bne.n	8005766 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b28      	cmp	r3, #40	@ 0x28
 800571e:	d108      	bne.n	8005732 <I2C_Slave_ISR_DMA+0xee>
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005726:	d104      	bne.n	8005732 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005728:	68b9      	ldr	r1, [r7, #8]
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 fbbe 	bl	8005eac <I2C_ITListenCplt>
 8005730:	e048      	b.n	80057c4 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b29      	cmp	r3, #41	@ 0x29
 800573c:	d10e      	bne.n	800575c <I2C_Slave_ISR_DMA+0x118>
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005744:	d00a      	beq.n	800575c <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2210      	movs	r2, #16
 800574c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 fd19 	bl	8006186 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 f917 	bl	8005988 <I2C_ITSlaveSeqCplt>
 800575a:	e033      	b.n	80057c4 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2210      	movs	r2, #16
 8005762:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005764:	e034      	b.n	80057d0 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2210      	movs	r2, #16
 800576c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005772:	f043 0204 	orr.w	r2, r3, #4
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005780:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d003      	beq.n	8005790 <I2C_Slave_ISR_DMA+0x14c>
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800578e:	d11f      	bne.n	80057d0 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005790:	7dfb      	ldrb	r3, [r7, #23]
 8005792:	2b21      	cmp	r3, #33	@ 0x21
 8005794:	d002      	beq.n	800579c <I2C_Slave_ISR_DMA+0x158>
 8005796:	7dfb      	ldrb	r3, [r7, #23]
 8005798:	2b29      	cmp	r3, #41	@ 0x29
 800579a:	d103      	bne.n	80057a4 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2221      	movs	r2, #33	@ 0x21
 80057a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80057a2:	e008      	b.n	80057b6 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80057a4:	7dfb      	ldrb	r3, [r7, #23]
 80057a6:	2b22      	cmp	r3, #34	@ 0x22
 80057a8:	d002      	beq.n	80057b0 <I2C_Slave_ISR_DMA+0x16c>
 80057aa:	7dfb      	ldrb	r3, [r7, #23]
 80057ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80057ae:	d102      	bne.n	80057b6 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2222      	movs	r2, #34	@ 0x22
 80057b4:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ba:	4619      	mov	r1, r3
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 fbcb 	bl	8005f58 <I2C_ITError>
      if (treatdmanack == 1U)
 80057c2:	e005      	b.n	80057d0 <I2C_Slave_ISR_DMA+0x18c>
 80057c4:	e004      	b.n	80057d0 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2210      	movs	r2, #16
 80057cc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80057ce:	e011      	b.n	80057f4 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 80057d0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80057d2:	e00f      	b.n	80057f4 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	08db      	lsrs	r3, r3, #3
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d009      	beq.n	80057f4 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	08db      	lsrs	r3, r3, #3
 80057e4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80057ec:	68b9      	ldr	r1, [r7, #8]
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f000 f809 	bl	8005806 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3720      	adds	r7, #32
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b084      	sub	sp, #16
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
 800580e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005816:	b2db      	uxtb	r3, r3
 8005818:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800581c:	2b28      	cmp	r3, #40	@ 0x28
 800581e:	d16a      	bne.n	80058f6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	0c1b      	lsrs	r3, r3, #16
 8005828:	b2db      	uxtb	r3, r3
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	0c1b      	lsrs	r3, r3, #16
 8005838:	b29b      	uxth	r3, r3
 800583a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800583e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	b29b      	uxth	r3, r3
 8005848:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800584c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	b29b      	uxth	r3, r3
 8005856:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800585a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	2b02      	cmp	r3, #2
 8005862:	d138      	bne.n	80058d6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005864:	897b      	ldrh	r3, [r7, #10]
 8005866:	09db      	lsrs	r3, r3, #7
 8005868:	b29a      	uxth	r2, r3
 800586a:	89bb      	ldrh	r3, [r7, #12]
 800586c:	4053      	eors	r3, r2
 800586e:	b29b      	uxth	r3, r3
 8005870:	f003 0306 	and.w	r3, r3, #6
 8005874:	2b00      	cmp	r3, #0
 8005876:	d11c      	bne.n	80058b2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005878:	897b      	ldrh	r3, [r7, #10]
 800587a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800588a:	2b02      	cmp	r3, #2
 800588c:	d13b      	bne.n	8005906 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2208      	movs	r2, #8
 800589a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80058a4:	89ba      	ldrh	r2, [r7, #12]
 80058a6:	7bfb      	ldrb	r3, [r7, #15]
 80058a8:	4619      	mov	r1, r3
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7ff f9f3 	bl	8004c96 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80058b0:	e029      	b.n	8005906 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80058b2:	893b      	ldrh	r3, [r7, #8]
 80058b4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80058b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 fe7c 	bl	80065b8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80058c8:	89ba      	ldrh	r2, [r7, #12]
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
 80058cc:	4619      	mov	r1, r3
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7ff f9e1 	bl	8004c96 <HAL_I2C_AddrCallback>
}
 80058d4:	e017      	b.n	8005906 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80058d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fe6c 	bl	80065b8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80058e8:	89ba      	ldrh	r2, [r7, #12]
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
 80058ec:	4619      	mov	r1, r3
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7ff f9d1 	bl	8004c96 <HAL_I2C_AddrCallback>
}
 80058f4:	e007      	b.n	8005906 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2208      	movs	r2, #8
 80058fc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8005906:	bf00      	nop
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b082      	sub	sp, #8
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b21      	cmp	r3, #33	@ 0x21
 8005928:	d115      	bne.n	8005956 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2220      	movs	r2, #32
 800592e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2211      	movs	r2, #17
 8005936:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800593e:	2101      	movs	r1, #1
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 fe39 	bl	80065b8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f00f f874 	bl	8014a3c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005954:	e014      	b.n	8005980 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2220      	movs	r2, #32
 800595a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2212      	movs	r2, #18
 8005962:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800596a:	2102      	movs	r1, #2
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fe23 	bl	80065b8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f00f f874 	bl	8014a68 <HAL_I2C_MasterRxCpltCallback>
}
 8005980:	bf00      	nop
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	0b9b      	lsrs	r3, r3, #14
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d008      	beq.n	80059be <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	e00d      	b.n	80059da <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	0bdb      	lsrs	r3, r3, #15
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d007      	beq.n	80059da <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059d8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b29      	cmp	r3, #41	@ 0x29
 80059e4:	d112      	bne.n	8005a0c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2228      	movs	r2, #40	@ 0x28
 80059ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2221      	movs	r2, #33	@ 0x21
 80059f2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80059f4:	2101      	movs	r1, #1
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fdde 	bl	80065b8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f00f f845 	bl	8014a94 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005a0a:	e017      	b.n	8005a3c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a16:	d111      	bne.n	8005a3c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2228      	movs	r2, #40	@ 0x28
 8005a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2222      	movs	r2, #34	@ 0x22
 8005a24:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005a26:	2102      	movs	r1, #2
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fdc5 	bl	80065b8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f00f f842 	bl	8014ac0 <HAL_I2C_SlaveRxCpltCallback>
}
 8005a3c:	bf00      	nop
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2220      	movs	r2, #32
 8005a58:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b21      	cmp	r3, #33	@ 0x21
 8005a64:	d107      	bne.n	8005a76 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005a66:	2101      	movs	r1, #1
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 fda5 	bl	80065b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2211      	movs	r2, #17
 8005a72:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a74:	e00c      	b.n	8005a90 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b22      	cmp	r3, #34	@ 0x22
 8005a80:	d106      	bne.n	8005a90 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005a82:	2102      	movs	r1, #2
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 fd97 	bl	80065b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2212      	movs	r2, #18
 8005a8e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6859      	ldr	r1, [r3, #4]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	4b4d      	ldr	r3, [pc, #308]	@ (8005bd0 <I2C_ITMasterCplt+0x18c>)
 8005a9c:	400b      	ands	r3, r1
 8005a9e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a4a      	ldr	r2, [pc, #296]	@ (8005bd4 <I2C_ITMasterCplt+0x190>)
 8005aaa:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	091b      	lsrs	r3, r3, #4
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d009      	beq.n	8005acc <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2210      	movs	r2, #16
 8005abe:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ac4:	f043 0204 	orr.w	r2, r3, #4
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b60      	cmp	r3, #96	@ 0x60
 8005ad6:	d10b      	bne.n	8005af0 <I2C_ITMasterCplt+0xac>
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	089b      	lsrs	r3, r3, #2
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d005      	beq.n	8005af0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005aee:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 fb48 	bl	8006186 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005afa:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b60      	cmp	r3, #96	@ 0x60
 8005b06:	d002      	beq.n	8005b0e <I2C_ITMasterCplt+0xca>
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d006      	beq.n	8005b1c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b12:	4619      	mov	r1, r3
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 fa1f 	bl	8005f58 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005b1a:	e054      	b.n	8005bc6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b21      	cmp	r3, #33	@ 0x21
 8005b26:	d124      	bne.n	8005b72 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b40      	cmp	r3, #64	@ 0x40
 8005b40:	d10b      	bne.n	8005b5a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7ff f8b7 	bl	8004cc6 <HAL_I2C_MemTxCpltCallback>
}
 8005b58:	e035      	b.n	8005bc6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f00e ff66 	bl	8014a3c <HAL_I2C_MasterTxCpltCallback>
}
 8005b70:	e029      	b.n	8005bc6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b22      	cmp	r3, #34	@ 0x22
 8005b7c:	d123      	bne.n	8005bc6 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2220      	movs	r2, #32
 8005b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b40      	cmp	r3, #64	@ 0x40
 8005b96:	d10b      	bne.n	8005bb0 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f7ff f896 	bl	8004cda <HAL_I2C_MemRxCpltCallback>
}
 8005bae:	e00a      	b.n	8005bc6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f00e ff51 	bl	8014a68 <HAL_I2C_MasterRxCpltCallback>
}
 8005bc6:	bf00      	nop
 8005bc8:	3718      	adds	r7, #24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	fe00e800 	.word	0xfe00e800
 8005bd4:	ffff0000 	.word	0xffff0000

08005bd8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bfa:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2220      	movs	r2, #32
 8005c02:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005c04:	7afb      	ldrb	r3, [r7, #11]
 8005c06:	2b21      	cmp	r3, #33	@ 0x21
 8005c08:	d002      	beq.n	8005c10 <I2C_ITSlaveCplt+0x38>
 8005c0a:	7afb      	ldrb	r3, [r7, #11]
 8005c0c:	2b29      	cmp	r3, #41	@ 0x29
 8005c0e:	d108      	bne.n	8005c22 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005c10:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fccf 	bl	80065b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2221      	movs	r2, #33	@ 0x21
 8005c1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005c20:	e019      	b.n	8005c56 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005c22:	7afb      	ldrb	r3, [r7, #11]
 8005c24:	2b22      	cmp	r3, #34	@ 0x22
 8005c26:	d002      	beq.n	8005c2e <I2C_ITSlaveCplt+0x56>
 8005c28:	7afb      	ldrb	r3, [r7, #11]
 8005c2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c2c:	d108      	bne.n	8005c40 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005c2e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 fcc0 	bl	80065b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2222      	movs	r2, #34	@ 0x22
 8005c3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005c3e:	e00a      	b.n	8005c56 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005c40:	7afb      	ldrb	r3, [r7, #11]
 8005c42:	2b28      	cmp	r3, #40	@ 0x28
 8005c44:	d107      	bne.n	8005c56 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005c46:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fcb4 	bl	80065b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c64:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6859      	ldr	r1, [r3, #4]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	4b8c      	ldr	r3, [pc, #560]	@ (8005ea4 <I2C_ITSlaveCplt+0x2cc>)
 8005c72:	400b      	ands	r3, r1
 8005c74:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fa85 	bl	8006186 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	0b9b      	lsrs	r3, r3, #14
 8005c80:	f003 0301 	and.w	r3, r3, #1
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d013      	beq.n	8005cb0 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005c96:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d020      	beq.n	8005ce2 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005cae:	e018      	b.n	8005ce2 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	0bdb      	lsrs	r3, r3, #15
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d012      	beq.n	8005ce2 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005cca:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d006      	beq.n	8005ce2 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	089b      	lsrs	r3, r3, #2
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d020      	beq.n	8005d30 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f023 0304 	bic.w	r3, r3, #4
 8005cf4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d00:	b2d2      	uxtb	r2, r2
 8005d02:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00c      	beq.n	8005d30 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d005      	beq.n	8005d46 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d3e:	f043 0204 	orr.w	r2, r3, #4
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	091b      	lsrs	r3, r3, #4
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d04a      	beq.n	8005de8 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	091b      	lsrs	r3, r3, #4
 8005d56:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d044      	beq.n	8005de8 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d128      	bne.n	8005dba <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b28      	cmp	r3, #40	@ 0x28
 8005d72:	d108      	bne.n	8005d86 <I2C_ITSlaveCplt+0x1ae>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d7a:	d104      	bne.n	8005d86 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005d7c:	6979      	ldr	r1, [r7, #20]
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f894 	bl	8005eac <I2C_ITListenCplt>
 8005d84:	e030      	b.n	8005de8 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b29      	cmp	r3, #41	@ 0x29
 8005d90:	d10e      	bne.n	8005db0 <I2C_ITSlaveCplt+0x1d8>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d98:	d00a      	beq.n	8005db0 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2210      	movs	r2, #16
 8005da0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f9ef 	bl	8006186 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f7ff fded 	bl	8005988 <I2C_ITSlaveSeqCplt>
 8005dae:	e01b      	b.n	8005de8 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2210      	movs	r2, #16
 8005db6:	61da      	str	r2, [r3, #28]
 8005db8:	e016      	b.n	8005de8 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2210      	movs	r2, #16
 8005dc0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dc6:	f043 0204 	orr.w	r2, r3, #4
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d003      	beq.n	8005ddc <I2C_ITSlaveCplt+0x204>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005dda:	d105      	bne.n	8005de8 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005de0:	4619      	mov	r1, r3
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f8b8 	bl	8005f58 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d010      	beq.n	8005e20 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e02:	4619      	mov	r1, r3
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f8a7 	bl	8005f58 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b28      	cmp	r3, #40	@ 0x28
 8005e14:	d141      	bne.n	8005e9a <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005e16:	6979      	ldr	r1, [r7, #20]
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f847 	bl	8005eac <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e1e:	e03c      	b.n	8005e9a <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e24:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e28:	d014      	beq.n	8005e54 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f7ff fdac 	bl	8005988 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a1d      	ldr	r2, [pc, #116]	@ (8005ea8 <I2C_ITSlaveCplt+0x2d0>)
 8005e34:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7fe ff30 	bl	8004cb2 <HAL_I2C_ListenCpltCallback>
}
 8005e52:	e022      	b.n	8005e9a <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b22      	cmp	r3, #34	@ 0x22
 8005e5e:	d10e      	bne.n	8005e7e <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2220      	movs	r2, #32
 8005e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f00e fe22 	bl	8014ac0 <HAL_I2C_SlaveRxCpltCallback>
}
 8005e7c:	e00d      	b.n	8005e9a <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2220      	movs	r2, #32
 8005e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f00e fdfd 	bl	8014a94 <HAL_I2C_SlaveTxCpltCallback>
}
 8005e9a:	bf00      	nop
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	fe00e800 	.word	0xfe00e800
 8005ea8:	ffff0000 	.word	0xffff0000

08005eac <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a26      	ldr	r2, [pc, #152]	@ (8005f54 <I2C_ITListenCplt+0xa8>)
 8005eba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	089b      	lsrs	r3, r3, #2
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d022      	beq.n	8005f2a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d012      	beq.n	8005f2a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f22:	f043 0204 	orr.w	r2, r3, #4
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005f2a:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fb42 	bl	80065b8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2210      	movs	r2, #16
 8005f3a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7fe feb4 	bl	8004cb2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005f4a:	bf00      	nop
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	ffff0000 	.word	0xffff0000

08005f58 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f68:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a6d      	ldr	r2, [pc, #436]	@ (800612c <I2C_ITError+0x1d4>)
 8005f76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	431a      	orrs	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005f8a:	7bfb      	ldrb	r3, [r7, #15]
 8005f8c:	2b28      	cmp	r3, #40	@ 0x28
 8005f8e:	d005      	beq.n	8005f9c <I2C_ITError+0x44>
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
 8005f92:	2b29      	cmp	r3, #41	@ 0x29
 8005f94:	d002      	beq.n	8005f9c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005f96:	7bfb      	ldrb	r3, [r7, #15]
 8005f98:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f9a:	d10b      	bne.n	8005fb4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005f9c:	2103      	movs	r1, #3
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 fb0a 	bl	80065b8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2228      	movs	r2, #40	@ 0x28
 8005fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a60      	ldr	r2, [pc, #384]	@ (8006130 <I2C_ITError+0x1d8>)
 8005fb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8005fb2:	e030      	b.n	8006016 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005fb4:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fafd 	bl	80065b8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f8e1 	bl	8006186 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b60      	cmp	r3, #96	@ 0x60
 8005fce:	d01f      	beq.n	8006010 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	f003 0320 	and.w	r3, r3, #32
 8005fe2:	2b20      	cmp	r3, #32
 8005fe4:	d114      	bne.n	8006010 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	f003 0310 	and.w	r3, r3, #16
 8005ff0:	2b10      	cmp	r3, #16
 8005ff2:	d109      	bne.n	8006008 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2210      	movs	r2, #16
 8005ffa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006000:	f043 0204 	orr.w	r2, r3, #4
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2220      	movs	r2, #32
 800600e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800601a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006020:	2b00      	cmp	r3, #0
 8006022:	d039      	beq.n	8006098 <I2C_ITError+0x140>
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	2b11      	cmp	r3, #17
 8006028:	d002      	beq.n	8006030 <I2C_ITError+0xd8>
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	2b21      	cmp	r3, #33	@ 0x21
 800602e:	d133      	bne.n	8006098 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800603a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800603e:	d107      	bne.n	8006050 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800604e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006054:	4618      	mov	r0, r3
 8006056:	f7fc fc6d 	bl	8002934 <HAL_DMA_GetState>
 800605a:	4603      	mov	r3, r0
 800605c:	2b01      	cmp	r3, #1
 800605e:	d017      	beq.n	8006090 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006064:	4a33      	ldr	r2, [pc, #204]	@ (8006134 <I2C_ITError+0x1dc>)
 8006066:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006074:	4618      	mov	r0, r3
 8006076:	f7fc fab1 	bl	80025dc <HAL_DMA_Abort_IT>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d04d      	beq.n	800611c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800608a:	4610      	mov	r0, r2
 800608c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800608e:	e045      	b.n	800611c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 f851 	bl	8006138 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006096:	e041      	b.n	800611c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800609c:	2b00      	cmp	r3, #0
 800609e:	d039      	beq.n	8006114 <I2C_ITError+0x1bc>
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2b12      	cmp	r3, #18
 80060a4:	d002      	beq.n	80060ac <I2C_ITError+0x154>
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	2b22      	cmp	r3, #34	@ 0x22
 80060aa:	d133      	bne.n	8006114 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060ba:	d107      	bne.n	80060cc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80060ca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fc fc2f 	bl	8002934 <HAL_DMA_GetState>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d017      	beq.n	800610c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060e0:	4a14      	ldr	r2, [pc, #80]	@ (8006134 <I2C_ITError+0x1dc>)
 80060e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7fc fa73 	bl	80025dc <HAL_DMA_Abort_IT>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d011      	beq.n	8006120 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006106:	4610      	mov	r0, r2
 8006108:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800610a:	e009      	b.n	8006120 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f813 	bl	8006138 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006112:	e005      	b.n	8006120 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f80f 	bl	8006138 <I2C_TreatErrorCallback>
  }
}
 800611a:	e002      	b.n	8006122 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800611c:	bf00      	nop
 800611e:	e000      	b.n	8006122 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006120:	bf00      	nop
}
 8006122:	bf00      	nop
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	ffff0000 	.word	0xffff0000
 8006130:	08004f9b 	.word	0x08004f9b
 8006134:	08006411 	.word	0x08006411

08006138 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b60      	cmp	r3, #96	@ 0x60
 800614a:	d10e      	bne.n	800616a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2220      	movs	r2, #32
 8006150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7fe fdcd 	bl	8004d02 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006168:	e009      	b.n	800617e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f7fe fdb8 	bl	8004cee <HAL_I2C_ErrorCallback>
}
 800617e:	bf00      	nop
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006186:	b480      	push	{r7}
 8006188:	b083      	sub	sp, #12
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	2b02      	cmp	r3, #2
 800619a:	d103      	bne.n	80061a4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2200      	movs	r2, #0
 80061a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d007      	beq.n	80061c2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	699a      	ldr	r2, [r3, #24]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f042 0201 	orr.w	r2, r2, #1
 80061c0:	619a      	str	r2, [r3, #24]
  }
}
 80061c2:	bf00      	nop
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061da:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80061ea:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d104      	bne.n	8006200 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80061f6:	2120      	movs	r1, #32
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 f959 	bl	80064b0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80061fe:	e02d      	b.n	800625c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006208:	441a      	add	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006212:	b29b      	uxth	r3, r3
 8006214:	2bff      	cmp	r3, #255	@ 0xff
 8006216:	d903      	bls.n	8006220 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	22ff      	movs	r2, #255	@ 0xff
 800621c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800621e:	e004      	b.n	800622a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006224:	b29a      	uxth	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006232:	4619      	mov	r1, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	3328      	adds	r3, #40	@ 0x28
 800623a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006240:	f7fc f8fc 	bl	800243c <HAL_DMA_Start_IT>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d004      	beq.n	8006254 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800624a:	2110      	movs	r1, #16
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f7ff fe83 	bl	8005f58 <I2C_ITError>
}
 8006252:	e003      	b.n	800625c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006254:	2140      	movs	r1, #64	@ 0x40
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 f92a 	bl	80064b0 <I2C_Enable_IRQ>
}
 800625c:	bf00      	nop
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006270:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006276:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800627e:	d002      	beq.n	8006286 <I2C_DMASlaveTransmitCplt+0x22>
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10a      	bne.n	800629c <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006294:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f7ff fb76 	bl	8005988 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 800629c:	bf00      	nop
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80062c0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d104      	bne.n	80062d6 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80062cc:	2120      	movs	r1, #32
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f000 f8ee 	bl	80064b0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80062d4:	e03b      	b.n	800634e <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80062de:	441a      	add	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	2bff      	cmp	r3, #255	@ 0xff
 80062ec:	d911      	bls.n	8006312 <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	0c1b      	lsrs	r3, r3, #16
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d103      	bne.n	800630a <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2201      	movs	r2, #1
 8006306:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006308:	e008      	b.n	800631c <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	22ff      	movs	r2, #255	@ 0xff
 800630e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006310:	e004      	b.n	800631c <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006316:	b29a      	uxth	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3324      	adds	r3, #36	@ 0x24
 8006326:	4619      	mov	r1, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800632c:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006332:	f7fc f883 	bl	800243c <HAL_DMA_Start_IT>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d004      	beq.n	8006346 <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800633c:	2110      	movs	r1, #16
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f7ff fe0a 	bl	8005f58 <I2C_ITError>
}
 8006344:	e003      	b.n	800634e <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006346:	2140      	movs	r1, #64	@ 0x40
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f000 f8b1 	bl	80064b0 <I2C_Enable_IRQ>
}
 800634e:	bf00      	nop
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b084      	sub	sp, #16
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006362:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006368:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10e      	bne.n	8006394 <I2C_DMASlaveReceiveCplt+0x3e>
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800637c:	d00a      	beq.n	8006394 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800638c:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f7ff fafa 	bl	8005988 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8006394:	bf00      	nop
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 80063a4:	2300      	movs	r3, #0
 80063a6:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ac:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d007      	beq.n	80063c6 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 80063c2:	2301      	movs	r3, #1
 80063c4:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d007      	beq.n	80063de <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 80063da:	2301      	movs	r3, #1
 80063dc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7fc fab6 	bl	8002950 <HAL_DMA_GetError>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d00e      	beq.n	8006408 <I2C_DMAError+0x6c>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00b      	beq.n	8006408 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063fe:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006400:	2110      	movs	r1, #16
 8006402:	68b8      	ldr	r0, [r7, #8]
 8006404:	f7ff fda8 	bl	8005f58 <I2C_ITError>
  }
}
 8006408:	bf00      	nop
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800641c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006422:	2b00      	cmp	r3, #0
 8006424:	d003      	beq.n	800642e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800642a:	2200      	movs	r2, #0
 800642c:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800643a:	2200      	movs	r2, #0
 800643c:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f7ff fe7a 	bl	8006138 <I2C_TreatErrorCallback>
}
 8006444:	bf00      	nop
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	607b      	str	r3, [r7, #4]
 8006456:	460b      	mov	r3, r1
 8006458:	817b      	strh	r3, [r7, #10]
 800645a:	4613      	mov	r3, r2
 800645c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800645e:	897b      	ldrh	r3, [r7, #10]
 8006460:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006464:	7a7b      	ldrb	r3, [r7, #9]
 8006466:	041b      	lsls	r3, r3, #16
 8006468:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800646c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	4313      	orrs	r3, r2
 8006476:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800647a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	0d5b      	lsrs	r3, r3, #21
 8006486:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800648a:	4b08      	ldr	r3, [pc, #32]	@ (80064ac <I2C_TransferConfig+0x60>)
 800648c:	430b      	orrs	r3, r1
 800648e:	43db      	mvns	r3, r3
 8006490:	ea02 0103 	and.w	r1, r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	430a      	orrs	r2, r1
 800649c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800649e:	bf00      	nop
 80064a0:	371c      	adds	r7, #28
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	03ff63ff 	.word	0x03ff63ff

080064b0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	460b      	mov	r3, r1
 80064ba:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80064bc:	2300      	movs	r3, #0
 80064be:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064c4:	4a39      	ldr	r2, [pc, #228]	@ (80065ac <I2C_Enable_IRQ+0xfc>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d032      	beq.n	8006530 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80064ce:	4a38      	ldr	r2, [pc, #224]	@ (80065b0 <I2C_Enable_IRQ+0x100>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d02d      	beq.n	8006530 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80064d8:	4a36      	ldr	r2, [pc, #216]	@ (80065b4 <I2C_Enable_IRQ+0x104>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d028      	beq.n	8006530 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80064de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	da03      	bge.n	80064ee <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80064ec:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80064ee:	887b      	ldrh	r3, [r7, #2]
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80064fe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006500:	887b      	ldrh	r3, [r7, #2]
 8006502:	f003 0302 	and.w	r3, r3, #2
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006510:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006512:	887b      	ldrh	r3, [r7, #2]
 8006514:	2b10      	cmp	r3, #16
 8006516:	d103      	bne.n	8006520 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800651e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006520:	887b      	ldrh	r3, [r7, #2]
 8006522:	2b20      	cmp	r3, #32
 8006524:	d133      	bne.n	800658e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f043 0320 	orr.w	r3, r3, #32
 800652c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800652e:	e02e      	b.n	800658e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006530:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006534:	2b00      	cmp	r3, #0
 8006536:	da03      	bge.n	8006540 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800653e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006540:	887b      	ldrh	r3, [r7, #2]
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006550:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006552:	887b      	ldrh	r3, [r7, #2]
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d003      	beq.n	8006564 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006562:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006564:	887b      	ldrh	r3, [r7, #2]
 8006566:	2b10      	cmp	r3, #16
 8006568:	d103      	bne.n	8006572 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006570:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006572:	887b      	ldrh	r3, [r7, #2]
 8006574:	2b20      	cmp	r3, #32
 8006576:	d103      	bne.n	8006580 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800657e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006580:	887b      	ldrh	r3, [r7, #2]
 8006582:	2b40      	cmp	r3, #64	@ 0x40
 8006584:	d103      	bne.n	800658e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800658c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6819      	ldr	r1, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	430a      	orrs	r2, r1
 800659c:	601a      	str	r2, [r3, #0]
}
 800659e:	bf00      	nop
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	080051a3 	.word	0x080051a3
 80065b0:	08005645 	.word	0x08005645
 80065b4:	080053a9 	.word	0x080053a9

080065b8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	460b      	mov	r3, r1
 80065c2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80065c8:	887b      	ldrh	r3, [r7, #2]
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00f      	beq.n	80065f2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80065d8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80065e6:	2b28      	cmp	r3, #40	@ 0x28
 80065e8:	d003      	beq.n	80065f2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80065f0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80065f2:	887b      	ldrh	r3, [r7, #2]
 80065f4:	f003 0302 	and.w	r3, r3, #2
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00f      	beq.n	800661c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006602:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800660a:	b2db      	uxtb	r3, r3
 800660c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006610:	2b28      	cmp	r3, #40	@ 0x28
 8006612:	d003      	beq.n	800661c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800661a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800661c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006620:	2b00      	cmp	r3, #0
 8006622:	da03      	bge.n	800662c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800662a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800662c:	887b      	ldrh	r3, [r7, #2]
 800662e:	2b10      	cmp	r3, #16
 8006630:	d103      	bne.n	800663a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006638:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800663a:	887b      	ldrh	r3, [r7, #2]
 800663c:	2b20      	cmp	r3, #32
 800663e:	d103      	bne.n	8006648 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f043 0320 	orr.w	r3, r3, #32
 8006646:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006648:	887b      	ldrh	r3, [r7, #2]
 800664a:	2b40      	cmp	r3, #64	@ 0x40
 800664c:	d103      	bne.n	8006656 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006654:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	6819      	ldr	r1, [r3, #0]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	43da      	mvns	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	400a      	ands	r2, r1
 8006666:	601a      	str	r2, [r3, #0]
}
 8006668:	bf00      	nop
 800666a:	3714      	adds	r7, #20
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b20      	cmp	r3, #32
 8006688:	d138      	bne.n	80066fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006690:	2b01      	cmp	r3, #1
 8006692:	d101      	bne.n	8006698 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006694:	2302      	movs	r3, #2
 8006696:	e032      	b.n	80066fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2224      	movs	r2, #36	@ 0x24
 80066a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f022 0201 	bic.w	r2, r2, #1
 80066b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80066c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6819      	ldr	r1, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	430a      	orrs	r2, r1
 80066d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f042 0201 	orr.w	r2, r2, #1
 80066e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2220      	movs	r2, #32
 80066ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80066f8:	2300      	movs	r3, #0
 80066fa:	e000      	b.n	80066fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80066fc:	2302      	movs	r3, #2
  }
}
 80066fe:	4618      	mov	r0, r3
 8006700:	370c      	adds	r7, #12
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr

0800670a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800670a:	b480      	push	{r7}
 800670c:	b085      	sub	sp, #20
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
 8006712:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b20      	cmp	r3, #32
 800671e:	d139      	bne.n	8006794 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006726:	2b01      	cmp	r3, #1
 8006728:	d101      	bne.n	800672e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800672a:	2302      	movs	r3, #2
 800672c:	e033      	b.n	8006796 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2224      	movs	r2, #36	@ 0x24
 800673a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f022 0201 	bic.w	r2, r2, #1
 800674c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800675c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	021b      	lsls	r3, r3, #8
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	4313      	orrs	r3, r2
 8006766:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0201 	orr.w	r2, r2, #1
 800677e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2220      	movs	r2, #32
 8006784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006790:	2300      	movs	r3, #0
 8006792:	e000      	b.n	8006796 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006794:	2302      	movs	r3, #2
  }
}
 8006796:	4618      	mov	r0, r3
 8006798:	3714      	adds	r7, #20
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
	...

080067a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80067aa:	2300      	movs	r3, #0
 80067ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80067ae:	4b23      	ldr	r3, [pc, #140]	@ (800683c <HAL_PWREx_EnableOverDrive+0x98>)
 80067b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b2:	4a22      	ldr	r2, [pc, #136]	@ (800683c <HAL_PWREx_EnableOverDrive+0x98>)
 80067b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80067ba:	4b20      	ldr	r3, [pc, #128]	@ (800683c <HAL_PWREx_EnableOverDrive+0x98>)
 80067bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067c2:	603b      	str	r3, [r7, #0]
 80067c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80067c6:	4b1e      	ldr	r3, [pc, #120]	@ (8006840 <HAL_PWREx_EnableOverDrive+0x9c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a1d      	ldr	r2, [pc, #116]	@ (8006840 <HAL_PWREx_EnableOverDrive+0x9c>)
 80067cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067d0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80067d2:	f7fb fa39 	bl	8001c48 <HAL_GetTick>
 80067d6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80067d8:	e009      	b.n	80067ee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80067da:	f7fb fa35 	bl	8001c48 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80067e8:	d901      	bls.n	80067ee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e022      	b.n	8006834 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80067ee:	4b14      	ldr	r3, [pc, #80]	@ (8006840 <HAL_PWREx_EnableOverDrive+0x9c>)
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067fa:	d1ee      	bne.n	80067da <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80067fc:	4b10      	ldr	r3, [pc, #64]	@ (8006840 <HAL_PWREx_EnableOverDrive+0x9c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a0f      	ldr	r2, [pc, #60]	@ (8006840 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006802:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006806:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006808:	f7fb fa1e 	bl	8001c48 <HAL_GetTick>
 800680c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800680e:	e009      	b.n	8006824 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006810:	f7fb fa1a 	bl	8001c48 <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800681e:	d901      	bls.n	8006824 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e007      	b.n	8006834 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006824:	4b06      	ldr	r3, [pc, #24]	@ (8006840 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800682c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006830:	d1ee      	bne.n	8006810 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	40023800 	.word	0x40023800
 8006840:	40007000 	.word	0x40007000

08006844 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800684c:	2300      	movs	r3, #0
 800684e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e291      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 8087 	beq.w	8006976 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006868:	4b96      	ldr	r3, [pc, #600]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f003 030c 	and.w	r3, r3, #12
 8006870:	2b04      	cmp	r3, #4
 8006872:	d00c      	beq.n	800688e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006874:	4b93      	ldr	r3, [pc, #588]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f003 030c 	and.w	r3, r3, #12
 800687c:	2b08      	cmp	r3, #8
 800687e:	d112      	bne.n	80068a6 <HAL_RCC_OscConfig+0x62>
 8006880:	4b90      	ldr	r3, [pc, #576]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006888:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800688c:	d10b      	bne.n	80068a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800688e:	4b8d      	ldr	r3, [pc, #564]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d06c      	beq.n	8006974 <HAL_RCC_OscConfig+0x130>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d168      	bne.n	8006974 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e26b      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068ae:	d106      	bne.n	80068be <HAL_RCC_OscConfig+0x7a>
 80068b0:	4b84      	ldr	r3, [pc, #528]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a83      	ldr	r2, [pc, #524]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80068b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068ba:	6013      	str	r3, [r2, #0]
 80068bc:	e02e      	b.n	800691c <HAL_RCC_OscConfig+0xd8>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10c      	bne.n	80068e0 <HAL_RCC_OscConfig+0x9c>
 80068c6:	4b7f      	ldr	r3, [pc, #508]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a7e      	ldr	r2, [pc, #504]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80068cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068d0:	6013      	str	r3, [r2, #0]
 80068d2:	4b7c      	ldr	r3, [pc, #496]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a7b      	ldr	r2, [pc, #492]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80068d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068dc:	6013      	str	r3, [r2, #0]
 80068de:	e01d      	b.n	800691c <HAL_RCC_OscConfig+0xd8>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80068e8:	d10c      	bne.n	8006904 <HAL_RCC_OscConfig+0xc0>
 80068ea:	4b76      	ldr	r3, [pc, #472]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a75      	ldr	r2, [pc, #468]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80068f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80068f4:	6013      	str	r3, [r2, #0]
 80068f6:	4b73      	ldr	r3, [pc, #460]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a72      	ldr	r2, [pc, #456]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80068fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006900:	6013      	str	r3, [r2, #0]
 8006902:	e00b      	b.n	800691c <HAL_RCC_OscConfig+0xd8>
 8006904:	4b6f      	ldr	r3, [pc, #444]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a6e      	ldr	r2, [pc, #440]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 800690a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800690e:	6013      	str	r3, [r2, #0]
 8006910:	4b6c      	ldr	r3, [pc, #432]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a6b      	ldr	r2, [pc, #428]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006916:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800691a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d013      	beq.n	800694c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006924:	f7fb f990 	bl	8001c48 <HAL_GetTick>
 8006928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800692a:	e008      	b.n	800693e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800692c:	f7fb f98c 	bl	8001c48 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	2b64      	cmp	r3, #100	@ 0x64
 8006938:	d901      	bls.n	800693e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e21f      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800693e:	4b61      	ldr	r3, [pc, #388]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d0f0      	beq.n	800692c <HAL_RCC_OscConfig+0xe8>
 800694a:	e014      	b.n	8006976 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800694c:	f7fb f97c 	bl	8001c48 <HAL_GetTick>
 8006950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006952:	e008      	b.n	8006966 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006954:	f7fb f978 	bl	8001c48 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b64      	cmp	r3, #100	@ 0x64
 8006960:	d901      	bls.n	8006966 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e20b      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006966:	4b57      	ldr	r3, [pc, #348]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1f0      	bne.n	8006954 <HAL_RCC_OscConfig+0x110>
 8006972:	e000      	b.n	8006976 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	2b00      	cmp	r3, #0
 8006980:	d069      	beq.n	8006a56 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006982:	4b50      	ldr	r3, [pc, #320]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f003 030c 	and.w	r3, r3, #12
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00b      	beq.n	80069a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800698e:	4b4d      	ldr	r3, [pc, #308]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f003 030c 	and.w	r3, r3, #12
 8006996:	2b08      	cmp	r3, #8
 8006998:	d11c      	bne.n	80069d4 <HAL_RCC_OscConfig+0x190>
 800699a:	4b4a      	ldr	r3, [pc, #296]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d116      	bne.n	80069d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069a6:	4b47      	ldr	r3, [pc, #284]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d005      	beq.n	80069be <HAL_RCC_OscConfig+0x17a>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d001      	beq.n	80069be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e1df      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069be:	4b41      	ldr	r3, [pc, #260]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	00db      	lsls	r3, r3, #3
 80069cc:	493d      	ldr	r1, [pc, #244]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80069ce:	4313      	orrs	r3, r2
 80069d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069d2:	e040      	b.n	8006a56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d023      	beq.n	8006a24 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069dc:	4b39      	ldr	r3, [pc, #228]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a38      	ldr	r2, [pc, #224]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80069e2:	f043 0301 	orr.w	r3, r3, #1
 80069e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e8:	f7fb f92e 	bl	8001c48 <HAL_GetTick>
 80069ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069ee:	e008      	b.n	8006a02 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069f0:	f7fb f92a 	bl	8001c48 <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d901      	bls.n	8006a02 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e1bd      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a02:	4b30      	ldr	r3, [pc, #192]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d0f0      	beq.n	80069f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a0e:	4b2d      	ldr	r3, [pc, #180]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	00db      	lsls	r3, r3, #3
 8006a1c:	4929      	ldr	r1, [pc, #164]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	600b      	str	r3, [r1, #0]
 8006a22:	e018      	b.n	8006a56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a24:	4b27      	ldr	r3, [pc, #156]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a26      	ldr	r2, [pc, #152]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006a2a:	f023 0301 	bic.w	r3, r3, #1
 8006a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a30:	f7fb f90a 	bl	8001c48 <HAL_GetTick>
 8006a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a36:	e008      	b.n	8006a4a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a38:	f7fb f906 	bl	8001c48 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d901      	bls.n	8006a4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e199      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1f0      	bne.n	8006a38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0308 	and.w	r3, r3, #8
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d038      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d019      	beq.n	8006a9e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a6a:	4b16      	ldr	r3, [pc, #88]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006a6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a6e:	4a15      	ldr	r2, [pc, #84]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006a70:	f043 0301 	orr.w	r3, r3, #1
 8006a74:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a76:	f7fb f8e7 	bl	8001c48 <HAL_GetTick>
 8006a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a7c:	e008      	b.n	8006a90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a7e:	f7fb f8e3 	bl	8001c48 <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d901      	bls.n	8006a90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e176      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a90:	4b0c      	ldr	r3, [pc, #48]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006a92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a94:	f003 0302 	and.w	r3, r3, #2
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d0f0      	beq.n	8006a7e <HAL_RCC_OscConfig+0x23a>
 8006a9c:	e01a      	b.n	8006ad4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a9e:	4b09      	ldr	r3, [pc, #36]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006aa2:	4a08      	ldr	r2, [pc, #32]	@ (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006aa4:	f023 0301 	bic.w	r3, r3, #1
 8006aa8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aaa:	f7fb f8cd 	bl	8001c48 <HAL_GetTick>
 8006aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ab0:	e00a      	b.n	8006ac8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ab2:	f7fb f8c9 	bl	8001c48 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d903      	bls.n	8006ac8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e15c      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>
 8006ac4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ac8:	4b91      	ldr	r3, [pc, #580]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006aca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006acc:	f003 0302 	and.w	r3, r3, #2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1ee      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0304 	and.w	r3, r3, #4
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f000 80a4 	beq.w	8006c2a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ae2:	4b8b      	ldr	r3, [pc, #556]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10d      	bne.n	8006b0a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006aee:	4b88      	ldr	r3, [pc, #544]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af2:	4a87      	ldr	r2, [pc, #540]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006af8:	6413      	str	r3, [r2, #64]	@ 0x40
 8006afa:	4b85      	ldr	r3, [pc, #532]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b02:	60bb      	str	r3, [r7, #8]
 8006b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b06:	2301      	movs	r3, #1
 8006b08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b0a:	4b82      	ldr	r3, [pc, #520]	@ (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d118      	bne.n	8006b48 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006b16:	4b7f      	ldr	r3, [pc, #508]	@ (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a7e      	ldr	r2, [pc, #504]	@ (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b22:	f7fb f891 	bl	8001c48 <HAL_GetTick>
 8006b26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b28:	e008      	b.n	8006b3c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b2a:	f7fb f88d 	bl	8001c48 <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	2b64      	cmp	r3, #100	@ 0x64
 8006b36:	d901      	bls.n	8006b3c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e120      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b3c:	4b75      	ldr	r3, [pc, #468]	@ (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d0f0      	beq.n	8006b2a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d106      	bne.n	8006b5e <HAL_RCC_OscConfig+0x31a>
 8006b50:	4b6f      	ldr	r3, [pc, #444]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b54:	4a6e      	ldr	r2, [pc, #440]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006b56:	f043 0301 	orr.w	r3, r3, #1
 8006b5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b5c:	e02d      	b.n	8006bba <HAL_RCC_OscConfig+0x376>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10c      	bne.n	8006b80 <HAL_RCC_OscConfig+0x33c>
 8006b66:	4b6a      	ldr	r3, [pc, #424]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b6a:	4a69      	ldr	r2, [pc, #420]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006b6c:	f023 0301 	bic.w	r3, r3, #1
 8006b70:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b72:	4b67      	ldr	r3, [pc, #412]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b76:	4a66      	ldr	r2, [pc, #408]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006b78:	f023 0304 	bic.w	r3, r3, #4
 8006b7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b7e:	e01c      	b.n	8006bba <HAL_RCC_OscConfig+0x376>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	2b05      	cmp	r3, #5
 8006b86:	d10c      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x35e>
 8006b88:	4b61      	ldr	r3, [pc, #388]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b8c:	4a60      	ldr	r2, [pc, #384]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006b8e:	f043 0304 	orr.w	r3, r3, #4
 8006b92:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b94:	4b5e      	ldr	r3, [pc, #376]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b98:	4a5d      	ldr	r2, [pc, #372]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006b9a:	f043 0301 	orr.w	r3, r3, #1
 8006b9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ba0:	e00b      	b.n	8006bba <HAL_RCC_OscConfig+0x376>
 8006ba2:	4b5b      	ldr	r3, [pc, #364]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ba6:	4a5a      	ldr	r2, [pc, #360]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006ba8:	f023 0301 	bic.w	r3, r3, #1
 8006bac:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bae:	4b58      	ldr	r3, [pc, #352]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bb2:	4a57      	ldr	r2, [pc, #348]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006bb4:	f023 0304 	bic.w	r3, r3, #4
 8006bb8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d015      	beq.n	8006bee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bc2:	f7fb f841 	bl	8001c48 <HAL_GetTick>
 8006bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bc8:	e00a      	b.n	8006be0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bca:	f7fb f83d 	bl	8001c48 <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d901      	bls.n	8006be0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e0ce      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006be0:	4b4b      	ldr	r3, [pc, #300]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006be4:	f003 0302 	and.w	r3, r3, #2
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d0ee      	beq.n	8006bca <HAL_RCC_OscConfig+0x386>
 8006bec:	e014      	b.n	8006c18 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bee:	f7fb f82b 	bl	8001c48 <HAL_GetTick>
 8006bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bf4:	e00a      	b.n	8006c0c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bf6:	f7fb f827 	bl	8001c48 <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d901      	bls.n	8006c0c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e0b8      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c0c:	4b40      	ldr	r3, [pc, #256]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c10:	f003 0302 	and.w	r3, r3, #2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1ee      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d105      	bne.n	8006c2a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c1e:	4b3c      	ldr	r3, [pc, #240]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c22:	4a3b      	ldr	r2, [pc, #236]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006c24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c28:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 80a4 	beq.w	8006d7c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c34:	4b36      	ldr	r3, [pc, #216]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f003 030c 	and.w	r3, r3, #12
 8006c3c:	2b08      	cmp	r3, #8
 8006c3e:	d06b      	beq.n	8006d18 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d149      	bne.n	8006cdc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c48:	4b31      	ldr	r3, [pc, #196]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a30      	ldr	r2, [pc, #192]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006c4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c54:	f7fa fff8 	bl	8001c48 <HAL_GetTick>
 8006c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c5a:	e008      	b.n	8006c6e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c5c:	f7fa fff4 	bl	8001c48 <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d901      	bls.n	8006c6e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e087      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c6e:	4b28      	ldr	r3, [pc, #160]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1f0      	bne.n	8006c5c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	69da      	ldr	r2, [r3, #28]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	431a      	orrs	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c88:	019b      	lsls	r3, r3, #6
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c90:	085b      	lsrs	r3, r3, #1
 8006c92:	3b01      	subs	r3, #1
 8006c94:	041b      	lsls	r3, r3, #16
 8006c96:	431a      	orrs	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9c:	061b      	lsls	r3, r3, #24
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	4a1b      	ldr	r2, [pc, #108]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006ca2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006ca6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ca8:	4b19      	ldr	r3, [pc, #100]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a18      	ldr	r2, [pc, #96]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006cae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb4:	f7fa ffc8 	bl	8001c48 <HAL_GetTick>
 8006cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cba:	e008      	b.n	8006cce <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cbc:	f7fa ffc4 	bl	8001c48 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d901      	bls.n	8006cce <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e057      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cce:	4b10      	ldr	r3, [pc, #64]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d0f0      	beq.n	8006cbc <HAL_RCC_OscConfig+0x478>
 8006cda:	e04f      	b.n	8006d7c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a0b      	ldr	r2, [pc, #44]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006ce2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce8:	f7fa ffae 	bl	8001c48 <HAL_GetTick>
 8006cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cee:	e008      	b.n	8006d02 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cf0:	f7fa ffaa 	bl	8001c48 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d901      	bls.n	8006d02 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e03d      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d02:	4b03      	ldr	r3, [pc, #12]	@ (8006d10 <HAL_RCC_OscConfig+0x4cc>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1f0      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x4ac>
 8006d0e:	e035      	b.n	8006d7c <HAL_RCC_OscConfig+0x538>
 8006d10:	40023800 	.word	0x40023800
 8006d14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006d18:	4b1b      	ldr	r3, [pc, #108]	@ (8006d88 <HAL_RCC_OscConfig+0x544>)
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d028      	beq.n	8006d78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d121      	bne.n	8006d78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d11a      	bne.n	8006d78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006d48:	4013      	ands	r3, r2
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006d4e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d111      	bne.n	8006d78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d5e:	085b      	lsrs	r3, r3, #1
 8006d60:	3b01      	subs	r3, #1
 8006d62:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d107      	bne.n	8006d78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d72:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d001      	beq.n	8006d7c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e000      	b.n	8006d7e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3718      	adds	r7, #24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	40023800 	.word	0x40023800

08006d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006d96:	2300      	movs	r3, #0
 8006d98:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d101      	bne.n	8006da4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e0d0      	b.n	8006f46 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006da4:	4b6a      	ldr	r3, [pc, #424]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c4>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 030f 	and.w	r3, r3, #15
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d910      	bls.n	8006dd4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006db2:	4b67      	ldr	r3, [pc, #412]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c4>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f023 020f 	bic.w	r2, r3, #15
 8006dba:	4965      	ldr	r1, [pc, #404]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c4>)
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dc2:	4b63      	ldr	r3, [pc, #396]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c4>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 030f 	and.w	r3, r3, #15
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d001      	beq.n	8006dd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e0b8      	b.n	8006f46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0302 	and.w	r3, r3, #2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d020      	beq.n	8006e22 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0304 	and.w	r3, r3, #4
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d005      	beq.n	8006df8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006dec:	4b59      	ldr	r3, [pc, #356]	@ (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	4a58      	ldr	r2, [pc, #352]	@ (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006df2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006df6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0308 	and.w	r3, r3, #8
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d005      	beq.n	8006e10 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e04:	4b53      	ldr	r3, [pc, #332]	@ (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	4a52      	ldr	r2, [pc, #328]	@ (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006e0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006e0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e10:	4b50      	ldr	r3, [pc, #320]	@ (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	494d      	ldr	r1, [pc, #308]	@ (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d040      	beq.n	8006eb0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d107      	bne.n	8006e46 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e36:	4b47      	ldr	r3, [pc, #284]	@ (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d115      	bne.n	8006e6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e07f      	b.n	8006f46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d107      	bne.n	8006e5e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e4e:	4b41      	ldr	r3, [pc, #260]	@ (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d109      	bne.n	8006e6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e073      	b.n	8006f46 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e5e:	4b3d      	ldr	r3, [pc, #244]	@ (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0302 	and.w	r3, r3, #2
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e06b      	b.n	8006f46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e6e:	4b39      	ldr	r3, [pc, #228]	@ (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f023 0203 	bic.w	r2, r3, #3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	4936      	ldr	r1, [pc, #216]	@ (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e80:	f7fa fee2 	bl	8001c48 <HAL_GetTick>
 8006e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e86:	e00a      	b.n	8006e9e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e88:	f7fa fede 	bl	8001c48 <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d901      	bls.n	8006e9e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e053      	b.n	8006f46 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e9e:	4b2d      	ldr	r3, [pc, #180]	@ (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	f003 020c 	and.w	r2, r3, #12
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d1eb      	bne.n	8006e88 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006eb0:	4b27      	ldr	r3, [pc, #156]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c4>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 030f 	and.w	r3, r3, #15
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d210      	bcs.n	8006ee0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ebe:	4b24      	ldr	r3, [pc, #144]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c4>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f023 020f 	bic.w	r2, r3, #15
 8006ec6:	4922      	ldr	r1, [pc, #136]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c4>)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ece:	4b20      	ldr	r3, [pc, #128]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c4>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 030f 	and.w	r3, r3, #15
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d001      	beq.n	8006ee0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e032      	b.n	8006f46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 0304 	and.w	r3, r3, #4
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d008      	beq.n	8006efe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006eec:	4b19      	ldr	r3, [pc, #100]	@ (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	4916      	ldr	r1, [pc, #88]	@ (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0308 	and.w	r3, r3, #8
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d009      	beq.n	8006f1e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006f0a:	4b12      	ldr	r3, [pc, #72]	@ (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	00db      	lsls	r3, r3, #3
 8006f18:	490e      	ldr	r1, [pc, #56]	@ (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006f1e:	f000 f821 	bl	8006f64 <HAL_RCC_GetSysClockFreq>
 8006f22:	4602      	mov	r2, r0
 8006f24:	4b0b      	ldr	r3, [pc, #44]	@ (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	091b      	lsrs	r3, r3, #4
 8006f2a:	f003 030f 	and.w	r3, r3, #15
 8006f2e:	490a      	ldr	r1, [pc, #40]	@ (8006f58 <HAL_RCC_ClockConfig+0x1cc>)
 8006f30:	5ccb      	ldrb	r3, [r1, r3]
 8006f32:	fa22 f303 	lsr.w	r3, r2, r3
 8006f36:	4a09      	ldr	r2, [pc, #36]	@ (8006f5c <HAL_RCC_ClockConfig+0x1d0>)
 8006f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006f3a:	4b09      	ldr	r3, [pc, #36]	@ (8006f60 <HAL_RCC_ClockConfig+0x1d4>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7fa fe3e 	bl	8001bc0 <HAL_InitTick>

  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	40023c00 	.word	0x40023c00
 8006f54:	40023800 	.word	0x40023800
 8006f58:	08019390 	.word	0x08019390
 8006f5c:	20000000 	.word	0x20000000
 8006f60:	20000004 	.word	0x20000004

08006f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f68:	b090      	sub	sp, #64	@ 0x40
 8006f6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f70:	2300      	movs	r3, #0
 8006f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f74:	2300      	movs	r3, #0
 8006f76:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f7c:	4b59      	ldr	r3, [pc, #356]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f003 030c 	and.w	r3, r3, #12
 8006f84:	2b08      	cmp	r3, #8
 8006f86:	d00d      	beq.n	8006fa4 <HAL_RCC_GetSysClockFreq+0x40>
 8006f88:	2b08      	cmp	r3, #8
 8006f8a:	f200 80a1 	bhi.w	80070d0 <HAL_RCC_GetSysClockFreq+0x16c>
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d002      	beq.n	8006f98 <HAL_RCC_GetSysClockFreq+0x34>
 8006f92:	2b04      	cmp	r3, #4
 8006f94:	d003      	beq.n	8006f9e <HAL_RCC_GetSysClockFreq+0x3a>
 8006f96:	e09b      	b.n	80070d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f98:	4b53      	ldr	r3, [pc, #332]	@ (80070e8 <HAL_RCC_GetSysClockFreq+0x184>)
 8006f9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006f9c:	e09b      	b.n	80070d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f9e:	4b53      	ldr	r3, [pc, #332]	@ (80070ec <HAL_RCC_GetSysClockFreq+0x188>)
 8006fa0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006fa2:	e098      	b.n	80070d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fa4:	4b4f      	ldr	r3, [pc, #316]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006fac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006fae:	4b4d      	ldr	r3, [pc, #308]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d028      	beq.n	800700c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fba:	4b4a      	ldr	r3, [pc, #296]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	099b      	lsrs	r3, r3, #6
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	623b      	str	r3, [r7, #32]
 8006fc4:	627a      	str	r2, [r7, #36]	@ 0x24
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006fcc:	2100      	movs	r1, #0
 8006fce:	4b47      	ldr	r3, [pc, #284]	@ (80070ec <HAL_RCC_GetSysClockFreq+0x188>)
 8006fd0:	fb03 f201 	mul.w	r2, r3, r1
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	fb00 f303 	mul.w	r3, r0, r3
 8006fda:	4413      	add	r3, r2
 8006fdc:	4a43      	ldr	r2, [pc, #268]	@ (80070ec <HAL_RCC_GetSysClockFreq+0x188>)
 8006fde:	fba0 1202 	umull	r1, r2, r0, r2
 8006fe2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fe4:	460a      	mov	r2, r1
 8006fe6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006fe8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fea:	4413      	add	r3, r2
 8006fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	61bb      	str	r3, [r7, #24]
 8006ff4:	61fa      	str	r2, [r7, #28]
 8006ff6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ffa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006ffe:	f7f9 f957 	bl	80002b0 <__aeabi_uldivmod>
 8007002:	4602      	mov	r2, r0
 8007004:	460b      	mov	r3, r1
 8007006:	4613      	mov	r3, r2
 8007008:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800700a:	e053      	b.n	80070b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800700c:	4b35      	ldr	r3, [pc, #212]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	099b      	lsrs	r3, r3, #6
 8007012:	2200      	movs	r2, #0
 8007014:	613b      	str	r3, [r7, #16]
 8007016:	617a      	str	r2, [r7, #20]
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800701e:	f04f 0b00 	mov.w	fp, #0
 8007022:	4652      	mov	r2, sl
 8007024:	465b      	mov	r3, fp
 8007026:	f04f 0000 	mov.w	r0, #0
 800702a:	f04f 0100 	mov.w	r1, #0
 800702e:	0159      	lsls	r1, r3, #5
 8007030:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007034:	0150      	lsls	r0, r2, #5
 8007036:	4602      	mov	r2, r0
 8007038:	460b      	mov	r3, r1
 800703a:	ebb2 080a 	subs.w	r8, r2, sl
 800703e:	eb63 090b 	sbc.w	r9, r3, fp
 8007042:	f04f 0200 	mov.w	r2, #0
 8007046:	f04f 0300 	mov.w	r3, #0
 800704a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800704e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007052:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007056:	ebb2 0408 	subs.w	r4, r2, r8
 800705a:	eb63 0509 	sbc.w	r5, r3, r9
 800705e:	f04f 0200 	mov.w	r2, #0
 8007062:	f04f 0300 	mov.w	r3, #0
 8007066:	00eb      	lsls	r3, r5, #3
 8007068:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800706c:	00e2      	lsls	r2, r4, #3
 800706e:	4614      	mov	r4, r2
 8007070:	461d      	mov	r5, r3
 8007072:	eb14 030a 	adds.w	r3, r4, sl
 8007076:	603b      	str	r3, [r7, #0]
 8007078:	eb45 030b 	adc.w	r3, r5, fp
 800707c:	607b      	str	r3, [r7, #4]
 800707e:	f04f 0200 	mov.w	r2, #0
 8007082:	f04f 0300 	mov.w	r3, #0
 8007086:	e9d7 4500 	ldrd	r4, r5, [r7]
 800708a:	4629      	mov	r1, r5
 800708c:	028b      	lsls	r3, r1, #10
 800708e:	4621      	mov	r1, r4
 8007090:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007094:	4621      	mov	r1, r4
 8007096:	028a      	lsls	r2, r1, #10
 8007098:	4610      	mov	r0, r2
 800709a:	4619      	mov	r1, r3
 800709c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800709e:	2200      	movs	r2, #0
 80070a0:	60bb      	str	r3, [r7, #8]
 80070a2:	60fa      	str	r2, [r7, #12]
 80070a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070a8:	f7f9 f902 	bl	80002b0 <__aeabi_uldivmod>
 80070ac:	4602      	mov	r2, r0
 80070ae:	460b      	mov	r3, r1
 80070b0:	4613      	mov	r3, r2
 80070b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80070b4:	4b0b      	ldr	r3, [pc, #44]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	0c1b      	lsrs	r3, r3, #16
 80070ba:	f003 0303 	and.w	r3, r3, #3
 80070be:	3301      	adds	r3, #1
 80070c0:	005b      	lsls	r3, r3, #1
 80070c2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80070c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80070c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80070ce:	e002      	b.n	80070d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070d0:	4b05      	ldr	r3, [pc, #20]	@ (80070e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80070d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80070d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3740      	adds	r7, #64	@ 0x40
 80070dc:	46bd      	mov	sp, r7
 80070de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070e2:	bf00      	nop
 80070e4:	40023800 	.word	0x40023800
 80070e8:	00f42400 	.word	0x00f42400
 80070ec:	017d7840 	.word	0x017d7840

080070f0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070f0:	b480      	push	{r7}
 80070f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070f4:	4b03      	ldr	r3, [pc, #12]	@ (8007104 <HAL_RCC_GetHCLKFreq+0x14>)
 80070f6:	681b      	ldr	r3, [r3, #0]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	20000000 	.word	0x20000000

08007108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800710c:	f7ff fff0 	bl	80070f0 <HAL_RCC_GetHCLKFreq>
 8007110:	4602      	mov	r2, r0
 8007112:	4b05      	ldr	r3, [pc, #20]	@ (8007128 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	0a9b      	lsrs	r3, r3, #10
 8007118:	f003 0307 	and.w	r3, r3, #7
 800711c:	4903      	ldr	r1, [pc, #12]	@ (800712c <HAL_RCC_GetPCLK1Freq+0x24>)
 800711e:	5ccb      	ldrb	r3, [r1, r3]
 8007120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007124:	4618      	mov	r0, r3
 8007126:	bd80      	pop	{r7, pc}
 8007128:	40023800 	.word	0x40023800
 800712c:	080193a0 	.word	0x080193a0

08007130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007134:	f7ff ffdc 	bl	80070f0 <HAL_RCC_GetHCLKFreq>
 8007138:	4602      	mov	r2, r0
 800713a:	4b05      	ldr	r3, [pc, #20]	@ (8007150 <HAL_RCC_GetPCLK2Freq+0x20>)
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	0b5b      	lsrs	r3, r3, #13
 8007140:	f003 0307 	and.w	r3, r3, #7
 8007144:	4903      	ldr	r1, [pc, #12]	@ (8007154 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007146:	5ccb      	ldrb	r3, [r1, r3]
 8007148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800714c:	4618      	mov	r0, r3
 800714e:	bd80      	pop	{r7, pc}
 8007150:	40023800 	.word	0x40023800
 8007154:	080193a0 	.word	0x080193a0

08007158 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b088      	sub	sp, #32
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007160:	2300      	movs	r3, #0
 8007162:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007164:	2300      	movs	r3, #0
 8007166:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007168:	2300      	movs	r3, #0
 800716a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800716c:	2300      	movs	r3, #0
 800716e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007170:	2300      	movs	r3, #0
 8007172:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 0301 	and.w	r3, r3, #1
 800717c:	2b00      	cmp	r3, #0
 800717e:	d012      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007180:	4b69      	ldr	r3, [pc, #420]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	4a68      	ldr	r2, [pc, #416]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007186:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800718a:	6093      	str	r3, [r2, #8]
 800718c:	4b66      	ldr	r3, [pc, #408]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800718e:	689a      	ldr	r2, [r3, #8]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007194:	4964      	ldr	r1, [pc, #400]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007196:	4313      	orrs	r3, r2
 8007198:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80071a2:	2301      	movs	r3, #1
 80071a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d017      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071b2:	4b5d      	ldr	r3, [pc, #372]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071b8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071c0:	4959      	ldr	r1, [pc, #356]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071d0:	d101      	bne.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80071d2:	2301      	movs	r3, #1
 80071d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d101      	bne.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80071de:	2301      	movs	r3, #1
 80071e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d017      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80071ee:	4b4e      	ldr	r3, [pc, #312]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071f4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071fc:	494a      	ldr	r1, [pc, #296]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007208:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800720c:	d101      	bne.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800720e:	2301      	movs	r3, #1
 8007210:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800721a:	2301      	movs	r3, #1
 800721c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007226:	2b00      	cmp	r3, #0
 8007228:	d001      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800722a:	2301      	movs	r3, #1
 800722c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0320 	and.w	r3, r3, #32
 8007236:	2b00      	cmp	r3, #0
 8007238:	f000 808b 	beq.w	8007352 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800723c:	4b3a      	ldr	r3, [pc, #232]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800723e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007240:	4a39      	ldr	r2, [pc, #228]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007242:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007246:	6413      	str	r3, [r2, #64]	@ 0x40
 8007248:	4b37      	ldr	r3, [pc, #220]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800724a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800724c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007250:	60bb      	str	r3, [r7, #8]
 8007252:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007254:	4b35      	ldr	r3, [pc, #212]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a34      	ldr	r2, [pc, #208]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800725a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800725e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007260:	f7fa fcf2 	bl	8001c48 <HAL_GetTick>
 8007264:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007266:	e008      	b.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007268:	f7fa fcee 	bl	8001c48 <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	2b64      	cmp	r3, #100	@ 0x64
 8007274:	d901      	bls.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e357      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800727a:	4b2c      	ldr	r3, [pc, #176]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007282:	2b00      	cmp	r3, #0
 8007284:	d0f0      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007286:	4b28      	ldr	r3, [pc, #160]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800728a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800728e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d035      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800729a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800729e:	693a      	ldr	r2, [r7, #16]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d02e      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072a4:	4b20      	ldr	r3, [pc, #128]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80072ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072b2:	4a1d      	ldr	r2, [pc, #116]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072b8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80072ba:	4b1b      	ldr	r3, [pc, #108]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072be:	4a1a      	ldr	r2, [pc, #104]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072c4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80072c6:	4a18      	ldr	r2, [pc, #96]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80072cc:	4b16      	ldr	r3, [pc, #88]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072d0:	f003 0301 	and.w	r3, r3, #1
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d114      	bne.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d8:	f7fa fcb6 	bl	8001c48 <HAL_GetTick>
 80072dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072de:	e00a      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072e0:	f7fa fcb2 	bl	8001c48 <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d901      	bls.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e319      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072fa:	f003 0302 	and.w	r3, r3, #2
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d0ee      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007306:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800730a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800730e:	d111      	bne.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007310:	4b05      	ldr	r3, [pc, #20]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800731c:	4b04      	ldr	r3, [pc, #16]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800731e:	400b      	ands	r3, r1
 8007320:	4901      	ldr	r1, [pc, #4]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007322:	4313      	orrs	r3, r2
 8007324:	608b      	str	r3, [r1, #8]
 8007326:	e00b      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007328:	40023800 	.word	0x40023800
 800732c:	40007000 	.word	0x40007000
 8007330:	0ffffcff 	.word	0x0ffffcff
 8007334:	4baa      	ldr	r3, [pc, #680]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	4aa9      	ldr	r2, [pc, #676]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800733a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800733e:	6093      	str	r3, [r2, #8]
 8007340:	4ba7      	ldr	r3, [pc, #668]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007342:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800734c:	49a4      	ldr	r1, [pc, #656]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800734e:	4313      	orrs	r3, r2
 8007350:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0310 	and.w	r3, r3, #16
 800735a:	2b00      	cmp	r3, #0
 800735c:	d010      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800735e:	4ba0      	ldr	r3, [pc, #640]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007360:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007364:	4a9e      	ldr	r2, [pc, #632]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007366:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800736a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800736e:	4b9c      	ldr	r3, [pc, #624]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007370:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007378:	4999      	ldr	r1, [pc, #612]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800737a:	4313      	orrs	r3, r2
 800737c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00a      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800738c:	4b94      	ldr	r3, [pc, #592]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800738e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007392:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800739a:	4991      	ldr	r1, [pc, #580]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800739c:	4313      	orrs	r3, r2
 800739e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00a      	beq.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80073ae:	4b8c      	ldr	r3, [pc, #560]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073bc:	4988      	ldr	r1, [pc, #544]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00a      	beq.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80073d0:	4b83      	ldr	r3, [pc, #524]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073de:	4980      	ldr	r1, [pc, #512]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00a      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80073f2:	4b7b      	ldr	r3, [pc, #492]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073f8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007400:	4977      	ldr	r1, [pc, #476]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007402:	4313      	orrs	r3, r2
 8007404:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00a      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007414:	4b72      	ldr	r3, [pc, #456]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800741a:	f023 0203 	bic.w	r2, r3, #3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007422:	496f      	ldr	r1, [pc, #444]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007424:	4313      	orrs	r3, r2
 8007426:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00a      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007436:	4b6a      	ldr	r3, [pc, #424]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800743c:	f023 020c 	bic.w	r2, r3, #12
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007444:	4966      	ldr	r1, [pc, #408]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007446:	4313      	orrs	r3, r2
 8007448:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00a      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007458:	4b61      	ldr	r3, [pc, #388]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800745a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800745e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007466:	495e      	ldr	r1, [pc, #376]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007468:	4313      	orrs	r3, r2
 800746a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00a      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800747a:	4b59      	ldr	r3, [pc, #356]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800747c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007480:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007488:	4955      	ldr	r1, [pc, #340]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800748a:	4313      	orrs	r3, r2
 800748c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00a      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800749c:	4b50      	ldr	r3, [pc, #320]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800749e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074aa:	494d      	ldr	r1, [pc, #308]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074ac:	4313      	orrs	r3, r2
 80074ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00a      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80074be:	4b48      	ldr	r3, [pc, #288]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074c4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074cc:	4944      	ldr	r1, [pc, #272]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00a      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80074e0:	4b3f      	ldr	r3, [pc, #252]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074e6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ee:	493c      	ldr	r1, [pc, #240]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074f0:	4313      	orrs	r3, r2
 80074f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00a      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007502:	4b37      	ldr	r3, [pc, #220]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007508:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007510:	4933      	ldr	r1, [pc, #204]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007512:	4313      	orrs	r3, r2
 8007514:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00a      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007524:	4b2e      	ldr	r3, [pc, #184]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800752a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007532:	492b      	ldr	r1, [pc, #172]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007534:	4313      	orrs	r3, r2
 8007536:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d011      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007546:	4b26      	ldr	r3, [pc, #152]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800754c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007554:	4922      	ldr	r1, [pc, #136]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007556:	4313      	orrs	r3, r2
 8007558:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007560:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007564:	d101      	bne.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007566:	2301      	movs	r3, #1
 8007568:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 0308 	and.w	r3, r3, #8
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007576:	2301      	movs	r3, #1
 8007578:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00a      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007586:	4b16      	ldr	r3, [pc, #88]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800758c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007594:	4912      	ldr	r1, [pc, #72]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007596:	4313      	orrs	r3, r2
 8007598:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00b      	beq.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80075a8:	4b0d      	ldr	r3, [pc, #52]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075ae:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075b8:	4909      	ldr	r1, [pc, #36]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d006      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	f000 80d9 	beq.w	8007786 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80075d4:	4b02      	ldr	r3, [pc, #8]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a01      	ldr	r2, [pc, #4]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80075de:	e001      	b.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80075e0:	40023800 	.word	0x40023800
 80075e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075e6:	f7fa fb2f 	bl	8001c48 <HAL_GetTick>
 80075ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80075ec:	e008      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80075ee:	f7fa fb2b 	bl	8001c48 <HAL_GetTick>
 80075f2:	4602      	mov	r2, r0
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	2b64      	cmp	r3, #100	@ 0x64
 80075fa:	d901      	bls.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e194      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007600:	4b6c      	ldr	r3, [pc, #432]	@ (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1f0      	bne.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0301 	and.w	r3, r3, #1
 8007614:	2b00      	cmp	r3, #0
 8007616:	d021      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800761c:	2b00      	cmp	r3, #0
 800761e:	d11d      	bne.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007620:	4b64      	ldr	r3, [pc, #400]	@ (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007622:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007626:	0c1b      	lsrs	r3, r3, #16
 8007628:	f003 0303 	and.w	r3, r3, #3
 800762c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800762e:	4b61      	ldr	r3, [pc, #388]	@ (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007630:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007634:	0e1b      	lsrs	r3, r3, #24
 8007636:	f003 030f 	and.w	r3, r3, #15
 800763a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	019a      	lsls	r2, r3, #6
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	041b      	lsls	r3, r3, #16
 8007646:	431a      	orrs	r2, r3
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	061b      	lsls	r3, r3, #24
 800764c:	431a      	orrs	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	071b      	lsls	r3, r3, #28
 8007654:	4957      	ldr	r1, [pc, #348]	@ (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007656:	4313      	orrs	r3, r2
 8007658:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007664:	2b00      	cmp	r3, #0
 8007666:	d004      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800766c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007670:	d00a      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800767a:	2b00      	cmp	r3, #0
 800767c:	d02e      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007682:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007686:	d129      	bne.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007688:	4b4a      	ldr	r3, [pc, #296]	@ (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800768a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800768e:	0c1b      	lsrs	r3, r3, #16
 8007690:	f003 0303 	and.w	r3, r3, #3
 8007694:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007696:	4b47      	ldr	r3, [pc, #284]	@ (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007698:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800769c:	0f1b      	lsrs	r3, r3, #28
 800769e:	f003 0307 	and.w	r3, r3, #7
 80076a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	019a      	lsls	r2, r3, #6
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	041b      	lsls	r3, r3, #16
 80076ae:	431a      	orrs	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	061b      	lsls	r3, r3, #24
 80076b6:	431a      	orrs	r2, r3
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	071b      	lsls	r3, r3, #28
 80076bc:	493d      	ldr	r1, [pc, #244]	@ (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80076c4:	4b3b      	ldr	r3, [pc, #236]	@ (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076ca:	f023 021f 	bic.w	r2, r3, #31
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d2:	3b01      	subs	r3, #1
 80076d4:	4937      	ldr	r1, [pc, #220]	@ (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d01d      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80076e8:	4b32      	ldr	r3, [pc, #200]	@ (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076ee:	0e1b      	lsrs	r3, r3, #24
 80076f0:	f003 030f 	and.w	r3, r3, #15
 80076f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80076f6:	4b2f      	ldr	r3, [pc, #188]	@ (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076fc:	0f1b      	lsrs	r3, r3, #28
 80076fe:	f003 0307 	and.w	r3, r3, #7
 8007702:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	019a      	lsls	r2, r3, #6
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	041b      	lsls	r3, r3, #16
 8007710:	431a      	orrs	r2, r3
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	061b      	lsls	r3, r3, #24
 8007716:	431a      	orrs	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	071b      	lsls	r3, r3, #28
 800771c:	4925      	ldr	r1, [pc, #148]	@ (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800771e:	4313      	orrs	r3, r2
 8007720:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d011      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	019a      	lsls	r2, r3, #6
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	041b      	lsls	r3, r3, #16
 800773c:	431a      	orrs	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	061b      	lsls	r3, r3, #24
 8007744:	431a      	orrs	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	071b      	lsls	r3, r3, #28
 800774c:	4919      	ldr	r1, [pc, #100]	@ (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800774e:	4313      	orrs	r3, r2
 8007750:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007754:	4b17      	ldr	r3, [pc, #92]	@ (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a16      	ldr	r2, [pc, #88]	@ (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800775a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800775e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007760:	f7fa fa72 	bl	8001c48 <HAL_GetTick>
 8007764:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007766:	e008      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007768:	f7fa fa6e 	bl	8001c48 <HAL_GetTick>
 800776c:	4602      	mov	r2, r0
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	2b64      	cmp	r3, #100	@ 0x64
 8007774:	d901      	bls.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e0d7      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800777a:	4b0e      	ldr	r3, [pc, #56]	@ (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007782:	2b00      	cmp	r3, #0
 8007784:	d0f0      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	2b01      	cmp	r3, #1
 800778a:	f040 80cd 	bne.w	8007928 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800778e:	4b09      	ldr	r3, [pc, #36]	@ (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a08      	ldr	r2, [pc, #32]	@ (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007794:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007798:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800779a:	f7fa fa55 	bl	8001c48 <HAL_GetTick>
 800779e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80077a0:	e00a      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80077a2:	f7fa fa51 	bl	8001c48 <HAL_GetTick>
 80077a6:	4602      	mov	r2, r0
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	1ad3      	subs	r3, r2, r3
 80077ac:	2b64      	cmp	r3, #100	@ 0x64
 80077ae:	d903      	bls.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077b0:	2303      	movs	r3, #3
 80077b2:	e0ba      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80077b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80077b8:	4b5e      	ldr	r3, [pc, #376]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077c4:	d0ed      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d003      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x682>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d009      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d02e      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d12a      	bne.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80077ee:	4b51      	ldr	r3, [pc, #324]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077f4:	0c1b      	lsrs	r3, r3, #16
 80077f6:	f003 0303 	and.w	r3, r3, #3
 80077fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80077fc:	4b4d      	ldr	r3, [pc, #308]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007802:	0f1b      	lsrs	r3, r3, #28
 8007804:	f003 0307 	and.w	r3, r3, #7
 8007808:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	019a      	lsls	r2, r3, #6
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	041b      	lsls	r3, r3, #16
 8007814:	431a      	orrs	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	061b      	lsls	r3, r3, #24
 800781c:	431a      	orrs	r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	071b      	lsls	r3, r3, #28
 8007822:	4944      	ldr	r1, [pc, #272]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007824:	4313      	orrs	r3, r2
 8007826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800782a:	4b42      	ldr	r3, [pc, #264]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800782c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007830:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007838:	3b01      	subs	r3, #1
 800783a:	021b      	lsls	r3, r3, #8
 800783c:	493d      	ldr	r1, [pc, #244]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800783e:	4313      	orrs	r3, r2
 8007840:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800784c:	2b00      	cmp	r3, #0
 800784e:	d022      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007854:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007858:	d11d      	bne.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800785a:	4b36      	ldr	r3, [pc, #216]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800785c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007860:	0e1b      	lsrs	r3, r3, #24
 8007862:	f003 030f 	and.w	r3, r3, #15
 8007866:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007868:	4b32      	ldr	r3, [pc, #200]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800786a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800786e:	0f1b      	lsrs	r3, r3, #28
 8007870:	f003 0307 	and.w	r3, r3, #7
 8007874:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	019a      	lsls	r2, r3, #6
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a1b      	ldr	r3, [r3, #32]
 8007880:	041b      	lsls	r3, r3, #16
 8007882:	431a      	orrs	r2, r3
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	061b      	lsls	r3, r3, #24
 8007888:	431a      	orrs	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	071b      	lsls	r3, r3, #28
 800788e:	4929      	ldr	r1, [pc, #164]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007890:	4313      	orrs	r3, r2
 8007892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0308 	and.w	r3, r3, #8
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d028      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80078a2:	4b24      	ldr	r3, [pc, #144]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078a8:	0e1b      	lsrs	r3, r3, #24
 80078aa:	f003 030f 	and.w	r3, r3, #15
 80078ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80078b0:	4b20      	ldr	r3, [pc, #128]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078b6:	0c1b      	lsrs	r3, r3, #16
 80078b8:	f003 0303 	and.w	r3, r3, #3
 80078bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	695b      	ldr	r3, [r3, #20]
 80078c2:	019a      	lsls	r2, r3, #6
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	041b      	lsls	r3, r3, #16
 80078c8:	431a      	orrs	r2, r3
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	061b      	lsls	r3, r3, #24
 80078ce:	431a      	orrs	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	69db      	ldr	r3, [r3, #28]
 80078d4:	071b      	lsls	r3, r3, #28
 80078d6:	4917      	ldr	r1, [pc, #92]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078d8:	4313      	orrs	r3, r2
 80078da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80078de:	4b15      	ldr	r3, [pc, #84]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ec:	4911      	ldr	r1, [pc, #68]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078ee:	4313      	orrs	r3, r2
 80078f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80078f4:	4b0f      	ldr	r3, [pc, #60]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a0e      	ldr	r2, [pc, #56]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007900:	f7fa f9a2 	bl	8001c48 <HAL_GetTick>
 8007904:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007906:	e008      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007908:	f7fa f99e 	bl	8001c48 <HAL_GetTick>
 800790c:	4602      	mov	r2, r0
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	2b64      	cmp	r3, #100	@ 0x64
 8007914:	d901      	bls.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007916:	2303      	movs	r3, #3
 8007918:	e007      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800791a:	4b06      	ldr	r3, [pc, #24]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007922:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007926:	d1ef      	bne.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3720      	adds	r7, #32
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	40023800 	.word	0x40023800

08007938 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d101      	bne.n	800794a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e09d      	b.n	8007a86 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800794e:	2b00      	cmp	r3, #0
 8007950:	d108      	bne.n	8007964 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800795a:	d009      	beq.n	8007970 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	61da      	str	r2, [r3, #28]
 8007962:	e005      	b.n	8007970 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800797c:	b2db      	uxtb	r3, r3
 800797e:	2b00      	cmp	r3, #0
 8007980:	d106      	bne.n	8007990 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f7f9 fa6e 	bl	8000e6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2202      	movs	r2, #2
 8007994:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80079b0:	d902      	bls.n	80079b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80079b2:	2300      	movs	r3, #0
 80079b4:	60fb      	str	r3, [r7, #12]
 80079b6:	e002      	b.n	80079be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80079b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80079bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80079c6:	d007      	beq.n	80079d8 <HAL_SPI_Init+0xa0>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80079d0:	d002      	beq.n	80079d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80079e8:	431a      	orrs	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	f003 0302 	and.w	r3, r3, #2
 80079f2:	431a      	orrs	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	695b      	ldr	r3, [r3, #20]
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	431a      	orrs	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a06:	431a      	orrs	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	69db      	ldr	r3, [r3, #28]
 8007a0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a10:	431a      	orrs	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a1a:	ea42 0103 	orr.w	r1, r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a22:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	0c1b      	lsrs	r3, r3, #16
 8007a34:	f003 0204 	and.w	r2, r3, #4
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a3c:	f003 0310 	and.w	r3, r3, #16
 8007a40:	431a      	orrs	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a46:	f003 0308 	and.w	r3, r3, #8
 8007a4a:	431a      	orrs	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007a54:	ea42 0103 	orr.w	r1, r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	430a      	orrs	r2, r1
 8007a64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	69da      	ldr	r2, [r3, #28]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
	...

08007a90 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b088      	sub	sp, #32
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	099b      	lsrs	r3, r3, #6
 8007aac:	f003 0301 	and.w	r3, r3, #1
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10f      	bne.n	8007ad4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00a      	beq.n	8007ad4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	099b      	lsrs	r3, r3, #6
 8007ac2:	f003 0301 	and.w	r3, r3, #1
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d004      	beq.n	8007ad4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	4798      	blx	r3
    return;
 8007ad2:	e0d7      	b.n	8007c84 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	085b      	lsrs	r3, r3, #1
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00a      	beq.n	8007af6 <HAL_SPI_IRQHandler+0x66>
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	09db      	lsrs	r3, r3, #7
 8007ae4:	f003 0301 	and.w	r3, r3, #1
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d004      	beq.n	8007af6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	4798      	blx	r3
    return;
 8007af4:	e0c6      	b.n	8007c84 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	095b      	lsrs	r3, r3, #5
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10c      	bne.n	8007b1c <HAL_SPI_IRQHandler+0x8c>
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	099b      	lsrs	r3, r3, #6
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d106      	bne.n	8007b1c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	0a1b      	lsrs	r3, r3, #8
 8007b12:	f003 0301 	and.w	r3, r3, #1
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f000 80b4 	beq.w	8007c84 <HAL_SPI_IRQHandler+0x1f4>
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	095b      	lsrs	r3, r3, #5
 8007b20:	f003 0301 	and.w	r3, r3, #1
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f000 80ad 	beq.w	8007c84 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	099b      	lsrs	r3, r3, #6
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d023      	beq.n	8007b7e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b03      	cmp	r3, #3
 8007b40:	d011      	beq.n	8007b66 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b46:	f043 0204 	orr.w	r2, r3, #4
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b4e:	2300      	movs	r3, #0
 8007b50:	617b      	str	r3, [r7, #20]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	617b      	str	r3, [r7, #20]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	617b      	str	r3, [r7, #20]
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	e00b      	b.n	8007b7e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b66:	2300      	movs	r3, #0
 8007b68:	613b      	str	r3, [r7, #16]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	613b      	str	r3, [r7, #16]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	613b      	str	r3, [r7, #16]
 8007b7a:	693b      	ldr	r3, [r7, #16]
        return;
 8007b7c:	e082      	b.n	8007c84 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	095b      	lsrs	r3, r3, #5
 8007b82:	f003 0301 	and.w	r3, r3, #1
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d014      	beq.n	8007bb4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b8e:	f043 0201 	orr.w	r2, r3, #1
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007b96:	2300      	movs	r3, #0
 8007b98:	60fb      	str	r3, [r7, #12]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	60fb      	str	r3, [r7, #12]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007bb0:	601a      	str	r2, [r3, #0]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	0a1b      	lsrs	r3, r3, #8
 8007bb8:	f003 0301 	and.w	r3, r3, #1
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00c      	beq.n	8007bda <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bc4:	f043 0208 	orr.w	r2, r3, #8
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007bcc:	2300      	movs	r3, #0
 8007bce:	60bb      	str	r3, [r7, #8]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	60bb      	str	r3, [r7, #8]
 8007bd8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d04f      	beq.n	8007c82 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	685a      	ldr	r2, [r3, #4]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007bf0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	f003 0302 	and.w	r3, r3, #2
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d104      	bne.n	8007c0e <HAL_SPI_IRQHandler+0x17e>
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d034      	beq.n	8007c78 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	685a      	ldr	r2, [r3, #4]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f022 0203 	bic.w	r2, r2, #3
 8007c1c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d011      	beq.n	8007c4a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c2a:	4a18      	ldr	r2, [pc, #96]	@ (8007c8c <HAL_SPI_IRQHandler+0x1fc>)
 8007c2c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7fa fcd2 	bl	80025dc <HAL_DMA_Abort_IT>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d005      	beq.n	8007c4a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c42:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d016      	beq.n	8007c80 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c56:	4a0d      	ldr	r2, [pc, #52]	@ (8007c8c <HAL_SPI_IRQHandler+0x1fc>)
 8007c58:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7fa fcbc 	bl	80025dc <HAL_DMA_Abort_IT>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00a      	beq.n	8007c80 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c6e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8007c76:	e003      	b.n	8007c80 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f809 	bl	8007c90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007c7e:	e000      	b.n	8007c82 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007c80:	bf00      	nop
    return;
 8007c82:	bf00      	nop
  }
}
 8007c84:	3720      	adds	r7, #32
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	08007ca5 	.word	0x08007ca5

08007c90 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007c98:	bf00      	nop
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cb0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f7ff ffe5 	bl	8007c90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007cc6:	bf00      	nop
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b082      	sub	sp, #8
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d101      	bne.n	8007ce0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e040      	b.n	8007d62 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d106      	bne.n	8007cf6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f7f9 fc9f 	bl	8001634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2224      	movs	r2, #36	@ 0x24
 8007cfa:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f022 0201 	bic.w	r2, r2, #1
 8007d0a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d002      	beq.n	8007d1a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fecd 	bl	8008ab4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fc66 	bl	80085ec <UART_SetConfig>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d101      	bne.n	8007d2a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e01b      	b.n	8007d62 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	685a      	ldr	r2, [r3, #4]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d38:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	689a      	ldr	r2, [r3, #8]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d48:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f042 0201 	orr.w	r2, r2, #1
 8007d58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 ff4c 	bl	8008bf8 <UART_CheckIdleState>
 8007d60:	4603      	mov	r3, r0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b08a      	sub	sp, #40	@ 0x28
 8007d6e:	af02      	add	r7, sp, #8
 8007d70:	60f8      	str	r0, [r7, #12]
 8007d72:	60b9      	str	r1, [r7, #8]
 8007d74:	603b      	str	r3, [r7, #0]
 8007d76:	4613      	mov	r3, r2
 8007d78:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d7e:	2b20      	cmp	r3, #32
 8007d80:	d177      	bne.n	8007e72 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d002      	beq.n	8007d8e <HAL_UART_Transmit+0x24>
 8007d88:	88fb      	ldrh	r3, [r7, #6]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d101      	bne.n	8007d92 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e070      	b.n	8007e74 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2221      	movs	r2, #33	@ 0x21
 8007d9e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007da0:	f7f9 ff52 	bl	8001c48 <HAL_GetTick>
 8007da4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	88fa      	ldrh	r2, [r7, #6]
 8007daa:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	88fa      	ldrh	r2, [r7, #6]
 8007db2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dbe:	d108      	bne.n	8007dd2 <HAL_UART_Transmit+0x68>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d104      	bne.n	8007dd2 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	61bb      	str	r3, [r7, #24]
 8007dd0:	e003      	b.n	8007dda <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007dda:	e02f      	b.n	8007e3c <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	9300      	str	r3, [sp, #0]
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	2200      	movs	r2, #0
 8007de4:	2180      	movs	r1, #128	@ 0x80
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f000 ff5d 	bl	8008ca6 <UART_WaitOnFlagUntilTimeout>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d004      	beq.n	8007dfc <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2220      	movs	r2, #32
 8007df6:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	e03b      	b.n	8007e74 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10b      	bne.n	8007e1a <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	881b      	ldrh	r3, [r3, #0]
 8007e06:	461a      	mov	r2, r3
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e10:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	3302      	adds	r3, #2
 8007e16:	61bb      	str	r3, [r7, #24]
 8007e18:	e007      	b.n	8007e2a <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	781a      	ldrb	r2, [r3, #0]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	3301      	adds	r3, #1
 8007e28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	3b01      	subs	r3, #1
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1c9      	bne.n	8007ddc <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	9300      	str	r3, [sp, #0]
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	2140      	movs	r1, #64	@ 0x40
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f000 ff27 	bl	8008ca6 <UART_WaitOnFlagUntilTimeout>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d004      	beq.n	8007e68 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2220      	movs	r2, #32
 8007e62:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007e64:	2303      	movs	r3, #3
 8007e66:	e005      	b.n	8007e74 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2220      	movs	r2, #32
 8007e6c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	e000      	b.n	8007e74 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007e72:	2302      	movs	r3, #2
  }
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3720      	adds	r7, #32
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b08b      	sub	sp, #44	@ 0x2c
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	4613      	mov	r3, r2
 8007e88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e8e:	2b20      	cmp	r3, #32
 8007e90:	d147      	bne.n	8007f22 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d002      	beq.n	8007e9e <HAL_UART_Transmit_IT+0x22>
 8007e98:	88fb      	ldrh	r3, [r7, #6]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d101      	bne.n	8007ea2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e040      	b.n	8007f24 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	68ba      	ldr	r2, [r7, #8]
 8007ea6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	88fa      	ldrh	r2, [r7, #6]
 8007eac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	88fa      	ldrh	r2, [r7, #6]
 8007eb4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2221      	movs	r2, #33	@ 0x21
 8007eca:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ed4:	d107      	bne.n	8007ee6 <HAL_UART_Transmit_IT+0x6a>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d103      	bne.n	8007ee6 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	4a13      	ldr	r2, [pc, #76]	@ (8007f30 <HAL_UART_Transmit_IT+0xb4>)
 8007ee2:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007ee4:	e002      	b.n	8007eec <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	4a12      	ldr	r2, [pc, #72]	@ (8007f34 <HAL_UART_Transmit_IT+0xb8>)
 8007eea:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	e853 3f00 	ldrex	r3, [r3]
 8007ef8:	613b      	str	r3, [r7, #16]
   return(result);
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f00:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	461a      	mov	r2, r3
 8007f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0a:	623b      	str	r3, [r7, #32]
 8007f0c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0e:	69f9      	ldr	r1, [r7, #28]
 8007f10:	6a3a      	ldr	r2, [r7, #32]
 8007f12:	e841 2300 	strex	r3, r2, [r1]
 8007f16:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1e6      	bne.n	8007eec <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	e000      	b.n	8007f24 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007f22:	2302      	movs	r3, #2
  }
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	372c      	adds	r7, #44	@ 0x2c
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr
 8007f30:	080092fd 	.word	0x080092fd
 8007f34:	08009247 	.word	0x08009247

08007f38 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b08a      	sub	sp, #40	@ 0x28
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	4613      	mov	r3, r2
 8007f44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f4c:	2b20      	cmp	r3, #32
 8007f4e:	d132      	bne.n	8007fb6 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d002      	beq.n	8007f5c <HAL_UART_Receive_DMA+0x24>
 8007f56:	88fb      	ldrh	r3, [r7, #6]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d101      	bne.n	8007f60 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e02b      	b.n	8007fb8 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d018      	beq.n	8007fa6 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	e853 3f00 	ldrex	r3, [r3]
 8007f80:	613b      	str	r3, [r7, #16]
   return(result);
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f92:	623b      	str	r3, [r7, #32]
 8007f94:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f96:	69f9      	ldr	r1, [r7, #28]
 8007f98:	6a3a      	ldr	r2, [r7, #32]
 8007f9a:	e841 2300 	strex	r3, r2, [r1]
 8007f9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1e6      	bne.n	8007f74 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007fa6:	88fb      	ldrh	r3, [r7, #6]
 8007fa8:	461a      	mov	r2, r3
 8007faa:	68b9      	ldr	r1, [r7, #8]
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f000 fee7 	bl	8008d80 <UART_Start_Receive_DMA>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	e000      	b.n	8007fb8 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007fb6:	2302      	movs	r3, #2
  }
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3728      	adds	r7, #40	@ 0x28
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b0ba      	sub	sp, #232	@ 0xe8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	69db      	ldr	r3, [r3, #28]
 8007fce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007fe6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007fea:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007fee:	4013      	ands	r3, r2
 8007ff0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007ff4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d115      	bne.n	8008028 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008000:	f003 0320 	and.w	r3, r3, #32
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00f      	beq.n	8008028 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800800c:	f003 0320 	and.w	r3, r3, #32
 8008010:	2b00      	cmp	r3, #0
 8008012:	d009      	beq.n	8008028 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008018:	2b00      	cmp	r3, #0
 800801a:	f000 82b1 	beq.w	8008580 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	4798      	blx	r3
      }
      return;
 8008026:	e2ab      	b.n	8008580 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008028:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800802c:	2b00      	cmp	r3, #0
 800802e:	f000 8117 	beq.w	8008260 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008036:	f003 0301 	and.w	r3, r3, #1
 800803a:	2b00      	cmp	r3, #0
 800803c:	d106      	bne.n	800804c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800803e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008042:	4b85      	ldr	r3, [pc, #532]	@ (8008258 <HAL_UART_IRQHandler+0x298>)
 8008044:	4013      	ands	r3, r2
 8008046:	2b00      	cmp	r3, #0
 8008048:	f000 810a 	beq.w	8008260 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800804c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008050:	f003 0301 	and.w	r3, r3, #1
 8008054:	2b00      	cmp	r3, #0
 8008056:	d011      	beq.n	800807c <HAL_UART_IRQHandler+0xbc>
 8008058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800805c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00b      	beq.n	800807c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2201      	movs	r2, #1
 800806a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008072:	f043 0201 	orr.w	r2, r3, #1
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800807c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008080:	f003 0302 	and.w	r3, r3, #2
 8008084:	2b00      	cmp	r3, #0
 8008086:	d011      	beq.n	80080ac <HAL_UART_IRQHandler+0xec>
 8008088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800808c:	f003 0301 	and.w	r3, r3, #1
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00b      	beq.n	80080ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2202      	movs	r2, #2
 800809a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080a2:	f043 0204 	orr.w	r2, r3, #4
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080b0:	f003 0304 	and.w	r3, r3, #4
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d011      	beq.n	80080dc <HAL_UART_IRQHandler+0x11c>
 80080b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080bc:	f003 0301 	and.w	r3, r3, #1
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00b      	beq.n	80080dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2204      	movs	r2, #4
 80080ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080d2:	f043 0202 	orr.w	r2, r3, #2
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80080dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080e0:	f003 0308 	and.w	r3, r3, #8
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d017      	beq.n	8008118 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80080e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080ec:	f003 0320 	and.w	r3, r3, #32
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d105      	bne.n	8008100 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80080f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00b      	beq.n	8008118 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2208      	movs	r2, #8
 8008106:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800810e:	f043 0208 	orr.w	r2, r3, #8
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800811c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008120:	2b00      	cmp	r3, #0
 8008122:	d012      	beq.n	800814a <HAL_UART_IRQHandler+0x18a>
 8008124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008128:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00c      	beq.n	800814a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008138:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008140:	f043 0220 	orr.w	r2, r3, #32
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008150:	2b00      	cmp	r3, #0
 8008152:	f000 8217 	beq.w	8008584 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800815a:	f003 0320 	and.w	r3, r3, #32
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00d      	beq.n	800817e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008166:	f003 0320 	and.w	r3, r3, #32
 800816a:	2b00      	cmp	r3, #0
 800816c:	d007      	beq.n	800817e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008184:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008192:	2b40      	cmp	r3, #64	@ 0x40
 8008194:	d005      	beq.n	80081a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800819a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d04f      	beq.n	8008242 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 feb2 	bl	8008f0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081b2:	2b40      	cmp	r3, #64	@ 0x40
 80081b4:	d141      	bne.n	800823a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	3308      	adds	r3, #8
 80081bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80081c4:	e853 3f00 	ldrex	r3, [r3]
 80081c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80081cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80081d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	3308      	adds	r3, #8
 80081de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80081e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80081e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80081ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80081f2:	e841 2300 	strex	r3, r2, [r1]
 80081f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80081fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1d9      	bne.n	80081b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008206:	2b00      	cmp	r3, #0
 8008208:	d013      	beq.n	8008232 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800820e:	4a13      	ldr	r2, [pc, #76]	@ (800825c <HAL_UART_IRQHandler+0x29c>)
 8008210:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008216:	4618      	mov	r0, r3
 8008218:	f7fa f9e0 	bl	80025dc <HAL_DMA_Abort_IT>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d017      	beq.n	8008252 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800822c:	4610      	mov	r0, r2
 800822e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008230:	e00f      	b.n	8008252 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f9c4 	bl	80085c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008238:	e00b      	b.n	8008252 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f9c0 	bl	80085c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008240:	e007      	b.n	8008252 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f9bc 	bl	80085c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008250:	e198      	b.n	8008584 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008252:	bf00      	nop
    return;
 8008254:	e196      	b.n	8008584 <HAL_UART_IRQHandler+0x5c4>
 8008256:	bf00      	nop
 8008258:	04000120 	.word	0x04000120
 800825c:	08009223 	.word	0x08009223

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008264:	2b01      	cmp	r3, #1
 8008266:	f040 8166 	bne.w	8008536 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800826a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800826e:	f003 0310 	and.w	r3, r3, #16
 8008272:	2b00      	cmp	r3, #0
 8008274:	f000 815f 	beq.w	8008536 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800827c:	f003 0310 	and.w	r3, r3, #16
 8008280:	2b00      	cmp	r3, #0
 8008282:	f000 8158 	beq.w	8008536 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2210      	movs	r2, #16
 800828c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008298:	2b40      	cmp	r3, #64	@ 0x40
 800829a:	f040 80d0 	bne.w	800843e <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80082aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	f000 80ab 	beq.w	800840a <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80082ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80082be:	429a      	cmp	r2, r3
 80082c0:	f080 80a3 	bcs.w	800840a <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80082ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082d2:	69db      	ldr	r3, [r3, #28]
 80082d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082d8:	f000 8086 	beq.w	80083e8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80082e8:	e853 3f00 	ldrex	r3, [r3]
 80082ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80082f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80082f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	461a      	mov	r2, r3
 8008302:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008306:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800830a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800830e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008312:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008316:	e841 2300 	strex	r3, r2, [r1]
 800831a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800831e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1da      	bne.n	80082dc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	3308      	adds	r3, #8
 800832c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008330:	e853 3f00 	ldrex	r3, [r3]
 8008334:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008336:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008338:	f023 0301 	bic.w	r3, r3, #1
 800833c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	3308      	adds	r3, #8
 8008346:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800834a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800834e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008350:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008352:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008356:	e841 2300 	strex	r3, r2, [r1]
 800835a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800835c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800835e:	2b00      	cmp	r3, #0
 8008360:	d1e1      	bne.n	8008326 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	3308      	adds	r3, #8
 8008368:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800836c:	e853 3f00 	ldrex	r3, [r3]
 8008370:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008372:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008374:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008378:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	3308      	adds	r3, #8
 8008382:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008386:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008388:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800838c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800838e:	e841 2300 	strex	r3, r2, [r1]
 8008392:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008394:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1e3      	bne.n	8008362 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2220      	movs	r2, #32
 800839e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083b0:	e853 3f00 	ldrex	r3, [r3]
 80083b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80083b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083b8:	f023 0310 	bic.w	r3, r3, #16
 80083bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	461a      	mov	r2, r3
 80083c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80083cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80083d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80083d2:	e841 2300 	strex	r3, r2, [r1]
 80083d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80083d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1e4      	bne.n	80083a8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fa f88a 	bl	80024fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2202      	movs	r2, #2
 80083ec:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	b29b      	uxth	r3, r3
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f8e6 	bl	80085d4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008408:	e0be      	b.n	8008588 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008410:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008414:	429a      	cmp	r2, r3
 8008416:	f040 80b7 	bne.w	8008588 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800841e:	69db      	ldr	r3, [r3, #28]
 8008420:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008424:	f040 80b0 	bne.w	8008588 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2202      	movs	r2, #2
 800842c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008434:	4619      	mov	r1, r3
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f8cc 	bl	80085d4 <HAL_UARTEx_RxEventCallback>
      return;
 800843c:	e0a4      	b.n	8008588 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800844a:	b29b      	uxth	r3, r3
 800844c:	1ad3      	subs	r3, r2, r3
 800844e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008458:	b29b      	uxth	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	f000 8096 	beq.w	800858c <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 8008460:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008464:	2b00      	cmp	r3, #0
 8008466:	f000 8091 	beq.w	800858c <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008472:	e853 3f00 	ldrex	r3, [r3]
 8008476:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800847a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800847e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	461a      	mov	r2, r3
 8008488:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800848c:	647b      	str	r3, [r7, #68]	@ 0x44
 800848e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008490:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008492:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008494:	e841 2300 	strex	r3, r2, [r1]
 8008498:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800849a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800849c:	2b00      	cmp	r3, #0
 800849e:	d1e4      	bne.n	800846a <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	3308      	adds	r3, #8
 80084a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084aa:	e853 3f00 	ldrex	r3, [r3]
 80084ae:	623b      	str	r3, [r7, #32]
   return(result);
 80084b0:	6a3b      	ldr	r3, [r7, #32]
 80084b2:	f023 0301 	bic.w	r3, r3, #1
 80084b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	3308      	adds	r3, #8
 80084c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80084c4:	633a      	str	r2, [r7, #48]	@ 0x30
 80084c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084cc:	e841 2300 	strex	r3, r2, [r1]
 80084d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1e3      	bne.n	80084a0 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2220      	movs	r2, #32
 80084dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	e853 3f00 	ldrex	r3, [r3]
 80084f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f023 0310 	bic.w	r3, r3, #16
 8008500:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	461a      	mov	r2, r3
 800850a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800850e:	61fb      	str	r3, [r7, #28]
 8008510:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008512:	69b9      	ldr	r1, [r7, #24]
 8008514:	69fa      	ldr	r2, [r7, #28]
 8008516:	e841 2300 	strex	r3, r2, [r1]
 800851a:	617b      	str	r3, [r7, #20]
   return(result);
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1e4      	bne.n	80084ec <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2202      	movs	r2, #2
 8008526:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008528:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800852c:	4619      	mov	r1, r3
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f850 	bl	80085d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008534:	e02a      	b.n	800858c <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800853a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00e      	beq.n	8008560 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800854a:	2b00      	cmp	r3, #0
 800854c:	d008      	beq.n	8008560 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008552:	2b00      	cmp	r3, #0
 8008554:	d01c      	beq.n	8008590 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	4798      	blx	r3
    }
    return;
 800855e:	e017      	b.n	8008590 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008568:	2b00      	cmp	r3, #0
 800856a:	d012      	beq.n	8008592 <HAL_UART_IRQHandler+0x5d2>
 800856c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00c      	beq.n	8008592 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 ff1f 	bl	80093bc <UART_EndTransmit_IT>
    return;
 800857e:	e008      	b.n	8008592 <HAL_UART_IRQHandler+0x5d2>
      return;
 8008580:	bf00      	nop
 8008582:	e006      	b.n	8008592 <HAL_UART_IRQHandler+0x5d2>
    return;
 8008584:	bf00      	nop
 8008586:	e004      	b.n	8008592 <HAL_UART_IRQHandler+0x5d2>
      return;
 8008588:	bf00      	nop
 800858a:	e002      	b.n	8008592 <HAL_UART_IRQHandler+0x5d2>
      return;
 800858c:	bf00      	nop
 800858e:	e000      	b.n	8008592 <HAL_UART_IRQHandler+0x5d2>
    return;
 8008590:	bf00      	nop
  }

}
 8008592:	37e8      	adds	r7, #232	@ 0xe8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80085a0:	bf00      	nop
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80085b4:	bf00      	nop
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80085c8:	bf00      	nop
 80085ca:	370c      	adds	r7, #12
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	460b      	mov	r3, r1
 80085de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b088      	sub	sp, #32
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085f4:	2300      	movs	r3, #0
 80085f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	689a      	ldr	r2, [r3, #8]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	431a      	orrs	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	695b      	ldr	r3, [r3, #20]
 8008606:	431a      	orrs	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	69db      	ldr	r3, [r3, #28]
 800860c:	4313      	orrs	r3, r2
 800860e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	4ba6      	ldr	r3, [pc, #664]	@ (80088b0 <UART_SetConfig+0x2c4>)
 8008618:	4013      	ands	r3, r2
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	6812      	ldr	r2, [r2, #0]
 800861e:	6979      	ldr	r1, [r7, #20]
 8008620:	430b      	orrs	r3, r1
 8008622:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	68da      	ldr	r2, [r3, #12]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	430a      	orrs	r2, r1
 8008638:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	699b      	ldr	r3, [r3, #24]
 800863e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a1b      	ldr	r3, [r3, #32]
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	4313      	orrs	r3, r2
 8008648:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	430a      	orrs	r2, r1
 800865c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a94      	ldr	r2, [pc, #592]	@ (80088b4 <UART_SetConfig+0x2c8>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d120      	bne.n	80086aa <UART_SetConfig+0xbe>
 8008668:	4b93      	ldr	r3, [pc, #588]	@ (80088b8 <UART_SetConfig+0x2cc>)
 800866a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800866e:	f003 0303 	and.w	r3, r3, #3
 8008672:	2b03      	cmp	r3, #3
 8008674:	d816      	bhi.n	80086a4 <UART_SetConfig+0xb8>
 8008676:	a201      	add	r2, pc, #4	@ (adr r2, 800867c <UART_SetConfig+0x90>)
 8008678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800867c:	0800868d 	.word	0x0800868d
 8008680:	08008699 	.word	0x08008699
 8008684:	08008693 	.word	0x08008693
 8008688:	0800869f 	.word	0x0800869f
 800868c:	2301      	movs	r3, #1
 800868e:	77fb      	strb	r3, [r7, #31]
 8008690:	e150      	b.n	8008934 <UART_SetConfig+0x348>
 8008692:	2302      	movs	r3, #2
 8008694:	77fb      	strb	r3, [r7, #31]
 8008696:	e14d      	b.n	8008934 <UART_SetConfig+0x348>
 8008698:	2304      	movs	r3, #4
 800869a:	77fb      	strb	r3, [r7, #31]
 800869c:	e14a      	b.n	8008934 <UART_SetConfig+0x348>
 800869e:	2308      	movs	r3, #8
 80086a0:	77fb      	strb	r3, [r7, #31]
 80086a2:	e147      	b.n	8008934 <UART_SetConfig+0x348>
 80086a4:	2310      	movs	r3, #16
 80086a6:	77fb      	strb	r3, [r7, #31]
 80086a8:	e144      	b.n	8008934 <UART_SetConfig+0x348>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a83      	ldr	r2, [pc, #524]	@ (80088bc <UART_SetConfig+0x2d0>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d132      	bne.n	800871a <UART_SetConfig+0x12e>
 80086b4:	4b80      	ldr	r3, [pc, #512]	@ (80088b8 <UART_SetConfig+0x2cc>)
 80086b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086ba:	f003 030c 	and.w	r3, r3, #12
 80086be:	2b0c      	cmp	r3, #12
 80086c0:	d828      	bhi.n	8008714 <UART_SetConfig+0x128>
 80086c2:	a201      	add	r2, pc, #4	@ (adr r2, 80086c8 <UART_SetConfig+0xdc>)
 80086c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c8:	080086fd 	.word	0x080086fd
 80086cc:	08008715 	.word	0x08008715
 80086d0:	08008715 	.word	0x08008715
 80086d4:	08008715 	.word	0x08008715
 80086d8:	08008709 	.word	0x08008709
 80086dc:	08008715 	.word	0x08008715
 80086e0:	08008715 	.word	0x08008715
 80086e4:	08008715 	.word	0x08008715
 80086e8:	08008703 	.word	0x08008703
 80086ec:	08008715 	.word	0x08008715
 80086f0:	08008715 	.word	0x08008715
 80086f4:	08008715 	.word	0x08008715
 80086f8:	0800870f 	.word	0x0800870f
 80086fc:	2300      	movs	r3, #0
 80086fe:	77fb      	strb	r3, [r7, #31]
 8008700:	e118      	b.n	8008934 <UART_SetConfig+0x348>
 8008702:	2302      	movs	r3, #2
 8008704:	77fb      	strb	r3, [r7, #31]
 8008706:	e115      	b.n	8008934 <UART_SetConfig+0x348>
 8008708:	2304      	movs	r3, #4
 800870a:	77fb      	strb	r3, [r7, #31]
 800870c:	e112      	b.n	8008934 <UART_SetConfig+0x348>
 800870e:	2308      	movs	r3, #8
 8008710:	77fb      	strb	r3, [r7, #31]
 8008712:	e10f      	b.n	8008934 <UART_SetConfig+0x348>
 8008714:	2310      	movs	r3, #16
 8008716:	77fb      	strb	r3, [r7, #31]
 8008718:	e10c      	b.n	8008934 <UART_SetConfig+0x348>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a68      	ldr	r2, [pc, #416]	@ (80088c0 <UART_SetConfig+0x2d4>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d120      	bne.n	8008766 <UART_SetConfig+0x17a>
 8008724:	4b64      	ldr	r3, [pc, #400]	@ (80088b8 <UART_SetConfig+0x2cc>)
 8008726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800872a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800872e:	2b30      	cmp	r3, #48	@ 0x30
 8008730:	d013      	beq.n	800875a <UART_SetConfig+0x16e>
 8008732:	2b30      	cmp	r3, #48	@ 0x30
 8008734:	d814      	bhi.n	8008760 <UART_SetConfig+0x174>
 8008736:	2b20      	cmp	r3, #32
 8008738:	d009      	beq.n	800874e <UART_SetConfig+0x162>
 800873a:	2b20      	cmp	r3, #32
 800873c:	d810      	bhi.n	8008760 <UART_SetConfig+0x174>
 800873e:	2b00      	cmp	r3, #0
 8008740:	d002      	beq.n	8008748 <UART_SetConfig+0x15c>
 8008742:	2b10      	cmp	r3, #16
 8008744:	d006      	beq.n	8008754 <UART_SetConfig+0x168>
 8008746:	e00b      	b.n	8008760 <UART_SetConfig+0x174>
 8008748:	2300      	movs	r3, #0
 800874a:	77fb      	strb	r3, [r7, #31]
 800874c:	e0f2      	b.n	8008934 <UART_SetConfig+0x348>
 800874e:	2302      	movs	r3, #2
 8008750:	77fb      	strb	r3, [r7, #31]
 8008752:	e0ef      	b.n	8008934 <UART_SetConfig+0x348>
 8008754:	2304      	movs	r3, #4
 8008756:	77fb      	strb	r3, [r7, #31]
 8008758:	e0ec      	b.n	8008934 <UART_SetConfig+0x348>
 800875a:	2308      	movs	r3, #8
 800875c:	77fb      	strb	r3, [r7, #31]
 800875e:	e0e9      	b.n	8008934 <UART_SetConfig+0x348>
 8008760:	2310      	movs	r3, #16
 8008762:	77fb      	strb	r3, [r7, #31]
 8008764:	e0e6      	b.n	8008934 <UART_SetConfig+0x348>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a56      	ldr	r2, [pc, #344]	@ (80088c4 <UART_SetConfig+0x2d8>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d120      	bne.n	80087b2 <UART_SetConfig+0x1c6>
 8008770:	4b51      	ldr	r3, [pc, #324]	@ (80088b8 <UART_SetConfig+0x2cc>)
 8008772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008776:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800877a:	2bc0      	cmp	r3, #192	@ 0xc0
 800877c:	d013      	beq.n	80087a6 <UART_SetConfig+0x1ba>
 800877e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008780:	d814      	bhi.n	80087ac <UART_SetConfig+0x1c0>
 8008782:	2b80      	cmp	r3, #128	@ 0x80
 8008784:	d009      	beq.n	800879a <UART_SetConfig+0x1ae>
 8008786:	2b80      	cmp	r3, #128	@ 0x80
 8008788:	d810      	bhi.n	80087ac <UART_SetConfig+0x1c0>
 800878a:	2b00      	cmp	r3, #0
 800878c:	d002      	beq.n	8008794 <UART_SetConfig+0x1a8>
 800878e:	2b40      	cmp	r3, #64	@ 0x40
 8008790:	d006      	beq.n	80087a0 <UART_SetConfig+0x1b4>
 8008792:	e00b      	b.n	80087ac <UART_SetConfig+0x1c0>
 8008794:	2300      	movs	r3, #0
 8008796:	77fb      	strb	r3, [r7, #31]
 8008798:	e0cc      	b.n	8008934 <UART_SetConfig+0x348>
 800879a:	2302      	movs	r3, #2
 800879c:	77fb      	strb	r3, [r7, #31]
 800879e:	e0c9      	b.n	8008934 <UART_SetConfig+0x348>
 80087a0:	2304      	movs	r3, #4
 80087a2:	77fb      	strb	r3, [r7, #31]
 80087a4:	e0c6      	b.n	8008934 <UART_SetConfig+0x348>
 80087a6:	2308      	movs	r3, #8
 80087a8:	77fb      	strb	r3, [r7, #31]
 80087aa:	e0c3      	b.n	8008934 <UART_SetConfig+0x348>
 80087ac:	2310      	movs	r3, #16
 80087ae:	77fb      	strb	r3, [r7, #31]
 80087b0:	e0c0      	b.n	8008934 <UART_SetConfig+0x348>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a44      	ldr	r2, [pc, #272]	@ (80088c8 <UART_SetConfig+0x2dc>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d125      	bne.n	8008808 <UART_SetConfig+0x21c>
 80087bc:	4b3e      	ldr	r3, [pc, #248]	@ (80088b8 <UART_SetConfig+0x2cc>)
 80087be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80087c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087ca:	d017      	beq.n	80087fc <UART_SetConfig+0x210>
 80087cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087d0:	d817      	bhi.n	8008802 <UART_SetConfig+0x216>
 80087d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087d6:	d00b      	beq.n	80087f0 <UART_SetConfig+0x204>
 80087d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087dc:	d811      	bhi.n	8008802 <UART_SetConfig+0x216>
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d003      	beq.n	80087ea <UART_SetConfig+0x1fe>
 80087e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087e6:	d006      	beq.n	80087f6 <UART_SetConfig+0x20a>
 80087e8:	e00b      	b.n	8008802 <UART_SetConfig+0x216>
 80087ea:	2300      	movs	r3, #0
 80087ec:	77fb      	strb	r3, [r7, #31]
 80087ee:	e0a1      	b.n	8008934 <UART_SetConfig+0x348>
 80087f0:	2302      	movs	r3, #2
 80087f2:	77fb      	strb	r3, [r7, #31]
 80087f4:	e09e      	b.n	8008934 <UART_SetConfig+0x348>
 80087f6:	2304      	movs	r3, #4
 80087f8:	77fb      	strb	r3, [r7, #31]
 80087fa:	e09b      	b.n	8008934 <UART_SetConfig+0x348>
 80087fc:	2308      	movs	r3, #8
 80087fe:	77fb      	strb	r3, [r7, #31]
 8008800:	e098      	b.n	8008934 <UART_SetConfig+0x348>
 8008802:	2310      	movs	r3, #16
 8008804:	77fb      	strb	r3, [r7, #31]
 8008806:	e095      	b.n	8008934 <UART_SetConfig+0x348>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a2f      	ldr	r2, [pc, #188]	@ (80088cc <UART_SetConfig+0x2e0>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d125      	bne.n	800885e <UART_SetConfig+0x272>
 8008812:	4b29      	ldr	r3, [pc, #164]	@ (80088b8 <UART_SetConfig+0x2cc>)
 8008814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008818:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800881c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008820:	d017      	beq.n	8008852 <UART_SetConfig+0x266>
 8008822:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008826:	d817      	bhi.n	8008858 <UART_SetConfig+0x26c>
 8008828:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800882c:	d00b      	beq.n	8008846 <UART_SetConfig+0x25a>
 800882e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008832:	d811      	bhi.n	8008858 <UART_SetConfig+0x26c>
 8008834:	2b00      	cmp	r3, #0
 8008836:	d003      	beq.n	8008840 <UART_SetConfig+0x254>
 8008838:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800883c:	d006      	beq.n	800884c <UART_SetConfig+0x260>
 800883e:	e00b      	b.n	8008858 <UART_SetConfig+0x26c>
 8008840:	2301      	movs	r3, #1
 8008842:	77fb      	strb	r3, [r7, #31]
 8008844:	e076      	b.n	8008934 <UART_SetConfig+0x348>
 8008846:	2302      	movs	r3, #2
 8008848:	77fb      	strb	r3, [r7, #31]
 800884a:	e073      	b.n	8008934 <UART_SetConfig+0x348>
 800884c:	2304      	movs	r3, #4
 800884e:	77fb      	strb	r3, [r7, #31]
 8008850:	e070      	b.n	8008934 <UART_SetConfig+0x348>
 8008852:	2308      	movs	r3, #8
 8008854:	77fb      	strb	r3, [r7, #31]
 8008856:	e06d      	b.n	8008934 <UART_SetConfig+0x348>
 8008858:	2310      	movs	r3, #16
 800885a:	77fb      	strb	r3, [r7, #31]
 800885c:	e06a      	b.n	8008934 <UART_SetConfig+0x348>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a1b      	ldr	r2, [pc, #108]	@ (80088d0 <UART_SetConfig+0x2e4>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d138      	bne.n	80088da <UART_SetConfig+0x2ee>
 8008868:	4b13      	ldr	r3, [pc, #76]	@ (80088b8 <UART_SetConfig+0x2cc>)
 800886a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800886e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008872:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008876:	d017      	beq.n	80088a8 <UART_SetConfig+0x2bc>
 8008878:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800887c:	d82a      	bhi.n	80088d4 <UART_SetConfig+0x2e8>
 800887e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008882:	d00b      	beq.n	800889c <UART_SetConfig+0x2b0>
 8008884:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008888:	d824      	bhi.n	80088d4 <UART_SetConfig+0x2e8>
 800888a:	2b00      	cmp	r3, #0
 800888c:	d003      	beq.n	8008896 <UART_SetConfig+0x2aa>
 800888e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008892:	d006      	beq.n	80088a2 <UART_SetConfig+0x2b6>
 8008894:	e01e      	b.n	80088d4 <UART_SetConfig+0x2e8>
 8008896:	2300      	movs	r3, #0
 8008898:	77fb      	strb	r3, [r7, #31]
 800889a:	e04b      	b.n	8008934 <UART_SetConfig+0x348>
 800889c:	2302      	movs	r3, #2
 800889e:	77fb      	strb	r3, [r7, #31]
 80088a0:	e048      	b.n	8008934 <UART_SetConfig+0x348>
 80088a2:	2304      	movs	r3, #4
 80088a4:	77fb      	strb	r3, [r7, #31]
 80088a6:	e045      	b.n	8008934 <UART_SetConfig+0x348>
 80088a8:	2308      	movs	r3, #8
 80088aa:	77fb      	strb	r3, [r7, #31]
 80088ac:	e042      	b.n	8008934 <UART_SetConfig+0x348>
 80088ae:	bf00      	nop
 80088b0:	efff69f3 	.word	0xefff69f3
 80088b4:	40011000 	.word	0x40011000
 80088b8:	40023800 	.word	0x40023800
 80088bc:	40004400 	.word	0x40004400
 80088c0:	40004800 	.word	0x40004800
 80088c4:	40004c00 	.word	0x40004c00
 80088c8:	40005000 	.word	0x40005000
 80088cc:	40011400 	.word	0x40011400
 80088d0:	40007800 	.word	0x40007800
 80088d4:	2310      	movs	r3, #16
 80088d6:	77fb      	strb	r3, [r7, #31]
 80088d8:	e02c      	b.n	8008934 <UART_SetConfig+0x348>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a72      	ldr	r2, [pc, #456]	@ (8008aa8 <UART_SetConfig+0x4bc>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d125      	bne.n	8008930 <UART_SetConfig+0x344>
 80088e4:	4b71      	ldr	r3, [pc, #452]	@ (8008aac <UART_SetConfig+0x4c0>)
 80088e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088ea:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80088ee:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80088f2:	d017      	beq.n	8008924 <UART_SetConfig+0x338>
 80088f4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80088f8:	d817      	bhi.n	800892a <UART_SetConfig+0x33e>
 80088fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088fe:	d00b      	beq.n	8008918 <UART_SetConfig+0x32c>
 8008900:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008904:	d811      	bhi.n	800892a <UART_SetConfig+0x33e>
 8008906:	2b00      	cmp	r3, #0
 8008908:	d003      	beq.n	8008912 <UART_SetConfig+0x326>
 800890a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800890e:	d006      	beq.n	800891e <UART_SetConfig+0x332>
 8008910:	e00b      	b.n	800892a <UART_SetConfig+0x33e>
 8008912:	2300      	movs	r3, #0
 8008914:	77fb      	strb	r3, [r7, #31]
 8008916:	e00d      	b.n	8008934 <UART_SetConfig+0x348>
 8008918:	2302      	movs	r3, #2
 800891a:	77fb      	strb	r3, [r7, #31]
 800891c:	e00a      	b.n	8008934 <UART_SetConfig+0x348>
 800891e:	2304      	movs	r3, #4
 8008920:	77fb      	strb	r3, [r7, #31]
 8008922:	e007      	b.n	8008934 <UART_SetConfig+0x348>
 8008924:	2308      	movs	r3, #8
 8008926:	77fb      	strb	r3, [r7, #31]
 8008928:	e004      	b.n	8008934 <UART_SetConfig+0x348>
 800892a:	2310      	movs	r3, #16
 800892c:	77fb      	strb	r3, [r7, #31]
 800892e:	e001      	b.n	8008934 <UART_SetConfig+0x348>
 8008930:	2310      	movs	r3, #16
 8008932:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	69db      	ldr	r3, [r3, #28]
 8008938:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800893c:	d15b      	bne.n	80089f6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800893e:	7ffb      	ldrb	r3, [r7, #31]
 8008940:	2b08      	cmp	r3, #8
 8008942:	d828      	bhi.n	8008996 <UART_SetConfig+0x3aa>
 8008944:	a201      	add	r2, pc, #4	@ (adr r2, 800894c <UART_SetConfig+0x360>)
 8008946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800894a:	bf00      	nop
 800894c:	08008971 	.word	0x08008971
 8008950:	08008979 	.word	0x08008979
 8008954:	08008981 	.word	0x08008981
 8008958:	08008997 	.word	0x08008997
 800895c:	08008987 	.word	0x08008987
 8008960:	08008997 	.word	0x08008997
 8008964:	08008997 	.word	0x08008997
 8008968:	08008997 	.word	0x08008997
 800896c:	0800898f 	.word	0x0800898f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008970:	f7fe fbca 	bl	8007108 <HAL_RCC_GetPCLK1Freq>
 8008974:	61b8      	str	r0, [r7, #24]
        break;
 8008976:	e013      	b.n	80089a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008978:	f7fe fbda 	bl	8007130 <HAL_RCC_GetPCLK2Freq>
 800897c:	61b8      	str	r0, [r7, #24]
        break;
 800897e:	e00f      	b.n	80089a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008980:	4b4b      	ldr	r3, [pc, #300]	@ (8008ab0 <UART_SetConfig+0x4c4>)
 8008982:	61bb      	str	r3, [r7, #24]
        break;
 8008984:	e00c      	b.n	80089a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008986:	f7fe faed 	bl	8006f64 <HAL_RCC_GetSysClockFreq>
 800898a:	61b8      	str	r0, [r7, #24]
        break;
 800898c:	e008      	b.n	80089a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800898e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008992:	61bb      	str	r3, [r7, #24]
        break;
 8008994:	e004      	b.n	80089a0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008996:	2300      	movs	r3, #0
 8008998:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800899a:	2301      	movs	r3, #1
 800899c:	77bb      	strb	r3, [r7, #30]
        break;
 800899e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d074      	beq.n	8008a90 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	005a      	lsls	r2, r3, #1
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	085b      	lsrs	r3, r3, #1
 80089b0:	441a      	add	r2, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	2b0f      	cmp	r3, #15
 80089c0:	d916      	bls.n	80089f0 <UART_SetConfig+0x404>
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089c8:	d212      	bcs.n	80089f0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	f023 030f 	bic.w	r3, r3, #15
 80089d2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	085b      	lsrs	r3, r3, #1
 80089d8:	b29b      	uxth	r3, r3
 80089da:	f003 0307 	and.w	r3, r3, #7
 80089de:	b29a      	uxth	r2, r3
 80089e0:	89fb      	ldrh	r3, [r7, #14]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	89fa      	ldrh	r2, [r7, #14]
 80089ec:	60da      	str	r2, [r3, #12]
 80089ee:	e04f      	b.n	8008a90 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	77bb      	strb	r3, [r7, #30]
 80089f4:	e04c      	b.n	8008a90 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80089f6:	7ffb      	ldrb	r3, [r7, #31]
 80089f8:	2b08      	cmp	r3, #8
 80089fa:	d828      	bhi.n	8008a4e <UART_SetConfig+0x462>
 80089fc:	a201      	add	r2, pc, #4	@ (adr r2, 8008a04 <UART_SetConfig+0x418>)
 80089fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a02:	bf00      	nop
 8008a04:	08008a29 	.word	0x08008a29
 8008a08:	08008a31 	.word	0x08008a31
 8008a0c:	08008a39 	.word	0x08008a39
 8008a10:	08008a4f 	.word	0x08008a4f
 8008a14:	08008a3f 	.word	0x08008a3f
 8008a18:	08008a4f 	.word	0x08008a4f
 8008a1c:	08008a4f 	.word	0x08008a4f
 8008a20:	08008a4f 	.word	0x08008a4f
 8008a24:	08008a47 	.word	0x08008a47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a28:	f7fe fb6e 	bl	8007108 <HAL_RCC_GetPCLK1Freq>
 8008a2c:	61b8      	str	r0, [r7, #24]
        break;
 8008a2e:	e013      	b.n	8008a58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a30:	f7fe fb7e 	bl	8007130 <HAL_RCC_GetPCLK2Freq>
 8008a34:	61b8      	str	r0, [r7, #24]
        break;
 8008a36:	e00f      	b.n	8008a58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a38:	4b1d      	ldr	r3, [pc, #116]	@ (8008ab0 <UART_SetConfig+0x4c4>)
 8008a3a:	61bb      	str	r3, [r7, #24]
        break;
 8008a3c:	e00c      	b.n	8008a58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a3e:	f7fe fa91 	bl	8006f64 <HAL_RCC_GetSysClockFreq>
 8008a42:	61b8      	str	r0, [r7, #24]
        break;
 8008a44:	e008      	b.n	8008a58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a4a:	61bb      	str	r3, [r7, #24]
        break;
 8008a4c:	e004      	b.n	8008a58 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	77bb      	strb	r3, [r7, #30]
        break;
 8008a56:	bf00      	nop
    }

    if (pclk != 0U)
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d018      	beq.n	8008a90 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	085a      	lsrs	r2, r3, #1
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	441a      	add	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	2b0f      	cmp	r3, #15
 8008a76:	d909      	bls.n	8008a8c <UART_SetConfig+0x4a0>
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a7e:	d205      	bcs.n	8008a8c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	60da      	str	r2, [r3, #12]
 8008a8a:	e001      	b.n	8008a90 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008a9c:	7fbb      	ldrb	r3, [r7, #30]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3720      	adds	r7, #32
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	40007c00 	.word	0x40007c00
 8008aac:	40023800 	.word	0x40023800
 8008ab0:	00f42400 	.word	0x00f42400

08008ab4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ac0:	f003 0308 	and.w	r3, r3, #8
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d00a      	beq.n	8008ade <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	430a      	orrs	r2, r1
 8008adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae2:	f003 0301 	and.w	r3, r3, #1
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d00a      	beq.n	8008b00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	430a      	orrs	r2, r1
 8008afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b04:	f003 0302 	and.w	r3, r3, #2
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d00a      	beq.n	8008b22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	430a      	orrs	r2, r1
 8008b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b26:	f003 0304 	and.w	r3, r3, #4
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00a      	beq.n	8008b44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	430a      	orrs	r2, r1
 8008b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b48:	f003 0310 	and.w	r3, r3, #16
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00a      	beq.n	8008b66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	430a      	orrs	r2, r1
 8008b64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b6a:	f003 0320 	and.w	r3, r3, #32
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d00a      	beq.n	8008b88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	430a      	orrs	r2, r1
 8008b86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d01a      	beq.n	8008bca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	430a      	orrs	r2, r1
 8008ba8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bb2:	d10a      	bne.n	8008bca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	430a      	orrs	r2, r1
 8008bc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00a      	beq.n	8008bec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	430a      	orrs	r2, r1
 8008bea:	605a      	str	r2, [r3, #4]
  }
}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b08c      	sub	sp, #48	@ 0x30
 8008bfc:	af02      	add	r7, sp, #8
 8008bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c08:	f7f9 f81e 	bl	8001c48 <HAL_GetTick>
 8008c0c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 0308 	and.w	r3, r3, #8
 8008c18:	2b08      	cmp	r3, #8
 8008c1a:	d12e      	bne.n	8008c7a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c24:	2200      	movs	r2, #0
 8008c26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 f83b 	bl	8008ca6 <UART_WaitOnFlagUntilTimeout>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d021      	beq.n	8008c7a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	e853 3f00 	ldrex	r3, [r3]
 8008c42:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c4a:	623b      	str	r3, [r7, #32]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	461a      	mov	r2, r3
 8008c52:	6a3b      	ldr	r3, [r7, #32]
 8008c54:	61fb      	str	r3, [r7, #28]
 8008c56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c58:	69b9      	ldr	r1, [r7, #24]
 8008c5a:	69fa      	ldr	r2, [r7, #28]
 8008c5c:	e841 2300 	strex	r3, r2, [r1]
 8008c60:	617b      	str	r3, [r7, #20]
   return(result);
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1e6      	bne.n	8008c36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2220      	movs	r2, #32
 8008c6c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c76:	2303      	movs	r3, #3
 8008c78:	e011      	b.n	8008c9e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2220      	movs	r2, #32
 8008c7e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2220      	movs	r2, #32
 8008c84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3728      	adds	r7, #40	@ 0x28
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b084      	sub	sp, #16
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	60f8      	str	r0, [r7, #12]
 8008cae:	60b9      	str	r1, [r7, #8]
 8008cb0:	603b      	str	r3, [r7, #0]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cb6:	e04f      	b.n	8008d58 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008cbe:	d04b      	beq.n	8008d58 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cc0:	f7f8 ffc2 	bl	8001c48 <HAL_GetTick>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	69ba      	ldr	r2, [r7, #24]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d302      	bcc.n	8008cd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d101      	bne.n	8008cda <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	e04e      	b.n	8008d78 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 0304 	and.w	r3, r3, #4
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d037      	beq.n	8008d58 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	2b80      	cmp	r3, #128	@ 0x80
 8008cec:	d034      	beq.n	8008d58 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	2b40      	cmp	r3, #64	@ 0x40
 8008cf2:	d031      	beq.n	8008d58 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	69db      	ldr	r3, [r3, #28]
 8008cfa:	f003 0308 	and.w	r3, r3, #8
 8008cfe:	2b08      	cmp	r3, #8
 8008d00:	d110      	bne.n	8008d24 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2208      	movs	r2, #8
 8008d08:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f000 f8fe 	bl	8008f0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2208      	movs	r2, #8
 8008d14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	e029      	b.n	8008d78 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	69db      	ldr	r3, [r3, #28]
 8008d2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d32:	d111      	bne.n	8008d58 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d3c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d3e:	68f8      	ldr	r0, [r7, #12]
 8008d40:	f000 f8e4 	bl	8008f0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2220      	movs	r2, #32
 8008d48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008d54:	2303      	movs	r3, #3
 8008d56:	e00f      	b.n	8008d78 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	69da      	ldr	r2, [r3, #28]
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	4013      	ands	r3, r2
 8008d62:	68ba      	ldr	r2, [r7, #8]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	bf0c      	ite	eq
 8008d68:	2301      	moveq	r3, #1
 8008d6a:	2300      	movne	r3, #0
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	461a      	mov	r2, r3
 8008d70:	79fb      	ldrb	r3, [r7, #7]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d0a0      	beq.n	8008cb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3710      	adds	r7, #16
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b096      	sub	sp, #88	@ 0x58
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	68ba      	ldr	r2, [r7, #8]
 8008d92:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	88fa      	ldrh	r2, [r7, #6]
 8008d98:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2222      	movs	r2, #34	@ 0x22
 8008da8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d028      	beq.n	8008e06 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008db8:	4a3e      	ldr	r2, [pc, #248]	@ (8008eb4 <UART_Start_Receive_DMA+0x134>)
 8008dba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008dc0:	4a3d      	ldr	r2, [pc, #244]	@ (8008eb8 <UART_Start_Receive_DMA+0x138>)
 8008dc2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008dc8:	4a3c      	ldr	r2, [pc, #240]	@ (8008ebc <UART_Start_Receive_DMA+0x13c>)
 8008dca:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	3324      	adds	r3, #36	@ 0x24
 8008dde:	4619      	mov	r1, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008de4:	461a      	mov	r2, r3
 8008de6:	88fb      	ldrh	r3, [r7, #6]
 8008de8:	f7f9 fb28 	bl	800243c <HAL_DMA_Start_IT>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d009      	beq.n	8008e06 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2210      	movs	r2, #16
 8008df6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2220      	movs	r2, #32
 8008dfe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	e051      	b.n	8008eaa <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d018      	beq.n	8008e40 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e16:	e853 3f00 	ldrex	r3, [r3]
 8008e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e22:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	461a      	mov	r2, r3
 8008e2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e2e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e30:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008e32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e34:	e841 2300 	strex	r3, r2, [r1]
 8008e38:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008e3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d1e6      	bne.n	8008e0e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	3308      	adds	r3, #8
 8008e46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e4a:	e853 3f00 	ldrex	r3, [r3]
 8008e4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e52:	f043 0301 	orr.w	r3, r3, #1
 8008e56:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	3308      	adds	r3, #8
 8008e5e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008e60:	637a      	str	r2, [r7, #52]	@ 0x34
 8008e62:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e64:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008e66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e68:	e841 2300 	strex	r3, r2, [r1]
 8008e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1e5      	bne.n	8008e40 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	3308      	adds	r3, #8
 8008e7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	e853 3f00 	ldrex	r3, [r3]
 8008e82:	613b      	str	r3, [r7, #16]
   return(result);
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	3308      	adds	r3, #8
 8008e92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008e94:	623a      	str	r2, [r7, #32]
 8008e96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e98:	69f9      	ldr	r1, [r7, #28]
 8008e9a:	6a3a      	ldr	r2, [r7, #32]
 8008e9c:	e841 2300 	strex	r3, r2, [r1]
 8008ea0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d1e5      	bne.n	8008e74 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3758      	adds	r7, #88	@ 0x58
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	08008fd5 	.word	0x08008fd5
 8008eb8:	08009133 	.word	0x08009133
 8008ebc:	080091a5 	.word	0x080091a5

08008ec0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b089      	sub	sp, #36	@ 0x24
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	e853 3f00 	ldrex	r3, [r3]
 8008ed4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008edc:	61fb      	str	r3, [r7, #28]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	61bb      	str	r3, [r7, #24]
 8008ee8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eea:	6979      	ldr	r1, [r7, #20]
 8008eec:	69ba      	ldr	r2, [r7, #24]
 8008eee:	e841 2300 	strex	r3, r2, [r1]
 8008ef2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1e6      	bne.n	8008ec8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2220      	movs	r2, #32
 8008efe:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8008f00:	bf00      	nop
 8008f02:	3724      	adds	r7, #36	@ 0x24
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b095      	sub	sp, #84	@ 0x54
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f1c:	e853 3f00 	ldrex	r3, [r3]
 8008f20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f32:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f34:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f3a:	e841 2300 	strex	r3, r2, [r1]
 8008f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1e6      	bne.n	8008f14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	3308      	adds	r3, #8
 8008f4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4e:	6a3b      	ldr	r3, [r7, #32]
 8008f50:	e853 3f00 	ldrex	r3, [r3]
 8008f54:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	f023 0301 	bic.w	r3, r3, #1
 8008f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	3308      	adds	r3, #8
 8008f64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f6e:	e841 2300 	strex	r3, r2, [r1]
 8008f72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1e5      	bne.n	8008f46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d118      	bne.n	8008fb4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	e853 3f00 	ldrex	r3, [r3]
 8008f8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	f023 0310 	bic.w	r3, r3, #16
 8008f96:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fa0:	61bb      	str	r3, [r7, #24]
 8008fa2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa4:	6979      	ldr	r1, [r7, #20]
 8008fa6:	69ba      	ldr	r2, [r7, #24]
 8008fa8:	e841 2300 	strex	r3, r2, [r1]
 8008fac:	613b      	str	r3, [r7, #16]
   return(result);
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d1e6      	bne.n	8008f82 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2220      	movs	r2, #32
 8008fb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008fc8:	bf00      	nop
 8008fca:	3754      	adds	r7, #84	@ 0x54
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b09c      	sub	sp, #112	@ 0x70
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fe0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	69db      	ldr	r3, [r3, #28]
 8008fe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fea:	d071      	beq.n	80090d0 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8008fec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ff4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ffc:	e853 3f00 	ldrex	r3, [r3]
 8009000:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009002:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009004:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009008:	66bb      	str	r3, [r7, #104]	@ 0x68
 800900a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	461a      	mov	r2, r3
 8009010:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009012:	657b      	str	r3, [r7, #84]	@ 0x54
 8009014:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009016:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009018:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800901a:	e841 2300 	strex	r3, r2, [r1]
 800901e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009020:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1e6      	bne.n	8008ff4 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009026:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	3308      	adds	r3, #8
 800902c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009030:	e853 3f00 	ldrex	r3, [r3]
 8009034:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009038:	f023 0301 	bic.w	r3, r3, #1
 800903c:	667b      	str	r3, [r7, #100]	@ 0x64
 800903e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	3308      	adds	r3, #8
 8009044:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009046:	643a      	str	r2, [r7, #64]	@ 0x40
 8009048:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800904c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800904e:	e841 2300 	strex	r3, r2, [r1]
 8009052:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1e5      	bne.n	8009026 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800905a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	3308      	adds	r3, #8
 8009060:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009062:	6a3b      	ldr	r3, [r7, #32]
 8009064:	e853 3f00 	ldrex	r3, [r3]
 8009068:	61fb      	str	r3, [r7, #28]
   return(result);
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009070:	663b      	str	r3, [r7, #96]	@ 0x60
 8009072:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	3308      	adds	r3, #8
 8009078:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800907a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800907c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009080:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009082:	e841 2300 	strex	r3, r2, [r1]
 8009086:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908a:	2b00      	cmp	r3, #0
 800908c:	d1e5      	bne.n	800905a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800908e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009090:	2220      	movs	r2, #32
 8009092:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009096:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800909a:	2b01      	cmp	r3, #1
 800909c:	d118      	bne.n	80090d0 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800909e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	e853 3f00 	ldrex	r3, [r3]
 80090aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	f023 0310 	bic.w	r3, r3, #16
 80090b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80090b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	461a      	mov	r2, r3
 80090ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090bc:	61bb      	str	r3, [r7, #24]
 80090be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c0:	6979      	ldr	r1, [r7, #20]
 80090c2:	69ba      	ldr	r2, [r7, #24]
 80090c4:	e841 2300 	strex	r3, r2, [r1]
 80090c8:	613b      	str	r3, [r7, #16]
   return(result);
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1e6      	bne.n	800909e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090d2:	2200      	movs	r2, #0
 80090d4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d122      	bne.n	8009124 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 80090de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090e0:	2200      	movs	r2, #0
 80090e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 80090f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80090f6:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d204      	bcs.n	8009108 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 80090fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009100:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8009104:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009108:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800910a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800910e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009110:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009114:	b29b      	uxth	r3, r3
 8009116:	1ad3      	subs	r3, r2, r3
 8009118:	b29b      	uxth	r3, r3
 800911a:	4619      	mov	r1, r3
 800911c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800911e:	f7ff fa59 	bl	80085d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009122:	e002      	b.n	800912a <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 8009124:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009126:	f00b fdbf 	bl	8014ca8 <HAL_UART_RxCpltCallback>
}
 800912a:	bf00      	nop
 800912c:	3770      	adds	r7, #112	@ 0x70
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b084      	sub	sp, #16
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800913e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2201      	movs	r2, #1
 8009144:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800914a:	2b01      	cmp	r3, #1
 800914c:	d123      	bne.n	8009196 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009154:	085b      	lsrs	r3, r3, #1
 8009156:	b29a      	uxth	r2, r3
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800916c:	897a      	ldrh	r2, [r7, #10]
 800916e:	429a      	cmp	r2, r3
 8009170:	d803      	bhi.n	800917a <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	897a      	ldrh	r2, [r7, #10]
 8009176:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009186:	b29b      	uxth	r3, r3
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	b29b      	uxth	r3, r3
 800918c:	4619      	mov	r1, r3
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	f7ff fa20 	bl	80085d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009194:	e002      	b.n	800919c <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f7ff fa08 	bl	80085ac <HAL_UART_RxHalfCpltCallback>
}
 800919c:	bf00      	nop
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091b0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80091b6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091be:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091ca:	2b80      	cmp	r3, #128	@ 0x80
 80091cc:	d109      	bne.n	80091e2 <UART_DMAError+0x3e>
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	2b21      	cmp	r3, #33	@ 0x21
 80091d2:	d106      	bne.n	80091e2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80091dc:	6978      	ldr	r0, [r7, #20]
 80091de:	f7ff fe6f 	bl	8008ec0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091ec:	2b40      	cmp	r3, #64	@ 0x40
 80091ee:	d109      	bne.n	8009204 <UART_DMAError+0x60>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2b22      	cmp	r3, #34	@ 0x22
 80091f4:	d106      	bne.n	8009204 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80091fe:	6978      	ldr	r0, [r7, #20]
 8009200:	f7ff fe84 	bl	8008f0c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800920a:	f043 0210 	orr.w	r2, r3, #16
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009214:	6978      	ldr	r0, [r7, #20]
 8009216:	f7ff f9d3 	bl	80085c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800921a:	bf00      	nop
 800921c:	3718      	adds	r7, #24
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b084      	sub	sp, #16
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800922e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009238:	68f8      	ldr	r0, [r7, #12]
 800923a:	f7ff f9c1 	bl	80085c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800923e:	bf00      	nop
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009246:	b480      	push	{r7}
 8009248:	b08f      	sub	sp, #60	@ 0x3c
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009252:	2b21      	cmp	r3, #33	@ 0x21
 8009254:	d14c      	bne.n	80092f0 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800925c:	b29b      	uxth	r3, r3
 800925e:	2b00      	cmp	r3, #0
 8009260:	d132      	bne.n	80092c8 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009268:	6a3b      	ldr	r3, [r7, #32]
 800926a:	e853 3f00 	ldrex	r3, [r3]
 800926e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009276:	637b      	str	r3, [r7, #52]	@ 0x34
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	461a      	mov	r2, r3
 800927e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009280:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009282:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009284:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009286:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009288:	e841 2300 	strex	r3, r2, [r1]
 800928c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800928e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1e6      	bne.n	8009262 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	e853 3f00 	ldrex	r3, [r3]
 80092a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	461a      	mov	r2, r3
 80092b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b2:	61bb      	str	r3, [r7, #24]
 80092b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b6:	6979      	ldr	r1, [r7, #20]
 80092b8:	69ba      	ldr	r2, [r7, #24]
 80092ba:	e841 2300 	strex	r3, r2, [r1]
 80092be:	613b      	str	r3, [r7, #16]
   return(result);
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1e6      	bne.n	8009294 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80092c6:	e013      	b.n	80092f0 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092cc:	781a      	ldrb	r2, [r3, #0]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092d8:	1c5a      	adds	r2, r3, #1
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	3b01      	subs	r3, #1
 80092e8:	b29a      	uxth	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80092f0:	bf00      	nop
 80092f2:	373c      	adds	r7, #60	@ 0x3c
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b091      	sub	sp, #68	@ 0x44
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009308:	2b21      	cmp	r3, #33	@ 0x21
 800930a:	d151      	bne.n	80093b0 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009312:	b29b      	uxth	r3, r3
 8009314:	2b00      	cmp	r3, #0
 8009316:	d132      	bne.n	800937e <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009320:	e853 3f00 	ldrex	r3, [r3]
 8009324:	623b      	str	r3, [r7, #32]
   return(result);
 8009326:	6a3b      	ldr	r3, [r7, #32]
 8009328:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800932c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	461a      	mov	r2, r3
 8009334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009336:	633b      	str	r3, [r7, #48]	@ 0x30
 8009338:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800933c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800933e:	e841 2300 	strex	r3, r2, [r1]
 8009342:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009346:	2b00      	cmp	r3, #0
 8009348:	d1e6      	bne.n	8009318 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	e853 3f00 	ldrex	r3, [r3]
 8009356:	60fb      	str	r3, [r7, #12]
   return(result);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800935e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	461a      	mov	r2, r3
 8009366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009368:	61fb      	str	r3, [r7, #28]
 800936a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936c:	69b9      	ldr	r1, [r7, #24]
 800936e:	69fa      	ldr	r2, [r7, #28]
 8009370:	e841 2300 	strex	r3, r2, [r1]
 8009374:	617b      	str	r3, [r7, #20]
   return(result);
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d1e6      	bne.n	800934a <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800937c:	e018      	b.n	80093b0 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009382:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009386:	881b      	ldrh	r3, [r3, #0]
 8009388:	461a      	mov	r2, r3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009392:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009398:	1c9a      	adds	r2, r3, #2
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	3b01      	subs	r3, #1
 80093a8:	b29a      	uxth	r2, r3
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80093b0:	bf00      	nop
 80093b2:	3744      	adds	r7, #68	@ 0x44
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b088      	sub	sp, #32
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	e853 3f00 	ldrex	r3, [r3]
 80093d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093d8:	61fb      	str	r3, [r7, #28]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	461a      	mov	r2, r3
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	61bb      	str	r3, [r7, #24]
 80093e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e6:	6979      	ldr	r1, [r7, #20]
 80093e8:	69ba      	ldr	r2, [r7, #24]
 80093ea:	e841 2300 	strex	r3, r2, [r1]
 80093ee:	613b      	str	r3, [r7, #16]
   return(result);
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d1e6      	bne.n	80093c4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2220      	movs	r2, #32
 80093fa:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f7ff f8c8 	bl	8008598 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009408:	bf00      	nop
 800940a:	3720      	adds	r7, #32
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8009416:	4b87      	ldr	r3, [pc, #540]	@ (8009634 <MX_LWIP_Init+0x224>)
 8009418:	220a      	movs	r2, #10
 800941a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 800941c:	4b85      	ldr	r3, [pc, #532]	@ (8009634 <MX_LWIP_Init+0x224>)
 800941e:	2200      	movs	r2, #0
 8009420:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8009422:	4b84      	ldr	r3, [pc, #528]	@ (8009634 <MX_LWIP_Init+0x224>)
 8009424:	2201      	movs	r2, #1
 8009426:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 8009428:	4b82      	ldr	r3, [pc, #520]	@ (8009634 <MX_LWIP_Init+0x224>)
 800942a:	2264      	movs	r2, #100	@ 0x64
 800942c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800942e:	4b82      	ldr	r3, [pc, #520]	@ (8009638 <MX_LWIP_Init+0x228>)
 8009430:	22ff      	movs	r2, #255	@ 0xff
 8009432:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009434:	4b80      	ldr	r3, [pc, #512]	@ (8009638 <MX_LWIP_Init+0x228>)
 8009436:	22ff      	movs	r2, #255	@ 0xff
 8009438:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800943a:	4b7f      	ldr	r3, [pc, #508]	@ (8009638 <MX_LWIP_Init+0x228>)
 800943c:	22ff      	movs	r2, #255	@ 0xff
 800943e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009440:	4b7d      	ldr	r3, [pc, #500]	@ (8009638 <MX_LWIP_Init+0x228>)
 8009442:	2200      	movs	r2, #0
 8009444:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 8009446:	4b7d      	ldr	r3, [pc, #500]	@ (800963c <MX_LWIP_Init+0x22c>)
 8009448:	220a      	movs	r2, #10
 800944a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800944c:	4b7b      	ldr	r3, [pc, #492]	@ (800963c <MX_LWIP_Init+0x22c>)
 800944e:	2200      	movs	r2, #0
 8009450:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8009452:	4b7a      	ldr	r3, [pc, #488]	@ (800963c <MX_LWIP_Init+0x22c>)
 8009454:	2201      	movs	r2, #1
 8009456:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 101;
 8009458:	4b78      	ldr	r3, [pc, #480]	@ (800963c <MX_LWIP_Init+0x22c>)
 800945a:	2265      	movs	r2, #101	@ 0x65
 800945c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800945e:	f000 fd6a 	bl	8009f36 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009462:	4b74      	ldr	r3, [pc, #464]	@ (8009634 <MX_LWIP_Init+0x224>)
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	061a      	lsls	r2, r3, #24
 8009468:	4b72      	ldr	r3, [pc, #456]	@ (8009634 <MX_LWIP_Init+0x224>)
 800946a:	785b      	ldrb	r3, [r3, #1]
 800946c:	041b      	lsls	r3, r3, #16
 800946e:	431a      	orrs	r2, r3
 8009470:	4b70      	ldr	r3, [pc, #448]	@ (8009634 <MX_LWIP_Init+0x224>)
 8009472:	789b      	ldrb	r3, [r3, #2]
 8009474:	021b      	lsls	r3, r3, #8
 8009476:	4313      	orrs	r3, r2
 8009478:	4a6e      	ldr	r2, [pc, #440]	@ (8009634 <MX_LWIP_Init+0x224>)
 800947a:	78d2      	ldrb	r2, [r2, #3]
 800947c:	4313      	orrs	r3, r2
 800947e:	061a      	lsls	r2, r3, #24
 8009480:	4b6c      	ldr	r3, [pc, #432]	@ (8009634 <MX_LWIP_Init+0x224>)
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	0619      	lsls	r1, r3, #24
 8009486:	4b6b      	ldr	r3, [pc, #428]	@ (8009634 <MX_LWIP_Init+0x224>)
 8009488:	785b      	ldrb	r3, [r3, #1]
 800948a:	041b      	lsls	r3, r3, #16
 800948c:	4319      	orrs	r1, r3
 800948e:	4b69      	ldr	r3, [pc, #420]	@ (8009634 <MX_LWIP_Init+0x224>)
 8009490:	789b      	ldrb	r3, [r3, #2]
 8009492:	021b      	lsls	r3, r3, #8
 8009494:	430b      	orrs	r3, r1
 8009496:	4967      	ldr	r1, [pc, #412]	@ (8009634 <MX_LWIP_Init+0x224>)
 8009498:	78c9      	ldrb	r1, [r1, #3]
 800949a:	430b      	orrs	r3, r1
 800949c:	021b      	lsls	r3, r3, #8
 800949e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80094a2:	431a      	orrs	r2, r3
 80094a4:	4b63      	ldr	r3, [pc, #396]	@ (8009634 <MX_LWIP_Init+0x224>)
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	0619      	lsls	r1, r3, #24
 80094aa:	4b62      	ldr	r3, [pc, #392]	@ (8009634 <MX_LWIP_Init+0x224>)
 80094ac:	785b      	ldrb	r3, [r3, #1]
 80094ae:	041b      	lsls	r3, r3, #16
 80094b0:	4319      	orrs	r1, r3
 80094b2:	4b60      	ldr	r3, [pc, #384]	@ (8009634 <MX_LWIP_Init+0x224>)
 80094b4:	789b      	ldrb	r3, [r3, #2]
 80094b6:	021b      	lsls	r3, r3, #8
 80094b8:	430b      	orrs	r3, r1
 80094ba:	495e      	ldr	r1, [pc, #376]	@ (8009634 <MX_LWIP_Init+0x224>)
 80094bc:	78c9      	ldrb	r1, [r1, #3]
 80094be:	430b      	orrs	r3, r1
 80094c0:	0a1b      	lsrs	r3, r3, #8
 80094c2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80094c6:	431a      	orrs	r2, r3
 80094c8:	4b5a      	ldr	r3, [pc, #360]	@ (8009634 <MX_LWIP_Init+0x224>)
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	0619      	lsls	r1, r3, #24
 80094ce:	4b59      	ldr	r3, [pc, #356]	@ (8009634 <MX_LWIP_Init+0x224>)
 80094d0:	785b      	ldrb	r3, [r3, #1]
 80094d2:	041b      	lsls	r3, r3, #16
 80094d4:	4319      	orrs	r1, r3
 80094d6:	4b57      	ldr	r3, [pc, #348]	@ (8009634 <MX_LWIP_Init+0x224>)
 80094d8:	789b      	ldrb	r3, [r3, #2]
 80094da:	021b      	lsls	r3, r3, #8
 80094dc:	430b      	orrs	r3, r1
 80094de:	4955      	ldr	r1, [pc, #340]	@ (8009634 <MX_LWIP_Init+0x224>)
 80094e0:	78c9      	ldrb	r1, [r1, #3]
 80094e2:	430b      	orrs	r3, r1
 80094e4:	0e1b      	lsrs	r3, r3, #24
 80094e6:	4313      	orrs	r3, r2
 80094e8:	4a55      	ldr	r2, [pc, #340]	@ (8009640 <MX_LWIP_Init+0x230>)
 80094ea:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80094ec:	4b52      	ldr	r3, [pc, #328]	@ (8009638 <MX_LWIP_Init+0x228>)
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	061a      	lsls	r2, r3, #24
 80094f2:	4b51      	ldr	r3, [pc, #324]	@ (8009638 <MX_LWIP_Init+0x228>)
 80094f4:	785b      	ldrb	r3, [r3, #1]
 80094f6:	041b      	lsls	r3, r3, #16
 80094f8:	431a      	orrs	r2, r3
 80094fa:	4b4f      	ldr	r3, [pc, #316]	@ (8009638 <MX_LWIP_Init+0x228>)
 80094fc:	789b      	ldrb	r3, [r3, #2]
 80094fe:	021b      	lsls	r3, r3, #8
 8009500:	4313      	orrs	r3, r2
 8009502:	4a4d      	ldr	r2, [pc, #308]	@ (8009638 <MX_LWIP_Init+0x228>)
 8009504:	78d2      	ldrb	r2, [r2, #3]
 8009506:	4313      	orrs	r3, r2
 8009508:	061a      	lsls	r2, r3, #24
 800950a:	4b4b      	ldr	r3, [pc, #300]	@ (8009638 <MX_LWIP_Init+0x228>)
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	0619      	lsls	r1, r3, #24
 8009510:	4b49      	ldr	r3, [pc, #292]	@ (8009638 <MX_LWIP_Init+0x228>)
 8009512:	785b      	ldrb	r3, [r3, #1]
 8009514:	041b      	lsls	r3, r3, #16
 8009516:	4319      	orrs	r1, r3
 8009518:	4b47      	ldr	r3, [pc, #284]	@ (8009638 <MX_LWIP_Init+0x228>)
 800951a:	789b      	ldrb	r3, [r3, #2]
 800951c:	021b      	lsls	r3, r3, #8
 800951e:	430b      	orrs	r3, r1
 8009520:	4945      	ldr	r1, [pc, #276]	@ (8009638 <MX_LWIP_Init+0x228>)
 8009522:	78c9      	ldrb	r1, [r1, #3]
 8009524:	430b      	orrs	r3, r1
 8009526:	021b      	lsls	r3, r3, #8
 8009528:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800952c:	431a      	orrs	r2, r3
 800952e:	4b42      	ldr	r3, [pc, #264]	@ (8009638 <MX_LWIP_Init+0x228>)
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	0619      	lsls	r1, r3, #24
 8009534:	4b40      	ldr	r3, [pc, #256]	@ (8009638 <MX_LWIP_Init+0x228>)
 8009536:	785b      	ldrb	r3, [r3, #1]
 8009538:	041b      	lsls	r3, r3, #16
 800953a:	4319      	orrs	r1, r3
 800953c:	4b3e      	ldr	r3, [pc, #248]	@ (8009638 <MX_LWIP_Init+0x228>)
 800953e:	789b      	ldrb	r3, [r3, #2]
 8009540:	021b      	lsls	r3, r3, #8
 8009542:	430b      	orrs	r3, r1
 8009544:	493c      	ldr	r1, [pc, #240]	@ (8009638 <MX_LWIP_Init+0x228>)
 8009546:	78c9      	ldrb	r1, [r1, #3]
 8009548:	430b      	orrs	r3, r1
 800954a:	0a1b      	lsrs	r3, r3, #8
 800954c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009550:	431a      	orrs	r2, r3
 8009552:	4b39      	ldr	r3, [pc, #228]	@ (8009638 <MX_LWIP_Init+0x228>)
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	0619      	lsls	r1, r3, #24
 8009558:	4b37      	ldr	r3, [pc, #220]	@ (8009638 <MX_LWIP_Init+0x228>)
 800955a:	785b      	ldrb	r3, [r3, #1]
 800955c:	041b      	lsls	r3, r3, #16
 800955e:	4319      	orrs	r1, r3
 8009560:	4b35      	ldr	r3, [pc, #212]	@ (8009638 <MX_LWIP_Init+0x228>)
 8009562:	789b      	ldrb	r3, [r3, #2]
 8009564:	021b      	lsls	r3, r3, #8
 8009566:	430b      	orrs	r3, r1
 8009568:	4933      	ldr	r1, [pc, #204]	@ (8009638 <MX_LWIP_Init+0x228>)
 800956a:	78c9      	ldrb	r1, [r1, #3]
 800956c:	430b      	orrs	r3, r1
 800956e:	0e1b      	lsrs	r3, r3, #24
 8009570:	4313      	orrs	r3, r2
 8009572:	4a34      	ldr	r2, [pc, #208]	@ (8009644 <MX_LWIP_Init+0x234>)
 8009574:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009576:	4b31      	ldr	r3, [pc, #196]	@ (800963c <MX_LWIP_Init+0x22c>)
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	061a      	lsls	r2, r3, #24
 800957c:	4b2f      	ldr	r3, [pc, #188]	@ (800963c <MX_LWIP_Init+0x22c>)
 800957e:	785b      	ldrb	r3, [r3, #1]
 8009580:	041b      	lsls	r3, r3, #16
 8009582:	431a      	orrs	r2, r3
 8009584:	4b2d      	ldr	r3, [pc, #180]	@ (800963c <MX_LWIP_Init+0x22c>)
 8009586:	789b      	ldrb	r3, [r3, #2]
 8009588:	021b      	lsls	r3, r3, #8
 800958a:	4313      	orrs	r3, r2
 800958c:	4a2b      	ldr	r2, [pc, #172]	@ (800963c <MX_LWIP_Init+0x22c>)
 800958e:	78d2      	ldrb	r2, [r2, #3]
 8009590:	4313      	orrs	r3, r2
 8009592:	061a      	lsls	r2, r3, #24
 8009594:	4b29      	ldr	r3, [pc, #164]	@ (800963c <MX_LWIP_Init+0x22c>)
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	0619      	lsls	r1, r3, #24
 800959a:	4b28      	ldr	r3, [pc, #160]	@ (800963c <MX_LWIP_Init+0x22c>)
 800959c:	785b      	ldrb	r3, [r3, #1]
 800959e:	041b      	lsls	r3, r3, #16
 80095a0:	4319      	orrs	r1, r3
 80095a2:	4b26      	ldr	r3, [pc, #152]	@ (800963c <MX_LWIP_Init+0x22c>)
 80095a4:	789b      	ldrb	r3, [r3, #2]
 80095a6:	021b      	lsls	r3, r3, #8
 80095a8:	430b      	orrs	r3, r1
 80095aa:	4924      	ldr	r1, [pc, #144]	@ (800963c <MX_LWIP_Init+0x22c>)
 80095ac:	78c9      	ldrb	r1, [r1, #3]
 80095ae:	430b      	orrs	r3, r1
 80095b0:	021b      	lsls	r3, r3, #8
 80095b2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80095b6:	431a      	orrs	r2, r3
 80095b8:	4b20      	ldr	r3, [pc, #128]	@ (800963c <MX_LWIP_Init+0x22c>)
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	0619      	lsls	r1, r3, #24
 80095be:	4b1f      	ldr	r3, [pc, #124]	@ (800963c <MX_LWIP_Init+0x22c>)
 80095c0:	785b      	ldrb	r3, [r3, #1]
 80095c2:	041b      	lsls	r3, r3, #16
 80095c4:	4319      	orrs	r1, r3
 80095c6:	4b1d      	ldr	r3, [pc, #116]	@ (800963c <MX_LWIP_Init+0x22c>)
 80095c8:	789b      	ldrb	r3, [r3, #2]
 80095ca:	021b      	lsls	r3, r3, #8
 80095cc:	430b      	orrs	r3, r1
 80095ce:	491b      	ldr	r1, [pc, #108]	@ (800963c <MX_LWIP_Init+0x22c>)
 80095d0:	78c9      	ldrb	r1, [r1, #3]
 80095d2:	430b      	orrs	r3, r1
 80095d4:	0a1b      	lsrs	r3, r3, #8
 80095d6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80095da:	431a      	orrs	r2, r3
 80095dc:	4b17      	ldr	r3, [pc, #92]	@ (800963c <MX_LWIP_Init+0x22c>)
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	0619      	lsls	r1, r3, #24
 80095e2:	4b16      	ldr	r3, [pc, #88]	@ (800963c <MX_LWIP_Init+0x22c>)
 80095e4:	785b      	ldrb	r3, [r3, #1]
 80095e6:	041b      	lsls	r3, r3, #16
 80095e8:	4319      	orrs	r1, r3
 80095ea:	4b14      	ldr	r3, [pc, #80]	@ (800963c <MX_LWIP_Init+0x22c>)
 80095ec:	789b      	ldrb	r3, [r3, #2]
 80095ee:	021b      	lsls	r3, r3, #8
 80095f0:	430b      	orrs	r3, r1
 80095f2:	4912      	ldr	r1, [pc, #72]	@ (800963c <MX_LWIP_Init+0x22c>)
 80095f4:	78c9      	ldrb	r1, [r1, #3]
 80095f6:	430b      	orrs	r3, r1
 80095f8:	0e1b      	lsrs	r3, r3, #24
 80095fa:	4313      	orrs	r3, r2
 80095fc:	4a12      	ldr	r2, [pc, #72]	@ (8009648 <MX_LWIP_Init+0x238>)
 80095fe:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8009600:	4b12      	ldr	r3, [pc, #72]	@ (800964c <MX_LWIP_Init+0x23c>)
 8009602:	9302      	str	r3, [sp, #8]
 8009604:	4b12      	ldr	r3, [pc, #72]	@ (8009650 <MX_LWIP_Init+0x240>)
 8009606:	9301      	str	r3, [sp, #4]
 8009608:	2300      	movs	r3, #0
 800960a:	9300      	str	r3, [sp, #0]
 800960c:	4b0e      	ldr	r3, [pc, #56]	@ (8009648 <MX_LWIP_Init+0x238>)
 800960e:	4a0d      	ldr	r2, [pc, #52]	@ (8009644 <MX_LWIP_Init+0x234>)
 8009610:	490b      	ldr	r1, [pc, #44]	@ (8009640 <MX_LWIP_Init+0x230>)
 8009612:	4810      	ldr	r0, [pc, #64]	@ (8009654 <MX_LWIP_Init+0x244>)
 8009614:	f001 f976 	bl	800a904 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009618:	480e      	ldr	r0, [pc, #56]	@ (8009654 <MX_LWIP_Init+0x244>)
 800961a:	f001 fc07 	bl	800ae2c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800961e:	480d      	ldr	r0, [pc, #52]	@ (8009654 <MX_LWIP_Init+0x244>)
 8009620:	f001 fc28 	bl	800ae74 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8009624:	490c      	ldr	r1, [pc, #48]	@ (8009658 <MX_LWIP_Init+0x248>)
 8009626:	480b      	ldr	r0, [pc, #44]	@ (8009654 <MX_LWIP_Init+0x244>)
 8009628:	f001 fd26 	bl	800b078 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800962c:	bf00      	nop
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	20000960 	.word	0x20000960
 8009638:	20000964 	.word	0x20000964
 800963c:	20000968 	.word	0x20000968
 8009640:	20000954 	.word	0x20000954
 8009644:	20000958 	.word	0x20000958
 8009648:	2000095c 	.word	0x2000095c
 800964c:	08014481 	.word	0x08014481
 8009650:	080099d1 	.word	0x080099d1
 8009654:	20000920 	.word	0x20000920
 8009658:	080096ad 	.word	0x080096ad

0800965c <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8009664:	f7f8 faf0 	bl	8001c48 <HAL_GetTick>
 8009668:	4602      	mov	r2, r0
 800966a:	4b08      	ldr	r3, [pc, #32]	@ (800968c <Ethernet_Link_Periodic_Handle+0x30>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	1ad3      	subs	r3, r2, r3
 8009670:	2b63      	cmp	r3, #99	@ 0x63
 8009672:	d907      	bls.n	8009684 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8009674:	f7f8 fae8 	bl	8001c48 <HAL_GetTick>
 8009678:	4603      	mov	r3, r0
 800967a:	4a04      	ldr	r2, [pc, #16]	@ (800968c <Ethernet_Link_Periodic_Handle+0x30>)
 800967c:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 fb0c 	bl	8009c9c <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8009684:	bf00      	nop
 8009686:	3708      	adds	r7, #8
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	2000091c 	.word	0x2000091c

08009690 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8009694:	4804      	ldr	r0, [pc, #16]	@ (80096a8 <MX_LWIP_Process+0x18>)
 8009696:	f000 f97b 	bl	8009990 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800969a:	f007 fd85 	bl	80111a8 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 800969e:	4802      	ldr	r0, [pc, #8]	@ (80096a8 <MX_LWIP_Process+0x18>)
 80096a0:	f7ff ffdc 	bl	800965c <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80096a4:	bf00      	nop
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	20000920 	.word	0x20000920

080096ac <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80096b4:	bf00      	nop
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <SCB_InvalidateDCache_by_Addr>:
{
 80096c0:	b480      	push	{r7}
 80096c2:	b087      	sub	sp, #28
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80096d2:	2320      	movs	r3, #32
 80096d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80096d6:	f3bf 8f4f 	dsb	sy
}
 80096da:	bf00      	nop
    while (op_size > 0) {
 80096dc:	e00b      	b.n	80096f6 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 80096de:	4a0d      	ldr	r2, [pc, #52]	@ (8009714 <SCB_InvalidateDCache_by_Addr+0x54>)
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	693a      	ldr	r2, [r7, #16]
 80096ea:	4413      	add	r3, r2
 80096ec:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80096ee:	697a      	ldr	r2, [r7, #20]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	1ad3      	subs	r3, r2, r3
 80096f4:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	dcf0      	bgt.n	80096de <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80096fc:	f3bf 8f4f 	dsb	sy
}
 8009700:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009702:	f3bf 8f6f 	isb	sy
}
 8009706:	bf00      	nop
}
 8009708:	bf00      	nop
 800970a:	371c      	adds	r7, #28
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr
 8009714:	e000ed00 	.word	0xe000ed00

08009718 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8009720:	2300      	movs	r3, #0
 8009722:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009724:	4b44      	ldr	r3, [pc, #272]	@ (8009838 <low_level_init+0x120>)
 8009726:	4a45      	ldr	r2, [pc, #276]	@ (800983c <low_level_init+0x124>)
 8009728:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800972a:	2300      	movs	r3, #0
 800972c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800972e:	2380      	movs	r3, #128	@ 0x80
 8009730:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8009732:	23e1      	movs	r3, #225	@ 0xe1
 8009734:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8009736:	2300      	movs	r3, #0
 8009738:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800973a:	2300      	movs	r3, #0
 800973c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800973e:	2300      	movs	r3, #0
 8009740:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8009742:	4a3d      	ldr	r2, [pc, #244]	@ (8009838 <low_level_init+0x120>)
 8009744:	f107 0308 	add.w	r3, r7, #8
 8009748:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800974a:	4b3b      	ldr	r3, [pc, #236]	@ (8009838 <low_level_init+0x120>)
 800974c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8009750:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8009752:	4b39      	ldr	r3, [pc, #228]	@ (8009838 <low_level_init+0x120>)
 8009754:	4a3a      	ldr	r2, [pc, #232]	@ (8009840 <low_level_init+0x128>)
 8009756:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8009758:	4b37      	ldr	r3, [pc, #220]	@ (8009838 <low_level_init+0x120>)
 800975a:	4a3a      	ldr	r2, [pc, #232]	@ (8009844 <low_level_init+0x12c>)
 800975c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800975e:	4b36      	ldr	r3, [pc, #216]	@ (8009838 <low_level_init+0x120>)
 8009760:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8009764:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009766:	4834      	ldr	r0, [pc, #208]	@ (8009838 <low_level_init+0x120>)
 8009768:	f7f9 f9de 	bl	8002b28 <HAL_ETH_Init>
 800976c:	4603      	mov	r3, r0
 800976e:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8009770:	2238      	movs	r2, #56	@ 0x38
 8009772:	2100      	movs	r1, #0
 8009774:	4834      	ldr	r0, [pc, #208]	@ (8009848 <low_level_init+0x130>)
 8009776:	f00b fd17 	bl	80151a8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800977a:	4b33      	ldr	r3, [pc, #204]	@ (8009848 <low_level_init+0x130>)
 800977c:	2221      	movs	r2, #33	@ 0x21
 800977e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8009780:	4b31      	ldr	r3, [pc, #196]	@ (8009848 <low_level_init+0x130>)
 8009782:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8009786:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8009788:	4b2f      	ldr	r3, [pc, #188]	@ (8009848 <low_level_init+0x130>)
 800978a:	2200      	movs	r2, #0
 800978c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800978e:	482f      	ldr	r0, [pc, #188]	@ (800984c <low_level_init+0x134>)
 8009790:	f000 ff80 	bl	800a694 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2206      	movs	r2, #6
 8009798:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800979c:	4b26      	ldr	r3, [pc, #152]	@ (8009838 <low_level_init+0x120>)
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	781a      	ldrb	r2, [r3, #0]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80097a8:	4b23      	ldr	r3, [pc, #140]	@ (8009838 <low_level_init+0x120>)
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	785a      	ldrb	r2, [r3, #1]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80097b4:	4b20      	ldr	r3, [pc, #128]	@ (8009838 <low_level_init+0x120>)
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	789a      	ldrb	r2, [r3, #2]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80097c0:	4b1d      	ldr	r3, [pc, #116]	@ (8009838 <low_level_init+0x120>)
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	78da      	ldrb	r2, [r3, #3]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80097cc:	4b1a      	ldr	r3, [pc, #104]	@ (8009838 <low_level_init+0x120>)
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	791a      	ldrb	r2, [r3, #4]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80097d8:	4b17      	ldr	r3, [pc, #92]	@ (8009838 <low_level_init+0x120>)
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	795a      	ldrb	r2, [r3, #5]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80097ea:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80097f2:	f043 030a 	orr.w	r3, r3, #10
 80097f6:	b2da      	uxtb	r2, r3
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80097fe:	4914      	ldr	r1, [pc, #80]	@ (8009850 <low_level_init+0x138>)
 8009800:	4814      	ldr	r0, [pc, #80]	@ (8009854 <low_level_init+0x13c>)
 8009802:	f7f8 f8ca 	bl	800199a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8009806:	4813      	ldr	r0, [pc, #76]	@ (8009854 <low_level_init+0x13c>)
 8009808:	f7f8 f8f9 	bl	80019fe <LAN8742_Init>
 800980c:	4603      	mov	r3, r0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d006      	beq.n	8009820 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f001 fc00 	bl	800b018 <netif_set_link_down>
    netif_set_down(netif);
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f001 fb97 	bl	800af4c <netif_set_down>
 800981e:	e008      	b.n	8009832 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8009820:	7bfb      	ldrb	r3, [r7, #15]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d103      	bne.n	800982e <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 fa38 	bl	8009c9c <ethernet_link_check_state>
 800982c:	e001      	b.n	8009832 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 800982e:	f7f7 fa9f 	bl	8000d70 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8009832:	3710      	adds	r7, #16
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}
 8009838:	200052f8 	.word	0x200052f8
 800983c:	40028000 	.word	0x40028000
 8009840:	2000016c 	.word	0x2000016c
 8009844:	200000cc 	.word	0x200000cc
 8009848:	200053a8 	.word	0x200053a8
 800984c:	080193b0 	.word	0x080193b0
 8009850:	2000000c 	.word	0x2000000c
 8009854:	200053e0 	.word	0x200053e0

08009858 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b092      	sub	sp, #72	@ 0x48
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8009862:	2300      	movs	r3, #0
 8009864:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8009866:	2300      	movs	r3, #0
 8009868:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800986a:	2300      	movs	r3, #0
 800986c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8009870:	f107 030c 	add.w	r3, r7, #12
 8009874:	2230      	movs	r2, #48	@ 0x30
 8009876:	2100      	movs	r1, #0
 8009878:	4618      	mov	r0, r3
 800987a:	f00b fc95 	bl	80151a8 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800987e:	f107 030c 	add.w	r3, r7, #12
 8009882:	2230      	movs	r2, #48	@ 0x30
 8009884:	2100      	movs	r1, #0
 8009886:	4618      	mov	r0, r3
 8009888:	f00b fc8e 	bl	80151a8 <memset>

  for(q = p; q != NULL; q = q->next)
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009890:	e045      	b.n	800991e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8009892:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009894:	2b03      	cmp	r3, #3
 8009896:	d902      	bls.n	800989e <low_level_output+0x46>
      return ERR_IF;
 8009898:	f06f 030b 	mvn.w	r3, #11
 800989c:	e055      	b.n	800994a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800989e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098a0:	6859      	ldr	r1, [r3, #4]
 80098a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098a4:	4613      	mov	r3, r2
 80098a6:	005b      	lsls	r3, r3, #1
 80098a8:	4413      	add	r3, r2
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	3348      	adds	r3, #72	@ 0x48
 80098ae:	443b      	add	r3, r7
 80098b0:	3b3c      	subs	r3, #60	@ 0x3c
 80098b2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80098b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098b6:	895b      	ldrh	r3, [r3, #10]
 80098b8:	4619      	mov	r1, r3
 80098ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098bc:	4613      	mov	r3, r2
 80098be:	005b      	lsls	r3, r3, #1
 80098c0:	4413      	add	r3, r2
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	3348      	adds	r3, #72	@ 0x48
 80098c6:	443b      	add	r3, r7
 80098c8:	3b38      	subs	r3, #56	@ 0x38
 80098ca:	6019      	str	r1, [r3, #0]

    if(i>0)
 80098cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d011      	beq.n	80098f6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80098d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098d4:	1e5a      	subs	r2, r3, #1
 80098d6:	f107 000c 	add.w	r0, r7, #12
 80098da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80098dc:	460b      	mov	r3, r1
 80098de:	005b      	lsls	r3, r3, #1
 80098e0:	440b      	add	r3, r1
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	18c1      	adds	r1, r0, r3
 80098e6:	4613      	mov	r3, r2
 80098e8:	005b      	lsls	r3, r3, #1
 80098ea:	4413      	add	r3, r2
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	3348      	adds	r3, #72	@ 0x48
 80098f0:	443b      	add	r3, r7
 80098f2:	3b34      	subs	r3, #52	@ 0x34
 80098f4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80098f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d109      	bne.n	8009912 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80098fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009900:	4613      	mov	r3, r2
 8009902:	005b      	lsls	r3, r3, #1
 8009904:	4413      	add	r3, r2
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	3348      	adds	r3, #72	@ 0x48
 800990a:	443b      	add	r3, r7
 800990c:	3b34      	subs	r3, #52	@ 0x34
 800990e:	2200      	movs	r2, #0
 8009910:	601a      	str	r2, [r3, #0]
    }

    i++;
 8009912:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009914:	3301      	adds	r3, #1
 8009916:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8009918:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	643b      	str	r3, [r7, #64]	@ 0x40
 800991e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009920:	2b00      	cmp	r3, #0
 8009922:	d1b6      	bne.n	8009892 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	891b      	ldrh	r3, [r3, #8]
 8009928:	461a      	mov	r2, r3
 800992a:	4b0a      	ldr	r3, [pc, #40]	@ (8009954 <low_level_output+0xfc>)
 800992c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800992e:	4a09      	ldr	r2, [pc, #36]	@ (8009954 <low_level_output+0xfc>)
 8009930:	f107 030c 	add.w	r3, r7, #12
 8009934:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8009936:	4a07      	ldr	r2, [pc, #28]	@ (8009954 <low_level_output+0xfc>)
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800993c:	2214      	movs	r2, #20
 800993e:	4905      	ldr	r1, [pc, #20]	@ (8009954 <low_level_output+0xfc>)
 8009940:	4805      	ldr	r0, [pc, #20]	@ (8009958 <low_level_output+0x100>)
 8009942:	f7f9 fa7b 	bl	8002e3c <HAL_ETH_Transmit>

  return errval;
 8009946:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800994a:	4618      	mov	r0, r3
 800994c:	3748      	adds	r7, #72	@ 0x48
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	200053a8 	.word	0x200053a8
 8009958:	200052f8 	.word	0x200052f8

0800995c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009964:	2300      	movs	r3, #0
 8009966:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8009968:	4b07      	ldr	r3, [pc, #28]	@ (8009988 <low_level_input+0x2c>)
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d105      	bne.n	800997c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8009970:	f107 030c 	add.w	r3, r7, #12
 8009974:	4619      	mov	r1, r3
 8009976:	4805      	ldr	r0, [pc, #20]	@ (800998c <low_level_input+0x30>)
 8009978:	f7f9 faf4 	bl	8002f64 <HAL_ETH_ReadData>
  }

  return p;
 800997c:	68fb      	ldr	r3, [r7, #12]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	200052f4 	.word	0x200052f4
 800998c:	200052f8 	.word	0x200052f8

08009990 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009998:	2300      	movs	r3, #0
 800999a:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f7ff ffdd 	bl	800995c <low_level_input>
 80099a2:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00a      	beq.n	80099c0 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	6879      	ldr	r1, [r7, #4]
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	4798      	blx	r3
 80099b4:	4603      	mov	r3, r0
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d002      	beq.n	80099c0 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80099ba:	68f8      	ldr	r0, [r7, #12]
 80099bc:	f001 fedc 	bl	800b778 <pbuf_free>
      }
    }
  } while(p!=NULL);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d1ea      	bne.n	800999c <ethernetif_input+0xc>
}
 80099c6:	bf00      	nop
 80099c8:	bf00      	nop
 80099ca:	3710      	adds	r7, #16
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d106      	bne.n	80099ec <ethernetif_init+0x1c>
 80099de:	4b0e      	ldr	r3, [pc, #56]	@ (8009a18 <ethernetif_init+0x48>)
 80099e0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80099e4:	490d      	ldr	r1, [pc, #52]	@ (8009a1c <ethernetif_init+0x4c>)
 80099e6:	480e      	ldr	r0, [pc, #56]	@ (8009a20 <ethernetif_init+0x50>)
 80099e8:	f00b fa7e 	bl	8014ee8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2273      	movs	r2, #115	@ 0x73
 80099f0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2274      	movs	r2, #116	@ 0x74
 80099f8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	4a09      	ldr	r2, [pc, #36]	@ (8009a24 <ethernetif_init+0x54>)
 8009a00:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a08      	ldr	r2, [pc, #32]	@ (8009a28 <ethernetif_init+0x58>)
 8009a06:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f7ff fe85 	bl	8009718 <low_level_init>

  return ERR_OK;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	08015e60 	.word	0x08015e60
 8009a1c:	08015e7c 	.word	0x08015e7c
 8009a20:	08015e8c 	.word	0x08015e8c
 8009a24:	08012815 	.word	0x08012815
 8009a28:	08009859 	.word	0x08009859

08009a2c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8009a38:	68f9      	ldr	r1, [r7, #12]
 8009a3a:	4807      	ldr	r0, [pc, #28]	@ (8009a58 <pbuf_free_custom+0x2c>)
 8009a3c:	f000 ff0c 	bl	800a858 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8009a40:	4b06      	ldr	r3, [pc, #24]	@ (8009a5c <pbuf_free_custom+0x30>)
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d102      	bne.n	8009a4e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8009a48:	4b04      	ldr	r3, [pc, #16]	@ (8009a5c <pbuf_free_custom+0x30>)
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	701a      	strb	r2, [r3, #0]
  }
}
 8009a4e:	bf00      	nop
 8009a50:	3710      	adds	r7, #16
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	080193b0 	.word	0x080193b0
 8009a5c:	200052f4 	.word	0x200052f4

08009a60 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009a64:	f7f8 f8f0 	bl	8001c48 <HAL_GetTick>
 8009a68:	4603      	mov	r3, r0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	bd80      	pop	{r7, pc}
	...

08009a70 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b08e      	sub	sp, #56	@ 0x38
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	601a      	str	r2, [r3, #0]
 8009a80:	605a      	str	r2, [r3, #4]
 8009a82:	609a      	str	r2, [r3, #8]
 8009a84:	60da      	str	r2, [r3, #12]
 8009a86:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a56      	ldr	r2, [pc, #344]	@ (8009be8 <HAL_ETH_MspInit+0x178>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	f040 80a6 	bne.w	8009be0 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009a94:	4b55      	ldr	r3, [pc, #340]	@ (8009bec <HAL_ETH_MspInit+0x17c>)
 8009a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a98:	4a54      	ldr	r2, [pc, #336]	@ (8009bec <HAL_ETH_MspInit+0x17c>)
 8009a9a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009a9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8009aa0:	4b52      	ldr	r3, [pc, #328]	@ (8009bec <HAL_ETH_MspInit+0x17c>)
 8009aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009aa8:	623b      	str	r3, [r7, #32]
 8009aaa:	6a3b      	ldr	r3, [r7, #32]
 8009aac:	4b4f      	ldr	r3, [pc, #316]	@ (8009bec <HAL_ETH_MspInit+0x17c>)
 8009aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ab0:	4a4e      	ldr	r2, [pc, #312]	@ (8009bec <HAL_ETH_MspInit+0x17c>)
 8009ab2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009ab6:	6313      	str	r3, [r2, #48]	@ 0x30
 8009ab8:	4b4c      	ldr	r3, [pc, #304]	@ (8009bec <HAL_ETH_MspInit+0x17c>)
 8009aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009abc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009ac0:	61fb      	str	r3, [r7, #28]
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	4b49      	ldr	r3, [pc, #292]	@ (8009bec <HAL_ETH_MspInit+0x17c>)
 8009ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ac8:	4a48      	ldr	r2, [pc, #288]	@ (8009bec <HAL_ETH_MspInit+0x17c>)
 8009aca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009ace:	6313      	str	r3, [r2, #48]	@ 0x30
 8009ad0:	4b46      	ldr	r3, [pc, #280]	@ (8009bec <HAL_ETH_MspInit+0x17c>)
 8009ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ad4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ad8:	61bb      	str	r3, [r7, #24]
 8009ada:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009adc:	4b43      	ldr	r3, [pc, #268]	@ (8009bec <HAL_ETH_MspInit+0x17c>)
 8009ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ae0:	4a42      	ldr	r2, [pc, #264]	@ (8009bec <HAL_ETH_MspInit+0x17c>)
 8009ae2:	f043 0304 	orr.w	r3, r3, #4
 8009ae6:	6313      	str	r3, [r2, #48]	@ 0x30
 8009ae8:	4b40      	ldr	r3, [pc, #256]	@ (8009bec <HAL_ETH_MspInit+0x17c>)
 8009aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aec:	f003 0304 	and.w	r3, r3, #4
 8009af0:	617b      	str	r3, [r7, #20]
 8009af2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009af4:	4b3d      	ldr	r3, [pc, #244]	@ (8009bec <HAL_ETH_MspInit+0x17c>)
 8009af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009af8:	4a3c      	ldr	r2, [pc, #240]	@ (8009bec <HAL_ETH_MspInit+0x17c>)
 8009afa:	f043 0301 	orr.w	r3, r3, #1
 8009afe:	6313      	str	r3, [r2, #48]	@ 0x30
 8009b00:	4b3a      	ldr	r3, [pc, #232]	@ (8009bec <HAL_ETH_MspInit+0x17c>)
 8009b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b04:	f003 0301 	and.w	r3, r3, #1
 8009b08:	613b      	str	r3, [r7, #16]
 8009b0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009b0c:	4b37      	ldr	r3, [pc, #220]	@ (8009bec <HAL_ETH_MspInit+0x17c>)
 8009b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b10:	4a36      	ldr	r2, [pc, #216]	@ (8009bec <HAL_ETH_MspInit+0x17c>)
 8009b12:	f043 0302 	orr.w	r3, r3, #2
 8009b16:	6313      	str	r3, [r2, #48]	@ 0x30
 8009b18:	4b34      	ldr	r3, [pc, #208]	@ (8009bec <HAL_ETH_MspInit+0x17c>)
 8009b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b1c:	f003 0302 	and.w	r3, r3, #2
 8009b20:	60fb      	str	r3, [r7, #12]
 8009b22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009b24:	4b31      	ldr	r3, [pc, #196]	@ (8009bec <HAL_ETH_MspInit+0x17c>)
 8009b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b28:	4a30      	ldr	r2, [pc, #192]	@ (8009bec <HAL_ETH_MspInit+0x17c>)
 8009b2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8009b30:	4b2e      	ldr	r3, [pc, #184]	@ (8009bec <HAL_ETH_MspInit+0x17c>)
 8009b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b38:	60bb      	str	r3, [r7, #8]
 8009b3a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009b3c:	2332      	movs	r3, #50	@ 0x32
 8009b3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b40:	2302      	movs	r3, #2
 8009b42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b44:	2300      	movs	r3, #0
 8009b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b48:	2303      	movs	r3, #3
 8009b4a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009b4c:	230b      	movs	r3, #11
 8009b4e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009b50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b54:	4619      	mov	r1, r3
 8009b56:	4826      	ldr	r0, [pc, #152]	@ (8009bf0 <HAL_ETH_MspInit+0x180>)
 8009b58:	f7fa fa34 	bl	8003fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009b5c:	2386      	movs	r3, #134	@ 0x86
 8009b5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b60:	2302      	movs	r3, #2
 8009b62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b64:	2300      	movs	r3, #0
 8009b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b68:	2303      	movs	r3, #3
 8009b6a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009b6c:	230b      	movs	r3, #11
 8009b6e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b74:	4619      	mov	r1, r3
 8009b76:	481f      	ldr	r0, [pc, #124]	@ (8009bf4 <HAL_ETH_MspInit+0x184>)
 8009b78:	f7fa fa24 	bl	8003fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8009b7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009b80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b82:	2302      	movs	r3, #2
 8009b84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b86:	2300      	movs	r3, #0
 8009b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009b8e:	230b      	movs	r3, #11
 8009b90:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009b92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b96:	4619      	mov	r1, r3
 8009b98:	4817      	ldr	r0, [pc, #92]	@ (8009bf8 <HAL_ETH_MspInit+0x188>)
 8009b9a:	f7fa fa13 	bl	8003fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8009b9e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8009ba2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ba4:	2302      	movs	r3, #2
 8009ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009bac:	2303      	movs	r3, #3
 8009bae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009bb0:	230b      	movs	r3, #11
 8009bb2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009bb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009bb8:	4619      	mov	r1, r3
 8009bba:	4810      	ldr	r0, [pc, #64]	@ (8009bfc <HAL_ETH_MspInit+0x18c>)
 8009bbc:	f7fa fa02 	bl	8003fc4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	2100      	movs	r1, #0
 8009bc4:	203d      	movs	r0, #61	@ 0x3d
 8009bc6:	f7f8 f94a 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8009bca:	203d      	movs	r0, #61	@ 0x3d
 8009bcc:	f7f8 f963 	bl	8001e96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	203e      	movs	r0, #62	@ 0x3e
 8009bd6:	f7f8 f942 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8009bda:	203e      	movs	r0, #62	@ 0x3e
 8009bdc:	f7f8 f95b 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009be0:	bf00      	nop
 8009be2:	3738      	adds	r7, #56	@ 0x38
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	40028000 	.word	0x40028000
 8009bec:	40023800 	.word	0x40023800
 8009bf0:	40020800 	.word	0x40020800
 8009bf4:	40020000 	.word	0x40020000
 8009bf8:	40020400 	.word	0x40020400
 8009bfc:	40021800 	.word	0x40021800

08009c00 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8009c04:	4802      	ldr	r0, [pc, #8]	@ (8009c10 <ETH_PHY_IO_Init+0x10>)
 8009c06:	f7f9 fd7b 	bl	8003700 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8009c0a:	2300      	movs	r3, #0
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	bd80      	pop	{r7, pc}
 8009c10:	200052f8 	.word	0x200052f8

08009c14 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8009c14:	b480      	push	{r7}
 8009c16:	af00      	add	r7, sp, #0
  return 0;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	68ba      	ldr	r2, [r7, #8]
 8009c34:	68f9      	ldr	r1, [r7, #12]
 8009c36:	4807      	ldr	r0, [pc, #28]	@ (8009c54 <ETH_PHY_IO_ReadReg+0x30>)
 8009c38:	f7f9 fbbc 	bl	80033b4 <HAL_ETH_ReadPHYRegister>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d002      	beq.n	8009c48 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8009c42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009c46:	e000      	b.n	8009c4a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8009c48:	2300      	movs	r3, #0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3710      	adds	r7, #16
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	200052f8 	.word	0x200052f8

08009c58 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	68ba      	ldr	r2, [r7, #8]
 8009c68:	68f9      	ldr	r1, [r7, #12]
 8009c6a:	4807      	ldr	r0, [pc, #28]	@ (8009c88 <ETH_PHY_IO_WriteReg+0x30>)
 8009c6c:	f7f9 fbed 	bl	800344a <HAL_ETH_WritePHYRegister>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d002      	beq.n	8009c7c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8009c76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009c7a:	e000      	b.n	8009c7e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8009c7c:	2300      	movs	r3, #0
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3710      	adds	r7, #16
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	200052f8 	.word	0x200052f8

08009c8c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009c90:	f7f7 ffda 	bl	8001c48 <HAL_GetTick>
 8009c94:	4603      	mov	r3, r0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	bd80      	pop	{r7, pc}
	...

08009c9c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b0a0      	sub	sp, #128	@ 0x80
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8009ca4:	f107 030c 	add.w	r3, r7, #12
 8009ca8:	2264      	movs	r2, #100	@ 0x64
 8009caa:	2100      	movs	r1, #0
 8009cac:	4618      	mov	r0, r3
 8009cae:	f00b fa7b 	bl	80151a8 <memset>
  int32_t PHYLinkState = 0;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009cba:	2300      	movs	r3, #0
 8009cbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009cc2:	483a      	ldr	r0, [pc, #232]	@ (8009dac <ethernet_link_check_state+0x110>)
 8009cc4:	f7f7 fee8 	bl	8001a98 <LAN8742_GetLinkState>
 8009cc8:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009cd0:	089b      	lsrs	r3, r3, #2
 8009cd2:	f003 0301 	and.w	r3, r3, #1
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d00c      	beq.n	8009cf6 <ethernet_link_check_state+0x5a>
 8009cdc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	dc09      	bgt.n	8009cf6 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 8009ce2:	4833      	ldr	r0, [pc, #204]	@ (8009db0 <ethernet_link_check_state+0x114>)
 8009ce4:	f7f9 f82a 	bl	8002d3c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f001 f92f 	bl	800af4c <netif_set_down>
    netif_set_link_down(netif);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f001 f992 	bl	800b018 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8009cf4:	e055      	b.n	8009da2 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009cfc:	f003 0304 	and.w	r3, r3, #4
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d14e      	bne.n	8009da2 <ethernet_link_check_state+0x106>
 8009d04:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	dd4b      	ble.n	8009da2 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8009d0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d0c:	3b02      	subs	r3, #2
 8009d0e:	2b03      	cmp	r3, #3
 8009d10:	d82a      	bhi.n	8009d68 <ethernet_link_check_state+0xcc>
 8009d12:	a201      	add	r2, pc, #4	@ (adr r2, 8009d18 <ethernet_link_check_state+0x7c>)
 8009d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d18:	08009d29 	.word	0x08009d29
 8009d1c:	08009d3b 	.word	0x08009d3b
 8009d20:	08009d4b 	.word	0x08009d4b
 8009d24:	08009d5b 	.word	0x08009d5b
      duplex = ETH_FULLDUPLEX_MODE;
 8009d28:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009d2c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8009d2e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009d32:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009d34:	2301      	movs	r3, #1
 8009d36:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009d38:	e017      	b.n	8009d6a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8009d3e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009d42:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009d44:	2301      	movs	r3, #1
 8009d46:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009d48:	e00f      	b.n	8009d6a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8009d4a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009d4e:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8009d50:	2300      	movs	r3, #0
 8009d52:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009d54:	2301      	movs	r3, #1
 8009d56:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009d58:	e007      	b.n	8009d6a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009d62:	2301      	movs	r3, #1
 8009d64:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009d66:	e000      	b.n	8009d6a <ethernet_link_check_state+0xce>
      break;
 8009d68:	bf00      	nop
    if(linkchanged)
 8009d6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d018      	beq.n	8009da2 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009d70:	f107 030c 	add.w	r3, r7, #12
 8009d74:	4619      	mov	r1, r3
 8009d76:	480e      	ldr	r0, [pc, #56]	@ (8009db0 <ethernet_link_check_state+0x114>)
 8009d78:	f7f9 fbb0 	bl	80034dc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8009d7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d7e:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8009d80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d82:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009d84:	f107 030c 	add.w	r3, r7, #12
 8009d88:	4619      	mov	r1, r3
 8009d8a:	4809      	ldr	r0, [pc, #36]	@ (8009db0 <ethernet_link_check_state+0x114>)
 8009d8c:	f7f9 fc9d 	bl	80036ca <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8009d90:	4807      	ldr	r0, [pc, #28]	@ (8009db0 <ethernet_link_check_state+0x114>)
 8009d92:	f7f8 ff63 	bl	8002c5c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f001 f86c 	bl	800ae74 <netif_set_up>
      netif_set_link_up(netif);
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f001 f907 	bl	800afb0 <netif_set_link_up>
}
 8009da2:	bf00      	nop
 8009da4:	3780      	adds	r7, #128	@ 0x80
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	200053e0 	.word	0x200053e0
 8009db0:	200052f8 	.word	0x200052f8

08009db4 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b086      	sub	sp, #24
 8009db8:	af02      	add	r7, sp, #8
 8009dba:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009dbc:	4812      	ldr	r0, [pc, #72]	@ (8009e08 <HAL_ETH_RxAllocateCallback+0x54>)
 8009dbe:	f000 fcdd 	bl	800a77c <memp_malloc_pool>
 8009dc2:	60f8      	str	r0, [r7, #12]
  if (p)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d014      	beq.n	8009df4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f103 0220 	add.w	r2, r3, #32
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	4a0d      	ldr	r2, [pc, #52]	@ (8009e0c <HAL_ETH_RxAllocateCallback+0x58>)
 8009dd8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8009de2:	9201      	str	r2, [sp, #4]
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2241      	movs	r2, #65	@ 0x41
 8009dea:	2100      	movs	r1, #0
 8009dec:	2000      	movs	r0, #0
 8009dee:	f001 fb09 	bl	800b404 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8009df2:	e005      	b.n	8009e00 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8009df4:	4b06      	ldr	r3, [pc, #24]	@ (8009e10 <HAL_ETH_RxAllocateCallback+0x5c>)
 8009df6:	2201      	movs	r2, #1
 8009df8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	601a      	str	r2, [r3, #0]
}
 8009e00:	bf00      	nop
 8009e02:	3710      	adds	r7, #16
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	080193b0 	.word	0x080193b0
 8009e0c:	08009a2d 	.word	0x08009a2d
 8009e10:	200052f4 	.word	0x200052f4

08009e14 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b088      	sub	sp, #32
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
 8009e20:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	3b20      	subs	r3, #32
 8009e32:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	2200      	movs	r2, #0
 8009e38:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8009e3a:	69fb      	ldr	r3, [r7, #28]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8009e40:	69fb      	ldr	r3, [r7, #28]
 8009e42:	887a      	ldrh	r2, [r7, #2]
 8009e44:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d103      	bne.n	8009e56 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	69fa      	ldr	r2, [r7, #28]
 8009e52:	601a      	str	r2, [r3, #0]
 8009e54:	e003      	b.n	8009e5e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	69fa      	ldr	r2, [r7, #28]
 8009e5c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	69fa      	ldr	r2, [r7, #28]
 8009e62:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8009e64:	69bb      	ldr	r3, [r7, #24]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	61fb      	str	r3, [r7, #28]
 8009e6a:	e009      	b.n	8009e80 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	891a      	ldrh	r2, [r3, #8]
 8009e70:	887b      	ldrh	r3, [r7, #2]
 8009e72:	4413      	add	r3, r2
 8009e74:	b29a      	uxth	r2, r3
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8009e7a:	69fb      	ldr	r3, [r7, #28]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	61fb      	str	r3, [r7, #28]
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d1f2      	bne.n	8009e6c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8009e86:	887b      	ldrh	r3, [r7, #2]
 8009e88:	4619      	mov	r1, r3
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f7ff fc18 	bl	80096c0 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8009e90:	bf00      	nop
 8009e92:	3720      	adds	r7, #32
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <lwip_strerr>:
 * @param err an lwip internal err_t
 * @return a string representation for err
 */
const char *
lwip_strerr(err_t err)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_strerr))) {
 8009ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	dc04      	bgt.n	8009eb4 <lwip_strerr+0x1c>
 8009eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009eae:	f113 0f10 	cmn.w	r3, #16
 8009eb2:	da01      	bge.n	8009eb8 <lwip_strerr+0x20>
    return "Unknown error.";
 8009eb4:	4b06      	ldr	r3, [pc, #24]	@ (8009ed0 <lwip_strerr+0x38>)
 8009eb6:	e005      	b.n	8009ec4 <lwip_strerr+0x2c>
  }
  return err_strerr[-err];
 8009eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ebc:	425b      	negs	r3, r3
 8009ebe:	4a05      	ldr	r2, [pc, #20]	@ (8009ed4 <lwip_strerr+0x3c>)
 8009ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr
 8009ed0:	08015ff0 	.word	0x08015ff0
 8009ed4:	20000020 	.word	0x20000020

08009ed8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	4603      	mov	r3, r0
 8009ee0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009ee2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009ee6:	021b      	lsls	r3, r3, #8
 8009ee8:	b21a      	sxth	r2, r3
 8009eea:	88fb      	ldrh	r3, [r7, #6]
 8009eec:	0a1b      	lsrs	r3, r3, #8
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	b21b      	sxth	r3, r3
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	b21b      	sxth	r3, r3
 8009ef6:	b29b      	uxth	r3, r3
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	370c      	adds	r7, #12
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	061a      	lsls	r2, r3, #24
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	021b      	lsls	r3, r3, #8
 8009f14:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009f18:	431a      	orrs	r2, r3
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	0a1b      	lsrs	r3, r3, #8
 8009f1e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009f22:	431a      	orrs	r2, r3
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	0e1b      	lsrs	r3, r3, #24
 8009f28:	4313      	orrs	r3, r2
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	370c      	adds	r7, #12
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr

08009f36 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b082      	sub	sp, #8
 8009f3a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8009f40:	f000 f8d4 	bl	800a0ec <mem_init>
  memp_init();
 8009f44:	f000 fbd6 	bl	800a6f4 <memp_init>
  pbuf_init();
  netif_init();
 8009f48:	f000 fcd4 	bl	800a8f4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009f4c:	f007 f96e 	bl	801122c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009f50:	f001 feb0 	bl	800bcb4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009f54:	f007 f8e0 	bl	8011118 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009f58:	bf00      	nop
 8009f5a:	3708      	adds	r7, #8
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	4603      	mov	r3, r0
 8009f68:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009f6a:	4b05      	ldr	r3, [pc, #20]	@ (8009f80 <ptr_to_mem+0x20>)
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	88fb      	ldrh	r3, [r7, #6]
 8009f70:	4413      	add	r3, r2
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	370c      	adds	r7, #12
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop
 8009f80:	20005418 	.word	0x20005418

08009f84 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009f8c:	4b05      	ldr	r3, [pc, #20]	@ (8009fa4 <mem_to_ptr+0x20>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	1ad3      	subs	r3, r2, r3
 8009f94:	b29b      	uxth	r3, r3
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	370c      	adds	r7, #12
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr
 8009fa2:	bf00      	nop
 8009fa4:	20005418 	.word	0x20005418

08009fa8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009fa8:	b590      	push	{r4, r7, lr}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009fb0:	4b45      	ldr	r3, [pc, #276]	@ (800a0c8 <plug_holes+0x120>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d206      	bcs.n	8009fc8 <plug_holes+0x20>
 8009fba:	4b44      	ldr	r3, [pc, #272]	@ (800a0cc <plug_holes+0x124>)
 8009fbc:	f240 12df 	movw	r2, #479	@ 0x1df
 8009fc0:	4943      	ldr	r1, [pc, #268]	@ (800a0d0 <plug_holes+0x128>)
 8009fc2:	4844      	ldr	r0, [pc, #272]	@ (800a0d4 <plug_holes+0x12c>)
 8009fc4:	f00a ff90 	bl	8014ee8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009fc8:	4b43      	ldr	r3, [pc, #268]	@ (800a0d8 <plug_holes+0x130>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d306      	bcc.n	8009fe0 <plug_holes+0x38>
 8009fd2:	4b3e      	ldr	r3, [pc, #248]	@ (800a0cc <plug_holes+0x124>)
 8009fd4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8009fd8:	4940      	ldr	r1, [pc, #256]	@ (800a0dc <plug_holes+0x134>)
 8009fda:	483e      	ldr	r0, [pc, #248]	@ (800a0d4 <plug_holes+0x12c>)
 8009fdc:	f00a ff84 	bl	8014ee8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	791b      	ldrb	r3, [r3, #4]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d006      	beq.n	8009ff6 <plug_holes+0x4e>
 8009fe8:	4b38      	ldr	r3, [pc, #224]	@ (800a0cc <plug_holes+0x124>)
 8009fea:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8009fee:	493c      	ldr	r1, [pc, #240]	@ (800a0e0 <plug_holes+0x138>)
 8009ff0:	4838      	ldr	r0, [pc, #224]	@ (800a0d4 <plug_holes+0x12c>)
 8009ff2:	f00a ff79 	bl	8014ee8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	881b      	ldrh	r3, [r3, #0]
 8009ffa:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8009ffe:	d906      	bls.n	800a00e <plug_holes+0x66>
 800a000:	4b32      	ldr	r3, [pc, #200]	@ (800a0cc <plug_holes+0x124>)
 800a002:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800a006:	4937      	ldr	r1, [pc, #220]	@ (800a0e4 <plug_holes+0x13c>)
 800a008:	4832      	ldr	r0, [pc, #200]	@ (800a0d4 <plug_holes+0x12c>)
 800a00a:	f00a ff6d 	bl	8014ee8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	881b      	ldrh	r3, [r3, #0]
 800a012:	4618      	mov	r0, r3
 800a014:	f7ff ffa4 	bl	8009f60 <ptr_to_mem>
 800a018:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d024      	beq.n	800a06c <plug_holes+0xc4>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	791b      	ldrb	r3, [r3, #4]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d120      	bne.n	800a06c <plug_holes+0xc4>
 800a02a:	4b2b      	ldr	r3, [pc, #172]	@ (800a0d8 <plug_holes+0x130>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	429a      	cmp	r2, r3
 800a032:	d01b      	beq.n	800a06c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a034:	4b2c      	ldr	r3, [pc, #176]	@ (800a0e8 <plug_holes+0x140>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	68fa      	ldr	r2, [r7, #12]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d102      	bne.n	800a044 <plug_holes+0x9c>
      lfree = mem;
 800a03e:	4a2a      	ldr	r2, [pc, #168]	@ (800a0e8 <plug_holes+0x140>)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	881a      	ldrh	r2, [r3, #0]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	881b      	ldrh	r3, [r3, #0]
 800a050:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a054:	d00a      	beq.n	800a06c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	881b      	ldrh	r3, [r3, #0]
 800a05a:	4618      	mov	r0, r3
 800a05c:	f7ff ff80 	bl	8009f60 <ptr_to_mem>
 800a060:	4604      	mov	r4, r0
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f7ff ff8e 	bl	8009f84 <mem_to_ptr>
 800a068:	4603      	mov	r3, r0
 800a06a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	885b      	ldrh	r3, [r3, #2]
 800a070:	4618      	mov	r0, r3
 800a072:	f7ff ff75 	bl	8009f60 <ptr_to_mem>
 800a076:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a078:	68ba      	ldr	r2, [r7, #8]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d01f      	beq.n	800a0c0 <plug_holes+0x118>
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	791b      	ldrb	r3, [r3, #4]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d11b      	bne.n	800a0c0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a088:	4b17      	ldr	r3, [pc, #92]	@ (800a0e8 <plug_holes+0x140>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d102      	bne.n	800a098 <plug_holes+0xf0>
      lfree = pmem;
 800a092:	4a15      	ldr	r2, [pc, #84]	@ (800a0e8 <plug_holes+0x140>)
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	881a      	ldrh	r2, [r3, #0]
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	881b      	ldrh	r3, [r3, #0]
 800a0a4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a0a8:	d00a      	beq.n	800a0c0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	881b      	ldrh	r3, [r3, #0]
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7ff ff56 	bl	8009f60 <ptr_to_mem>
 800a0b4:	4604      	mov	r4, r0
 800a0b6:	68b8      	ldr	r0, [r7, #8]
 800a0b8:	f7ff ff64 	bl	8009f84 <mem_to_ptr>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a0c0:	bf00      	nop
 800a0c2:	3714      	adds	r7, #20
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd90      	pop	{r4, r7, pc}
 800a0c8:	20005418 	.word	0x20005418
 800a0cc:	08016000 	.word	0x08016000
 800a0d0:	08016030 	.word	0x08016030
 800a0d4:	08016048 	.word	0x08016048
 800a0d8:	2000541c 	.word	0x2000541c
 800a0dc:	08016070 	.word	0x08016070
 800a0e0:	0801608c 	.word	0x0801608c
 800a0e4:	080160a8 	.word	0x080160a8
 800a0e8:	20005420 	.word	0x20005420

0800a0ec <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a0f2:	4b16      	ldr	r3, [pc, #88]	@ (800a14c <mem_init+0x60>)
 800a0f4:	4a16      	ldr	r2, [pc, #88]	@ (800a150 <mem_init+0x64>)
 800a0f6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a0f8:	4b14      	ldr	r3, [pc, #80]	@ (800a14c <mem_init+0x60>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800a104:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2200      	movs	r2, #0
 800a10a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a112:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800a116:	f7ff ff23 	bl	8009f60 <ptr_to_mem>
 800a11a:	4603      	mov	r3, r0
 800a11c:	4a0d      	ldr	r2, [pc, #52]	@ (800a154 <mem_init+0x68>)
 800a11e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a120:	4b0c      	ldr	r3, [pc, #48]	@ (800a154 <mem_init+0x68>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	2201      	movs	r2, #1
 800a126:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a128:	4b0a      	ldr	r3, [pc, #40]	@ (800a154 <mem_init+0x68>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800a130:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a132:	4b08      	ldr	r3, [pc, #32]	@ (800a154 <mem_init+0x68>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800a13a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a13c:	4b03      	ldr	r3, [pc, #12]	@ (800a14c <mem_init+0x60>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a05      	ldr	r2, [pc, #20]	@ (800a158 <mem_init+0x6c>)
 800a142:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800a144:	bf00      	nop
 800a146:	3708      	adds	r7, #8
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	20005418 	.word	0x20005418
 800a150:	20048000 	.word	0x20048000
 800a154:	2000541c 	.word	0x2000541c
 800a158:	20005420 	.word	0x20005420

0800a15c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b086      	sub	sp, #24
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f7ff ff0d 	bl	8009f84 <mem_to_ptr>
 800a16a:	4603      	mov	r3, r0
 800a16c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	881b      	ldrh	r3, [r3, #0]
 800a172:	4618      	mov	r0, r3
 800a174:	f7ff fef4 	bl	8009f60 <ptr_to_mem>
 800a178:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	885b      	ldrh	r3, [r3, #2]
 800a17e:	4618      	mov	r0, r3
 800a180:	f7ff feee 	bl	8009f60 <ptr_to_mem>
 800a184:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	881b      	ldrh	r3, [r3, #0]
 800a18a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a18e:	d818      	bhi.n	800a1c2 <mem_link_valid+0x66>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	885b      	ldrh	r3, [r3, #2]
 800a194:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a198:	d813      	bhi.n	800a1c2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a19e:	8afa      	ldrh	r2, [r7, #22]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d004      	beq.n	800a1ae <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	881b      	ldrh	r3, [r3, #0]
 800a1a8:	8afa      	ldrh	r2, [r7, #22]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d109      	bne.n	800a1c2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a1ae:	4b08      	ldr	r3, [pc, #32]	@ (800a1d0 <mem_link_valid+0x74>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a1b2:	693a      	ldr	r2, [r7, #16]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d006      	beq.n	800a1c6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	885b      	ldrh	r3, [r3, #2]
 800a1bc:	8afa      	ldrh	r2, [r7, #22]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d001      	beq.n	800a1c6 <mem_link_valid+0x6a>
    return 0;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	e000      	b.n	800a1c8 <mem_link_valid+0x6c>
  }
  return 1;
 800a1c6:	2301      	movs	r3, #1
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3718      	adds	r7, #24
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	2000541c 	.word	0x2000541c

0800a1d4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d04c      	beq.n	800a27c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f003 0303 	and.w	r3, r3, #3
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d007      	beq.n	800a1fc <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a1ec:	4b25      	ldr	r3, [pc, #148]	@ (800a284 <mem_free+0xb0>)
 800a1ee:	f240 2273 	movw	r2, #627	@ 0x273
 800a1f2:	4925      	ldr	r1, [pc, #148]	@ (800a288 <mem_free+0xb4>)
 800a1f4:	4825      	ldr	r0, [pc, #148]	@ (800a28c <mem_free+0xb8>)
 800a1f6:	f00a fe77 	bl	8014ee8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a1fa:	e040      	b.n	800a27e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	3b08      	subs	r3, #8
 800a200:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a202:	4b23      	ldr	r3, [pc, #140]	@ (800a290 <mem_free+0xbc>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	68fa      	ldr	r2, [r7, #12]
 800a208:	429a      	cmp	r2, r3
 800a20a:	d306      	bcc.n	800a21a <mem_free+0x46>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f103 020c 	add.w	r2, r3, #12
 800a212:	4b20      	ldr	r3, [pc, #128]	@ (800a294 <mem_free+0xc0>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	429a      	cmp	r2, r3
 800a218:	d907      	bls.n	800a22a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a21a:	4b1a      	ldr	r3, [pc, #104]	@ (800a284 <mem_free+0xb0>)
 800a21c:	f240 227f 	movw	r2, #639	@ 0x27f
 800a220:	491d      	ldr	r1, [pc, #116]	@ (800a298 <mem_free+0xc4>)
 800a222:	481a      	ldr	r0, [pc, #104]	@ (800a28c <mem_free+0xb8>)
 800a224:	f00a fe60 	bl	8014ee8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a228:	e029      	b.n	800a27e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	791b      	ldrb	r3, [r3, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d107      	bne.n	800a242 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a232:	4b14      	ldr	r3, [pc, #80]	@ (800a284 <mem_free+0xb0>)
 800a234:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800a238:	4918      	ldr	r1, [pc, #96]	@ (800a29c <mem_free+0xc8>)
 800a23a:	4814      	ldr	r0, [pc, #80]	@ (800a28c <mem_free+0xb8>)
 800a23c:	f00a fe54 	bl	8014ee8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a240:	e01d      	b.n	800a27e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f7ff ff8a 	bl	800a15c <mem_link_valid>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d107      	bne.n	800a25e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a24e:	4b0d      	ldr	r3, [pc, #52]	@ (800a284 <mem_free+0xb0>)
 800a250:	f240 2295 	movw	r2, #661	@ 0x295
 800a254:	4912      	ldr	r1, [pc, #72]	@ (800a2a0 <mem_free+0xcc>)
 800a256:	480d      	ldr	r0, [pc, #52]	@ (800a28c <mem_free+0xb8>)
 800a258:	f00a fe46 	bl	8014ee8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a25c:	e00f      	b.n	800a27e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2200      	movs	r2, #0
 800a262:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a264:	4b0f      	ldr	r3, [pc, #60]	@ (800a2a4 <mem_free+0xd0>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d202      	bcs.n	800a274 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a26e:	4a0d      	ldr	r2, [pc, #52]	@ (800a2a4 <mem_free+0xd0>)
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a274:	68f8      	ldr	r0, [r7, #12]
 800a276:	f7ff fe97 	bl	8009fa8 <plug_holes>
 800a27a:	e000      	b.n	800a27e <mem_free+0xaa>
    return;
 800a27c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800a27e:	3710      	adds	r7, #16
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	08016000 	.word	0x08016000
 800a288:	080160d4 	.word	0x080160d4
 800a28c:	08016048 	.word	0x08016048
 800a290:	20005418 	.word	0x20005418
 800a294:	2000541c 	.word	0x2000541c
 800a298:	080160f8 	.word	0x080160f8
 800a29c:	08016114 	.word	0x08016114
 800a2a0:	0801613c 	.word	0x0801613c
 800a2a4:	20005420 	.word	0x20005420

0800a2a8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b088      	sub	sp, #32
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a2b4:	887b      	ldrh	r3, [r7, #2]
 800a2b6:	3303      	adds	r3, #3
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	f023 0303 	bic.w	r3, r3, #3
 800a2be:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a2c0:	8bfb      	ldrh	r3, [r7, #30]
 800a2c2:	2b0b      	cmp	r3, #11
 800a2c4:	d801      	bhi.n	800a2ca <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a2c6:	230c      	movs	r3, #12
 800a2c8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a2ca:	8bfb      	ldrh	r3, [r7, #30]
 800a2cc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a2d0:	d803      	bhi.n	800a2da <mem_trim+0x32>
 800a2d2:	8bfa      	ldrh	r2, [r7, #30]
 800a2d4:	887b      	ldrh	r3, [r7, #2]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d201      	bcs.n	800a2de <mem_trim+0x36>
    return NULL;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	e0cc      	b.n	800a478 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a2de:	4b68      	ldr	r3, [pc, #416]	@ (800a480 <mem_trim+0x1d8>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d304      	bcc.n	800a2f2 <mem_trim+0x4a>
 800a2e8:	4b66      	ldr	r3, [pc, #408]	@ (800a484 <mem_trim+0x1dc>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d306      	bcc.n	800a300 <mem_trim+0x58>
 800a2f2:	4b65      	ldr	r3, [pc, #404]	@ (800a488 <mem_trim+0x1e0>)
 800a2f4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800a2f8:	4964      	ldr	r1, [pc, #400]	@ (800a48c <mem_trim+0x1e4>)
 800a2fa:	4865      	ldr	r0, [pc, #404]	@ (800a490 <mem_trim+0x1e8>)
 800a2fc:	f00a fdf4 	bl	8014ee8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a300:	4b5f      	ldr	r3, [pc, #380]	@ (800a480 <mem_trim+0x1d8>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	429a      	cmp	r2, r3
 800a308:	d304      	bcc.n	800a314 <mem_trim+0x6c>
 800a30a:	4b5e      	ldr	r3, [pc, #376]	@ (800a484 <mem_trim+0x1dc>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	429a      	cmp	r2, r3
 800a312:	d301      	bcc.n	800a318 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	e0af      	b.n	800a478 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	3b08      	subs	r3, #8
 800a31c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a31e:	69b8      	ldr	r0, [r7, #24]
 800a320:	f7ff fe30 	bl	8009f84 <mem_to_ptr>
 800a324:	4603      	mov	r3, r0
 800a326:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a328:	69bb      	ldr	r3, [r7, #24]
 800a32a:	881a      	ldrh	r2, [r3, #0]
 800a32c:	8afb      	ldrh	r3, [r7, #22]
 800a32e:	1ad3      	subs	r3, r2, r3
 800a330:	b29b      	uxth	r3, r3
 800a332:	3b08      	subs	r3, #8
 800a334:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a336:	8bfa      	ldrh	r2, [r7, #30]
 800a338:	8abb      	ldrh	r3, [r7, #20]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d906      	bls.n	800a34c <mem_trim+0xa4>
 800a33e:	4b52      	ldr	r3, [pc, #328]	@ (800a488 <mem_trim+0x1e0>)
 800a340:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800a344:	4953      	ldr	r1, [pc, #332]	@ (800a494 <mem_trim+0x1ec>)
 800a346:	4852      	ldr	r0, [pc, #328]	@ (800a490 <mem_trim+0x1e8>)
 800a348:	f00a fdce 	bl	8014ee8 <iprintf>
  if (newsize > size) {
 800a34c:	8bfa      	ldrh	r2, [r7, #30]
 800a34e:	8abb      	ldrh	r3, [r7, #20]
 800a350:	429a      	cmp	r2, r3
 800a352:	d901      	bls.n	800a358 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800a354:	2300      	movs	r3, #0
 800a356:	e08f      	b.n	800a478 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800a358:	8bfa      	ldrh	r2, [r7, #30]
 800a35a:	8abb      	ldrh	r3, [r7, #20]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d101      	bne.n	800a364 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	e089      	b.n	800a478 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800a364:	69bb      	ldr	r3, [r7, #24]
 800a366:	881b      	ldrh	r3, [r3, #0]
 800a368:	4618      	mov	r0, r3
 800a36a:	f7ff fdf9 	bl	8009f60 <ptr_to_mem>
 800a36e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	791b      	ldrb	r3, [r3, #4]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d13f      	bne.n	800a3f8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	881b      	ldrh	r3, [r3, #0]
 800a37c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a380:	d106      	bne.n	800a390 <mem_trim+0xe8>
 800a382:	4b41      	ldr	r3, [pc, #260]	@ (800a488 <mem_trim+0x1e0>)
 800a384:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800a388:	4943      	ldr	r1, [pc, #268]	@ (800a498 <mem_trim+0x1f0>)
 800a38a:	4841      	ldr	r0, [pc, #260]	@ (800a490 <mem_trim+0x1e8>)
 800a38c:	f00a fdac 	bl	8014ee8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	881b      	ldrh	r3, [r3, #0]
 800a394:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a396:	8afa      	ldrh	r2, [r7, #22]
 800a398:	8bfb      	ldrh	r3, [r7, #30]
 800a39a:	4413      	add	r3, r2
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	3308      	adds	r3, #8
 800a3a0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a3a2:	4b3e      	ldr	r3, [pc, #248]	@ (800a49c <mem_trim+0x1f4>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	693a      	ldr	r2, [r7, #16]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d106      	bne.n	800a3ba <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800a3ac:	89fb      	ldrh	r3, [r7, #14]
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7ff fdd6 	bl	8009f60 <ptr_to_mem>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	4a39      	ldr	r2, [pc, #228]	@ (800a49c <mem_trim+0x1f4>)
 800a3b8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a3ba:	89fb      	ldrh	r3, [r7, #14]
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f7ff fdcf 	bl	8009f60 <ptr_to_mem>
 800a3c2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	89ba      	ldrh	r2, [r7, #12]
 800a3ce:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	8afa      	ldrh	r2, [r7, #22]
 800a3d4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	89fa      	ldrh	r2, [r7, #14]
 800a3da:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	881b      	ldrh	r3, [r3, #0]
 800a3e0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a3e4:	d047      	beq.n	800a476 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	881b      	ldrh	r3, [r3, #0]
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7ff fdb8 	bl	8009f60 <ptr_to_mem>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	89fb      	ldrh	r3, [r7, #14]
 800a3f4:	8053      	strh	r3, [r2, #2]
 800a3f6:	e03e      	b.n	800a476 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a3f8:	8bfb      	ldrh	r3, [r7, #30]
 800a3fa:	f103 0214 	add.w	r2, r3, #20
 800a3fe:	8abb      	ldrh	r3, [r7, #20]
 800a400:	429a      	cmp	r2, r3
 800a402:	d838      	bhi.n	800a476 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a404:	8afa      	ldrh	r2, [r7, #22]
 800a406:	8bfb      	ldrh	r3, [r7, #30]
 800a408:	4413      	add	r3, r2
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	3308      	adds	r3, #8
 800a40e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	881b      	ldrh	r3, [r3, #0]
 800a414:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a418:	d106      	bne.n	800a428 <mem_trim+0x180>
 800a41a:	4b1b      	ldr	r3, [pc, #108]	@ (800a488 <mem_trim+0x1e0>)
 800a41c:	f240 3216 	movw	r2, #790	@ 0x316
 800a420:	491d      	ldr	r1, [pc, #116]	@ (800a498 <mem_trim+0x1f0>)
 800a422:	481b      	ldr	r0, [pc, #108]	@ (800a490 <mem_trim+0x1e8>)
 800a424:	f00a fd60 	bl	8014ee8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a428:	89fb      	ldrh	r3, [r7, #14]
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7ff fd98 	bl	8009f60 <ptr_to_mem>
 800a430:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a432:	4b1a      	ldr	r3, [pc, #104]	@ (800a49c <mem_trim+0x1f4>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	693a      	ldr	r2, [r7, #16]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d202      	bcs.n	800a442 <mem_trim+0x19a>
      lfree = mem2;
 800a43c:	4a17      	ldr	r2, [pc, #92]	@ (800a49c <mem_trim+0x1f4>)
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	2200      	movs	r2, #0
 800a446:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a448:	69bb      	ldr	r3, [r7, #24]
 800a44a:	881a      	ldrh	r2, [r3, #0]
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	8afa      	ldrh	r2, [r7, #22]
 800a454:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	89fa      	ldrh	r2, [r7, #14]
 800a45a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	881b      	ldrh	r3, [r3, #0]
 800a460:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a464:	d007      	beq.n	800a476 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	881b      	ldrh	r3, [r3, #0]
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7ff fd78 	bl	8009f60 <ptr_to_mem>
 800a470:	4602      	mov	r2, r0
 800a472:	89fb      	ldrh	r3, [r7, #14]
 800a474:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800a476:	687b      	ldr	r3, [r7, #4]
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3720      	adds	r7, #32
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	20005418 	.word	0x20005418
 800a484:	2000541c 	.word	0x2000541c
 800a488:	08016000 	.word	0x08016000
 800a48c:	08016170 	.word	0x08016170
 800a490:	08016048 	.word	0x08016048
 800a494:	08016188 	.word	0x08016188
 800a498:	080161a8 	.word	0x080161a8
 800a49c:	20005420 	.word	0x20005420

0800a4a0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b088      	sub	sp, #32
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a4aa:	88fb      	ldrh	r3, [r7, #6]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d101      	bne.n	800a4b4 <mem_malloc+0x14>
    return NULL;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	e0d9      	b.n	800a668 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a4b4:	88fb      	ldrh	r3, [r7, #6]
 800a4b6:	3303      	adds	r3, #3
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	f023 0303 	bic.w	r3, r3, #3
 800a4be:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a4c0:	8bbb      	ldrh	r3, [r7, #28]
 800a4c2:	2b0b      	cmp	r3, #11
 800a4c4:	d801      	bhi.n	800a4ca <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a4c6:	230c      	movs	r3, #12
 800a4c8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a4ca:	8bbb      	ldrh	r3, [r7, #28]
 800a4cc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a4d0:	d803      	bhi.n	800a4da <mem_malloc+0x3a>
 800a4d2:	8bba      	ldrh	r2, [r7, #28]
 800a4d4:	88fb      	ldrh	r3, [r7, #6]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d201      	bcs.n	800a4de <mem_malloc+0x3e>
    return NULL;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	e0c4      	b.n	800a668 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a4de:	4b64      	ldr	r3, [pc, #400]	@ (800a670 <mem_malloc+0x1d0>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7ff fd4e 	bl	8009f84 <mem_to_ptr>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	83fb      	strh	r3, [r7, #30]
 800a4ec:	e0b4      	b.n	800a658 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a4ee:	8bfb      	ldrh	r3, [r7, #30]
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7ff fd35 	bl	8009f60 <ptr_to_mem>
 800a4f6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	791b      	ldrb	r3, [r3, #4]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	f040 80a4 	bne.w	800a64a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	881b      	ldrh	r3, [r3, #0]
 800a506:	461a      	mov	r2, r3
 800a508:	8bfb      	ldrh	r3, [r7, #30]
 800a50a:	1ad3      	subs	r3, r2, r3
 800a50c:	f1a3 0208 	sub.w	r2, r3, #8
 800a510:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a512:	429a      	cmp	r2, r3
 800a514:	f0c0 8099 	bcc.w	800a64a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	881b      	ldrh	r3, [r3, #0]
 800a51c:	461a      	mov	r2, r3
 800a51e:	8bfb      	ldrh	r3, [r7, #30]
 800a520:	1ad3      	subs	r3, r2, r3
 800a522:	f1a3 0208 	sub.w	r2, r3, #8
 800a526:	8bbb      	ldrh	r3, [r7, #28]
 800a528:	3314      	adds	r3, #20
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d333      	bcc.n	800a596 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a52e:	8bfa      	ldrh	r2, [r7, #30]
 800a530:	8bbb      	ldrh	r3, [r7, #28]
 800a532:	4413      	add	r3, r2
 800a534:	b29b      	uxth	r3, r3
 800a536:	3308      	adds	r3, #8
 800a538:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a53a:	8a7b      	ldrh	r3, [r7, #18]
 800a53c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a540:	d106      	bne.n	800a550 <mem_malloc+0xb0>
 800a542:	4b4c      	ldr	r3, [pc, #304]	@ (800a674 <mem_malloc+0x1d4>)
 800a544:	f240 3287 	movw	r2, #903	@ 0x387
 800a548:	494b      	ldr	r1, [pc, #300]	@ (800a678 <mem_malloc+0x1d8>)
 800a54a:	484c      	ldr	r0, [pc, #304]	@ (800a67c <mem_malloc+0x1dc>)
 800a54c:	f00a fccc 	bl	8014ee8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a550:	8a7b      	ldrh	r3, [r7, #18]
 800a552:	4618      	mov	r0, r3
 800a554:	f7ff fd04 	bl	8009f60 <ptr_to_mem>
 800a558:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2200      	movs	r2, #0
 800a55e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	881a      	ldrh	r2, [r3, #0]
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	8bfa      	ldrh	r2, [r7, #30]
 800a56c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	8a7a      	ldrh	r2, [r7, #18]
 800a572:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	2201      	movs	r2, #1
 800a578:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	881b      	ldrh	r3, [r3, #0]
 800a57e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a582:	d00b      	beq.n	800a59c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	881b      	ldrh	r3, [r3, #0]
 800a588:	4618      	mov	r0, r3
 800a58a:	f7ff fce9 	bl	8009f60 <ptr_to_mem>
 800a58e:	4602      	mov	r2, r0
 800a590:	8a7b      	ldrh	r3, [r7, #18]
 800a592:	8053      	strh	r3, [r2, #2]
 800a594:	e002      	b.n	800a59c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	2201      	movs	r2, #1
 800a59a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a59c:	4b34      	ldr	r3, [pc, #208]	@ (800a670 <mem_malloc+0x1d0>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	697a      	ldr	r2, [r7, #20]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d127      	bne.n	800a5f6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800a5a6:	4b32      	ldr	r3, [pc, #200]	@ (800a670 <mem_malloc+0x1d0>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a5ac:	e005      	b.n	800a5ba <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	881b      	ldrh	r3, [r3, #0]
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7ff fcd4 	bl	8009f60 <ptr_to_mem>
 800a5b8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	791b      	ldrb	r3, [r3, #4]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d004      	beq.n	800a5cc <mem_malloc+0x12c>
 800a5c2:	4b2f      	ldr	r3, [pc, #188]	@ (800a680 <mem_malloc+0x1e0>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	69ba      	ldr	r2, [r7, #24]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d1f0      	bne.n	800a5ae <mem_malloc+0x10e>
          }
          lfree = cur;
 800a5cc:	4a28      	ldr	r2, [pc, #160]	@ (800a670 <mem_malloc+0x1d0>)
 800a5ce:	69bb      	ldr	r3, [r7, #24]
 800a5d0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a5d2:	4b27      	ldr	r3, [pc, #156]	@ (800a670 <mem_malloc+0x1d0>)
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	4b2a      	ldr	r3, [pc, #168]	@ (800a680 <mem_malloc+0x1e0>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d00b      	beq.n	800a5f6 <mem_malloc+0x156>
 800a5de:	4b24      	ldr	r3, [pc, #144]	@ (800a670 <mem_malloc+0x1d0>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	791b      	ldrb	r3, [r3, #4]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d006      	beq.n	800a5f6 <mem_malloc+0x156>
 800a5e8:	4b22      	ldr	r3, [pc, #136]	@ (800a674 <mem_malloc+0x1d4>)
 800a5ea:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800a5ee:	4925      	ldr	r1, [pc, #148]	@ (800a684 <mem_malloc+0x1e4>)
 800a5f0:	4822      	ldr	r0, [pc, #136]	@ (800a67c <mem_malloc+0x1dc>)
 800a5f2:	f00a fc79 	bl	8014ee8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a5f6:	8bba      	ldrh	r2, [r7, #28]
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	3308      	adds	r3, #8
 800a5fe:	4a20      	ldr	r2, [pc, #128]	@ (800a680 <mem_malloc+0x1e0>)
 800a600:	6812      	ldr	r2, [r2, #0]
 800a602:	4293      	cmp	r3, r2
 800a604:	d906      	bls.n	800a614 <mem_malloc+0x174>
 800a606:	4b1b      	ldr	r3, [pc, #108]	@ (800a674 <mem_malloc+0x1d4>)
 800a608:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800a60c:	491e      	ldr	r1, [pc, #120]	@ (800a688 <mem_malloc+0x1e8>)
 800a60e:	481b      	ldr	r0, [pc, #108]	@ (800a67c <mem_malloc+0x1dc>)
 800a610:	f00a fc6a 	bl	8014ee8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	f003 0303 	and.w	r3, r3, #3
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d006      	beq.n	800a62c <mem_malloc+0x18c>
 800a61e:	4b15      	ldr	r3, [pc, #84]	@ (800a674 <mem_malloc+0x1d4>)
 800a620:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800a624:	4919      	ldr	r1, [pc, #100]	@ (800a68c <mem_malloc+0x1ec>)
 800a626:	4815      	ldr	r0, [pc, #84]	@ (800a67c <mem_malloc+0x1dc>)
 800a628:	f00a fc5e 	bl	8014ee8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	f003 0303 	and.w	r3, r3, #3
 800a632:	2b00      	cmp	r3, #0
 800a634:	d006      	beq.n	800a644 <mem_malloc+0x1a4>
 800a636:	4b0f      	ldr	r3, [pc, #60]	@ (800a674 <mem_malloc+0x1d4>)
 800a638:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800a63c:	4914      	ldr	r1, [pc, #80]	@ (800a690 <mem_malloc+0x1f0>)
 800a63e:	480f      	ldr	r0, [pc, #60]	@ (800a67c <mem_malloc+0x1dc>)
 800a640:	f00a fc52 	bl	8014ee8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	3308      	adds	r3, #8
 800a648:	e00e      	b.n	800a668 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800a64a:	8bfb      	ldrh	r3, [r7, #30]
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7ff fc87 	bl	8009f60 <ptr_to_mem>
 800a652:	4603      	mov	r3, r0
 800a654:	881b      	ldrh	r3, [r3, #0]
 800a656:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a658:	8bfa      	ldrh	r2, [r7, #30]
 800a65a:	8bbb      	ldrh	r3, [r7, #28]
 800a65c:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800a660:	429a      	cmp	r2, r3
 800a662:	f4ff af44 	bcc.w	800a4ee <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a666:	2300      	movs	r3, #0
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3720      	adds	r7, #32
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}
 800a670:	20005420 	.word	0x20005420
 800a674:	08016000 	.word	0x08016000
 800a678:	080161a8 	.word	0x080161a8
 800a67c:	08016048 	.word	0x08016048
 800a680:	2000541c 	.word	0x2000541c
 800a684:	080161bc 	.word	0x080161bc
 800a688:	080161d8 	.word	0x080161d8
 800a68c:	08016208 	.word	0x08016208
 800a690:	08016238 	.word	0x08016238

0800a694 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a694:	b480      	push	{r7}
 800a696:	b085      	sub	sp, #20
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	3303      	adds	r3, #3
 800a6aa:	f023 0303 	bic.w	r3, r3, #3
 800a6ae:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	60fb      	str	r3, [r7, #12]
 800a6b4:	e011      	b.n	800a6da <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	68db      	ldr	r3, [r3, #12]
 800a6c4:	68ba      	ldr	r2, [r7, #8]
 800a6c6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	889b      	ldrh	r3, [r3, #4]
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	60fb      	str	r3, [r7, #12]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	88db      	ldrh	r3, [r3, #6]
 800a6de:	461a      	mov	r2, r3
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	dbe7      	blt.n	800a6b6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a6e6:	bf00      	nop
 800a6e8:	bf00      	nop
 800a6ea:	3714      	adds	r7, #20
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b082      	sub	sp, #8
 800a6f8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	80fb      	strh	r3, [r7, #6]
 800a6fe:	e009      	b.n	800a714 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a700:	88fb      	ldrh	r3, [r7, #6]
 800a702:	4a08      	ldr	r2, [pc, #32]	@ (800a724 <memp_init+0x30>)
 800a704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a708:	4618      	mov	r0, r3
 800a70a:	f7ff ffc3 	bl	800a694 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a70e:	88fb      	ldrh	r3, [r7, #6]
 800a710:	3301      	adds	r3, #1
 800a712:	80fb      	strh	r3, [r7, #6]
 800a714:	88fb      	ldrh	r3, [r7, #6]
 800a716:	2b08      	cmp	r3, #8
 800a718:	d9f2      	bls.n	800a700 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a71a:	bf00      	nop
 800a71c:	bf00      	nop
 800a71e:	3708      	adds	r7, #8
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}
 800a724:	08019450 	.word	0x08019450

0800a728 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	68db      	ldr	r3, [r3, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d012      	beq.n	800a764 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	68fa      	ldr	r2, [r7, #12]
 800a744:	6812      	ldr	r2, [r2, #0]
 800a746:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f003 0303 	and.w	r3, r3, #3
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d006      	beq.n	800a760 <do_memp_malloc_pool+0x38>
 800a752:	4b07      	ldr	r3, [pc, #28]	@ (800a770 <do_memp_malloc_pool+0x48>)
 800a754:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800a758:	4906      	ldr	r1, [pc, #24]	@ (800a774 <do_memp_malloc_pool+0x4c>)
 800a75a:	4807      	ldr	r0, [pc, #28]	@ (800a778 <do_memp_malloc_pool+0x50>)
 800a75c:	f00a fbc4 	bl	8014ee8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	e000      	b.n	800a766 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a764:	2300      	movs	r3, #0
}
 800a766:	4618      	mov	r0, r3
 800a768:	3710      	adds	r7, #16
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	080162c4 	.word	0x080162c4
 800a774:	080162f4 	.word	0x080162f4
 800a778:	08016318 	.word	0x08016318

0800a77c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d106      	bne.n	800a798 <memp_malloc_pool+0x1c>
 800a78a:	4b0a      	ldr	r3, [pc, #40]	@ (800a7b4 <memp_malloc_pool+0x38>)
 800a78c:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800a790:	4909      	ldr	r1, [pc, #36]	@ (800a7b8 <memp_malloc_pool+0x3c>)
 800a792:	480a      	ldr	r0, [pc, #40]	@ (800a7bc <memp_malloc_pool+0x40>)
 800a794:	f00a fba8 	bl	8014ee8 <iprintf>
  if (desc == NULL) {
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d101      	bne.n	800a7a2 <memp_malloc_pool+0x26>
    return NULL;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	e003      	b.n	800a7aa <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f7ff ffc0 	bl	800a728 <do_memp_malloc_pool>
 800a7a8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3708      	adds	r7, #8
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop
 800a7b4:	080162c4 	.word	0x080162c4
 800a7b8:	08016340 	.word	0x08016340
 800a7bc:	08016318 	.word	0x08016318

0800a7c0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a7ca:	79fb      	ldrb	r3, [r7, #7]
 800a7cc:	2b08      	cmp	r3, #8
 800a7ce:	d908      	bls.n	800a7e2 <memp_malloc+0x22>
 800a7d0:	4b0a      	ldr	r3, [pc, #40]	@ (800a7fc <memp_malloc+0x3c>)
 800a7d2:	f240 1257 	movw	r2, #343	@ 0x157
 800a7d6:	490a      	ldr	r1, [pc, #40]	@ (800a800 <memp_malloc+0x40>)
 800a7d8:	480a      	ldr	r0, [pc, #40]	@ (800a804 <memp_malloc+0x44>)
 800a7da:	f00a fb85 	bl	8014ee8 <iprintf>
 800a7de:	2300      	movs	r3, #0
 800a7e0:	e008      	b.n	800a7f4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a7e2:	79fb      	ldrb	r3, [r7, #7]
 800a7e4:	4a08      	ldr	r2, [pc, #32]	@ (800a808 <memp_malloc+0x48>)
 800a7e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f7ff ff9c 	bl	800a728 <do_memp_malloc_pool>
 800a7f0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3710      	adds	r7, #16
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}
 800a7fc:	080162c4 	.word	0x080162c4
 800a800:	08016354 	.word	0x08016354
 800a804:	08016318 	.word	0x08016318
 800a808:	08019450 	.word	0x08019450

0800a80c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	f003 0303 	and.w	r3, r3, #3
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d006      	beq.n	800a82e <do_memp_free_pool+0x22>
 800a820:	4b0a      	ldr	r3, [pc, #40]	@ (800a84c <do_memp_free_pool+0x40>)
 800a822:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800a826:	490a      	ldr	r1, [pc, #40]	@ (800a850 <do_memp_free_pool+0x44>)
 800a828:	480a      	ldr	r0, [pc, #40]	@ (800a854 <do_memp_free_pool+0x48>)
 800a82a:	f00a fb5d 	bl	8014ee8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	68fa      	ldr	r2, [r7, #12]
 800a842:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800a844:	bf00      	nop
 800a846:	3710      	adds	r7, #16
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	080162c4 	.word	0x080162c4
 800a850:	08016374 	.word	0x08016374
 800a854:	08016318 	.word	0x08016318

0800a858 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d106      	bne.n	800a876 <memp_free_pool+0x1e>
 800a868:	4b0a      	ldr	r3, [pc, #40]	@ (800a894 <memp_free_pool+0x3c>)
 800a86a:	f240 1295 	movw	r2, #405	@ 0x195
 800a86e:	490a      	ldr	r1, [pc, #40]	@ (800a898 <memp_free_pool+0x40>)
 800a870:	480a      	ldr	r0, [pc, #40]	@ (800a89c <memp_free_pool+0x44>)
 800a872:	f00a fb39 	bl	8014ee8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d007      	beq.n	800a88c <memp_free_pool+0x34>
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d004      	beq.n	800a88c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800a882:	6839      	ldr	r1, [r7, #0]
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f7ff ffc1 	bl	800a80c <do_memp_free_pool>
 800a88a:	e000      	b.n	800a88e <memp_free_pool+0x36>
    return;
 800a88c:	bf00      	nop
}
 800a88e:	3708      	adds	r7, #8
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}
 800a894:	080162c4 	.word	0x080162c4
 800a898:	08016340 	.word	0x08016340
 800a89c:	08016318 	.word	0x08016318

0800a8a0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	6039      	str	r1, [r7, #0]
 800a8aa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a8ac:	79fb      	ldrb	r3, [r7, #7]
 800a8ae:	2b08      	cmp	r3, #8
 800a8b0:	d907      	bls.n	800a8c2 <memp_free+0x22>
 800a8b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a8e4 <memp_free+0x44>)
 800a8b4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800a8b8:	490b      	ldr	r1, [pc, #44]	@ (800a8e8 <memp_free+0x48>)
 800a8ba:	480c      	ldr	r0, [pc, #48]	@ (800a8ec <memp_free+0x4c>)
 800a8bc:	f00a fb14 	bl	8014ee8 <iprintf>
 800a8c0:	e00c      	b.n	800a8dc <memp_free+0x3c>

  if (mem == NULL) {
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d008      	beq.n	800a8da <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a8c8:	79fb      	ldrb	r3, [r7, #7]
 800a8ca:	4a09      	ldr	r2, [pc, #36]	@ (800a8f0 <memp_free+0x50>)
 800a8cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8d0:	6839      	ldr	r1, [r7, #0]
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7ff ff9a 	bl	800a80c <do_memp_free_pool>
 800a8d8:	e000      	b.n	800a8dc <memp_free+0x3c>
    return;
 800a8da:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a8dc:	3708      	adds	r7, #8
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	080162c4 	.word	0x080162c4
 800a8e8:	08016394 	.word	0x08016394
 800a8ec:	08016318 	.word	0x08016318
 800a8f0:	08019450 	.word	0x08019450

0800a8f4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a8f8:	bf00      	nop
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr
	...

0800a904 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b088      	sub	sp, #32
 800a908:	af02      	add	r7, sp, #8
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	607a      	str	r2, [r7, #4]
 800a910:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d108      	bne.n	800a92a <netif_add+0x26>
 800a918:	4b96      	ldr	r3, [pc, #600]	@ (800ab74 <netif_add+0x270>)
 800a91a:	f240 1227 	movw	r2, #295	@ 0x127
 800a91e:	4996      	ldr	r1, [pc, #600]	@ (800ab78 <netif_add+0x274>)
 800a920:	4896      	ldr	r0, [pc, #600]	@ (800ab7c <netif_add+0x278>)
 800a922:	f00a fae1 	bl	8014ee8 <iprintf>
 800a926:	2300      	movs	r3, #0
 800a928:	e14c      	b.n	800abc4 <netif_add+0x2c0>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a92a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d108      	bne.n	800a942 <netif_add+0x3e>
 800a930:	4b90      	ldr	r3, [pc, #576]	@ (800ab74 <netif_add+0x270>)
 800a932:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800a936:	4992      	ldr	r1, [pc, #584]	@ (800ab80 <netif_add+0x27c>)
 800a938:	4890      	ldr	r0, [pc, #576]	@ (800ab7c <netif_add+0x278>)
 800a93a:	f00a fad5 	bl	8014ee8 <iprintf>
 800a93e:	2300      	movs	r3, #0
 800a940:	e140      	b.n	800abc4 <netif_add+0x2c0>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d101      	bne.n	800a94c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a948:	4b8e      	ldr	r3, [pc, #568]	@ (800ab84 <netif_add+0x280>)
 800a94a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d101      	bne.n	800a956 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a952:	4b8c      	ldr	r3, [pc, #560]	@ (800ab84 <netif_add+0x280>)
 800a954:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d101      	bne.n	800a960 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a95c:	4b89      	ldr	r3, [pc, #548]	@ (800ab84 <netif_add+0x280>)
 800a95e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2200      	movs	r2, #0
 800a964:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2200      	movs	r2, #0
 800a96a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2200      	movs	r2, #0
 800a970:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	4a84      	ldr	r2, [pc, #528]	@ (800ab88 <netif_add+0x284>)
 800a976:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2200      	movs	r2, #0
 800a97c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2200      	movs	r2, #0
 800a982:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2200      	movs	r2, #0
 800a98a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	6a3a      	ldr	r2, [r7, #32]
 800a990:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a992:	4b7e      	ldr	r3, [pc, #504]	@ (800ab8c <netif_add+0x288>)
 800a994:	781a      	ldrb	r2, [r3, #0]
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a9a0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	68b9      	ldr	r1, [r7, #8]
 800a9a8:	68f8      	ldr	r0, [r7, #12]
 800a9aa:	f000 f9f5 	bl	800ad98 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a9ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b0:	68f8      	ldr	r0, [r7, #12]
 800a9b2:	4798      	blx	r3
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d001      	beq.n	800a9be <netif_add+0xba>
    return NULL;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	e102      	b.n	800abc4 <netif_add+0x2c0>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a9c4:	2bff      	cmp	r3, #255	@ 0xff
 800a9c6:	d103      	bne.n	800a9d0 <netif_add+0xcc>
        netif->num = 0;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a9d4:	4b6e      	ldr	r3, [pc, #440]	@ (800ab90 <netif_add+0x28c>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	617b      	str	r3, [r7, #20]
 800a9da:	e02b      	b.n	800aa34 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a9dc:	697a      	ldr	r2, [r7, #20]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d106      	bne.n	800a9f2 <netif_add+0xee>
 800a9e4:	4b63      	ldr	r3, [pc, #396]	@ (800ab74 <netif_add+0x270>)
 800a9e6:	f240 128b 	movw	r2, #395	@ 0x18b
 800a9ea:	496a      	ldr	r1, [pc, #424]	@ (800ab94 <netif_add+0x290>)
 800a9ec:	4863      	ldr	r0, [pc, #396]	@ (800ab7c <netif_add+0x278>)
 800a9ee:	f00a fa7b 	bl	8014ee8 <iprintf>
        num_netifs++;
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	2bff      	cmp	r3, #255	@ 0xff
 800a9fc:	dd06      	ble.n	800aa0c <netif_add+0x108>
 800a9fe:	4b5d      	ldr	r3, [pc, #372]	@ (800ab74 <netif_add+0x270>)
 800aa00:	f240 128d 	movw	r2, #397	@ 0x18d
 800aa04:	4964      	ldr	r1, [pc, #400]	@ (800ab98 <netif_add+0x294>)
 800aa06:	485d      	ldr	r0, [pc, #372]	@ (800ab7c <netif_add+0x278>)
 800aa08:	f00a fa6e 	bl	8014ee8 <iprintf>
        if (netif2->num == netif->num) {
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d108      	bne.n	800aa2e <netif_add+0x12a>
          netif->num++;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800aa22:	3301      	adds	r3, #1
 800aa24:	b2da      	uxtb	r2, r3
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800aa2c:	e005      	b.n	800aa3a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	617b      	str	r3, [r7, #20]
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d1d0      	bne.n	800a9dc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d1be      	bne.n	800a9be <netif_add+0xba>
  }
  if (netif->num == 254) {
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800aa46:	2bfe      	cmp	r3, #254	@ 0xfe
 800aa48:	d103      	bne.n	800aa52 <netif_add+0x14e>
    netif_num = 0;
 800aa4a:	4b50      	ldr	r3, [pc, #320]	@ (800ab8c <netif_add+0x288>)
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	701a      	strb	r2, [r3, #0]
 800aa50:	e006      	b.n	800aa60 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800aa58:	3301      	adds	r3, #1
 800aa5a:	b2da      	uxtb	r2, r3
 800aa5c:	4b4b      	ldr	r3, [pc, #300]	@ (800ab8c <netif_add+0x288>)
 800aa5e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800aa60:	4b4b      	ldr	r3, [pc, #300]	@ (800ab90 <netif_add+0x28c>)
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800aa68:	4a49      	ldr	r2, [pc, #292]	@ (800ab90 <netif_add+0x28c>)
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	6013      	str	r3, [r2, #0]
  if (netif->flags & NETIF_FLAG_IGMP) {
    igmp_start(netif);
  }
#endif /* LWIP_IGMP */

  LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP",
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800aa74:	4619      	mov	r1, r3
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	4847      	ldr	r0, [pc, #284]	@ (800ab9c <netif_add+0x298>)
 800aa80:	f00a fa32 	bl	8014ee8 <iprintf>
                            netif->name[0], netif->name[1]));
#if LWIP_IPV4
  LWIP_DEBUGF(NETIF_DEBUG, (" addr "));
 800aa84:	4846      	ldr	r0, [pc, #280]	@ (800aba0 <netif_add+0x29c>)
 800aa86:	f00a fa2f 	bl	8014ee8 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, ipaddr);
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d003      	beq.n	800aa98 <netif_add+0x194>
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	4619      	mov	r1, r3
 800aa96:	e000      	b.n	800aa9a <netif_add+0x196>
 800aa98:	2100      	movs	r1, #0
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d004      	beq.n	800aaaa <netif_add+0x1a6>
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	e000      	b.n	800aaac <netif_add+0x1a8>
 800aaaa:	2200      	movs	r2, #0
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d004      	beq.n	800aabc <netif_add+0x1b8>
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	3302      	adds	r3, #2
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	4618      	mov	r0, r3
 800aaba:	e000      	b.n	800aabe <netif_add+0x1ba>
 800aabc:	2000      	movs	r0, #0
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d003      	beq.n	800aacc <netif_add+0x1c8>
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	3303      	adds	r3, #3
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	e000      	b.n	800aace <netif_add+0x1ca>
 800aacc:	2300      	movs	r3, #0
 800aace:	9300      	str	r3, [sp, #0]
 800aad0:	4603      	mov	r3, r0
 800aad2:	4834      	ldr	r0, [pc, #208]	@ (800aba4 <netif_add+0x2a0>)
 800aad4:	f00a fa08 	bl	8014ee8 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
 800aad8:	4833      	ldr	r0, [pc, #204]	@ (800aba8 <netif_add+0x2a4>)
 800aada:	f00a fa05 	bl	8014ee8 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d003      	beq.n	800aaec <netif_add+0x1e8>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	4619      	mov	r1, r3
 800aaea:	e000      	b.n	800aaee <netif_add+0x1ea>
 800aaec:	2100      	movs	r1, #0
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d004      	beq.n	800aafe <netif_add+0x1fa>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	461a      	mov	r2, r3
 800aafc:	e000      	b.n	800ab00 <netif_add+0x1fc>
 800aafe:	2200      	movs	r2, #0
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d004      	beq.n	800ab10 <netif_add+0x20c>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	3302      	adds	r3, #2
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	e000      	b.n	800ab12 <netif_add+0x20e>
 800ab10:	2000      	movs	r0, #0
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d003      	beq.n	800ab20 <netif_add+0x21c>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	3303      	adds	r3, #3
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	e000      	b.n	800ab22 <netif_add+0x21e>
 800ab20:	2300      	movs	r3, #0
 800ab22:	9300      	str	r3, [sp, #0]
 800ab24:	4603      	mov	r3, r0
 800ab26:	481f      	ldr	r0, [pc, #124]	@ (800aba4 <netif_add+0x2a0>)
 800ab28:	f00a f9de 	bl	8014ee8 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
 800ab2c:	481f      	ldr	r0, [pc, #124]	@ (800abac <netif_add+0x2a8>)
 800ab2e:	f00a f9db 	bl	8014ee8 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, gw);
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d003      	beq.n	800ab40 <netif_add+0x23c>
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	e000      	b.n	800ab42 <netif_add+0x23e>
 800ab40:	2100      	movs	r1, #0
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d004      	beq.n	800ab52 <netif_add+0x24e>
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	461a      	mov	r2, r3
 800ab50:	e000      	b.n	800ab54 <netif_add+0x250>
 800ab52:	2200      	movs	r2, #0
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d004      	beq.n	800ab64 <netif_add+0x260>
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	3302      	adds	r3, #2
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	4618      	mov	r0, r3
 800ab62:	e000      	b.n	800ab66 <netif_add+0x262>
 800ab64:	2000      	movs	r0, #0
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d021      	beq.n	800abb0 <netif_add+0x2ac>
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	3303      	adds	r3, #3
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	e01e      	b.n	800abb2 <netif_add+0x2ae>
 800ab74:	080163b0 	.word	0x080163b0
 800ab78:	08016444 	.word	0x08016444
 800ab7c:	08016400 	.word	0x08016400
 800ab80:	08016460 	.word	0x08016460
 800ab84:	080194b4 	.word	0x080194b4
 800ab88:	0800b09b 	.word	0x0800b09b
 800ab8c:	20008358 	.word	0x20008358
 800ab90:	20008350 	.word	0x20008350
 800ab94:	08016484 	.word	0x08016484
 800ab98:	08016498 	.word	0x08016498
 800ab9c:	080164c8 	.word	0x080164c8
 800aba0:	080164e8 	.word	0x080164e8
 800aba4:	080164f0 	.word	0x080164f0
 800aba8:	08016500 	.word	0x08016500
 800abac:	0801650c 	.word	0x0801650c
 800abb0:	2300      	movs	r3, #0
 800abb2:	9300      	str	r3, [sp, #0]
 800abb4:	4603      	mov	r3, r0
 800abb6:	4805      	ldr	r0, [pc, #20]	@ (800abcc <netif_add+0x2c8>)
 800abb8:	f00a f996 	bl	8014ee8 <iprintf>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
 800abbc:	200a      	movs	r0, #10
 800abbe:	f00a f9a5 	bl	8014f0c <putchar>

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800abc2:	68fb      	ldr	r3, [r7, #12]
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3718      	adds	r7, #24
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}
 800abcc:	080164f0 	.word	0x080164f0

0800abd0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800abda:	6839      	ldr	r1, [r7, #0]
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f002 fbb9 	bl	800d354 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800abe2:	6839      	ldr	r1, [r7, #0]
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f007 f927 	bl	8011e38 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800abea:	bf00      	nop
 800abec:	3708      	adds	r7, #8
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
	...

0800abf4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b086      	sub	sp, #24
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	60f8      	str	r0, [r7, #12]
 800abfc:	60b9      	str	r1, [r7, #8]
 800abfe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d106      	bne.n	800ac14 <netif_do_set_ipaddr+0x20>
 800ac06:	4b1e      	ldr	r3, [pc, #120]	@ (800ac80 <netif_do_set_ipaddr+0x8c>)
 800ac08:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800ac0c:	491d      	ldr	r1, [pc, #116]	@ (800ac84 <netif_do_set_ipaddr+0x90>)
 800ac0e:	481e      	ldr	r0, [pc, #120]	@ (800ac88 <netif_do_set_ipaddr+0x94>)
 800ac10:	f00a f96a 	bl	8014ee8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d106      	bne.n	800ac28 <netif_do_set_ipaddr+0x34>
 800ac1a:	4b19      	ldr	r3, [pc, #100]	@ (800ac80 <netif_do_set_ipaddr+0x8c>)
 800ac1c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800ac20:	4918      	ldr	r1, [pc, #96]	@ (800ac84 <netif_do_set_ipaddr+0x90>)
 800ac22:	4819      	ldr	r0, [pc, #100]	@ (800ac88 <netif_do_set_ipaddr+0x94>)
 800ac24:	f00a f960 	bl	8014ee8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	3304      	adds	r3, #4
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d01f      	beq.n	800ac76 <netif_do_set_ipaddr+0x82>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	3304      	adds	r3, #4
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
 800ac46:	4811      	ldr	r0, [pc, #68]	@ (800ac8c <netif_do_set_ipaddr+0x98>)
 800ac48:	f00a f9be 	bl	8014fc8 <puts>
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ac4c:	f107 0314 	add.w	r3, r7, #20
 800ac50:	4619      	mov	r1, r3
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f7ff ffbc 	bl	800abd0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d002      	beq.n	800ac64 <netif_do_set_ipaddr+0x70>
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	e000      	b.n	800ac66 <netif_do_set_ipaddr+0x72>
 800ac64:	2300      	movs	r3, #0
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ac6a:	2101      	movs	r1, #1
 800ac6c:	68f8      	ldr	r0, [r7, #12]
 800ac6e:	f000 f92d 	bl	800aecc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ac72:	2301      	movs	r3, #1
 800ac74:	e000      	b.n	800ac78 <netif_do_set_ipaddr+0x84>
  }
  return 0; /* address unchanged */
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3718      	adds	r7, #24
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}
 800ac80:	080163b0 	.word	0x080163b0
 800ac84:	08016514 	.word	0x08016514
 800ac88:	08016400 	.word	0x08016400
 800ac8c:	08016524 	.word	0x08016524

0800ac90 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ac90:	b5b0      	push	{r4, r5, r7, lr}
 800ac92:	b088      	sub	sp, #32
 800ac94:	af04      	add	r7, sp, #16
 800ac96:	60f8      	str	r0, [r7, #12]
 800ac98:	60b9      	str	r1, [r7, #8]
 800ac9a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	681a      	ldr	r2, [r3, #0]
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	3308      	adds	r3, #8
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d02d      	beq.n	800ad06 <netif_do_set_netmask+0x76>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d002      	beq.n	800acb6 <netif_do_set_netmask+0x26>
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	e000      	b.n	800acb8 <netif_do_set_netmask+0x28>
 800acb6:	2300      	movs	r3, #0
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	6093      	str	r3, [r2, #8]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
    mib2_add_route_ip4(0, netif);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800acc2:	4618      	mov	r0, r3
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800acca:	461c      	mov	r4, r3
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	3308      	adds	r3, #8
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	461d      	mov	r5, r3
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	3308      	adds	r3, #8
 800acd8:	3301      	adds	r3, #1
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	461a      	mov	r2, r3
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	3308      	adds	r3, #8
 800ace2:	3302      	adds	r3, #2
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	4619      	mov	r1, r3
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	3308      	adds	r3, #8
 800acec:	3303      	adds	r3, #3
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	9302      	str	r3, [sp, #8]
 800acf2:	9101      	str	r1, [sp, #4]
 800acf4:	9200      	str	r2, [sp, #0]
 800acf6:	462b      	mov	r3, r5
 800acf8:	4622      	mov	r2, r4
 800acfa:	4601      	mov	r1, r0
 800acfc:	4804      	ldr	r0, [pc, #16]	@ (800ad10 <netif_do_set_netmask+0x80>)
 800acfe:	f00a f8f3 	bl	8014ee8 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ad02:	2301      	movs	r3, #1
 800ad04:	e000      	b.n	800ad08 <netif_do_set_netmask+0x78>
  }
  return 0; /* netmask unchanged */
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3710      	adds	r7, #16
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bdb0      	pop	{r4, r5, r7, pc}
 800ad10:	08016574 	.word	0x08016574

0800ad14 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ad14:	b5b0      	push	{r4, r5, r7, lr}
 800ad16:	b088      	sub	sp, #32
 800ad18:	af04      	add	r7, sp, #16
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	330c      	adds	r3, #12
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d02d      	beq.n	800ad8a <netif_do_set_gw+0x76>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d002      	beq.n	800ad3a <netif_do_set_gw+0x26>
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	e000      	b.n	800ad3c <netif_do_set_gw+0x28>
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	60d3      	str	r3, [r2, #12]
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800ad46:	4618      	mov	r0, r3
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ad4e:	461c      	mov	r4, r3
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	330c      	adds	r3, #12
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	461d      	mov	r5, r3
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	330c      	adds	r3, #12
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	461a      	mov	r2, r3
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	330c      	adds	r3, #12
 800ad66:	3302      	adds	r3, #2
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	330c      	adds	r3, #12
 800ad70:	3303      	adds	r3, #3
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	9302      	str	r3, [sp, #8]
 800ad76:	9101      	str	r1, [sp, #4]
 800ad78:	9200      	str	r2, [sp, #0]
 800ad7a:	462b      	mov	r3, r5
 800ad7c:	4622      	mov	r2, r4
 800ad7e:	4601      	mov	r1, r0
 800ad80:	4804      	ldr	r0, [pc, #16]	@ (800ad94 <netif_do_set_gw+0x80>)
 800ad82:	f00a f8b1 	bl	8014ee8 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ad86:	2301      	movs	r3, #1
 800ad88:	e000      	b.n	800ad8c <netif_do_set_gw+0x78>
  }
  return 0; /* gateway unchanged */
 800ad8a:	2300      	movs	r3, #0
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3710      	adds	r7, #16
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bdb0      	pop	{r4, r5, r7, pc}
 800ad94:	080165d4 	.word	0x080165d4

0800ad98 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b088      	sub	sp, #32
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	607a      	str	r2, [r7, #4]
 800ada4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ada6:	2300      	movs	r3, #0
 800ada8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800adaa:	2300      	movs	r3, #0
 800adac:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d101      	bne.n	800adb8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800adb4:	4b1c      	ldr	r3, [pc, #112]	@ (800ae28 <netif_set_addr+0x90>)
 800adb6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d101      	bne.n	800adc2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800adbe:	4b1a      	ldr	r3, [pc, #104]	@ (800ae28 <netif_set_addr+0x90>)
 800adc0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d101      	bne.n	800adcc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800adc8:	4b17      	ldr	r3, [pc, #92]	@ (800ae28 <netif_set_addr+0x90>)
 800adca:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d003      	beq.n	800adda <netif_set_addr+0x42>
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d101      	bne.n	800adde <netif_set_addr+0x46>
 800adda:	2301      	movs	r3, #1
 800addc:	e000      	b.n	800ade0 <netif_set_addr+0x48>
 800adde:	2300      	movs	r3, #0
 800ade0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d006      	beq.n	800adf6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ade8:	f107 0310 	add.w	r3, r7, #16
 800adec:	461a      	mov	r2, r3
 800adee:	68b9      	ldr	r1, [r7, #8]
 800adf0:	68f8      	ldr	r0, [r7, #12]
 800adf2:	f7ff feff 	bl	800abf4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800adf6:	69fa      	ldr	r2, [r7, #28]
 800adf8:	6879      	ldr	r1, [r7, #4]
 800adfa:	68f8      	ldr	r0, [r7, #12]
 800adfc:	f7ff ff48 	bl	800ac90 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ae00:	69ba      	ldr	r2, [r7, #24]
 800ae02:	6839      	ldr	r1, [r7, #0]
 800ae04:	68f8      	ldr	r0, [r7, #12]
 800ae06:	f7ff ff85 	bl	800ad14 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d106      	bne.n	800ae1e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ae10:	f107 0310 	add.w	r3, r7, #16
 800ae14:	461a      	mov	r2, r3
 800ae16:	68b9      	ldr	r1, [r7, #8]
 800ae18:	68f8      	ldr	r0, [r7, #12]
 800ae1a:	f7ff feeb 	bl	800abf4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ae1e:	bf00      	nop
 800ae20:	3720      	adds	r7, #32
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	080194b4 	.word	0x080194b4

0800ae2c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b082      	sub	sp, #8
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ae34:	4a0d      	ldr	r2, [pc, #52]	@ (800ae6c <netif_set_default+0x40>)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d004      	beq.n	800ae4a <netif_set_default+0x1e>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800ae46:	4619      	mov	r1, r3
 800ae48:	e000      	b.n	800ae4c <netif_set_default+0x20>
 800ae4a:	2127      	movs	r1, #39	@ 0x27
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d003      	beq.n	800ae5a <netif_set_default+0x2e>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ae58:	e000      	b.n	800ae5c <netif_set_default+0x30>
 800ae5a:	2327      	movs	r3, #39	@ 0x27
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	4804      	ldr	r0, [pc, #16]	@ (800ae70 <netif_set_default+0x44>)
 800ae60:	f00a f842 	bl	8014ee8 <iprintf>
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ae64:	bf00      	nop
 800ae66:	3708      	adds	r7, #8
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}
 800ae6c:	20008354 	.word	0x20008354
 800ae70:	08016648 	.word	0x08016648

0800ae74 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d107      	bne.n	800ae92 <netif_set_up+0x1e>
 800ae82:	4b0f      	ldr	r3, [pc, #60]	@ (800aec0 <netif_set_up+0x4c>)
 800ae84:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800ae88:	490e      	ldr	r1, [pc, #56]	@ (800aec4 <netif_set_up+0x50>)
 800ae8a:	480f      	ldr	r0, [pc, #60]	@ (800aec8 <netif_set_up+0x54>)
 800ae8c:	f00a f82c 	bl	8014ee8 <iprintf>
 800ae90:	e013      	b.n	800aeba <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ae98:	f003 0301 	and.w	r3, r3, #1
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d10c      	bne.n	800aeba <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800aea6:	f043 0301 	orr.w	r3, r3, #1
 800aeaa:	b2da      	uxtb	r2, r3
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800aeb2:	2103      	movs	r1, #3
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 f809 	bl	800aecc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800aeba:	3708      	adds	r7, #8
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}
 800aec0:	080163b0 	.word	0x080163b0
 800aec4:	08016670 	.word	0x08016670
 800aec8:	08016400 	.word	0x08016400

0800aecc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	460b      	mov	r3, r1
 800aed6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d106      	bne.n	800aeec <netif_issue_reports+0x20>
 800aede:	4b18      	ldr	r3, [pc, #96]	@ (800af40 <netif_issue_reports+0x74>)
 800aee0:	f240 326d 	movw	r2, #877	@ 0x36d
 800aee4:	4917      	ldr	r1, [pc, #92]	@ (800af44 <netif_issue_reports+0x78>)
 800aee6:	4818      	ldr	r0, [pc, #96]	@ (800af48 <netif_issue_reports+0x7c>)
 800aee8:	f009 fffe 	bl	8014ee8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800aef2:	f003 0304 	and.w	r3, r3, #4
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d01e      	beq.n	800af38 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800af00:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800af04:	2b00      	cmp	r3, #0
 800af06:	d017      	beq.n	800af38 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800af08:	78fb      	ldrb	r3, [r7, #3]
 800af0a:	f003 0301 	and.w	r3, r3, #1
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d013      	beq.n	800af3a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	3304      	adds	r3, #4
 800af16:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d00e      	beq.n	800af3a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800af22:	f003 0308 	and.w	r3, r3, #8
 800af26:	2b00      	cmp	r3, #0
 800af28:	d007      	beq.n	800af3a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	3304      	adds	r3, #4
 800af2e:	4619      	mov	r1, r3
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f007 ff5d 	bl	8012df0 <etharp_request>
 800af36:	e000      	b.n	800af3a <netif_issue_reports+0x6e>
    return;
 800af38:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800af3a:	3708      	adds	r7, #8
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	080163b0 	.word	0x080163b0
 800af44:	0801668c 	.word	0x0801668c
 800af48:	08016400 	.word	0x08016400

0800af4c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d107      	bne.n	800af6a <netif_set_down+0x1e>
 800af5a:	4b12      	ldr	r3, [pc, #72]	@ (800afa4 <netif_set_down+0x58>)
 800af5c:	f240 329b 	movw	r2, #923	@ 0x39b
 800af60:	4911      	ldr	r1, [pc, #68]	@ (800afa8 <netif_set_down+0x5c>)
 800af62:	4812      	ldr	r0, [pc, #72]	@ (800afac <netif_set_down+0x60>)
 800af64:	f009 ffc0 	bl	8014ee8 <iprintf>
 800af68:	e019      	b.n	800af9e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800af70:	f003 0301 	and.w	r3, r3, #1
 800af74:	2b00      	cmp	r3, #0
 800af76:	d012      	beq.n	800af9e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800af7e:	f023 0301 	bic.w	r3, r3, #1
 800af82:	b2da      	uxtb	r2, r3
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800af90:	f003 0308 	and.w	r3, r3, #8
 800af94:	2b00      	cmp	r3, #0
 800af96:	d002      	beq.n	800af9e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f007 fae7 	bl	801256c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	080163b0 	.word	0x080163b0
 800afa8:	080166b0 	.word	0x080166b0
 800afac:	08016400 	.word	0x08016400

0800afb0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d107      	bne.n	800afce <netif_set_link_up+0x1e>
 800afbe:	4b13      	ldr	r3, [pc, #76]	@ (800b00c <netif_set_link_up+0x5c>)
 800afc0:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800afc4:	4912      	ldr	r1, [pc, #72]	@ (800b010 <netif_set_link_up+0x60>)
 800afc6:	4813      	ldr	r0, [pc, #76]	@ (800b014 <netif_set_link_up+0x64>)
 800afc8:	f009 ff8e 	bl	8014ee8 <iprintf>
 800afcc:	e01b      	b.n	800b006 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800afd4:	f003 0304 	and.w	r3, r3, #4
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d114      	bne.n	800b006 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800afe2:	f043 0304 	orr.w	r3, r3, #4
 800afe6:	b2da      	uxtb	r2, r3
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800afee:	2103      	movs	r1, #3
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f7ff ff6b 	bl	800aecc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	69db      	ldr	r3, [r3, #28]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d003      	beq.n	800b006 <netif_set_link_up+0x56>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	69db      	ldr	r3, [r3, #28]
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b006:	3708      	adds	r7, #8
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}
 800b00c:	080163b0 	.word	0x080163b0
 800b010:	080166d0 	.word	0x080166d0
 800b014:	08016400 	.word	0x08016400

0800b018 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d107      	bne.n	800b036 <netif_set_link_down+0x1e>
 800b026:	4b11      	ldr	r3, [pc, #68]	@ (800b06c <netif_set_link_down+0x54>)
 800b028:	f240 4206 	movw	r2, #1030	@ 0x406
 800b02c:	4910      	ldr	r1, [pc, #64]	@ (800b070 <netif_set_link_down+0x58>)
 800b02e:	4811      	ldr	r0, [pc, #68]	@ (800b074 <netif_set_link_down+0x5c>)
 800b030:	f009 ff5a 	bl	8014ee8 <iprintf>
 800b034:	e017      	b.n	800b066 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b03c:	f003 0304 	and.w	r3, r3, #4
 800b040:	2b00      	cmp	r3, #0
 800b042:	d010      	beq.n	800b066 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b04a:	f023 0304 	bic.w	r3, r3, #4
 800b04e:	b2da      	uxtb	r2, r3
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	69db      	ldr	r3, [r3, #28]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d003      	beq.n	800b066 <netif_set_link_down+0x4e>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	69db      	ldr	r3, [r3, #28]
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b066:	3708      	adds	r7, #8
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}
 800b06c:	080163b0 	.word	0x080163b0
 800b070:	080166f4 	.word	0x080166f4
 800b074:	08016400 	.word	0x08016400

0800b078 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d002      	beq.n	800b08e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	683a      	ldr	r2, [r7, #0]
 800b08c:	61da      	str	r2, [r3, #28]
  }
}
 800b08e:	bf00      	nop
 800b090:	370c      	adds	r7, #12
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr

0800b09a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b09a:	b480      	push	{r7}
 800b09c:	b085      	sub	sp, #20
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	60f8      	str	r0, [r7, #12]
 800b0a2:	60b9      	str	r1, [r7, #8]
 800b0a4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b0a6:	f06f 030b 	mvn.w	r3, #11
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3714      	adds	r7, #20
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr
	...

0800b0b8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b085      	sub	sp, #20
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	4603      	mov	r3, r0
 800b0c0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b0c2:	79fb      	ldrb	r3, [r7, #7]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d013      	beq.n	800b0f0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b0c8:	4b0d      	ldr	r3, [pc, #52]	@ (800b100 <netif_get_by_index+0x48>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	60fb      	str	r3, [r7, #12]
 800b0ce:	e00c      	b.n	800b0ea <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	b2db      	uxtb	r3, r3
 800b0da:	79fa      	ldrb	r2, [r7, #7]
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d101      	bne.n	800b0e4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	e006      	b.n	800b0f2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	60fb      	str	r3, [r7, #12]
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d1ef      	bne.n	800b0d0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b0f0:	2300      	movs	r3, #0
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3714      	adds	r7, #20
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr
 800b0fe:	bf00      	nop
 800b100:	20008350 	.word	0x20008350

0800b104 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b082      	sub	sp, #8
 800b108:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b10a:	4b0c      	ldr	r3, [pc, #48]	@ (800b13c <pbuf_free_ooseq+0x38>)
 800b10c:	2200      	movs	r2, #0
 800b10e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b110:	4b0b      	ldr	r3, [pc, #44]	@ (800b140 <pbuf_free_ooseq+0x3c>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	607b      	str	r3, [r7, #4]
 800b116:	e00a      	b.n	800b12e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d003      	beq.n	800b128 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f002 f955 	bl	800d3d0 <tcp_free_ooseq>
      return;
 800b126:	e005      	b.n	800b134 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	607b      	str	r3, [r7, #4]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d1f1      	bne.n	800b118 <pbuf_free_ooseq+0x14>
    }
  }
}
 800b134:	3708      	adds	r7, #8
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
 800b13a:	bf00      	nop
 800b13c:	20008359 	.word	0x20008359
 800b140:	20008368 	.word	0x20008368

0800b144 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b144:	b480      	push	{r7}
 800b146:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800b148:	4b03      	ldr	r3, [pc, #12]	@ (800b158 <pbuf_pool_is_empty+0x14>)
 800b14a:	2201      	movs	r2, #1
 800b14c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b14e:	bf00      	nop
 800b150:	46bd      	mov	sp, r7
 800b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b156:	4770      	bx	lr
 800b158:	20008359 	.word	0x20008359

0800b15c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b085      	sub	sp, #20
 800b160:	af00      	add	r7, sp, #0
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	60b9      	str	r1, [r7, #8]
 800b166:	4611      	mov	r1, r2
 800b168:	461a      	mov	r2, r3
 800b16a:	460b      	mov	r3, r1
 800b16c:	80fb      	strh	r3, [r7, #6]
 800b16e:	4613      	mov	r3, r2
 800b170:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	2200      	movs	r2, #0
 800b176:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	68ba      	ldr	r2, [r7, #8]
 800b17c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	88fa      	ldrh	r2, [r7, #6]
 800b182:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	88ba      	ldrh	r2, [r7, #4]
 800b188:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b18a:	8b3b      	ldrh	r3, [r7, #24]
 800b18c:	b2da      	uxtb	r2, r3
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	7f3a      	ldrb	r2, [r7, #28]
 800b196:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2201      	movs	r2, #1
 800b19c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	73da      	strb	r2, [r3, #15]
}
 800b1a4:	bf00      	nop
 800b1a6:	3714      	adds	r7, #20
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b08c      	sub	sp, #48	@ 0x30
 800b1b4:	af02      	add	r7, sp, #8
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	71fb      	strb	r3, [r7, #7]
 800b1ba:	460b      	mov	r3, r1
 800b1bc:	80bb      	strh	r3, [r7, #4]
 800b1be:	4613      	mov	r3, r2
 800b1c0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b1c2:	79fb      	ldrb	r3, [r7, #7]
 800b1c4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b1c6:	887b      	ldrh	r3, [r7, #2]
 800b1c8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b1cc:	d07f      	beq.n	800b2ce <pbuf_alloc+0x11e>
 800b1ce:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b1d2:	f300 80c8 	bgt.w	800b366 <pbuf_alloc+0x1b6>
 800b1d6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b1da:	d010      	beq.n	800b1fe <pbuf_alloc+0x4e>
 800b1dc:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b1e0:	f300 80c1 	bgt.w	800b366 <pbuf_alloc+0x1b6>
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d002      	beq.n	800b1ee <pbuf_alloc+0x3e>
 800b1e8:	2b41      	cmp	r3, #65	@ 0x41
 800b1ea:	f040 80bc 	bne.w	800b366 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b1ee:	887a      	ldrh	r2, [r7, #2]
 800b1f0:	88bb      	ldrh	r3, [r7, #4]
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	2000      	movs	r0, #0
 800b1f6:	f000 f8d1 	bl	800b39c <pbuf_alloc_reference>
 800b1fa:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800b1fc:	e0bd      	b.n	800b37a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b1fe:	2300      	movs	r3, #0
 800b200:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800b202:	2300      	movs	r3, #0
 800b204:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b206:	88bb      	ldrh	r3, [r7, #4]
 800b208:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b20a:	2008      	movs	r0, #8
 800b20c:	f7ff fad8 	bl	800a7c0 <memp_malloc>
 800b210:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d109      	bne.n	800b22c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b218:	f7ff ff94 	bl	800b144 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d002      	beq.n	800b228 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b222:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b224:	f000 faa8 	bl	800b778 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b228:	2300      	movs	r3, #0
 800b22a:	e0a7      	b.n	800b37c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b22c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b22e:	3303      	adds	r3, #3
 800b230:	b29b      	uxth	r3, r3
 800b232:	f023 0303 	bic.w	r3, r3, #3
 800b236:	b29b      	uxth	r3, r3
 800b238:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	8b7a      	ldrh	r2, [r7, #26]
 800b240:	4293      	cmp	r3, r2
 800b242:	bf28      	it	cs
 800b244:	4613      	movcs	r3, r2
 800b246:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b248:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b24a:	3310      	adds	r3, #16
 800b24c:	693a      	ldr	r2, [r7, #16]
 800b24e:	4413      	add	r3, r2
 800b250:	3303      	adds	r3, #3
 800b252:	f023 0303 	bic.w	r3, r3, #3
 800b256:	4618      	mov	r0, r3
 800b258:	89f9      	ldrh	r1, [r7, #14]
 800b25a:	8b7a      	ldrh	r2, [r7, #26]
 800b25c:	2300      	movs	r3, #0
 800b25e:	9301      	str	r3, [sp, #4]
 800b260:	887b      	ldrh	r3, [r7, #2]
 800b262:	9300      	str	r3, [sp, #0]
 800b264:	460b      	mov	r3, r1
 800b266:	4601      	mov	r1, r0
 800b268:	6938      	ldr	r0, [r7, #16]
 800b26a:	f7ff ff77 	bl	800b15c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	f003 0303 	and.w	r3, r3, #3
 800b276:	2b00      	cmp	r3, #0
 800b278:	d006      	beq.n	800b288 <pbuf_alloc+0xd8>
 800b27a:	4b42      	ldr	r3, [pc, #264]	@ (800b384 <pbuf_alloc+0x1d4>)
 800b27c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b280:	4941      	ldr	r1, [pc, #260]	@ (800b388 <pbuf_alloc+0x1d8>)
 800b282:	4842      	ldr	r0, [pc, #264]	@ (800b38c <pbuf_alloc+0x1dc>)
 800b284:	f009 fe30 	bl	8014ee8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b288:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b28a:	3303      	adds	r3, #3
 800b28c:	f023 0303 	bic.w	r3, r3, #3
 800b290:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800b294:	d106      	bne.n	800b2a4 <pbuf_alloc+0xf4>
 800b296:	4b3b      	ldr	r3, [pc, #236]	@ (800b384 <pbuf_alloc+0x1d4>)
 800b298:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800b29c:	493c      	ldr	r1, [pc, #240]	@ (800b390 <pbuf_alloc+0x1e0>)
 800b29e:	483b      	ldr	r0, [pc, #236]	@ (800b38c <pbuf_alloc+0x1dc>)
 800b2a0:	f009 fe22 	bl	8014ee8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d102      	bne.n	800b2b0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2ae:	e002      	b.n	800b2b6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b2b0:	69fb      	ldr	r3, [r7, #28]
 800b2b2:	693a      	ldr	r2, [r7, #16]
 800b2b4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b2ba:	8b7a      	ldrh	r2, [r7, #26]
 800b2bc:	89fb      	ldrh	r3, [r7, #14]
 800b2be:	1ad3      	subs	r3, r2, r3
 800b2c0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800b2c6:	8b7b      	ldrh	r3, [r7, #26]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d19e      	bne.n	800b20a <pbuf_alloc+0x5a>
      break;
 800b2cc:	e055      	b.n	800b37a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b2ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b2d0:	3303      	adds	r3, #3
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	f023 0303 	bic.w	r3, r3, #3
 800b2d8:	b29a      	uxth	r2, r3
 800b2da:	88bb      	ldrh	r3, [r7, #4]
 800b2dc:	3303      	adds	r3, #3
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	f023 0303 	bic.w	r3, r3, #3
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	4413      	add	r3, r2
 800b2e8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b2ea:	8b3b      	ldrh	r3, [r7, #24]
 800b2ec:	3310      	adds	r3, #16
 800b2ee:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b2f0:	8b3a      	ldrh	r2, [r7, #24]
 800b2f2:	88bb      	ldrh	r3, [r7, #4]
 800b2f4:	3303      	adds	r3, #3
 800b2f6:	f023 0303 	bic.w	r3, r3, #3
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d306      	bcc.n	800b30c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b2fe:	8afa      	ldrh	r2, [r7, #22]
 800b300:	88bb      	ldrh	r3, [r7, #4]
 800b302:	3303      	adds	r3, #3
 800b304:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b308:	429a      	cmp	r2, r3
 800b30a:	d201      	bcs.n	800b310 <pbuf_alloc+0x160>
        return NULL;
 800b30c:	2300      	movs	r3, #0
 800b30e:	e035      	b.n	800b37c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b310:	8afb      	ldrh	r3, [r7, #22]
 800b312:	4618      	mov	r0, r3
 800b314:	f7ff f8c4 	bl	800a4a0 <mem_malloc>
 800b318:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800b31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d101      	bne.n	800b324 <pbuf_alloc+0x174>
        return NULL;
 800b320:	2300      	movs	r3, #0
 800b322:	e02b      	b.n	800b37c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b324:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b326:	3310      	adds	r3, #16
 800b328:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b32a:	4413      	add	r3, r2
 800b32c:	3303      	adds	r3, #3
 800b32e:	f023 0303 	bic.w	r3, r3, #3
 800b332:	4618      	mov	r0, r3
 800b334:	88b9      	ldrh	r1, [r7, #4]
 800b336:	88ba      	ldrh	r2, [r7, #4]
 800b338:	2300      	movs	r3, #0
 800b33a:	9301      	str	r3, [sp, #4]
 800b33c:	887b      	ldrh	r3, [r7, #2]
 800b33e:	9300      	str	r3, [sp, #0]
 800b340:	460b      	mov	r3, r1
 800b342:	4601      	mov	r1, r0
 800b344:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b346:	f7ff ff09 	bl	800b15c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	f003 0303 	and.w	r3, r3, #3
 800b352:	2b00      	cmp	r3, #0
 800b354:	d010      	beq.n	800b378 <pbuf_alloc+0x1c8>
 800b356:	4b0b      	ldr	r3, [pc, #44]	@ (800b384 <pbuf_alloc+0x1d4>)
 800b358:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800b35c:	490d      	ldr	r1, [pc, #52]	@ (800b394 <pbuf_alloc+0x1e4>)
 800b35e:	480b      	ldr	r0, [pc, #44]	@ (800b38c <pbuf_alloc+0x1dc>)
 800b360:	f009 fdc2 	bl	8014ee8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b364:	e008      	b.n	800b378 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b366:	4b07      	ldr	r3, [pc, #28]	@ (800b384 <pbuf_alloc+0x1d4>)
 800b368:	f240 1227 	movw	r2, #295	@ 0x127
 800b36c:	490a      	ldr	r1, [pc, #40]	@ (800b398 <pbuf_alloc+0x1e8>)
 800b36e:	4807      	ldr	r0, [pc, #28]	@ (800b38c <pbuf_alloc+0x1dc>)
 800b370:	f009 fdba 	bl	8014ee8 <iprintf>
      return NULL;
 800b374:	2300      	movs	r3, #0
 800b376:	e001      	b.n	800b37c <pbuf_alloc+0x1cc>
      break;
 800b378:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3728      	adds	r7, #40	@ 0x28
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}
 800b384:	08016750 	.word	0x08016750
 800b388:	08016780 	.word	0x08016780
 800b38c:	080167b0 	.word	0x080167b0
 800b390:	080167d8 	.word	0x080167d8
 800b394:	0801680c 	.word	0x0801680c
 800b398:	08016838 	.word	0x08016838

0800b39c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b086      	sub	sp, #24
 800b3a0:	af02      	add	r7, sp, #8
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	460b      	mov	r3, r1
 800b3a6:	807b      	strh	r3, [r7, #2]
 800b3a8:	4613      	mov	r3, r2
 800b3aa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b3ac:	883b      	ldrh	r3, [r7, #0]
 800b3ae:	2b41      	cmp	r3, #65	@ 0x41
 800b3b0:	d009      	beq.n	800b3c6 <pbuf_alloc_reference+0x2a>
 800b3b2:	883b      	ldrh	r3, [r7, #0]
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d006      	beq.n	800b3c6 <pbuf_alloc_reference+0x2a>
 800b3b8:	4b0f      	ldr	r3, [pc, #60]	@ (800b3f8 <pbuf_alloc_reference+0x5c>)
 800b3ba:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800b3be:	490f      	ldr	r1, [pc, #60]	@ (800b3fc <pbuf_alloc_reference+0x60>)
 800b3c0:	480f      	ldr	r0, [pc, #60]	@ (800b400 <pbuf_alloc_reference+0x64>)
 800b3c2:	f009 fd91 	bl	8014ee8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b3c6:	2007      	movs	r0, #7
 800b3c8:	f7ff f9fa 	bl	800a7c0 <memp_malloc>
 800b3cc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d101      	bne.n	800b3d8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	e00b      	b.n	800b3f0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b3d8:	8879      	ldrh	r1, [r7, #2]
 800b3da:	887a      	ldrh	r2, [r7, #2]
 800b3dc:	2300      	movs	r3, #0
 800b3de:	9301      	str	r3, [sp, #4]
 800b3e0:	883b      	ldrh	r3, [r7, #0]
 800b3e2:	9300      	str	r3, [sp, #0]
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	6879      	ldr	r1, [r7, #4]
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	f7ff feb7 	bl	800b15c <pbuf_init_alloced_pbuf>
  return p;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3710      	adds	r7, #16
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}
 800b3f8:	08016750 	.word	0x08016750
 800b3fc:	08016854 	.word	0x08016854
 800b400:	080167b0 	.word	0x080167b0

0800b404 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b088      	sub	sp, #32
 800b408:	af02      	add	r7, sp, #8
 800b40a:	607b      	str	r3, [r7, #4]
 800b40c:	4603      	mov	r3, r0
 800b40e:	73fb      	strb	r3, [r7, #15]
 800b410:	460b      	mov	r3, r1
 800b412:	81bb      	strh	r3, [r7, #12]
 800b414:	4613      	mov	r3, r2
 800b416:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b418:	7bfb      	ldrb	r3, [r7, #15]
 800b41a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b41c:	8a7b      	ldrh	r3, [r7, #18]
 800b41e:	3303      	adds	r3, #3
 800b420:	f023 0203 	bic.w	r2, r3, #3
 800b424:	89bb      	ldrh	r3, [r7, #12]
 800b426:	441a      	add	r2, r3
 800b428:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d901      	bls.n	800b432 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b42e:	2300      	movs	r3, #0
 800b430:	e018      	b.n	800b464 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b432:	6a3b      	ldr	r3, [r7, #32]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d007      	beq.n	800b448 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b438:	8a7b      	ldrh	r3, [r7, #18]
 800b43a:	3303      	adds	r3, #3
 800b43c:	f023 0303 	bic.w	r3, r3, #3
 800b440:	6a3a      	ldr	r2, [r7, #32]
 800b442:	4413      	add	r3, r2
 800b444:	617b      	str	r3, [r7, #20]
 800b446:	e001      	b.n	800b44c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b448:	2300      	movs	r3, #0
 800b44a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	89b9      	ldrh	r1, [r7, #12]
 800b450:	89ba      	ldrh	r2, [r7, #12]
 800b452:	2302      	movs	r3, #2
 800b454:	9301      	str	r3, [sp, #4]
 800b456:	897b      	ldrh	r3, [r7, #10]
 800b458:	9300      	str	r3, [sp, #0]
 800b45a:	460b      	mov	r3, r1
 800b45c:	6979      	ldr	r1, [r7, #20]
 800b45e:	f7ff fe7d 	bl	800b15c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b462:	687b      	ldr	r3, [r7, #4]
}
 800b464:	4618      	mov	r0, r3
 800b466:	3718      	adds	r7, #24
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}

0800b46c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	460b      	mov	r3, r1
 800b476:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d106      	bne.n	800b48c <pbuf_realloc+0x20>
 800b47e:	4b3a      	ldr	r3, [pc, #232]	@ (800b568 <pbuf_realloc+0xfc>)
 800b480:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800b484:	4939      	ldr	r1, [pc, #228]	@ (800b56c <pbuf_realloc+0x100>)
 800b486:	483a      	ldr	r0, [pc, #232]	@ (800b570 <pbuf_realloc+0x104>)
 800b488:	f009 fd2e 	bl	8014ee8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	891b      	ldrh	r3, [r3, #8]
 800b490:	887a      	ldrh	r2, [r7, #2]
 800b492:	429a      	cmp	r2, r3
 800b494:	d263      	bcs.n	800b55e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	891a      	ldrh	r2, [r3, #8]
 800b49a:	887b      	ldrh	r3, [r7, #2]
 800b49c:	1ad3      	subs	r3, r2, r3
 800b49e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b4a0:	887b      	ldrh	r3, [r7, #2]
 800b4a2:	817b      	strh	r3, [r7, #10]
  q = p;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b4a8:	e018      	b.n	800b4dc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	895b      	ldrh	r3, [r3, #10]
 800b4ae:	897a      	ldrh	r2, [r7, #10]
 800b4b0:	1ad3      	subs	r3, r2, r3
 800b4b2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	891a      	ldrh	r2, [r3, #8]
 800b4b8:	893b      	ldrh	r3, [r7, #8]
 800b4ba:	1ad3      	subs	r3, r2, r3
 800b4bc:	b29a      	uxth	r2, r3
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d106      	bne.n	800b4dc <pbuf_realloc+0x70>
 800b4ce:	4b26      	ldr	r3, [pc, #152]	@ (800b568 <pbuf_realloc+0xfc>)
 800b4d0:	f240 12af 	movw	r2, #431	@ 0x1af
 800b4d4:	4927      	ldr	r1, [pc, #156]	@ (800b574 <pbuf_realloc+0x108>)
 800b4d6:	4826      	ldr	r0, [pc, #152]	@ (800b570 <pbuf_realloc+0x104>)
 800b4d8:	f009 fd06 	bl	8014ee8 <iprintf>
  while (rem_len > q->len) {
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	895b      	ldrh	r3, [r3, #10]
 800b4e0:	897a      	ldrh	r2, [r7, #10]
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d8e1      	bhi.n	800b4aa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	7b1b      	ldrb	r3, [r3, #12]
 800b4ea:	f003 030f 	and.w	r3, r3, #15
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d121      	bne.n	800b536 <pbuf_realloc+0xca>
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	895b      	ldrh	r3, [r3, #10]
 800b4f6:	897a      	ldrh	r2, [r7, #10]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d01c      	beq.n	800b536 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	7b5b      	ldrb	r3, [r3, #13]
 800b500:	f003 0302 	and.w	r3, r3, #2
 800b504:	2b00      	cmp	r3, #0
 800b506:	d116      	bne.n	800b536 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	685a      	ldr	r2, [r3, #4]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	1ad3      	subs	r3, r2, r3
 800b510:	b29a      	uxth	r2, r3
 800b512:	897b      	ldrh	r3, [r7, #10]
 800b514:	4413      	add	r3, r2
 800b516:	b29b      	uxth	r3, r3
 800b518:	4619      	mov	r1, r3
 800b51a:	68f8      	ldr	r0, [r7, #12]
 800b51c:	f7fe fec4 	bl	800a2a8 <mem_trim>
 800b520:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d106      	bne.n	800b536 <pbuf_realloc+0xca>
 800b528:	4b0f      	ldr	r3, [pc, #60]	@ (800b568 <pbuf_realloc+0xfc>)
 800b52a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800b52e:	4912      	ldr	r1, [pc, #72]	@ (800b578 <pbuf_realloc+0x10c>)
 800b530:	480f      	ldr	r0, [pc, #60]	@ (800b570 <pbuf_realloc+0x104>)
 800b532:	f009 fcd9 	bl	8014ee8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	897a      	ldrh	r2, [r7, #10]
 800b53a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	895a      	ldrh	r2, [r3, #10]
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d004      	beq.n	800b556 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4618      	mov	r0, r3
 800b552:	f000 f911 	bl	800b778 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2200      	movs	r2, #0
 800b55a:	601a      	str	r2, [r3, #0]
 800b55c:	e000      	b.n	800b560 <pbuf_realloc+0xf4>
    return;
 800b55e:	bf00      	nop

}
 800b560:	3710      	adds	r7, #16
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	08016750 	.word	0x08016750
 800b56c:	08016868 	.word	0x08016868
 800b570:	080167b0 	.word	0x080167b0
 800b574:	08016880 	.word	0x08016880
 800b578:	08016898 	.word	0x08016898

0800b57c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b086      	sub	sp, #24
 800b580:	af00      	add	r7, sp, #0
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	60b9      	str	r1, [r7, #8]
 800b586:	4613      	mov	r3, r2
 800b588:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d106      	bne.n	800b59e <pbuf_add_header_impl+0x22>
 800b590:	4b2b      	ldr	r3, [pc, #172]	@ (800b640 <pbuf_add_header_impl+0xc4>)
 800b592:	f240 12df 	movw	r2, #479	@ 0x1df
 800b596:	492b      	ldr	r1, [pc, #172]	@ (800b644 <pbuf_add_header_impl+0xc8>)
 800b598:	482b      	ldr	r0, [pc, #172]	@ (800b648 <pbuf_add_header_impl+0xcc>)
 800b59a:	f009 fca5 	bl	8014ee8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d003      	beq.n	800b5ac <pbuf_add_header_impl+0x30>
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5aa:	d301      	bcc.n	800b5b0 <pbuf_add_header_impl+0x34>
    return 1;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	e043      	b.n	800b638 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d101      	bne.n	800b5ba <pbuf_add_header_impl+0x3e>
    return 0;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	e03e      	b.n	800b638 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	891a      	ldrh	r2, [r3, #8]
 800b5c2:	8a7b      	ldrh	r3, [r7, #18]
 800b5c4:	4413      	add	r3, r2
 800b5c6:	b29b      	uxth	r3, r3
 800b5c8:	8a7a      	ldrh	r2, [r7, #18]
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d901      	bls.n	800b5d2 <pbuf_add_header_impl+0x56>
    return 1;
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	e032      	b.n	800b638 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	7b1b      	ldrb	r3, [r3, #12]
 800b5d6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b5d8:	8a3b      	ldrh	r3, [r7, #16]
 800b5da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d00c      	beq.n	800b5fc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	685a      	ldr	r2, [r3, #4]
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	425b      	negs	r3, r3
 800b5ea:	4413      	add	r3, r2
 800b5ec:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	3310      	adds	r3, #16
 800b5f2:	697a      	ldr	r2, [r7, #20]
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d20d      	bcs.n	800b614 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	e01d      	b.n	800b638 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b5fc:	79fb      	ldrb	r3, [r7, #7]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d006      	beq.n	800b610 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	685a      	ldr	r2, [r3, #4]
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	425b      	negs	r3, r3
 800b60a:	4413      	add	r3, r2
 800b60c:	617b      	str	r3, [r7, #20]
 800b60e:	e001      	b.n	800b614 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b610:	2301      	movs	r3, #1
 800b612:	e011      	b.n	800b638 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	697a      	ldr	r2, [r7, #20]
 800b618:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	895a      	ldrh	r2, [r3, #10]
 800b61e:	8a7b      	ldrh	r3, [r7, #18]
 800b620:	4413      	add	r3, r2
 800b622:	b29a      	uxth	r2, r3
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	891a      	ldrh	r2, [r3, #8]
 800b62c:	8a7b      	ldrh	r3, [r7, #18]
 800b62e:	4413      	add	r3, r2
 800b630:	b29a      	uxth	r2, r3
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	811a      	strh	r2, [r3, #8]


  return 0;
 800b636:	2300      	movs	r3, #0
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3718      	adds	r7, #24
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	08016750 	.word	0x08016750
 800b644:	080168b4 	.word	0x080168b4
 800b648:	080167b0 	.word	0x080167b0

0800b64c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b656:	2200      	movs	r2, #0
 800b658:	6839      	ldr	r1, [r7, #0]
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f7ff ff8e 	bl	800b57c <pbuf_add_header_impl>
 800b660:	4603      	mov	r3, r0
}
 800b662:	4618      	mov	r0, r3
 800b664:	3708      	adds	r7, #8
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
	...

0800b66c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d106      	bne.n	800b68a <pbuf_remove_header+0x1e>
 800b67c:	4b20      	ldr	r3, [pc, #128]	@ (800b700 <pbuf_remove_header+0x94>)
 800b67e:	f240 224b 	movw	r2, #587	@ 0x24b
 800b682:	4920      	ldr	r1, [pc, #128]	@ (800b704 <pbuf_remove_header+0x98>)
 800b684:	4820      	ldr	r0, [pc, #128]	@ (800b708 <pbuf_remove_header+0x9c>)
 800b686:	f009 fc2f 	bl	8014ee8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d003      	beq.n	800b698 <pbuf_remove_header+0x2c>
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b696:	d301      	bcc.n	800b69c <pbuf_remove_header+0x30>
    return 1;
 800b698:	2301      	movs	r3, #1
 800b69a:	e02c      	b.n	800b6f6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d101      	bne.n	800b6a6 <pbuf_remove_header+0x3a>
    return 0;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	e027      	b.n	800b6f6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	895b      	ldrh	r3, [r3, #10]
 800b6ae:	89fa      	ldrh	r2, [r7, #14]
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d908      	bls.n	800b6c6 <pbuf_remove_header+0x5a>
 800b6b4:	4b12      	ldr	r3, [pc, #72]	@ (800b700 <pbuf_remove_header+0x94>)
 800b6b6:	f240 2255 	movw	r2, #597	@ 0x255
 800b6ba:	4914      	ldr	r1, [pc, #80]	@ (800b70c <pbuf_remove_header+0xa0>)
 800b6bc:	4812      	ldr	r0, [pc, #72]	@ (800b708 <pbuf_remove_header+0x9c>)
 800b6be:	f009 fc13 	bl	8014ee8 <iprintf>
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	e017      	b.n	800b6f6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	685a      	ldr	r2, [r3, #4]
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	441a      	add	r2, r3
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	895a      	ldrh	r2, [r3, #10]
 800b6dc:	89fb      	ldrh	r3, [r7, #14]
 800b6de:	1ad3      	subs	r3, r2, r3
 800b6e0:	b29a      	uxth	r2, r3
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	891a      	ldrh	r2, [r3, #8]
 800b6ea:	89fb      	ldrh	r3, [r7, #14]
 800b6ec:	1ad3      	subs	r3, r2, r3
 800b6ee:	b29a      	uxth	r2, r3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3710      	adds	r7, #16
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	bf00      	nop
 800b700:	08016750 	.word	0x08016750
 800b704:	080168b4 	.word	0x080168b4
 800b708:	080167b0 	.word	0x080167b0
 800b70c:	080168c0 	.word	0x080168c0

0800b710 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b082      	sub	sp, #8
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	460b      	mov	r3, r1
 800b71a:	807b      	strh	r3, [r7, #2]
 800b71c:	4613      	mov	r3, r2
 800b71e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b720:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b724:	2b00      	cmp	r3, #0
 800b726:	da08      	bge.n	800b73a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b728:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b72c:	425b      	negs	r3, r3
 800b72e:	4619      	mov	r1, r3
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f7ff ff9b 	bl	800b66c <pbuf_remove_header>
 800b736:	4603      	mov	r3, r0
 800b738:	e007      	b.n	800b74a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b73a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b73e:	787a      	ldrb	r2, [r7, #1]
 800b740:	4619      	mov	r1, r3
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f7ff ff1a 	bl	800b57c <pbuf_add_header_impl>
 800b748:	4603      	mov	r3, r0
  }
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3708      	adds	r7, #8
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}

0800b752 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b752:	b580      	push	{r7, lr}
 800b754:	b082      	sub	sp, #8
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
 800b75a:	460b      	mov	r3, r1
 800b75c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b75e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b762:	2201      	movs	r2, #1
 800b764:	4619      	mov	r1, r3
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f7ff ffd2 	bl	800b710 <pbuf_header_impl>
 800b76c:	4603      	mov	r3, r0
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3708      	adds	r7, #8
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
	...

0800b778 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b086      	sub	sp, #24
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d10b      	bne.n	800b79e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d106      	bne.n	800b79a <pbuf_free+0x22>
 800b78c:	4b38      	ldr	r3, [pc, #224]	@ (800b870 <pbuf_free+0xf8>)
 800b78e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800b792:	4938      	ldr	r1, [pc, #224]	@ (800b874 <pbuf_free+0xfc>)
 800b794:	4838      	ldr	r0, [pc, #224]	@ (800b878 <pbuf_free+0x100>)
 800b796:	f009 fba7 	bl	8014ee8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b79a:	2300      	movs	r3, #0
 800b79c:	e063      	b.n	800b866 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b7a2:	e05c      	b.n	800b85e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	7b9b      	ldrb	r3, [r3, #14]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d106      	bne.n	800b7ba <pbuf_free+0x42>
 800b7ac:	4b30      	ldr	r3, [pc, #192]	@ (800b870 <pbuf_free+0xf8>)
 800b7ae:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800b7b2:	4932      	ldr	r1, [pc, #200]	@ (800b87c <pbuf_free+0x104>)
 800b7b4:	4830      	ldr	r0, [pc, #192]	@ (800b878 <pbuf_free+0x100>)
 800b7b6:	f009 fb97 	bl	8014ee8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	7b9b      	ldrb	r3, [r3, #14]
 800b7be:	3b01      	subs	r3, #1
 800b7c0:	b2da      	uxtb	r2, r3
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	739a      	strb	r2, [r3, #14]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	7b9b      	ldrb	r3, [r3, #14]
 800b7ca:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b7cc:	7dbb      	ldrb	r3, [r7, #22]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d143      	bne.n	800b85a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	7b1b      	ldrb	r3, [r3, #12]
 800b7dc:	f003 030f 	and.w	r3, r3, #15
 800b7e0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	7b5b      	ldrb	r3, [r3, #13]
 800b7e6:	f003 0302 	and.w	r3, r3, #2
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d011      	beq.n	800b812 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	691b      	ldr	r3, [r3, #16]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d106      	bne.n	800b808 <pbuf_free+0x90>
 800b7fa:	4b1d      	ldr	r3, [pc, #116]	@ (800b870 <pbuf_free+0xf8>)
 800b7fc:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800b800:	491f      	ldr	r1, [pc, #124]	@ (800b880 <pbuf_free+0x108>)
 800b802:	481d      	ldr	r0, [pc, #116]	@ (800b878 <pbuf_free+0x100>)
 800b804:	f009 fb70 	bl	8014ee8 <iprintf>
        pc->custom_free_function(p);
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	691b      	ldr	r3, [r3, #16]
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	4798      	blx	r3
 800b810:	e01d      	b.n	800b84e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b812:	7bfb      	ldrb	r3, [r7, #15]
 800b814:	2b02      	cmp	r3, #2
 800b816:	d104      	bne.n	800b822 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800b818:	6879      	ldr	r1, [r7, #4]
 800b81a:	2008      	movs	r0, #8
 800b81c:	f7ff f840 	bl	800a8a0 <memp_free>
 800b820:	e015      	b.n	800b84e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b822:	7bfb      	ldrb	r3, [r7, #15]
 800b824:	2b01      	cmp	r3, #1
 800b826:	d104      	bne.n	800b832 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800b828:	6879      	ldr	r1, [r7, #4]
 800b82a:	2007      	movs	r0, #7
 800b82c:	f7ff f838 	bl	800a8a0 <memp_free>
 800b830:	e00d      	b.n	800b84e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b832:	7bfb      	ldrb	r3, [r7, #15]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d103      	bne.n	800b840 <pbuf_free+0xc8>
          mem_free(p);
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f7fe fccb 	bl	800a1d4 <mem_free>
 800b83e:	e006      	b.n	800b84e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b840:	4b0b      	ldr	r3, [pc, #44]	@ (800b870 <pbuf_free+0xf8>)
 800b842:	f240 320f 	movw	r2, #783	@ 0x30f
 800b846:	490f      	ldr	r1, [pc, #60]	@ (800b884 <pbuf_free+0x10c>)
 800b848:	480b      	ldr	r0, [pc, #44]	@ (800b878 <pbuf_free+0x100>)
 800b84a:	f009 fb4d 	bl	8014ee8 <iprintf>
        }
      }
      count++;
 800b84e:	7dfb      	ldrb	r3, [r7, #23]
 800b850:	3301      	adds	r3, #1
 800b852:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	607b      	str	r3, [r7, #4]
 800b858:	e001      	b.n	800b85e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b85a:	2300      	movs	r3, #0
 800b85c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d19f      	bne.n	800b7a4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b864:	7dfb      	ldrb	r3, [r7, #23]
}
 800b866:	4618      	mov	r0, r3
 800b868:	3718      	adds	r7, #24
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	08016750 	.word	0x08016750
 800b874:	080168b4 	.word	0x080168b4
 800b878:	080167b0 	.word	0x080167b0
 800b87c:	080168e0 	.word	0x080168e0
 800b880:	080168f8 	.word	0x080168f8
 800b884:	0801691c 	.word	0x0801691c

0800b888 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b888:	b480      	push	{r7}
 800b88a:	b085      	sub	sp, #20
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b890:	2300      	movs	r3, #0
 800b892:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b894:	e005      	b.n	800b8a2 <pbuf_clen+0x1a>
    ++len;
 800b896:	89fb      	ldrh	r3, [r7, #14]
 800b898:	3301      	adds	r3, #1
 800b89a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d1f6      	bne.n	800b896 <pbuf_clen+0xe>
  }
  return len;
 800b8a8:	89fb      	ldrh	r3, [r7, #14]
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3714      	adds	r7, #20
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr
	...

0800b8b8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b082      	sub	sp, #8
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d010      	beq.n	800b8e8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	7b9b      	ldrb	r3, [r3, #14]
 800b8ca:	3301      	adds	r3, #1
 800b8cc:	b2da      	uxtb	r2, r3
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	7b9b      	ldrb	r3, [r3, #14]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d106      	bne.n	800b8e8 <pbuf_ref+0x30>
 800b8da:	4b05      	ldr	r3, [pc, #20]	@ (800b8f0 <pbuf_ref+0x38>)
 800b8dc:	f240 3242 	movw	r2, #834	@ 0x342
 800b8e0:	4904      	ldr	r1, [pc, #16]	@ (800b8f4 <pbuf_ref+0x3c>)
 800b8e2:	4805      	ldr	r0, [pc, #20]	@ (800b8f8 <pbuf_ref+0x40>)
 800b8e4:	f009 fb00 	bl	8014ee8 <iprintf>
  }
}
 800b8e8:	bf00      	nop
 800b8ea:	3708      	adds	r7, #8
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}
 800b8f0:	08016750 	.word	0x08016750
 800b8f4:	08016930 	.word	0x08016930
 800b8f8:	080167b0 	.word	0x080167b0

0800b8fc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b084      	sub	sp, #16
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d002      	beq.n	800b912 <pbuf_cat+0x16>
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d107      	bne.n	800b922 <pbuf_cat+0x26>
 800b912:	4b20      	ldr	r3, [pc, #128]	@ (800b994 <pbuf_cat+0x98>)
 800b914:	f240 3259 	movw	r2, #857	@ 0x359
 800b918:	491f      	ldr	r1, [pc, #124]	@ (800b998 <pbuf_cat+0x9c>)
 800b91a:	4820      	ldr	r0, [pc, #128]	@ (800b99c <pbuf_cat+0xa0>)
 800b91c:	f009 fae4 	bl	8014ee8 <iprintf>
 800b920:	e034      	b.n	800b98c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	60fb      	str	r3, [r7, #12]
 800b926:	e00a      	b.n	800b93e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	891a      	ldrh	r2, [r3, #8]
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	891b      	ldrh	r3, [r3, #8]
 800b930:	4413      	add	r3, r2
 800b932:	b29a      	uxth	r2, r3
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	60fb      	str	r3, [r7, #12]
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d1f0      	bne.n	800b928 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	891a      	ldrh	r2, [r3, #8]
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	895b      	ldrh	r3, [r3, #10]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d006      	beq.n	800b960 <pbuf_cat+0x64>
 800b952:	4b10      	ldr	r3, [pc, #64]	@ (800b994 <pbuf_cat+0x98>)
 800b954:	f240 3262 	movw	r2, #866	@ 0x362
 800b958:	4911      	ldr	r1, [pc, #68]	@ (800b9a0 <pbuf_cat+0xa4>)
 800b95a:	4810      	ldr	r0, [pc, #64]	@ (800b99c <pbuf_cat+0xa0>)
 800b95c:	f009 fac4 	bl	8014ee8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d006      	beq.n	800b976 <pbuf_cat+0x7a>
 800b968:	4b0a      	ldr	r3, [pc, #40]	@ (800b994 <pbuf_cat+0x98>)
 800b96a:	f240 3263 	movw	r2, #867	@ 0x363
 800b96e:	490d      	ldr	r1, [pc, #52]	@ (800b9a4 <pbuf_cat+0xa8>)
 800b970:	480a      	ldr	r0, [pc, #40]	@ (800b99c <pbuf_cat+0xa0>)
 800b972:	f009 fab9 	bl	8014ee8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	891a      	ldrh	r2, [r3, #8]
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	891b      	ldrh	r3, [r3, #8]
 800b97e:	4413      	add	r3, r2
 800b980:	b29a      	uxth	r2, r3
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	683a      	ldr	r2, [r7, #0]
 800b98a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b98c:	3710      	adds	r7, #16
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	08016750 	.word	0x08016750
 800b998:	08016944 	.word	0x08016944
 800b99c:	080167b0 	.word	0x080167b0
 800b9a0:	0801697c 	.word	0x0801697c
 800b9a4:	080169ac 	.word	0x080169ac

0800b9a8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b082      	sub	sp, #8
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800b9b2:	6839      	ldr	r1, [r7, #0]
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f7ff ffa1 	bl	800b8fc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b9ba:	6838      	ldr	r0, [r7, #0]
 800b9bc:	f7ff ff7c 	bl	800b8b8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b9c0:	bf00      	nop
 800b9c2:	3708      	adds	r7, #8
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b086      	sub	sp, #24
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	617b      	str	r3, [r7, #20]
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d008      	beq.n	800b9f2 <pbuf_copy+0x2a>
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d005      	beq.n	800b9f2 <pbuf_copy+0x2a>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	891a      	ldrh	r2, [r3, #8]
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	891b      	ldrh	r3, [r3, #8]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d209      	bcs.n	800ba06 <pbuf_copy+0x3e>
 800b9f2:	4b57      	ldr	r3, [pc, #348]	@ (800bb50 <pbuf_copy+0x188>)
 800b9f4:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800b9f8:	4956      	ldr	r1, [pc, #344]	@ (800bb54 <pbuf_copy+0x18c>)
 800b9fa:	4857      	ldr	r0, [pc, #348]	@ (800bb58 <pbuf_copy+0x190>)
 800b9fc:	f009 fa74 	bl	8014ee8 <iprintf>
 800ba00:	f06f 030f 	mvn.w	r3, #15
 800ba04:	e09f      	b.n	800bb46 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	895b      	ldrh	r3, [r3, #10]
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	1ad2      	subs	r2, r2, r3
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	895b      	ldrh	r3, [r3, #10]
 800ba14:	4619      	mov	r1, r3
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	1acb      	subs	r3, r1, r3
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d306      	bcc.n	800ba2c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	895b      	ldrh	r3, [r3, #10]
 800ba22:	461a      	mov	r2, r3
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	1ad3      	subs	r3, r2, r3
 800ba28:	60fb      	str	r3, [r7, #12]
 800ba2a:	e005      	b.n	800ba38 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	895b      	ldrh	r3, [r3, #10]
 800ba30:	461a      	mov	r2, r3
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	1ad3      	subs	r3, r2, r3
 800ba36:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	685a      	ldr	r2, [r3, #4]
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	18d0      	adds	r0, r2, r3
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	685a      	ldr	r2, [r3, #4]
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	4413      	add	r3, r2
 800ba48:	68fa      	ldr	r2, [r7, #12]
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	f009 fc21 	bl	8015292 <memcpy>
    offset_to += len;
 800ba50:	697a      	ldr	r2, [r7, #20]
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	4413      	add	r3, r2
 800ba56:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ba58:	693a      	ldr	r2, [r7, #16]
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	4413      	add	r3, r2
 800ba5e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	895b      	ldrh	r3, [r3, #10]
 800ba64:	461a      	mov	r2, r3
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	d906      	bls.n	800ba7a <pbuf_copy+0xb2>
 800ba6c:	4b38      	ldr	r3, [pc, #224]	@ (800bb50 <pbuf_copy+0x188>)
 800ba6e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800ba72:	493a      	ldr	r1, [pc, #232]	@ (800bb5c <pbuf_copy+0x194>)
 800ba74:	4838      	ldr	r0, [pc, #224]	@ (800bb58 <pbuf_copy+0x190>)
 800ba76:	f009 fa37 	bl	8014ee8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	895b      	ldrh	r3, [r3, #10]
 800ba7e:	461a      	mov	r2, r3
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d906      	bls.n	800ba94 <pbuf_copy+0xcc>
 800ba86:	4b32      	ldr	r3, [pc, #200]	@ (800bb50 <pbuf_copy+0x188>)
 800ba88:	f240 32da 	movw	r2, #986	@ 0x3da
 800ba8c:	4934      	ldr	r1, [pc, #208]	@ (800bb60 <pbuf_copy+0x198>)
 800ba8e:	4832      	ldr	r0, [pc, #200]	@ (800bb58 <pbuf_copy+0x190>)
 800ba90:	f009 fa2a 	bl	8014ee8 <iprintf>
    if (offset_from >= p_from->len) {
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	895b      	ldrh	r3, [r3, #10]
 800ba98:	461a      	mov	r2, r3
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d304      	bcc.n	800baaa <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800baa0:	2300      	movs	r3, #0
 800baa2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	895b      	ldrh	r3, [r3, #10]
 800baae:	461a      	mov	r2, r3
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d114      	bne.n	800bae0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800bab6:	2300      	movs	r3, #0
 800bab8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d10c      	bne.n	800bae0 <pbuf_copy+0x118>
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d009      	beq.n	800bae0 <pbuf_copy+0x118>
 800bacc:	4b20      	ldr	r3, [pc, #128]	@ (800bb50 <pbuf_copy+0x188>)
 800bace:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800bad2:	4924      	ldr	r1, [pc, #144]	@ (800bb64 <pbuf_copy+0x19c>)
 800bad4:	4820      	ldr	r0, [pc, #128]	@ (800bb58 <pbuf_copy+0x190>)
 800bad6:	f009 fa07 	bl	8014ee8 <iprintf>
 800bada:	f06f 030f 	mvn.w	r3, #15
 800bade:	e032      	b.n	800bb46 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d013      	beq.n	800bb0e <pbuf_copy+0x146>
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	895a      	ldrh	r2, [r3, #10]
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	891b      	ldrh	r3, [r3, #8]
 800baee:	429a      	cmp	r2, r3
 800baf0:	d10d      	bne.n	800bb0e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d009      	beq.n	800bb0e <pbuf_copy+0x146>
 800bafa:	4b15      	ldr	r3, [pc, #84]	@ (800bb50 <pbuf_copy+0x188>)
 800bafc:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800bb00:	4919      	ldr	r1, [pc, #100]	@ (800bb68 <pbuf_copy+0x1a0>)
 800bb02:	4815      	ldr	r0, [pc, #84]	@ (800bb58 <pbuf_copy+0x190>)
 800bb04:	f009 f9f0 	bl	8014ee8 <iprintf>
 800bb08:	f06f 0305 	mvn.w	r3, #5
 800bb0c:	e01b      	b.n	800bb46 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d013      	beq.n	800bb3c <pbuf_copy+0x174>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	895a      	ldrh	r2, [r3, #10]
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	891b      	ldrh	r3, [r3, #8]
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d10d      	bne.n	800bb3c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d009      	beq.n	800bb3c <pbuf_copy+0x174>
 800bb28:	4b09      	ldr	r3, [pc, #36]	@ (800bb50 <pbuf_copy+0x188>)
 800bb2a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800bb2e:	490e      	ldr	r1, [pc, #56]	@ (800bb68 <pbuf_copy+0x1a0>)
 800bb30:	4809      	ldr	r0, [pc, #36]	@ (800bb58 <pbuf_copy+0x190>)
 800bb32:	f009 f9d9 	bl	8014ee8 <iprintf>
 800bb36:	f06f 0305 	mvn.w	r3, #5
 800bb3a:	e004      	b.n	800bb46 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	f47f af61 	bne.w	800ba06 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800bb44:	2300      	movs	r3, #0
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3718      	adds	r7, #24
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	08016750 	.word	0x08016750
 800bb54:	080169f8 	.word	0x080169f8
 800bb58:	080167b0 	.word	0x080167b0
 800bb5c:	08016a28 	.word	0x08016a28
 800bb60:	08016a40 	.word	0x08016a40
 800bb64:	08016a5c 	.word	0x08016a5c
 800bb68:	08016a6c 	.word	0x08016a6c

0800bb6c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b088      	sub	sp, #32
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	60f8      	str	r0, [r7, #12]
 800bb74:	60b9      	str	r1, [r7, #8]
 800bb76:	4611      	mov	r1, r2
 800bb78:	461a      	mov	r2, r3
 800bb7a:	460b      	mov	r3, r1
 800bb7c:	80fb      	strh	r3, [r7, #6]
 800bb7e:	4613      	mov	r3, r2
 800bb80:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800bb82:	2300      	movs	r3, #0
 800bb84:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800bb86:	2300      	movs	r3, #0
 800bb88:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d108      	bne.n	800bba2 <pbuf_copy_partial+0x36>
 800bb90:	4b2b      	ldr	r3, [pc, #172]	@ (800bc40 <pbuf_copy_partial+0xd4>)
 800bb92:	f240 420a 	movw	r2, #1034	@ 0x40a
 800bb96:	492b      	ldr	r1, [pc, #172]	@ (800bc44 <pbuf_copy_partial+0xd8>)
 800bb98:	482b      	ldr	r0, [pc, #172]	@ (800bc48 <pbuf_copy_partial+0xdc>)
 800bb9a:	f009 f9a5 	bl	8014ee8 <iprintf>
 800bb9e:	2300      	movs	r3, #0
 800bba0:	e04a      	b.n	800bc38 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d108      	bne.n	800bbba <pbuf_copy_partial+0x4e>
 800bba8:	4b25      	ldr	r3, [pc, #148]	@ (800bc40 <pbuf_copy_partial+0xd4>)
 800bbaa:	f240 420b 	movw	r2, #1035	@ 0x40b
 800bbae:	4927      	ldr	r1, [pc, #156]	@ (800bc4c <pbuf_copy_partial+0xe0>)
 800bbb0:	4825      	ldr	r0, [pc, #148]	@ (800bc48 <pbuf_copy_partial+0xdc>)
 800bbb2:	f009 f999 	bl	8014ee8 <iprintf>
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	e03e      	b.n	800bc38 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	61fb      	str	r3, [r7, #28]
 800bbbe:	e034      	b.n	800bc2a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800bbc0:	88bb      	ldrh	r3, [r7, #4]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d00a      	beq.n	800bbdc <pbuf_copy_partial+0x70>
 800bbc6:	69fb      	ldr	r3, [r7, #28]
 800bbc8:	895b      	ldrh	r3, [r3, #10]
 800bbca:	88ba      	ldrh	r2, [r7, #4]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d305      	bcc.n	800bbdc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800bbd0:	69fb      	ldr	r3, [r7, #28]
 800bbd2:	895b      	ldrh	r3, [r3, #10]
 800bbd4:	88ba      	ldrh	r2, [r7, #4]
 800bbd6:	1ad3      	subs	r3, r2, r3
 800bbd8:	80bb      	strh	r3, [r7, #4]
 800bbda:	e023      	b.n	800bc24 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800bbdc:	69fb      	ldr	r3, [r7, #28]
 800bbde:	895a      	ldrh	r2, [r3, #10]
 800bbe0:	88bb      	ldrh	r3, [r7, #4]
 800bbe2:	1ad3      	subs	r3, r2, r3
 800bbe4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800bbe6:	8b3a      	ldrh	r2, [r7, #24]
 800bbe8:	88fb      	ldrh	r3, [r7, #6]
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d901      	bls.n	800bbf2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800bbee:	88fb      	ldrh	r3, [r7, #6]
 800bbf0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800bbf2:	8b7b      	ldrh	r3, [r7, #26]
 800bbf4:	68ba      	ldr	r2, [r7, #8]
 800bbf6:	18d0      	adds	r0, r2, r3
 800bbf8:	69fb      	ldr	r3, [r7, #28]
 800bbfa:	685a      	ldr	r2, [r3, #4]
 800bbfc:	88bb      	ldrh	r3, [r7, #4]
 800bbfe:	4413      	add	r3, r2
 800bc00:	8b3a      	ldrh	r2, [r7, #24]
 800bc02:	4619      	mov	r1, r3
 800bc04:	f009 fb45 	bl	8015292 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bc08:	8afa      	ldrh	r2, [r7, #22]
 800bc0a:	8b3b      	ldrh	r3, [r7, #24]
 800bc0c:	4413      	add	r3, r2
 800bc0e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bc10:	8b7a      	ldrh	r2, [r7, #26]
 800bc12:	8b3b      	ldrh	r3, [r7, #24]
 800bc14:	4413      	add	r3, r2
 800bc16:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bc18:	88fa      	ldrh	r2, [r7, #6]
 800bc1a:	8b3b      	ldrh	r3, [r7, #24]
 800bc1c:	1ad3      	subs	r3, r2, r3
 800bc1e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bc20:	2300      	movs	r3, #0
 800bc22:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bc24:	69fb      	ldr	r3, [r7, #28]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	61fb      	str	r3, [r7, #28]
 800bc2a:	88fb      	ldrh	r3, [r7, #6]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d002      	beq.n	800bc36 <pbuf_copy_partial+0xca>
 800bc30:	69fb      	ldr	r3, [r7, #28]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d1c4      	bne.n	800bbc0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800bc36:	8afb      	ldrh	r3, [r7, #22]
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3720      	adds	r7, #32
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}
 800bc40:	08016750 	.word	0x08016750
 800bc44:	08016a98 	.word	0x08016a98
 800bc48:	080167b0 	.word	0x080167b0
 800bc4c:	08016ab8 	.word	0x08016ab8

0800bc50 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	4603      	mov	r3, r0
 800bc58:	603a      	str	r2, [r7, #0]
 800bc5a:	71fb      	strb	r3, [r7, #7]
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	8919      	ldrh	r1, [r3, #8]
 800bc64:	88ba      	ldrh	r2, [r7, #4]
 800bc66:	79fb      	ldrb	r3, [r7, #7]
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f7ff faa1 	bl	800b1b0 <pbuf_alloc>
 800bc6e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d101      	bne.n	800bc7a <pbuf_clone+0x2a>
    return NULL;
 800bc76:	2300      	movs	r3, #0
 800bc78:	e011      	b.n	800bc9e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800bc7a:	6839      	ldr	r1, [r7, #0]
 800bc7c:	68f8      	ldr	r0, [r7, #12]
 800bc7e:	f7ff fea3 	bl	800b9c8 <pbuf_copy>
 800bc82:	4603      	mov	r3, r0
 800bc84:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800bc86:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d006      	beq.n	800bc9c <pbuf_clone+0x4c>
 800bc8e:	4b06      	ldr	r3, [pc, #24]	@ (800bca8 <pbuf_clone+0x58>)
 800bc90:	f240 5224 	movw	r2, #1316	@ 0x524
 800bc94:	4905      	ldr	r1, [pc, #20]	@ (800bcac <pbuf_clone+0x5c>)
 800bc96:	4806      	ldr	r0, [pc, #24]	@ (800bcb0 <pbuf_clone+0x60>)
 800bc98:	f009 f926 	bl	8014ee8 <iprintf>
  return q;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3710      	adds	r7, #16
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	08016750 	.word	0x08016750
 800bcac:	08016bc4 	.word	0x08016bc4
 800bcb0:	080167b0 	.word	0x080167b0

0800bcb4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bcb8:	f009 f816 	bl	8014ce8 <rand>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	b29b      	uxth	r3, r3
 800bcc0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800bcca:	b29a      	uxth	r2, r3
 800bccc:	4b01      	ldr	r3, [pc, #4]	@ (800bcd4 <tcp_init+0x20>)
 800bcce:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bcd0:	bf00      	nop
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	20000064 	.word	0x20000064

0800bcd8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	7d1b      	ldrb	r3, [r3, #20]
 800bce4:	2b01      	cmp	r3, #1
 800bce6:	d105      	bne.n	800bcf4 <tcp_free+0x1c>
 800bce8:	4b06      	ldr	r3, [pc, #24]	@ (800bd04 <tcp_free+0x2c>)
 800bcea:	22d4      	movs	r2, #212	@ 0xd4
 800bcec:	4906      	ldr	r1, [pc, #24]	@ (800bd08 <tcp_free+0x30>)
 800bcee:	4807      	ldr	r0, [pc, #28]	@ (800bd0c <tcp_free+0x34>)
 800bcf0:	f009 f8fa 	bl	8014ee8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800bcf4:	6879      	ldr	r1, [r7, #4]
 800bcf6:	2001      	movs	r0, #1
 800bcf8:	f7fe fdd2 	bl	800a8a0 <memp_free>
}
 800bcfc:	bf00      	nop
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}
 800bd04:	08016c50 	.word	0x08016c50
 800bd08:	08016c80 	.word	0x08016c80
 800bd0c:	08016c94 	.word	0x08016c94

0800bd10 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	7d1b      	ldrb	r3, [r3, #20]
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d105      	bne.n	800bd2c <tcp_free_listen+0x1c>
 800bd20:	4b06      	ldr	r3, [pc, #24]	@ (800bd3c <tcp_free_listen+0x2c>)
 800bd22:	22df      	movs	r2, #223	@ 0xdf
 800bd24:	4906      	ldr	r1, [pc, #24]	@ (800bd40 <tcp_free_listen+0x30>)
 800bd26:	4807      	ldr	r0, [pc, #28]	@ (800bd44 <tcp_free_listen+0x34>)
 800bd28:	f009 f8de 	bl	8014ee8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800bd2c:	6879      	ldr	r1, [r7, #4]
 800bd2e:	2002      	movs	r0, #2
 800bd30:	f7fe fdb6 	bl	800a8a0 <memp_free>
}
 800bd34:	bf00      	nop
 800bd36:	3708      	adds	r7, #8
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}
 800bd3c:	08016c50 	.word	0x08016c50
 800bd40:	08016cbc 	.word	0x08016cbc
 800bd44:	08016c94 	.word	0x08016c94

0800bd48 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800bd4c:	f000 fea4 	bl	800ca98 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800bd50:	4b07      	ldr	r3, [pc, #28]	@ (800bd70 <tcp_tmr+0x28>)
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	3301      	adds	r3, #1
 800bd56:	b2da      	uxtb	r2, r3
 800bd58:	4b05      	ldr	r3, [pc, #20]	@ (800bd70 <tcp_tmr+0x28>)
 800bd5a:	701a      	strb	r2, [r3, #0]
 800bd5c:	4b04      	ldr	r3, [pc, #16]	@ (800bd70 <tcp_tmr+0x28>)
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	f003 0301 	and.w	r3, r3, #1
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d001      	beq.n	800bd6c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800bd68:	f000 fb54 	bl	800c414 <tcp_slowtmr>
  }
}
 800bd6c:	bf00      	nop
 800bd6e:	bd80      	pop	{r7, pc}
 800bd70:	20008371 	.word	0x20008371

0800bd74 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b084      	sub	sp, #16
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d105      	bne.n	800bd90 <tcp_remove_listener+0x1c>
 800bd84:	4b0d      	ldr	r3, [pc, #52]	@ (800bdbc <tcp_remove_listener+0x48>)
 800bd86:	22ff      	movs	r2, #255	@ 0xff
 800bd88:	490d      	ldr	r1, [pc, #52]	@ (800bdc0 <tcp_remove_listener+0x4c>)
 800bd8a:	480e      	ldr	r0, [pc, #56]	@ (800bdc4 <tcp_remove_listener+0x50>)
 800bd8c:	f009 f8ac 	bl	8014ee8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	60fb      	str	r3, [r7, #12]
 800bd94:	e00a      	b.n	800bdac <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bd9a:	683a      	ldr	r2, [r7, #0]
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d102      	bne.n	800bda6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2200      	movs	r2, #0
 800bda4:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	68db      	ldr	r3, [r3, #12]
 800bdaa:	60fb      	str	r3, [r7, #12]
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d1f1      	bne.n	800bd96 <tcp_remove_listener+0x22>
    }
  }
}
 800bdb2:	bf00      	nop
 800bdb4:	bf00      	nop
 800bdb6:	3710      	adds	r7, #16
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}
 800bdbc:	08016c50 	.word	0x08016c50
 800bdc0:	08016cd8 	.word	0x08016cd8
 800bdc4:	08016c94 	.word	0x08016c94

0800bdc8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d106      	bne.n	800bde4 <tcp_listen_closed+0x1c>
 800bdd6:	4b14      	ldr	r3, [pc, #80]	@ (800be28 <tcp_listen_closed+0x60>)
 800bdd8:	f240 1211 	movw	r2, #273	@ 0x111
 800bddc:	4913      	ldr	r1, [pc, #76]	@ (800be2c <tcp_listen_closed+0x64>)
 800bdde:	4814      	ldr	r0, [pc, #80]	@ (800be30 <tcp_listen_closed+0x68>)
 800bde0:	f009 f882 	bl	8014ee8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	7d1b      	ldrb	r3, [r3, #20]
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	d006      	beq.n	800bdfa <tcp_listen_closed+0x32>
 800bdec:	4b0e      	ldr	r3, [pc, #56]	@ (800be28 <tcp_listen_closed+0x60>)
 800bdee:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800bdf2:	4910      	ldr	r1, [pc, #64]	@ (800be34 <tcp_listen_closed+0x6c>)
 800bdf4:	480e      	ldr	r0, [pc, #56]	@ (800be30 <tcp_listen_closed+0x68>)
 800bdf6:	f009 f877 	bl	8014ee8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	60fb      	str	r3, [r7, #12]
 800bdfe:	e00b      	b.n	800be18 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800be00:	4a0d      	ldr	r2, [pc, #52]	@ (800be38 <tcp_listen_closed+0x70>)
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	6879      	ldr	r1, [r7, #4]
 800be0c:	4618      	mov	r0, r3
 800be0e:	f7ff ffb1 	bl	800bd74 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	3301      	adds	r3, #1
 800be16:	60fb      	str	r3, [r7, #12]
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2b03      	cmp	r3, #3
 800be1c:	d9f0      	bls.n	800be00 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800be1e:	bf00      	nop
 800be20:	bf00      	nop
 800be22:	3710      	adds	r7, #16
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}
 800be28:	08016c50 	.word	0x08016c50
 800be2c:	08016d00 	.word	0x08016d00
 800be30:	08016c94 	.word	0x08016c94
 800be34:	08016d0c 	.word	0x08016d0c
 800be38:	0801948c 	.word	0x0801948c

0800be3c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800be3c:	b5b0      	push	{r4, r5, r7, lr}
 800be3e:	b088      	sub	sp, #32
 800be40:	af04      	add	r7, sp, #16
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	460b      	mov	r3, r1
 800be46:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d106      	bne.n	800be5c <tcp_close_shutdown+0x20>
 800be4e:	4b63      	ldr	r3, [pc, #396]	@ (800bfdc <tcp_close_shutdown+0x1a0>)
 800be50:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800be54:	4962      	ldr	r1, [pc, #392]	@ (800bfe0 <tcp_close_shutdown+0x1a4>)
 800be56:	4863      	ldr	r0, [pc, #396]	@ (800bfe4 <tcp_close_shutdown+0x1a8>)
 800be58:	f009 f846 	bl	8014ee8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800be5c:	78fb      	ldrb	r3, [r7, #3]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d066      	beq.n	800bf30 <tcp_close_shutdown+0xf4>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	7d1b      	ldrb	r3, [r3, #20]
 800be66:	2b04      	cmp	r3, #4
 800be68:	d003      	beq.n	800be72 <tcp_close_shutdown+0x36>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	7d1b      	ldrb	r3, [r3, #20]
 800be6e:	2b07      	cmp	r3, #7
 800be70:	d15e      	bne.n	800bf30 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be76:	2b00      	cmp	r3, #0
 800be78:	d104      	bne.n	800be84 <tcp_close_shutdown+0x48>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be7e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800be82:	d055      	beq.n	800bf30 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	8b5b      	ldrh	r3, [r3, #26]
 800be88:	f003 0310 	and.w	r3, r3, #16
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d106      	bne.n	800be9e <tcp_close_shutdown+0x62>
 800be90:	4b52      	ldr	r3, [pc, #328]	@ (800bfdc <tcp_close_shutdown+0x1a0>)
 800be92:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800be96:	4954      	ldr	r1, [pc, #336]	@ (800bfe8 <tcp_close_shutdown+0x1ac>)
 800be98:	4852      	ldr	r0, [pc, #328]	@ (800bfe4 <tcp_close_shutdown+0x1a8>)
 800be9a:	f009 f825 	bl	8014ee8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800bea6:	687d      	ldr	r5, [r7, #4]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	3304      	adds	r3, #4
 800beac:	687a      	ldr	r2, [r7, #4]
 800beae:	8ad2      	ldrh	r2, [r2, #22]
 800beb0:	6879      	ldr	r1, [r7, #4]
 800beb2:	8b09      	ldrh	r1, [r1, #24]
 800beb4:	9102      	str	r1, [sp, #8]
 800beb6:	9201      	str	r2, [sp, #4]
 800beb8:	9300      	str	r3, [sp, #0]
 800beba:	462b      	mov	r3, r5
 800bebc:	4622      	mov	r2, r4
 800bebe:	4601      	mov	r1, r0
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f004 fea7 	bl	8010c14 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f001 f8c8 	bl	800d05c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800becc:	4b47      	ldr	r3, [pc, #284]	@ (800bfec <tcp_close_shutdown+0x1b0>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d105      	bne.n	800bee2 <tcp_close_shutdown+0xa6>
 800bed6:	4b45      	ldr	r3, [pc, #276]	@ (800bfec <tcp_close_shutdown+0x1b0>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	68db      	ldr	r3, [r3, #12]
 800bedc:	4a43      	ldr	r2, [pc, #268]	@ (800bfec <tcp_close_shutdown+0x1b0>)
 800bede:	6013      	str	r3, [r2, #0]
 800bee0:	e013      	b.n	800bf0a <tcp_close_shutdown+0xce>
 800bee2:	4b42      	ldr	r3, [pc, #264]	@ (800bfec <tcp_close_shutdown+0x1b0>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	60fb      	str	r3, [r7, #12]
 800bee8:	e00c      	b.n	800bf04 <tcp_close_shutdown+0xc8>
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	68db      	ldr	r3, [r3, #12]
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d104      	bne.n	800befe <tcp_close_shutdown+0xc2>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	68da      	ldr	r2, [r3, #12]
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	60da      	str	r2, [r3, #12]
 800befc:	e005      	b.n	800bf0a <tcp_close_shutdown+0xce>
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	68db      	ldr	r3, [r3, #12]
 800bf02:	60fb      	str	r3, [r7, #12]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d1ef      	bne.n	800beea <tcp_close_shutdown+0xae>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	60da      	str	r2, [r3, #12]
 800bf10:	4b37      	ldr	r3, [pc, #220]	@ (800bff0 <tcp_close_shutdown+0x1b4>)
 800bf12:	2201      	movs	r2, #1
 800bf14:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800bf16:	4b37      	ldr	r3, [pc, #220]	@ (800bff4 <tcp_close_shutdown+0x1b8>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	687a      	ldr	r2, [r7, #4]
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d102      	bne.n	800bf26 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800bf20:	f003 fd62 	bl	800f9e8 <tcp_trigger_input_pcb_close>
 800bf24:	e002      	b.n	800bf2c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f7ff fed6 	bl	800bcd8 <tcp_free>
      }
      return ERR_OK;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	e050      	b.n	800bfd2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	7d1b      	ldrb	r3, [r3, #20]
 800bf34:	2b02      	cmp	r3, #2
 800bf36:	d03b      	beq.n	800bfb0 <tcp_close_shutdown+0x174>
 800bf38:	2b02      	cmp	r3, #2
 800bf3a:	dc44      	bgt.n	800bfc6 <tcp_close_shutdown+0x18a>
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d002      	beq.n	800bf46 <tcp_close_shutdown+0x10a>
 800bf40:	2b01      	cmp	r3, #1
 800bf42:	d02a      	beq.n	800bf9a <tcp_close_shutdown+0x15e>
 800bf44:	e03f      	b.n	800bfc6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	8adb      	ldrh	r3, [r3, #22]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d021      	beq.n	800bf92 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bf4e:	4b2a      	ldr	r3, [pc, #168]	@ (800bff8 <tcp_close_shutdown+0x1bc>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	687a      	ldr	r2, [r7, #4]
 800bf54:	429a      	cmp	r2, r3
 800bf56:	d105      	bne.n	800bf64 <tcp_close_shutdown+0x128>
 800bf58:	4b27      	ldr	r3, [pc, #156]	@ (800bff8 <tcp_close_shutdown+0x1bc>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	68db      	ldr	r3, [r3, #12]
 800bf5e:	4a26      	ldr	r2, [pc, #152]	@ (800bff8 <tcp_close_shutdown+0x1bc>)
 800bf60:	6013      	str	r3, [r2, #0]
 800bf62:	e013      	b.n	800bf8c <tcp_close_shutdown+0x150>
 800bf64:	4b24      	ldr	r3, [pc, #144]	@ (800bff8 <tcp_close_shutdown+0x1bc>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	60bb      	str	r3, [r7, #8]
 800bf6a:	e00c      	b.n	800bf86 <tcp_close_shutdown+0x14a>
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	68db      	ldr	r3, [r3, #12]
 800bf70:	687a      	ldr	r2, [r7, #4]
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d104      	bne.n	800bf80 <tcp_close_shutdown+0x144>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	68da      	ldr	r2, [r3, #12]
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	60da      	str	r2, [r3, #12]
 800bf7e:	e005      	b.n	800bf8c <tcp_close_shutdown+0x150>
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	68db      	ldr	r3, [r3, #12]
 800bf84:	60bb      	str	r3, [r7, #8]
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d1ef      	bne.n	800bf6c <tcp_close_shutdown+0x130>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f7ff fea0 	bl	800bcd8 <tcp_free>
      break;
 800bf98:	e01a      	b.n	800bfd0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f7ff ff14 	bl	800bdc8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800bfa0:	6879      	ldr	r1, [r7, #4]
 800bfa2:	4816      	ldr	r0, [pc, #88]	@ (800bffc <tcp_close_shutdown+0x1c0>)
 800bfa4:	f001 f8aa 	bl	800d0fc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f7ff feb1 	bl	800bd10 <tcp_free_listen>
      break;
 800bfae:	e00f      	b.n	800bfd0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bfb0:	6879      	ldr	r1, [r7, #4]
 800bfb2:	480e      	ldr	r0, [pc, #56]	@ (800bfec <tcp_close_shutdown+0x1b0>)
 800bfb4:	f001 f8a2 	bl	800d0fc <tcp_pcb_remove>
 800bfb8:	4b0d      	ldr	r3, [pc, #52]	@ (800bff0 <tcp_close_shutdown+0x1b4>)
 800bfba:	2201      	movs	r2, #1
 800bfbc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f7ff fe8a 	bl	800bcd8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800bfc4:	e004      	b.n	800bfd0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 f81a 	bl	800c000 <tcp_close_shutdown_fin>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	e000      	b.n	800bfd2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800bfd0:	2300      	movs	r3, #0
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3710      	adds	r7, #16
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bdb0      	pop	{r4, r5, r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	08016c50 	.word	0x08016c50
 800bfe0:	08016d24 	.word	0x08016d24
 800bfe4:	08016c94 	.word	0x08016c94
 800bfe8:	08016d44 	.word	0x08016d44
 800bfec:	20008368 	.word	0x20008368
 800bff0:	20008370 	.word	0x20008370
 800bff4:	200083ac 	.word	0x200083ac
 800bff8:	20008360 	.word	0x20008360
 800bffc:	20008364 	.word	0x20008364

0800c000 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d106      	bne.n	800c01c <tcp_close_shutdown_fin+0x1c>
 800c00e:	4b2e      	ldr	r3, [pc, #184]	@ (800c0c8 <tcp_close_shutdown_fin+0xc8>)
 800c010:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800c014:	492d      	ldr	r1, [pc, #180]	@ (800c0cc <tcp_close_shutdown_fin+0xcc>)
 800c016:	482e      	ldr	r0, [pc, #184]	@ (800c0d0 <tcp_close_shutdown_fin+0xd0>)
 800c018:	f008 ff66 	bl	8014ee8 <iprintf>

  switch (pcb->state) {
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	7d1b      	ldrb	r3, [r3, #20]
 800c020:	2b07      	cmp	r3, #7
 800c022:	d020      	beq.n	800c066 <tcp_close_shutdown_fin+0x66>
 800c024:	2b07      	cmp	r3, #7
 800c026:	dc2b      	bgt.n	800c080 <tcp_close_shutdown_fin+0x80>
 800c028:	2b03      	cmp	r3, #3
 800c02a:	d002      	beq.n	800c032 <tcp_close_shutdown_fin+0x32>
 800c02c:	2b04      	cmp	r3, #4
 800c02e:	d00d      	beq.n	800c04c <tcp_close_shutdown_fin+0x4c>
 800c030:	e026      	b.n	800c080 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f003 fef0 	bl	800fe18 <tcp_send_fin>
 800c038:	4603      	mov	r3, r0
 800c03a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c03c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d11f      	bne.n	800c084 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2205      	movs	r2, #5
 800c048:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c04a:	e01b      	b.n	800c084 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f003 fee3 	bl	800fe18 <tcp_send_fin>
 800c052:	4603      	mov	r3, r0
 800c054:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d114      	bne.n	800c088 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2205      	movs	r2, #5
 800c062:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c064:	e010      	b.n	800c088 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f003 fed6 	bl	800fe18 <tcp_send_fin>
 800c06c:	4603      	mov	r3, r0
 800c06e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c070:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d109      	bne.n	800c08c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2209      	movs	r2, #9
 800c07c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c07e:	e005      	b.n	800c08c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c080:	2300      	movs	r3, #0
 800c082:	e01c      	b.n	800c0be <tcp_close_shutdown_fin+0xbe>
      break;
 800c084:	bf00      	nop
 800c086:	e002      	b.n	800c08e <tcp_close_shutdown_fin+0x8e>
      break;
 800c088:	bf00      	nop
 800c08a:	e000      	b.n	800c08e <tcp_close_shutdown_fin+0x8e>
      break;
 800c08c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c08e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d103      	bne.n	800c09e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f003 fffc 	bl	8010094 <tcp_output>
 800c09c:	e00d      	b.n	800c0ba <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c09e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c0a6:	d108      	bne.n	800c0ba <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	8b5b      	ldrh	r3, [r3, #26]
 800c0ac:	f043 0308 	orr.w	r3, r3, #8
 800c0b0:	b29a      	uxth	r2, r3
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	e001      	b.n	800c0be <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c0ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3710      	adds	r7, #16
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
 800c0c6:	bf00      	nop
 800c0c8:	08016c50 	.word	0x08016c50
 800c0cc:	08016d00 	.word	0x08016d00
 800c0d0:	08016c94 	.word	0x08016c94

0800c0d4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d109      	bne.n	800c0f6 <tcp_close+0x22>
 800c0e2:	4b0f      	ldr	r3, [pc, #60]	@ (800c120 <tcp_close+0x4c>)
 800c0e4:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800c0e8:	490e      	ldr	r1, [pc, #56]	@ (800c124 <tcp_close+0x50>)
 800c0ea:	480f      	ldr	r0, [pc, #60]	@ (800c128 <tcp_close+0x54>)
 800c0ec:	f008 fefc 	bl	8014ee8 <iprintf>
 800c0f0:	f06f 030f 	mvn.w	r3, #15
 800c0f4:	e00f      	b.n	800c116 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	7d1b      	ldrb	r3, [r3, #20]
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d006      	beq.n	800c10c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	8b5b      	ldrh	r3, [r3, #26]
 800c102:	f043 0310 	orr.w	r3, r3, #16
 800c106:	b29a      	uxth	r2, r3
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c10c:	2101      	movs	r1, #1
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f7ff fe94 	bl	800be3c <tcp_close_shutdown>
 800c114:	4603      	mov	r3, r0
}
 800c116:	4618      	mov	r0, r3
 800c118:	3708      	adds	r7, #8
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	08016c50 	.word	0x08016c50
 800c124:	08016d60 	.word	0x08016d60
 800c128:	08016c94 	.word	0x08016c94

0800c12c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b08e      	sub	sp, #56	@ 0x38
 800c130:	af04      	add	r7, sp, #16
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d107      	bne.n	800c14c <tcp_abandon+0x20>
 800c13c:	4b52      	ldr	r3, [pc, #328]	@ (800c288 <tcp_abandon+0x15c>)
 800c13e:	f240 223d 	movw	r2, #573	@ 0x23d
 800c142:	4952      	ldr	r1, [pc, #328]	@ (800c28c <tcp_abandon+0x160>)
 800c144:	4852      	ldr	r0, [pc, #328]	@ (800c290 <tcp_abandon+0x164>)
 800c146:	f008 fecf 	bl	8014ee8 <iprintf>
 800c14a:	e099      	b.n	800c280 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	7d1b      	ldrb	r3, [r3, #20]
 800c150:	2b01      	cmp	r3, #1
 800c152:	d106      	bne.n	800c162 <tcp_abandon+0x36>
 800c154:	4b4c      	ldr	r3, [pc, #304]	@ (800c288 <tcp_abandon+0x15c>)
 800c156:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800c15a:	494e      	ldr	r1, [pc, #312]	@ (800c294 <tcp_abandon+0x168>)
 800c15c:	484c      	ldr	r0, [pc, #304]	@ (800c290 <tcp_abandon+0x164>)
 800c15e:	f008 fec3 	bl	8014ee8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	7d1b      	ldrb	r3, [r3, #20]
 800c166:	2b0a      	cmp	r3, #10
 800c168:	d107      	bne.n	800c17a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c16a:	6879      	ldr	r1, [r7, #4]
 800c16c:	484a      	ldr	r0, [pc, #296]	@ (800c298 <tcp_abandon+0x16c>)
 800c16e:	f000 ffc5 	bl	800d0fc <tcp_pcb_remove>
    tcp_free(pcb);
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f7ff fdb0 	bl	800bcd8 <tcp_free>
 800c178:	e082      	b.n	800c280 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c17a:	2300      	movs	r3, #0
 800c17c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800c17e:	2300      	movs	r3, #0
 800c180:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c186:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c18c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c194:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	691b      	ldr	r3, [r3, #16]
 800c19a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	7d1b      	ldrb	r3, [r3, #20]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d126      	bne.n	800c1f2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	8adb      	ldrh	r3, [r3, #22]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d02e      	beq.n	800c20a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c1ac:	4b3b      	ldr	r3, [pc, #236]	@ (800c29c <tcp_abandon+0x170>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d105      	bne.n	800c1c2 <tcp_abandon+0x96>
 800c1b6:	4b39      	ldr	r3, [pc, #228]	@ (800c29c <tcp_abandon+0x170>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	68db      	ldr	r3, [r3, #12]
 800c1bc:	4a37      	ldr	r2, [pc, #220]	@ (800c29c <tcp_abandon+0x170>)
 800c1be:	6013      	str	r3, [r2, #0]
 800c1c0:	e013      	b.n	800c1ea <tcp_abandon+0xbe>
 800c1c2:	4b36      	ldr	r3, [pc, #216]	@ (800c29c <tcp_abandon+0x170>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	61fb      	str	r3, [r7, #28]
 800c1c8:	e00c      	b.n	800c1e4 <tcp_abandon+0xb8>
 800c1ca:	69fb      	ldr	r3, [r7, #28]
 800c1cc:	68db      	ldr	r3, [r3, #12]
 800c1ce:	687a      	ldr	r2, [r7, #4]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d104      	bne.n	800c1de <tcp_abandon+0xb2>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	68da      	ldr	r2, [r3, #12]
 800c1d8:	69fb      	ldr	r3, [r7, #28]
 800c1da:	60da      	str	r2, [r3, #12]
 800c1dc:	e005      	b.n	800c1ea <tcp_abandon+0xbe>
 800c1de:	69fb      	ldr	r3, [r7, #28]
 800c1e0:	68db      	ldr	r3, [r3, #12]
 800c1e2:	61fb      	str	r3, [r7, #28]
 800c1e4:	69fb      	ldr	r3, [r7, #28]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d1ef      	bne.n	800c1ca <tcp_abandon+0x9e>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	60da      	str	r2, [r3, #12]
 800c1f0:	e00b      	b.n	800c20a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	8adb      	ldrh	r3, [r3, #22]
 800c1fa:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c1fc:	6879      	ldr	r1, [r7, #4]
 800c1fe:	4828      	ldr	r0, [pc, #160]	@ (800c2a0 <tcp_abandon+0x174>)
 800c200:	f000 ff7c 	bl	800d0fc <tcp_pcb_remove>
 800c204:	4b27      	ldr	r3, [pc, #156]	@ (800c2a4 <tcp_abandon+0x178>)
 800c206:	2201      	movs	r2, #1
 800c208:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d004      	beq.n	800c21c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c216:	4618      	mov	r0, r3
 800c218:	f000 fd1e 	bl	800cc58 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c220:	2b00      	cmp	r3, #0
 800c222:	d004      	beq.n	800c22e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c228:	4618      	mov	r0, r3
 800c22a:	f000 fd15 	bl	800cc58 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c232:	2b00      	cmp	r3, #0
 800c234:	d004      	beq.n	800c240 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c23a:	4618      	mov	r0, r3
 800c23c:	f000 fd0c 	bl	800cc58 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c242:	2b00      	cmp	r3, #0
 800c244:	d00e      	beq.n	800c264 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c246:	6879      	ldr	r1, [r7, #4]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	3304      	adds	r3, #4
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	8b12      	ldrh	r2, [r2, #24]
 800c250:	9202      	str	r2, [sp, #8]
 800c252:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c254:	9201      	str	r2, [sp, #4]
 800c256:	9300      	str	r3, [sp, #0]
 800c258:	460b      	mov	r3, r1
 800c25a:	697a      	ldr	r2, [r7, #20]
 800c25c:	69b9      	ldr	r1, [r7, #24]
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f004 fcd8 	bl	8010c14 <tcp_rst>
    }
    last_state = pcb->state;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	7d1b      	ldrb	r3, [r3, #20]
 800c268:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f7ff fd34 	bl	800bcd8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d004      	beq.n	800c280 <tcp_abandon+0x154>
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	f06f 010c 	mvn.w	r1, #12
 800c27c:	68f8      	ldr	r0, [r7, #12]
 800c27e:	4798      	blx	r3
  }
}
 800c280:	3728      	adds	r7, #40	@ 0x28
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop
 800c288:	08016c50 	.word	0x08016c50
 800c28c:	08016d94 	.word	0x08016d94
 800c290:	08016c94 	.word	0x08016c94
 800c294:	08016db0 	.word	0x08016db0
 800c298:	2000836c 	.word	0x2000836c
 800c29c:	20008360 	.word	0x20008360
 800c2a0:	20008368 	.word	0x20008368
 800c2a4:	20008370 	.word	0x20008370

0800c2a8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b082      	sub	sp, #8
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c2b0:	2101      	movs	r1, #1
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f7ff ff3a 	bl	800c12c <tcp_abandon>
}
 800c2b8:	bf00      	nop
 800c2ba:	3708      	adds	r7, #8
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b084      	sub	sp, #16
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d106      	bne.n	800c2dc <tcp_update_rcv_ann_wnd+0x1c>
 800c2ce:	4b25      	ldr	r3, [pc, #148]	@ (800c364 <tcp_update_rcv_ann_wnd+0xa4>)
 800c2d0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800c2d4:	4924      	ldr	r1, [pc, #144]	@ (800c368 <tcp_update_rcv_ann_wnd+0xa8>)
 800c2d6:	4825      	ldr	r0, [pc, #148]	@ (800c36c <tcp_update_rcv_ann_wnd+0xac>)
 800c2d8:	f008 fe06 	bl	8014ee8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800c2e4:	4413      	add	r3, r2
 800c2e6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2ec:	687a      	ldr	r2, [r7, #4]
 800c2ee:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800c2f0:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800c2f4:	bf28      	it	cs
 800c2f6:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800c2fa:	b292      	uxth	r2, r2
 800c2fc:	4413      	add	r3, r2
 800c2fe:	68fa      	ldr	r2, [r7, #12]
 800c300:	1ad3      	subs	r3, r2, r3
 800c302:	2b00      	cmp	r3, #0
 800c304:	db08      	blt.n	800c318 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c312:	68fa      	ldr	r2, [r7, #12]
 800c314:	1ad3      	subs	r3, r2, r3
 800c316:	e020      	b.n	800c35a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c320:	1ad3      	subs	r3, r2, r3
 800c322:	2b00      	cmp	r3, #0
 800c324:	dd03      	ble.n	800c32e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2200      	movs	r2, #0
 800c32a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c32c:	e014      	b.n	800c358 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c336:	1ad3      	subs	r3, r2, r3
 800c338:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c340:	d306      	bcc.n	800c350 <tcp_update_rcv_ann_wnd+0x90>
 800c342:	4b08      	ldr	r3, [pc, #32]	@ (800c364 <tcp_update_rcv_ann_wnd+0xa4>)
 800c344:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800c348:	4909      	ldr	r1, [pc, #36]	@ (800c370 <tcp_update_rcv_ann_wnd+0xb0>)
 800c34a:	4808      	ldr	r0, [pc, #32]	@ (800c36c <tcp_update_rcv_ann_wnd+0xac>)
 800c34c:	f008 fdcc 	bl	8014ee8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	b29a      	uxth	r2, r3
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800c358:	2300      	movs	r3, #0
  }
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3710      	adds	r7, #16
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
 800c362:	bf00      	nop
 800c364:	08016c50 	.word	0x08016c50
 800c368:	08016eac 	.word	0x08016eac
 800c36c:	08016c94 	.word	0x08016c94
 800c370:	08016ed0 	.word	0x08016ed0

0800c374 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	460b      	mov	r3, r1
 800c37e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d107      	bne.n	800c396 <tcp_recved+0x22>
 800c386:	4b1f      	ldr	r3, [pc, #124]	@ (800c404 <tcp_recved+0x90>)
 800c388:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800c38c:	491e      	ldr	r1, [pc, #120]	@ (800c408 <tcp_recved+0x94>)
 800c38e:	481f      	ldr	r0, [pc, #124]	@ (800c40c <tcp_recved+0x98>)
 800c390:	f008 fdaa 	bl	8014ee8 <iprintf>
 800c394:	e032      	b.n	800c3fc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	7d1b      	ldrb	r3, [r3, #20]
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d106      	bne.n	800c3ac <tcp_recved+0x38>
 800c39e:	4b19      	ldr	r3, [pc, #100]	@ (800c404 <tcp_recved+0x90>)
 800c3a0:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800c3a4:	491a      	ldr	r1, [pc, #104]	@ (800c410 <tcp_recved+0x9c>)
 800c3a6:	4819      	ldr	r0, [pc, #100]	@ (800c40c <tcp_recved+0x98>)
 800c3a8:	f008 fd9e 	bl	8014ee8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c3b0:	887b      	ldrh	r3, [r7, #2]
 800c3b2:	4413      	add	r3, r2
 800c3b4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c3b6:	89fb      	ldrh	r3, [r7, #14]
 800c3b8:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c3bc:	d804      	bhi.n	800c3c8 <tcp_recved+0x54>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c3c2:	89fa      	ldrh	r2, [r7, #14]
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d204      	bcs.n	800c3d2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800c3ce:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c3d0:	e002      	b.n	800c3d8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	89fa      	ldrh	r2, [r7, #14]
 800c3d6:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f7ff ff71 	bl	800c2c0 <tcp_update_rcv_ann_wnd>
 800c3de:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800c3e6:	d309      	bcc.n	800c3fc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	8b5b      	ldrh	r3, [r3, #26]
 800c3ec:	f043 0302 	orr.w	r3, r3, #2
 800c3f0:	b29a      	uxth	r2, r3
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f003 fe4c 	bl	8010094 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c3fc:	3710      	adds	r7, #16
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
 800c402:	bf00      	nop
 800c404:	08016c50 	.word	0x08016c50
 800c408:	08016eec 	.word	0x08016eec
 800c40c:	08016c94 	.word	0x08016c94
 800c410:	08016f04 	.word	0x08016f04

0800c414 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c414:	b5b0      	push	{r4, r5, r7, lr}
 800c416:	b090      	sub	sp, #64	@ 0x40
 800c418:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c41a:	2300      	movs	r3, #0
 800c41c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800c420:	4b95      	ldr	r3, [pc, #596]	@ (800c678 <tcp_slowtmr+0x264>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	3301      	adds	r3, #1
 800c426:	4a94      	ldr	r2, [pc, #592]	@ (800c678 <tcp_slowtmr+0x264>)
 800c428:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c42a:	4b94      	ldr	r3, [pc, #592]	@ (800c67c <tcp_slowtmr+0x268>)
 800c42c:	781b      	ldrb	r3, [r3, #0]
 800c42e:	3301      	adds	r3, #1
 800c430:	b2da      	uxtb	r2, r3
 800c432:	4b92      	ldr	r3, [pc, #584]	@ (800c67c <tcp_slowtmr+0x268>)
 800c434:	701a      	strb	r2, [r3, #0]
 800c436:	e000      	b.n	800c43a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800c438:	bf00      	nop
  prev = NULL;
 800c43a:	2300      	movs	r3, #0
 800c43c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800c43e:	4b90      	ldr	r3, [pc, #576]	@ (800c680 <tcp_slowtmr+0x26c>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800c444:	e29d      	b.n	800c982 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c448:	7d1b      	ldrb	r3, [r3, #20]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d106      	bne.n	800c45c <tcp_slowtmr+0x48>
 800c44e:	4b8d      	ldr	r3, [pc, #564]	@ (800c684 <tcp_slowtmr+0x270>)
 800c450:	f240 42be 	movw	r2, #1214	@ 0x4be
 800c454:	498c      	ldr	r1, [pc, #560]	@ (800c688 <tcp_slowtmr+0x274>)
 800c456:	488d      	ldr	r0, [pc, #564]	@ (800c68c <tcp_slowtmr+0x278>)
 800c458:	f008 fd46 	bl	8014ee8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c45c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c45e:	7d1b      	ldrb	r3, [r3, #20]
 800c460:	2b01      	cmp	r3, #1
 800c462:	d106      	bne.n	800c472 <tcp_slowtmr+0x5e>
 800c464:	4b87      	ldr	r3, [pc, #540]	@ (800c684 <tcp_slowtmr+0x270>)
 800c466:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800c46a:	4989      	ldr	r1, [pc, #548]	@ (800c690 <tcp_slowtmr+0x27c>)
 800c46c:	4887      	ldr	r0, [pc, #540]	@ (800c68c <tcp_slowtmr+0x278>)
 800c46e:	f008 fd3b 	bl	8014ee8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c474:	7d1b      	ldrb	r3, [r3, #20]
 800c476:	2b0a      	cmp	r3, #10
 800c478:	d106      	bne.n	800c488 <tcp_slowtmr+0x74>
 800c47a:	4b82      	ldr	r3, [pc, #520]	@ (800c684 <tcp_slowtmr+0x270>)
 800c47c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800c480:	4984      	ldr	r1, [pc, #528]	@ (800c694 <tcp_slowtmr+0x280>)
 800c482:	4882      	ldr	r0, [pc, #520]	@ (800c68c <tcp_slowtmr+0x278>)
 800c484:	f008 fd30 	bl	8014ee8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c48a:	7f9a      	ldrb	r2, [r3, #30]
 800c48c:	4b7b      	ldr	r3, [pc, #492]	@ (800c67c <tcp_slowtmr+0x268>)
 800c48e:	781b      	ldrb	r3, [r3, #0]
 800c490:	429a      	cmp	r2, r3
 800c492:	d105      	bne.n	800c4a0 <tcp_slowtmr+0x8c>
      prev = pcb;
 800c494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c496:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800c498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c49a:	68db      	ldr	r3, [r3, #12]
 800c49c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800c49e:	e270      	b.n	800c982 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800c4a0:	4b76      	ldr	r3, [pc, #472]	@ (800c67c <tcp_slowtmr+0x268>)
 800c4a2:	781a      	ldrb	r2, [r3, #0]
 800c4a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4a6:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c4b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4b6:	7d1b      	ldrb	r3, [r3, #20]
 800c4b8:	2b02      	cmp	r3, #2
 800c4ba:	d10a      	bne.n	800c4d2 <tcp_slowtmr+0xbe>
 800c4bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c4c2:	2b05      	cmp	r3, #5
 800c4c4:	d905      	bls.n	800c4d2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800c4c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 800c4d0:	e11e      	b.n	800c710 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c4d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c4d8:	2b0b      	cmp	r3, #11
 800c4da:	d905      	bls.n	800c4e8 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800c4dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c4e0:	3301      	adds	r3, #1
 800c4e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c4e6:	e113      	b.n	800c710 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800c4e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4ea:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d075      	beq.n	800c5de <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c4f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d006      	beq.n	800c508 <tcp_slowtmr+0xf4>
 800c4fa:	4b62      	ldr	r3, [pc, #392]	@ (800c684 <tcp_slowtmr+0x270>)
 800c4fc:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800c500:	4965      	ldr	r1, [pc, #404]	@ (800c698 <tcp_slowtmr+0x284>)
 800c502:	4862      	ldr	r0, [pc, #392]	@ (800c68c <tcp_slowtmr+0x278>)
 800c504:	f008 fcf0 	bl	8014ee8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c50a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d106      	bne.n	800c51e <tcp_slowtmr+0x10a>
 800c510:	4b5c      	ldr	r3, [pc, #368]	@ (800c684 <tcp_slowtmr+0x270>)
 800c512:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800c516:	4961      	ldr	r1, [pc, #388]	@ (800c69c <tcp_slowtmr+0x288>)
 800c518:	485c      	ldr	r0, [pc, #368]	@ (800c68c <tcp_slowtmr+0x278>)
 800c51a:	f008 fce5 	bl	8014ee8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c51e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c520:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c524:	2b0b      	cmp	r3, #11
 800c526:	d905      	bls.n	800c534 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800c528:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c52c:	3301      	adds	r3, #1
 800c52e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c532:	e0ed      	b.n	800c710 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c536:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c53a:	3b01      	subs	r3, #1
 800c53c:	4a58      	ldr	r2, [pc, #352]	@ (800c6a0 <tcp_slowtmr+0x28c>)
 800c53e:	5cd3      	ldrb	r3, [r2, r3]
 800c540:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c544:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c548:	7c7a      	ldrb	r2, [r7, #17]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d907      	bls.n	800c55e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800c54e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c550:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c554:	3301      	adds	r3, #1
 800c556:	b2da      	uxtb	r2, r3
 800c558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c55a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800c55e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c560:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c564:	7c7a      	ldrb	r2, [r7, #17]
 800c566:	429a      	cmp	r2, r3
 800c568:	f200 80d2 	bhi.w	800c710 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800c56c:	2301      	movs	r3, #1
 800c56e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800c570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c572:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c576:	2b00      	cmp	r3, #0
 800c578:	d108      	bne.n	800c58c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c57a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c57c:	f004 fc3e 	bl	8010dfc <tcp_zero_window_probe>
 800c580:	4603      	mov	r3, r0
 800c582:	2b00      	cmp	r3, #0
 800c584:	d014      	beq.n	800c5b0 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800c586:	2300      	movs	r3, #0
 800c588:	623b      	str	r3, [r7, #32]
 800c58a:	e011      	b.n	800c5b0 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c58c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c58e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c592:	4619      	mov	r1, r3
 800c594:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c596:	f003 faf3 	bl	800fb80 <tcp_split_unsent_seg>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d107      	bne.n	800c5b0 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800c5a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c5a2:	f003 fd77 	bl	8010094 <tcp_output>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d101      	bne.n	800c5b0 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800c5b0:	6a3b      	ldr	r3, [r7, #32]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	f000 80ac 	beq.w	800c710 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800c5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c5c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5c2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c5c6:	2b06      	cmp	r3, #6
 800c5c8:	f200 80a2 	bhi.w	800c710 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800c5cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5ce:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	b2da      	uxtb	r2, r3
 800c5d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5d8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800c5dc:	e098      	b.n	800c710 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c5de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5e0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	db0f      	blt.n	800c608 <tcp_slowtmr+0x1f4>
 800c5e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5ea:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c5ee:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d008      	beq.n	800c608 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800c5f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5f8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c5fc:	b29b      	uxth	r3, r3
 800c5fe:	3301      	adds	r3, #1
 800c600:	b29b      	uxth	r3, r3
 800c602:	b21a      	sxth	r2, r3
 800c604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c606:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800c608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c60a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800c60e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c610:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800c614:	429a      	cmp	r2, r3
 800c616:	db7b      	blt.n	800c710 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c618:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c61a:	f004 f831 	bl	8010680 <tcp_rexmit_rto_prepare>
 800c61e:	4603      	mov	r3, r0
 800c620:	2b00      	cmp	r3, #0
 800c622:	d007      	beq.n	800c634 <tcp_slowtmr+0x220>
 800c624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d171      	bne.n	800c710 <tcp_slowtmr+0x2fc>
 800c62c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c62e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c630:	2b00      	cmp	r3, #0
 800c632:	d06d      	beq.n	800c710 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800c634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c636:	7d1b      	ldrb	r3, [r3, #20]
 800c638:	2b02      	cmp	r3, #2
 800c63a:	d03a      	beq.n	800c6b2 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c63c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c63e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c642:	2b0c      	cmp	r3, #12
 800c644:	bf28      	it	cs
 800c646:	230c      	movcs	r3, #12
 800c648:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c64a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c64c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c650:	10db      	asrs	r3, r3, #3
 800c652:	b21b      	sxth	r3, r3
 800c654:	461a      	mov	r2, r3
 800c656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c658:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c65c:	4413      	add	r3, r2
 800c65e:	7efa      	ldrb	r2, [r7, #27]
 800c660:	4910      	ldr	r1, [pc, #64]	@ (800c6a4 <tcp_slowtmr+0x290>)
 800c662:	5c8a      	ldrb	r2, [r1, r2]
 800c664:	4093      	lsls	r3, r2
 800c666:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800c66e:	4293      	cmp	r3, r2
 800c670:	dc1a      	bgt.n	800c6a8 <tcp_slowtmr+0x294>
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	b21a      	sxth	r2, r3
 800c676:	e019      	b.n	800c6ac <tcp_slowtmr+0x298>
 800c678:	2000835c 	.word	0x2000835c
 800c67c:	20008372 	.word	0x20008372
 800c680:	20008368 	.word	0x20008368
 800c684:	08016c50 	.word	0x08016c50
 800c688:	08016f94 	.word	0x08016f94
 800c68c:	08016c94 	.word	0x08016c94
 800c690:	08016fc0 	.word	0x08016fc0
 800c694:	08016fec 	.word	0x08016fec
 800c698:	0801701c 	.word	0x0801701c
 800c69c:	08017050 	.word	0x08017050
 800c6a0:	08019484 	.word	0x08019484
 800c6a4:	08019474 	.word	0x08019474
 800c6a8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c6ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800c6b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c6b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c6be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	bf28      	it	cs
 800c6c8:	4613      	movcs	r3, r2
 800c6ca:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c6cc:	8a7b      	ldrh	r3, [r7, #18]
 800c6ce:	085b      	lsrs	r3, r3, #1
 800c6d0:	b29a      	uxth	r2, r3
 800c6d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6d4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c6d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800c6de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c6e2:	005b      	lsls	r3, r3, #1
 800c6e4:	b29b      	uxth	r3, r3
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	d206      	bcs.n	800c6f8 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c6ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c6ee:	005b      	lsls	r3, r3, #1
 800c6f0:	b29a      	uxth	r2, r3
 800c6f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6f4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800c6f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6fa:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800c6fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6fe:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800c702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c704:	2200      	movs	r2, #0
 800c706:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800c70a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c70c:	f004 f832 	bl	8010774 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800c710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c712:	7d1b      	ldrb	r3, [r3, #20]
 800c714:	2b06      	cmp	r3, #6
 800c716:	d111      	bne.n	800c73c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800c718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c71a:	8b5b      	ldrh	r3, [r3, #26]
 800c71c:	f003 0310 	and.w	r3, r3, #16
 800c720:	2b00      	cmp	r3, #0
 800c722:	d00b      	beq.n	800c73c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c724:	4b9c      	ldr	r3, [pc, #624]	@ (800c998 <tcp_slowtmr+0x584>)
 800c726:	681a      	ldr	r2, [r3, #0]
 800c728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c72a:	6a1b      	ldr	r3, [r3, #32]
 800c72c:	1ad3      	subs	r3, r2, r3
 800c72e:	2b28      	cmp	r3, #40	@ 0x28
 800c730:	d904      	bls.n	800c73c <tcp_slowtmr+0x328>
          ++pcb_remove;
 800c732:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c736:	3301      	adds	r3, #1
 800c738:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c73c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c73e:	7a5b      	ldrb	r3, [r3, #9]
 800c740:	f003 0308 	and.w	r3, r3, #8
 800c744:	2b00      	cmp	r3, #0
 800c746:	d04a      	beq.n	800c7de <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800c748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c74a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c74c:	2b04      	cmp	r3, #4
 800c74e:	d003      	beq.n	800c758 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800c750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c752:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c754:	2b07      	cmp	r3, #7
 800c756:	d142      	bne.n	800c7de <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c758:	4b8f      	ldr	r3, [pc, #572]	@ (800c998 <tcp_slowtmr+0x584>)
 800c75a:	681a      	ldr	r2, [r3, #0]
 800c75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c75e:	6a1b      	ldr	r3, [r3, #32]
 800c760:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c764:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800c768:	4b8c      	ldr	r3, [pc, #560]	@ (800c99c <tcp_slowtmr+0x588>)
 800c76a:	440b      	add	r3, r1
 800c76c:	498c      	ldr	r1, [pc, #560]	@ (800c9a0 <tcp_slowtmr+0x58c>)
 800c76e:	fba1 1303 	umull	r1, r3, r1, r3
 800c772:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c774:	429a      	cmp	r2, r3
 800c776:	d90a      	bls.n	800c78e <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800c778:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c77c:	3301      	adds	r3, #1
 800c77e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800c782:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c786:	3301      	adds	r3, #1
 800c788:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c78c:	e027      	b.n	800c7de <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c78e:	4b82      	ldr	r3, [pc, #520]	@ (800c998 <tcp_slowtmr+0x584>)
 800c790:	681a      	ldr	r2, [r3, #0]
 800c792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c794:	6a1b      	ldr	r3, [r3, #32]
 800c796:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c79a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800c79e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7a0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	4b7f      	ldr	r3, [pc, #508]	@ (800c9a4 <tcp_slowtmr+0x590>)
 800c7a8:	fb00 f303 	mul.w	r3, r0, r3
 800c7ac:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c7ae:	497c      	ldr	r1, [pc, #496]	@ (800c9a0 <tcp_slowtmr+0x58c>)
 800c7b0:	fba1 1303 	umull	r1, r3, r1, r3
 800c7b4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d911      	bls.n	800c7de <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800c7ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c7bc:	f004 fade 	bl	8010d7c <tcp_keepalive>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800c7c6:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d107      	bne.n	800c7de <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800c7ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7d0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	b2da      	uxtb	r2, r3
 800c7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7da:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800c7de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d011      	beq.n	800c80a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c7e6:	4b6c      	ldr	r3, [pc, #432]	@ (800c998 <tcp_slowtmr+0x584>)
 800c7e8:	681a      	ldr	r2, [r3, #0]
 800c7ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7ec:	6a1b      	ldr	r3, [r3, #32]
 800c7ee:	1ad2      	subs	r2, r2, r3
 800c7f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7f2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800c7f6:	4619      	mov	r1, r3
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	005b      	lsls	r3, r3, #1
 800c7fc:	440b      	add	r3, r1
 800c7fe:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c800:	429a      	cmp	r2, r3
 800c802:	d302      	bcc.n	800c80a <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800c804:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c806:	f000 fde3 	bl	800d3d0 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800c80a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c80c:	7d1b      	ldrb	r3, [r3, #20]
 800c80e:	2b03      	cmp	r3, #3
 800c810:	d10b      	bne.n	800c82a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c812:	4b61      	ldr	r3, [pc, #388]	@ (800c998 <tcp_slowtmr+0x584>)
 800c814:	681a      	ldr	r2, [r3, #0]
 800c816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c818:	6a1b      	ldr	r3, [r3, #32]
 800c81a:	1ad3      	subs	r3, r2, r3
 800c81c:	2b28      	cmp	r3, #40	@ 0x28
 800c81e:	d904      	bls.n	800c82a <tcp_slowtmr+0x416>
        ++pcb_remove;
 800c820:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c824:	3301      	adds	r3, #1
 800c826:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800c82a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c82c:	7d1b      	ldrb	r3, [r3, #20]
 800c82e:	2b09      	cmp	r3, #9
 800c830:	d10b      	bne.n	800c84a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c832:	4b59      	ldr	r3, [pc, #356]	@ (800c998 <tcp_slowtmr+0x584>)
 800c834:	681a      	ldr	r2, [r3, #0]
 800c836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c838:	6a1b      	ldr	r3, [r3, #32]
 800c83a:	1ad3      	subs	r3, r2, r3
 800c83c:	2bf0      	cmp	r3, #240	@ 0xf0
 800c83e:	d904      	bls.n	800c84a <tcp_slowtmr+0x436>
        ++pcb_remove;
 800c840:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c844:	3301      	adds	r3, #1
 800c846:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800c84a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d060      	beq.n	800c914 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800c852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c858:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800c85a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c85c:	f000 fbfe 	bl	800d05c <tcp_pcb_purge>
      if (prev != NULL) {
 800c860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c862:	2b00      	cmp	r3, #0
 800c864:	d010      	beq.n	800c888 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c866:	4b50      	ldr	r3, [pc, #320]	@ (800c9a8 <tcp_slowtmr+0x594>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d106      	bne.n	800c87e <tcp_slowtmr+0x46a>
 800c870:	4b4e      	ldr	r3, [pc, #312]	@ (800c9ac <tcp_slowtmr+0x598>)
 800c872:	f240 526d 	movw	r2, #1389	@ 0x56d
 800c876:	494e      	ldr	r1, [pc, #312]	@ (800c9b0 <tcp_slowtmr+0x59c>)
 800c878:	484e      	ldr	r0, [pc, #312]	@ (800c9b4 <tcp_slowtmr+0x5a0>)
 800c87a:	f008 fb35 	bl	8014ee8 <iprintf>
        prev->next = pcb->next;
 800c87e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c880:	68da      	ldr	r2, [r3, #12]
 800c882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c884:	60da      	str	r2, [r3, #12]
 800c886:	e00f      	b.n	800c8a8 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c888:	4b47      	ldr	r3, [pc, #284]	@ (800c9a8 <tcp_slowtmr+0x594>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c88e:	429a      	cmp	r2, r3
 800c890:	d006      	beq.n	800c8a0 <tcp_slowtmr+0x48c>
 800c892:	4b46      	ldr	r3, [pc, #280]	@ (800c9ac <tcp_slowtmr+0x598>)
 800c894:	f240 5271 	movw	r2, #1393	@ 0x571
 800c898:	4947      	ldr	r1, [pc, #284]	@ (800c9b8 <tcp_slowtmr+0x5a4>)
 800c89a:	4846      	ldr	r0, [pc, #280]	@ (800c9b4 <tcp_slowtmr+0x5a0>)
 800c89c:	f008 fb24 	bl	8014ee8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800c8a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8a2:	68db      	ldr	r3, [r3, #12]
 800c8a4:	4a40      	ldr	r2, [pc, #256]	@ (800c9a8 <tcp_slowtmr+0x594>)
 800c8a6:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800c8a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d013      	beq.n	800c8d8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c8b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8b2:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800c8b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8b6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c8b8:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800c8ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8bc:	3304      	adds	r3, #4
 800c8be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c8c0:	8ad2      	ldrh	r2, [r2, #22]
 800c8c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c8c4:	8b09      	ldrh	r1, [r1, #24]
 800c8c6:	9102      	str	r1, [sp, #8]
 800c8c8:	9201      	str	r2, [sp, #4]
 800c8ca:	9300      	str	r3, [sp, #0]
 800c8cc:	462b      	mov	r3, r5
 800c8ce:	4622      	mov	r2, r4
 800c8d0:	4601      	mov	r1, r0
 800c8d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c8d4:	f004 f99e 	bl	8010c14 <tcp_rst>
      err_arg = pcb->callback_arg;
 800c8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8da:	691b      	ldr	r3, [r3, #16]
 800c8dc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c8de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8e0:	7d1b      	ldrb	r3, [r3, #20]
 800c8e2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c8e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8e6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c8e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8ea:	68db      	ldr	r3, [r3, #12]
 800c8ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800c8ee:	6838      	ldr	r0, [r7, #0]
 800c8f0:	f7ff f9f2 	bl	800bcd8 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800c8f4:	4b31      	ldr	r3, [pc, #196]	@ (800c9bc <tcp_slowtmr+0x5a8>)
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d004      	beq.n	800c90a <tcp_slowtmr+0x4f6>
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	f06f 010c 	mvn.w	r1, #12
 800c906:	68b8      	ldr	r0, [r7, #8]
 800c908:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c90a:	4b2c      	ldr	r3, [pc, #176]	@ (800c9bc <tcp_slowtmr+0x5a8>)
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d037      	beq.n	800c982 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800c912:	e592      	b.n	800c43a <tcp_slowtmr+0x26>
      prev = pcb;
 800c914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c916:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800c918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c91a:	68db      	ldr	r3, [r3, #12]
 800c91c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800c91e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c920:	7f1b      	ldrb	r3, [r3, #28]
 800c922:	3301      	adds	r3, #1
 800c924:	b2da      	uxtb	r2, r3
 800c926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c928:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c92a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c92c:	7f1a      	ldrb	r2, [r3, #28]
 800c92e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c930:	7f5b      	ldrb	r3, [r3, #29]
 800c932:	429a      	cmp	r2, r3
 800c934:	d325      	bcc.n	800c982 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800c936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c938:	2200      	movs	r2, #0
 800c93a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800c93c:	4b1f      	ldr	r3, [pc, #124]	@ (800c9bc <tcp_slowtmr+0x5a8>)
 800c93e:	2200      	movs	r2, #0
 800c940:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c944:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d00b      	beq.n	800c964 <tcp_slowtmr+0x550>
 800c94c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c94e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c952:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c954:	6912      	ldr	r2, [r2, #16]
 800c956:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c958:	4610      	mov	r0, r2
 800c95a:	4798      	blx	r3
 800c95c:	4603      	mov	r3, r0
 800c95e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800c962:	e002      	b.n	800c96a <tcp_slowtmr+0x556>
 800c964:	2300      	movs	r3, #0
 800c966:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800c96a:	4b14      	ldr	r3, [pc, #80]	@ (800c9bc <tcp_slowtmr+0x5a8>)
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	f47f ad62 	bne.w	800c438 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c974:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d102      	bne.n	800c982 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800c97c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c97e:	f003 fb89 	bl	8010094 <tcp_output>
  while (pcb != NULL) {
 800c982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c984:	2b00      	cmp	r3, #0
 800c986:	f47f ad5e 	bne.w	800c446 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c98a:	2300      	movs	r3, #0
 800c98c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800c98e:	4b0c      	ldr	r3, [pc, #48]	@ (800c9c0 <tcp_slowtmr+0x5ac>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800c994:	e069      	b.n	800ca6a <tcp_slowtmr+0x656>
 800c996:	bf00      	nop
 800c998:	2000835c 	.word	0x2000835c
 800c99c:	000a4cb8 	.word	0x000a4cb8
 800c9a0:	10624dd3 	.word	0x10624dd3
 800c9a4:	000124f8 	.word	0x000124f8
 800c9a8:	20008368 	.word	0x20008368
 800c9ac:	08016c50 	.word	0x08016c50
 800c9b0:	08017088 	.word	0x08017088
 800c9b4:	08016c94 	.word	0x08016c94
 800c9b8:	080170b4 	.word	0x080170b4
 800c9bc:	20008370 	.word	0x20008370
 800c9c0:	2000836c 	.word	0x2000836c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c9c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9c6:	7d1b      	ldrb	r3, [r3, #20]
 800c9c8:	2b0a      	cmp	r3, #10
 800c9ca:	d006      	beq.n	800c9da <tcp_slowtmr+0x5c6>
 800c9cc:	4b2b      	ldr	r3, [pc, #172]	@ (800ca7c <tcp_slowtmr+0x668>)
 800c9ce:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800c9d2:	492b      	ldr	r1, [pc, #172]	@ (800ca80 <tcp_slowtmr+0x66c>)
 800c9d4:	482b      	ldr	r0, [pc, #172]	@ (800ca84 <tcp_slowtmr+0x670>)
 800c9d6:	f008 fa87 	bl	8014ee8 <iprintf>
    pcb_remove = 0;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c9e0:	4b29      	ldr	r3, [pc, #164]	@ (800ca88 <tcp_slowtmr+0x674>)
 800c9e2:	681a      	ldr	r2, [r3, #0]
 800c9e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9e6:	6a1b      	ldr	r3, [r3, #32]
 800c9e8:	1ad3      	subs	r3, r2, r3
 800c9ea:	2bf0      	cmp	r3, #240	@ 0xf0
 800c9ec:	d904      	bls.n	800c9f8 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800c9ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c9f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d02f      	beq.n	800ca60 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ca00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ca02:	f000 fb2b 	bl	800d05c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ca06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d010      	beq.n	800ca2e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ca0c:	4b1f      	ldr	r3, [pc, #124]	@ (800ca8c <tcp_slowtmr+0x678>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d106      	bne.n	800ca24 <tcp_slowtmr+0x610>
 800ca16:	4b19      	ldr	r3, [pc, #100]	@ (800ca7c <tcp_slowtmr+0x668>)
 800ca18:	f240 52af 	movw	r2, #1455	@ 0x5af
 800ca1c:	491c      	ldr	r1, [pc, #112]	@ (800ca90 <tcp_slowtmr+0x67c>)
 800ca1e:	4819      	ldr	r0, [pc, #100]	@ (800ca84 <tcp_slowtmr+0x670>)
 800ca20:	f008 fa62 	bl	8014ee8 <iprintf>
        prev->next = pcb->next;
 800ca24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca26:	68da      	ldr	r2, [r3, #12]
 800ca28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca2a:	60da      	str	r2, [r3, #12]
 800ca2c:	e00f      	b.n	800ca4e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ca2e:	4b17      	ldr	r3, [pc, #92]	@ (800ca8c <tcp_slowtmr+0x678>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d006      	beq.n	800ca46 <tcp_slowtmr+0x632>
 800ca38:	4b10      	ldr	r3, [pc, #64]	@ (800ca7c <tcp_slowtmr+0x668>)
 800ca3a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800ca3e:	4915      	ldr	r1, [pc, #84]	@ (800ca94 <tcp_slowtmr+0x680>)
 800ca40:	4810      	ldr	r0, [pc, #64]	@ (800ca84 <tcp_slowtmr+0x670>)
 800ca42:	f008 fa51 	bl	8014ee8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ca46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca48:	68db      	ldr	r3, [r3, #12]
 800ca4a:	4a10      	ldr	r2, [pc, #64]	@ (800ca8c <tcp_slowtmr+0x678>)
 800ca4c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ca4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca50:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ca52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca54:	68db      	ldr	r3, [r3, #12]
 800ca56:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800ca58:	69f8      	ldr	r0, [r7, #28]
 800ca5a:	f7ff f93d 	bl	800bcd8 <tcp_free>
 800ca5e:	e004      	b.n	800ca6a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800ca60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca62:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800ca64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca66:	68db      	ldr	r3, [r3, #12]
 800ca68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800ca6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d1a9      	bne.n	800c9c4 <tcp_slowtmr+0x5b0>
    }
  }
}
 800ca70:	bf00      	nop
 800ca72:	bf00      	nop
 800ca74:	3730      	adds	r7, #48	@ 0x30
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bdb0      	pop	{r4, r5, r7, pc}
 800ca7a:	bf00      	nop
 800ca7c:	08016c50 	.word	0x08016c50
 800ca80:	080170e0 	.word	0x080170e0
 800ca84:	08016c94 	.word	0x08016c94
 800ca88:	2000835c 	.word	0x2000835c
 800ca8c:	2000836c 	.word	0x2000836c
 800ca90:	08017110 	.word	0x08017110
 800ca94:	08017138 	.word	0x08017138

0800ca98 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b082      	sub	sp, #8
 800ca9c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ca9e:	4b2d      	ldr	r3, [pc, #180]	@ (800cb54 <tcp_fasttmr+0xbc>)
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	3301      	adds	r3, #1
 800caa4:	b2da      	uxtb	r2, r3
 800caa6:	4b2b      	ldr	r3, [pc, #172]	@ (800cb54 <tcp_fasttmr+0xbc>)
 800caa8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800caaa:	4b2b      	ldr	r3, [pc, #172]	@ (800cb58 <tcp_fasttmr+0xc0>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cab0:	e048      	b.n	800cb44 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	7f9a      	ldrb	r2, [r3, #30]
 800cab6:	4b27      	ldr	r3, [pc, #156]	@ (800cb54 <tcp_fasttmr+0xbc>)
 800cab8:	781b      	ldrb	r3, [r3, #0]
 800caba:	429a      	cmp	r2, r3
 800cabc:	d03f      	beq.n	800cb3e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800cabe:	4b25      	ldr	r3, [pc, #148]	@ (800cb54 <tcp_fasttmr+0xbc>)
 800cac0:	781a      	ldrb	r2, [r3, #0]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	8b5b      	ldrh	r3, [r3, #26]
 800caca:	f003 0301 	and.w	r3, r3, #1
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d010      	beq.n	800caf4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	8b5b      	ldrh	r3, [r3, #26]
 800cad6:	f043 0302 	orr.w	r3, r3, #2
 800cada:	b29a      	uxth	r2, r3
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f003 fad7 	bl	8010094 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	8b5b      	ldrh	r3, [r3, #26]
 800caea:	f023 0303 	bic.w	r3, r3, #3
 800caee:	b29a      	uxth	r2, r3
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	8b5b      	ldrh	r3, [r3, #26]
 800caf8:	f003 0308 	and.w	r3, r3, #8
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d009      	beq.n	800cb14 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	8b5b      	ldrh	r3, [r3, #26]
 800cb04:	f023 0308 	bic.w	r3, r3, #8
 800cb08:	b29a      	uxth	r2, r3
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f7ff fa76 	bl	800c000 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d00a      	beq.n	800cb38 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800cb22:	4b0e      	ldr	r3, [pc, #56]	@ (800cb5c <tcp_fasttmr+0xc4>)
 800cb24:	2200      	movs	r2, #0
 800cb26:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 f819 	bl	800cb60 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800cb2e:	4b0b      	ldr	r3, [pc, #44]	@ (800cb5c <tcp_fasttmr+0xc4>)
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d000      	beq.n	800cb38 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800cb36:	e7b8      	b.n	800caaa <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	607b      	str	r3, [r7, #4]
 800cb3c:	e002      	b.n	800cb44 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	68db      	ldr	r3, [r3, #12]
 800cb42:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d1b3      	bne.n	800cab2 <tcp_fasttmr+0x1a>
    }
  }
}
 800cb4a:	bf00      	nop
 800cb4c:	bf00      	nop
 800cb4e:	3708      	adds	r7, #8
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}
 800cb54:	20008372 	.word	0x20008372
 800cb58:	20008368 	.word	0x20008368
 800cb5c:	20008370 	.word	0x20008370

0800cb60 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800cb60:	b590      	push	{r4, r7, lr}
 800cb62:	b085      	sub	sp, #20
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d109      	bne.n	800cb82 <tcp_process_refused_data+0x22>
 800cb6e:	4b37      	ldr	r3, [pc, #220]	@ (800cc4c <tcp_process_refused_data+0xec>)
 800cb70:	f240 6209 	movw	r2, #1545	@ 0x609
 800cb74:	4936      	ldr	r1, [pc, #216]	@ (800cc50 <tcp_process_refused_data+0xf0>)
 800cb76:	4837      	ldr	r0, [pc, #220]	@ (800cc54 <tcp_process_refused_data+0xf4>)
 800cb78:	f008 f9b6 	bl	8014ee8 <iprintf>
 800cb7c:	f06f 030f 	mvn.w	r3, #15
 800cb80:	e060      	b.n	800cc44 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cb86:	7b5b      	ldrb	r3, [r3, #13]
 800cb88:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cb8e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2200      	movs	r2, #0
 800cb94:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d00b      	beq.n	800cbb8 <tcp_process_refused_data+0x58>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6918      	ldr	r0, [r3, #16]
 800cbaa:	2300      	movs	r3, #0
 800cbac:	68ba      	ldr	r2, [r7, #8]
 800cbae:	6879      	ldr	r1, [r7, #4]
 800cbb0:	47a0      	blx	r4
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	73fb      	strb	r3, [r7, #15]
 800cbb6:	e007      	b.n	800cbc8 <tcp_process_refused_data+0x68>
 800cbb8:	2300      	movs	r3, #0
 800cbba:	68ba      	ldr	r2, [r7, #8]
 800cbbc:	6879      	ldr	r1, [r7, #4]
 800cbbe:	2000      	movs	r0, #0
 800cbc0:	f000 f8a4 	bl	800cd0c <tcp_recv_null>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800cbc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d12a      	bne.n	800cc26 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800cbd0:	7bbb      	ldrb	r3, [r7, #14]
 800cbd2:	f003 0320 	and.w	r3, r3, #32
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d033      	beq.n	800cc42 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cbde:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800cbe2:	d005      	beq.n	800cbf0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cbe8:	3301      	adds	r3, #1
 800cbea:	b29a      	uxth	r2, r3
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d00b      	beq.n	800cc12 <tcp_process_refused_data+0xb2>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6918      	ldr	r0, [r3, #16]
 800cc04:	2300      	movs	r3, #0
 800cc06:	2200      	movs	r2, #0
 800cc08:	6879      	ldr	r1, [r7, #4]
 800cc0a:	47a0      	blx	r4
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	73fb      	strb	r3, [r7, #15]
 800cc10:	e001      	b.n	800cc16 <tcp_process_refused_data+0xb6>
 800cc12:	2300      	movs	r3, #0
 800cc14:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800cc16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc1a:	f113 0f0d 	cmn.w	r3, #13
 800cc1e:	d110      	bne.n	800cc42 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800cc20:	f06f 030c 	mvn.w	r3, #12
 800cc24:	e00e      	b.n	800cc44 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800cc26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc2a:	f113 0f0d 	cmn.w	r3, #13
 800cc2e:	d102      	bne.n	800cc36 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800cc30:	f06f 030c 	mvn.w	r3, #12
 800cc34:	e006      	b.n	800cc44 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	68ba      	ldr	r2, [r7, #8]
 800cc3a:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800cc3c:	f06f 0304 	mvn.w	r3, #4
 800cc40:	e000      	b.n	800cc44 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800cc42:	2300      	movs	r3, #0
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3714      	adds	r7, #20
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd90      	pop	{r4, r7, pc}
 800cc4c:	08016c50 	.word	0x08016c50
 800cc50:	08017160 	.word	0x08017160
 800cc54:	08016c94 	.word	0x08016c94

0800cc58 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b084      	sub	sp, #16
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800cc60:	e007      	b.n	800cc72 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f000 f80a 	bl	800cc82 <tcp_seg_free>
    seg = next;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d1f4      	bne.n	800cc62 <tcp_segs_free+0xa>
  }
}
 800cc78:	bf00      	nop
 800cc7a:	bf00      	nop
 800cc7c:	3710      	adds	r7, #16
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}

0800cc82 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800cc82:	b580      	push	{r7, lr}
 800cc84:	b082      	sub	sp, #8
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d00c      	beq.n	800ccaa <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d004      	beq.n	800cca2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	685b      	ldr	r3, [r3, #4]
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f7fe fd6b 	bl	800b778 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800cca2:	6879      	ldr	r1, [r7, #4]
 800cca4:	2003      	movs	r0, #3
 800cca6:	f7fd fdfb 	bl	800a8a0 <memp_free>
  }
}
 800ccaa:	bf00      	nop
 800ccac:	3708      	adds	r7, #8
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}
	...

0800ccb4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b084      	sub	sp, #16
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d106      	bne.n	800ccd0 <tcp_seg_copy+0x1c>
 800ccc2:	4b0f      	ldr	r3, [pc, #60]	@ (800cd00 <tcp_seg_copy+0x4c>)
 800ccc4:	f240 6282 	movw	r2, #1666	@ 0x682
 800ccc8:	490e      	ldr	r1, [pc, #56]	@ (800cd04 <tcp_seg_copy+0x50>)
 800ccca:	480f      	ldr	r0, [pc, #60]	@ (800cd08 <tcp_seg_copy+0x54>)
 800cccc:	f008 f90c 	bl	8014ee8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ccd0:	2003      	movs	r0, #3
 800ccd2:	f7fd fd75 	bl	800a7c0 <memp_malloc>
 800ccd6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d101      	bne.n	800cce2 <tcp_seg_copy+0x2e>
    return NULL;
 800ccde:	2300      	movs	r3, #0
 800cce0:	e00a      	b.n	800ccf8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800cce2:	2214      	movs	r2, #20
 800cce4:	6879      	ldr	r1, [r7, #4]
 800cce6:	68f8      	ldr	r0, [r7, #12]
 800cce8:	f008 fad3 	bl	8015292 <memcpy>
  pbuf_ref(cseg->p);
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	685b      	ldr	r3, [r3, #4]
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f7fe fde1 	bl	800b8b8 <pbuf_ref>
  return cseg;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3710      	adds	r7, #16
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}
 800cd00:	08016c50 	.word	0x08016c50
 800cd04:	080171a4 	.word	0x080171a4
 800cd08:	08016c94 	.word	0x08016c94

0800cd0c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b084      	sub	sp, #16
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	60f8      	str	r0, [r7, #12]
 800cd14:	60b9      	str	r1, [r7, #8]
 800cd16:	607a      	str	r2, [r7, #4]
 800cd18:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d109      	bne.n	800cd34 <tcp_recv_null+0x28>
 800cd20:	4b12      	ldr	r3, [pc, #72]	@ (800cd6c <tcp_recv_null+0x60>)
 800cd22:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800cd26:	4912      	ldr	r1, [pc, #72]	@ (800cd70 <tcp_recv_null+0x64>)
 800cd28:	4812      	ldr	r0, [pc, #72]	@ (800cd74 <tcp_recv_null+0x68>)
 800cd2a:	f008 f8dd 	bl	8014ee8 <iprintf>
 800cd2e:	f06f 030f 	mvn.w	r3, #15
 800cd32:	e016      	b.n	800cd62 <tcp_recv_null+0x56>

  if (p != NULL) {
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d009      	beq.n	800cd4e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	891b      	ldrh	r3, [r3, #8]
 800cd3e:	4619      	mov	r1, r3
 800cd40:	68b8      	ldr	r0, [r7, #8]
 800cd42:	f7ff fb17 	bl	800c374 <tcp_recved>
    pbuf_free(p);
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f7fe fd16 	bl	800b778 <pbuf_free>
 800cd4c:	e008      	b.n	800cd60 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800cd4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d104      	bne.n	800cd60 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800cd56:	68b8      	ldr	r0, [r7, #8]
 800cd58:	f7ff f9bc 	bl	800c0d4 <tcp_close>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	e000      	b.n	800cd62 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800cd60:	2300      	movs	r3, #0
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3710      	adds	r7, #16
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
 800cd6a:	bf00      	nop
 800cd6c:	08016c50 	.word	0x08016c50
 800cd70:	080171c0 	.word	0x080171c0
 800cd74:	08016c94 	.word	0x08016c94

0800cd78 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b086      	sub	sp, #24
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	4603      	mov	r3, r0
 800cd80:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800cd82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	db01      	blt.n	800cd8e <tcp_kill_prio+0x16>
 800cd8a:	79fb      	ldrb	r3, [r7, #7]
 800cd8c:	e000      	b.n	800cd90 <tcp_kill_prio+0x18>
 800cd8e:	237f      	movs	r3, #127	@ 0x7f
 800cd90:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800cd92:	7afb      	ldrb	r3, [r7, #11]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d034      	beq.n	800ce02 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800cd98:	7afb      	ldrb	r3, [r7, #11]
 800cd9a:	3b01      	subs	r3, #1
 800cd9c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cda2:	2300      	movs	r3, #0
 800cda4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cda6:	4b19      	ldr	r3, [pc, #100]	@ (800ce0c <tcp_kill_prio+0x94>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	617b      	str	r3, [r7, #20]
 800cdac:	e01f      	b.n	800cdee <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	7d5b      	ldrb	r3, [r3, #21]
 800cdb2:	7afa      	ldrb	r2, [r7, #11]
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d80c      	bhi.n	800cdd2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800cdbc:	7afa      	ldrb	r2, [r7, #11]
 800cdbe:	429a      	cmp	r2, r3
 800cdc0:	d112      	bne.n	800cde8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cdc2:	4b13      	ldr	r3, [pc, #76]	@ (800ce10 <tcp_kill_prio+0x98>)
 800cdc4:	681a      	ldr	r2, [r3, #0]
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	6a1b      	ldr	r3, [r3, #32]
 800cdca:	1ad3      	subs	r3, r2, r3
 800cdcc:	68fa      	ldr	r2, [r7, #12]
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d80a      	bhi.n	800cde8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800cdd2:	4b0f      	ldr	r3, [pc, #60]	@ (800ce10 <tcp_kill_prio+0x98>)
 800cdd4:	681a      	ldr	r2, [r3, #0]
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	6a1b      	ldr	r3, [r3, #32]
 800cdda:	1ad3      	subs	r3, r2, r3
 800cddc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	7d5b      	ldrb	r3, [r3, #21]
 800cde6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	68db      	ldr	r3, [r3, #12]
 800cdec:	617b      	str	r3, [r7, #20]
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d1dc      	bne.n	800cdae <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d004      	beq.n	800ce04 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cdfa:	6938      	ldr	r0, [r7, #16]
 800cdfc:	f7ff fa54 	bl	800c2a8 <tcp_abort>
 800ce00:	e000      	b.n	800ce04 <tcp_kill_prio+0x8c>
    return;
 800ce02:	bf00      	nop
  }
}
 800ce04:	3718      	adds	r7, #24
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}
 800ce0a:	bf00      	nop
 800ce0c:	20008368 	.word	0x20008368
 800ce10:	2000835c 	.word	0x2000835c

0800ce14 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b086      	sub	sp, #24
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ce1e:	79fb      	ldrb	r3, [r7, #7]
 800ce20:	2b08      	cmp	r3, #8
 800ce22:	d009      	beq.n	800ce38 <tcp_kill_state+0x24>
 800ce24:	79fb      	ldrb	r3, [r7, #7]
 800ce26:	2b09      	cmp	r3, #9
 800ce28:	d006      	beq.n	800ce38 <tcp_kill_state+0x24>
 800ce2a:	4b1a      	ldr	r3, [pc, #104]	@ (800ce94 <tcp_kill_state+0x80>)
 800ce2c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800ce30:	4919      	ldr	r1, [pc, #100]	@ (800ce98 <tcp_kill_state+0x84>)
 800ce32:	481a      	ldr	r0, [pc, #104]	@ (800ce9c <tcp_kill_state+0x88>)
 800ce34:	f008 f858 	bl	8014ee8 <iprintf>

  inactivity = 0;
 800ce38:	2300      	movs	r3, #0
 800ce3a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ce40:	4b17      	ldr	r3, [pc, #92]	@ (800cea0 <tcp_kill_state+0x8c>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	617b      	str	r3, [r7, #20]
 800ce46:	e017      	b.n	800ce78 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	7d1b      	ldrb	r3, [r3, #20]
 800ce4c:	79fa      	ldrb	r2, [r7, #7]
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d10f      	bne.n	800ce72 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ce52:	4b14      	ldr	r3, [pc, #80]	@ (800cea4 <tcp_kill_state+0x90>)
 800ce54:	681a      	ldr	r2, [r3, #0]
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	6a1b      	ldr	r3, [r3, #32]
 800ce5a:	1ad3      	subs	r3, r2, r3
 800ce5c:	68fa      	ldr	r2, [r7, #12]
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	d807      	bhi.n	800ce72 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ce62:	4b10      	ldr	r3, [pc, #64]	@ (800cea4 <tcp_kill_state+0x90>)
 800ce64:	681a      	ldr	r2, [r3, #0]
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	6a1b      	ldr	r3, [r3, #32]
 800ce6a:	1ad3      	subs	r3, r2, r3
 800ce6c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	68db      	ldr	r3, [r3, #12]
 800ce76:	617b      	str	r3, [r7, #20]
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d1e4      	bne.n	800ce48 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ce7e:	693b      	ldr	r3, [r7, #16]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d003      	beq.n	800ce8c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ce84:	2100      	movs	r1, #0
 800ce86:	6938      	ldr	r0, [r7, #16]
 800ce88:	f7ff f950 	bl	800c12c <tcp_abandon>
  }
}
 800ce8c:	bf00      	nop
 800ce8e:	3718      	adds	r7, #24
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}
 800ce94:	08016c50 	.word	0x08016c50
 800ce98:	080171dc 	.word	0x080171dc
 800ce9c:	08016c94 	.word	0x08016c94
 800cea0:	20008368 	.word	0x20008368
 800cea4:	2000835c 	.word	0x2000835c

0800cea8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b084      	sub	sp, #16
 800ceac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ceb6:	4b12      	ldr	r3, [pc, #72]	@ (800cf00 <tcp_kill_timewait+0x58>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	60fb      	str	r3, [r7, #12]
 800cebc:	e012      	b.n	800cee4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cebe:	4b11      	ldr	r3, [pc, #68]	@ (800cf04 <tcp_kill_timewait+0x5c>)
 800cec0:	681a      	ldr	r2, [r3, #0]
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	6a1b      	ldr	r3, [r3, #32]
 800cec6:	1ad3      	subs	r3, r2, r3
 800cec8:	687a      	ldr	r2, [r7, #4]
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d807      	bhi.n	800cede <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800cece:	4b0d      	ldr	r3, [pc, #52]	@ (800cf04 <tcp_kill_timewait+0x5c>)
 800ced0:	681a      	ldr	r2, [r3, #0]
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	6a1b      	ldr	r3, [r3, #32]
 800ced6:	1ad3      	subs	r3, r2, r3
 800ced8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	68db      	ldr	r3, [r3, #12]
 800cee2:	60fb      	str	r3, [r7, #12]
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d1e9      	bne.n	800cebe <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d002      	beq.n	800cef6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cef0:	68b8      	ldr	r0, [r7, #8]
 800cef2:	f7ff f9d9 	bl	800c2a8 <tcp_abort>
  }
}
 800cef6:	bf00      	nop
 800cef8:	3710      	adds	r7, #16
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}
 800cefe:	bf00      	nop
 800cf00:	2000836c 	.word	0x2000836c
 800cf04:	2000835c 	.word	0x2000835c

0800cf08 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800cf0e:	4b10      	ldr	r3, [pc, #64]	@ (800cf50 <tcp_handle_closepend+0x48>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cf14:	e014      	b.n	800cf40 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	68db      	ldr	r3, [r3, #12]
 800cf1a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	8b5b      	ldrh	r3, [r3, #26]
 800cf20:	f003 0308 	and.w	r3, r3, #8
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d009      	beq.n	800cf3c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	8b5b      	ldrh	r3, [r3, #26]
 800cf2c:	f023 0308 	bic.w	r3, r3, #8
 800cf30:	b29a      	uxth	r2, r3
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f7ff f862 	bl	800c000 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d1e7      	bne.n	800cf16 <tcp_handle_closepend+0xe>
  }
}
 800cf46:	bf00      	nop
 800cf48:	bf00      	nop
 800cf4a:	3708      	adds	r7, #8
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}
 800cf50:	20008368 	.word	0x20008368

0800cf54 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b084      	sub	sp, #16
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cf5e:	2001      	movs	r0, #1
 800cf60:	f7fd fc2e 	bl	800a7c0 <memp_malloc>
 800cf64:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d126      	bne.n	800cfba <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800cf6c:	f7ff ffcc 	bl	800cf08 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800cf70:	f7ff ff9a 	bl	800cea8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cf74:	2001      	movs	r0, #1
 800cf76:	f7fd fc23 	bl	800a7c0 <memp_malloc>
 800cf7a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d11b      	bne.n	800cfba <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800cf82:	2009      	movs	r0, #9
 800cf84:	f7ff ff46 	bl	800ce14 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cf88:	2001      	movs	r0, #1
 800cf8a:	f7fd fc19 	bl	800a7c0 <memp_malloc>
 800cf8e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d111      	bne.n	800cfba <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800cf96:	2008      	movs	r0, #8
 800cf98:	f7ff ff3c 	bl	800ce14 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cf9c:	2001      	movs	r0, #1
 800cf9e:	f7fd fc0f 	bl	800a7c0 <memp_malloc>
 800cfa2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d107      	bne.n	800cfba <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800cfaa:	79fb      	ldrb	r3, [r7, #7]
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7ff fee3 	bl	800cd78 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cfb2:	2001      	movs	r0, #1
 800cfb4:	f7fd fc04 	bl	800a7c0 <memp_malloc>
 800cfb8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d03f      	beq.n	800d040 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800cfc0:	229c      	movs	r2, #156	@ 0x9c
 800cfc2:	2100      	movs	r1, #0
 800cfc4:	68f8      	ldr	r0, [r7, #12]
 800cfc6:	f008 f8ef 	bl	80151a8 <memset>
    pcb->prio = prio;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	79fa      	ldrb	r2, [r7, #7]
 800cfce:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800cfd6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800cfe0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	22ff      	movs	r2, #255	@ 0xff
 800cfee:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800cff6:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2206      	movs	r2, #6
 800cffc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	2206      	movs	r2, #6
 800d004:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d00c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	2201      	movs	r2, #1
 800d012:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800d016:	4b0d      	ldr	r3, [pc, #52]	@ (800d04c <tcp_alloc+0xf8>)
 800d018:	681a      	ldr	r2, [r3, #0]
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d01e:	4b0c      	ldr	r3, [pc, #48]	@ (800d050 <tcp_alloc+0xfc>)
 800d020:	781a      	ldrb	r2, [r3, #0]
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800d02c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	4a08      	ldr	r2, [pc, #32]	@ (800d054 <tcp_alloc+0x100>)
 800d034:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	4a07      	ldr	r2, [pc, #28]	@ (800d058 <tcp_alloc+0x104>)
 800d03c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d040:	68fb      	ldr	r3, [r7, #12]
}
 800d042:	4618      	mov	r0, r3
 800d044:	3710      	adds	r7, #16
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop
 800d04c:	2000835c 	.word	0x2000835c
 800d050:	20008372 	.word	0x20008372
 800d054:	0800cd0d 	.word	0x0800cd0d
 800d058:	006ddd00 	.word	0x006ddd00

0800d05c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b082      	sub	sp, #8
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d107      	bne.n	800d07a <tcp_pcb_purge+0x1e>
 800d06a:	4b21      	ldr	r3, [pc, #132]	@ (800d0f0 <tcp_pcb_purge+0x94>)
 800d06c:	f640 0251 	movw	r2, #2129	@ 0x851
 800d070:	4920      	ldr	r1, [pc, #128]	@ (800d0f4 <tcp_pcb_purge+0x98>)
 800d072:	4821      	ldr	r0, [pc, #132]	@ (800d0f8 <tcp_pcb_purge+0x9c>)
 800d074:	f007 ff38 	bl	8014ee8 <iprintf>
 800d078:	e037      	b.n	800d0ea <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	7d1b      	ldrb	r3, [r3, #20]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d033      	beq.n	800d0ea <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d086:	2b0a      	cmp	r3, #10
 800d088:	d02f      	beq.n	800d0ea <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d08e:	2b01      	cmp	r3, #1
 800d090:	d02b      	beq.n	800d0ea <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d096:	2b00      	cmp	r3, #0
 800d098:	d007      	beq.n	800d0aa <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f7fe fb6a 	bl	800b778 <pbuf_free>
      pcb->refused_data = NULL;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d002      	beq.n	800d0b8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f000 f98c 	bl	800d3d0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d0be:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f7ff fdc7 	bl	800cc58 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f7ff fdc2 	bl	800cc58 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d0ea:	3708      	adds	r7, #8
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}
 800d0f0:	08016c50 	.word	0x08016c50
 800d0f4:	0801729c 	.word	0x0801729c
 800d0f8:	08016c94 	.word	0x08016c94

0800d0fc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b084      	sub	sp, #16
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
 800d104:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d106      	bne.n	800d11a <tcp_pcb_remove+0x1e>
 800d10c:	4b3e      	ldr	r3, [pc, #248]	@ (800d208 <tcp_pcb_remove+0x10c>)
 800d10e:	f640 0283 	movw	r2, #2179	@ 0x883
 800d112:	493e      	ldr	r1, [pc, #248]	@ (800d20c <tcp_pcb_remove+0x110>)
 800d114:	483e      	ldr	r0, [pc, #248]	@ (800d210 <tcp_pcb_remove+0x114>)
 800d116:	f007 fee7 	bl	8014ee8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d106      	bne.n	800d12e <tcp_pcb_remove+0x32>
 800d120:	4b39      	ldr	r3, [pc, #228]	@ (800d208 <tcp_pcb_remove+0x10c>)
 800d122:	f640 0284 	movw	r2, #2180	@ 0x884
 800d126:	493b      	ldr	r1, [pc, #236]	@ (800d214 <tcp_pcb_remove+0x118>)
 800d128:	4839      	ldr	r0, [pc, #228]	@ (800d210 <tcp_pcb_remove+0x114>)
 800d12a:	f007 fedd 	bl	8014ee8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	683a      	ldr	r2, [r7, #0]
 800d134:	429a      	cmp	r2, r3
 800d136:	d105      	bne.n	800d144 <tcp_pcb_remove+0x48>
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	68da      	ldr	r2, [r3, #12]
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	601a      	str	r2, [r3, #0]
 800d142:	e013      	b.n	800d16c <tcp_pcb_remove+0x70>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	60fb      	str	r3, [r7, #12]
 800d14a:	e00c      	b.n	800d166 <tcp_pcb_remove+0x6a>
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	68db      	ldr	r3, [r3, #12]
 800d150:	683a      	ldr	r2, [r7, #0]
 800d152:	429a      	cmp	r2, r3
 800d154:	d104      	bne.n	800d160 <tcp_pcb_remove+0x64>
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	68da      	ldr	r2, [r3, #12]
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	60da      	str	r2, [r3, #12]
 800d15e:	e005      	b.n	800d16c <tcp_pcb_remove+0x70>
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	68db      	ldr	r3, [r3, #12]
 800d164:	60fb      	str	r3, [r7, #12]
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d1ef      	bne.n	800d14c <tcp_pcb_remove+0x50>
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	2200      	movs	r2, #0
 800d170:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d172:	6838      	ldr	r0, [r7, #0]
 800d174:	f7ff ff72 	bl	800d05c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	7d1b      	ldrb	r3, [r3, #20]
 800d17c:	2b0a      	cmp	r3, #10
 800d17e:	d013      	beq.n	800d1a8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d184:	2b01      	cmp	r3, #1
 800d186:	d00f      	beq.n	800d1a8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	8b5b      	ldrh	r3, [r3, #26]
 800d18c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d190:	2b00      	cmp	r3, #0
 800d192:	d009      	beq.n	800d1a8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	8b5b      	ldrh	r3, [r3, #26]
 800d198:	f043 0302 	orr.w	r3, r3, #2
 800d19c:	b29a      	uxth	r2, r3
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d1a2:	6838      	ldr	r0, [r7, #0]
 800d1a4:	f002 ff76 	bl	8010094 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	7d1b      	ldrb	r3, [r3, #20]
 800d1ac:	2b01      	cmp	r3, #1
 800d1ae:	d020      	beq.n	800d1f2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d006      	beq.n	800d1c6 <tcp_pcb_remove+0xca>
 800d1b8:	4b13      	ldr	r3, [pc, #76]	@ (800d208 <tcp_pcb_remove+0x10c>)
 800d1ba:	f640 0293 	movw	r2, #2195	@ 0x893
 800d1be:	4916      	ldr	r1, [pc, #88]	@ (800d218 <tcp_pcb_remove+0x11c>)
 800d1c0:	4813      	ldr	r0, [pc, #76]	@ (800d210 <tcp_pcb_remove+0x114>)
 800d1c2:	f007 fe91 	bl	8014ee8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d006      	beq.n	800d1dc <tcp_pcb_remove+0xe0>
 800d1ce:	4b0e      	ldr	r3, [pc, #56]	@ (800d208 <tcp_pcb_remove+0x10c>)
 800d1d0:	f640 0294 	movw	r2, #2196	@ 0x894
 800d1d4:	4911      	ldr	r1, [pc, #68]	@ (800d21c <tcp_pcb_remove+0x120>)
 800d1d6:	480e      	ldr	r0, [pc, #56]	@ (800d210 <tcp_pcb_remove+0x114>)
 800d1d8:	f007 fe86 	bl	8014ee8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d006      	beq.n	800d1f2 <tcp_pcb_remove+0xf6>
 800d1e4:	4b08      	ldr	r3, [pc, #32]	@ (800d208 <tcp_pcb_remove+0x10c>)
 800d1e6:	f640 0296 	movw	r2, #2198	@ 0x896
 800d1ea:	490d      	ldr	r1, [pc, #52]	@ (800d220 <tcp_pcb_remove+0x124>)
 800d1ec:	4808      	ldr	r0, [pc, #32]	@ (800d210 <tcp_pcb_remove+0x114>)
 800d1ee:	f007 fe7b 	bl	8014ee8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d1fe:	bf00      	nop
 800d200:	3710      	adds	r7, #16
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}
 800d206:	bf00      	nop
 800d208:	08016c50 	.word	0x08016c50
 800d20c:	080172b8 	.word	0x080172b8
 800d210:	08016c94 	.word	0x08016c94
 800d214:	080172d4 	.word	0x080172d4
 800d218:	080172f4 	.word	0x080172f4
 800d21c:	0801730c 	.word	0x0801730c
 800d220:	08017328 	.word	0x08017328

0800d224 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b082      	sub	sp, #8
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d106      	bne.n	800d240 <tcp_next_iss+0x1c>
 800d232:	4b0a      	ldr	r3, [pc, #40]	@ (800d25c <tcp_next_iss+0x38>)
 800d234:	f640 02af 	movw	r2, #2223	@ 0x8af
 800d238:	4909      	ldr	r1, [pc, #36]	@ (800d260 <tcp_next_iss+0x3c>)
 800d23a:	480a      	ldr	r0, [pc, #40]	@ (800d264 <tcp_next_iss+0x40>)
 800d23c:	f007 fe54 	bl	8014ee8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d240:	4b09      	ldr	r3, [pc, #36]	@ (800d268 <tcp_next_iss+0x44>)
 800d242:	681a      	ldr	r2, [r3, #0]
 800d244:	4b09      	ldr	r3, [pc, #36]	@ (800d26c <tcp_next_iss+0x48>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4413      	add	r3, r2
 800d24a:	4a07      	ldr	r2, [pc, #28]	@ (800d268 <tcp_next_iss+0x44>)
 800d24c:	6013      	str	r3, [r2, #0]
  return iss;
 800d24e:	4b06      	ldr	r3, [pc, #24]	@ (800d268 <tcp_next_iss+0x44>)
 800d250:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d252:	4618      	mov	r0, r3
 800d254:	3708      	adds	r7, #8
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}
 800d25a:	bf00      	nop
 800d25c:	08016c50 	.word	0x08016c50
 800d260:	08017340 	.word	0x08017340
 800d264:	08016c94 	.word	0x08016c94
 800d268:	20000068 	.word	0x20000068
 800d26c:	2000835c 	.word	0x2000835c

0800d270 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b086      	sub	sp, #24
 800d274:	af00      	add	r7, sp, #0
 800d276:	4603      	mov	r3, r0
 800d278:	60b9      	str	r1, [r7, #8]
 800d27a:	607a      	str	r2, [r7, #4]
 800d27c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d106      	bne.n	800d292 <tcp_eff_send_mss_netif+0x22>
 800d284:	4b14      	ldr	r3, [pc, #80]	@ (800d2d8 <tcp_eff_send_mss_netif+0x68>)
 800d286:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800d28a:	4914      	ldr	r1, [pc, #80]	@ (800d2dc <tcp_eff_send_mss_netif+0x6c>)
 800d28c:	4814      	ldr	r0, [pc, #80]	@ (800d2e0 <tcp_eff_send_mss_netif+0x70>)
 800d28e:	f007 fe2b 	bl	8014ee8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d101      	bne.n	800d29c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d298:	89fb      	ldrh	r3, [r7, #14]
 800d29a:	e019      	b.n	800d2d0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d2a0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d2a2:	8afb      	ldrh	r3, [r7, #22]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d012      	beq.n	800d2ce <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d2a8:	2328      	movs	r3, #40	@ 0x28
 800d2aa:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d2ac:	8afa      	ldrh	r2, [r7, #22]
 800d2ae:	8abb      	ldrh	r3, [r7, #20]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d904      	bls.n	800d2be <tcp_eff_send_mss_netif+0x4e>
 800d2b4:	8afa      	ldrh	r2, [r7, #22]
 800d2b6:	8abb      	ldrh	r3, [r7, #20]
 800d2b8:	1ad3      	subs	r3, r2, r3
 800d2ba:	b29b      	uxth	r3, r3
 800d2bc:	e000      	b.n	800d2c0 <tcp_eff_send_mss_netif+0x50>
 800d2be:	2300      	movs	r3, #0
 800d2c0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d2c2:	8a7a      	ldrh	r2, [r7, #18]
 800d2c4:	89fb      	ldrh	r3, [r7, #14]
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	bf28      	it	cs
 800d2ca:	4613      	movcs	r3, r2
 800d2cc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d2ce:	89fb      	ldrh	r3, [r7, #14]
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3718      	adds	r7, #24
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}
 800d2d8:	08016c50 	.word	0x08016c50
 800d2dc:	0801735c 	.word	0x0801735c
 800d2e0:	08016c94 	.word	0x08016c94

0800d2e4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b084      	sub	sp, #16
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d11d      	bne.n	800d334 <tcp_netif_ip_addr_changed_pcblist+0x50>
 800d2f8:	4b12      	ldr	r3, [pc, #72]	@ (800d344 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d2fa:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800d2fe:	4912      	ldr	r1, [pc, #72]	@ (800d348 <tcp_netif_ip_addr_changed_pcblist+0x64>)
 800d300:	4812      	ldr	r0, [pc, #72]	@ (800d34c <tcp_netif_ip_addr_changed_pcblist+0x68>)
 800d302:	f007 fdf1 	bl	8014ee8 <iprintf>

  while (pcb != NULL) {
 800d306:	e015      	b.n	800d334 <tcp_netif_ip_addr_changed_pcblist+0x50>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	681a      	ldr	r2, [r3, #0]
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	429a      	cmp	r2, r3
 800d312:	d10c      	bne.n	800d32e <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	68db      	ldr	r3, [r3, #12]
 800d318:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
 800d31a:	68f9      	ldr	r1, [r7, #12]
 800d31c:	480c      	ldr	r0, [pc, #48]	@ (800d350 <tcp_netif_ip_addr_changed_pcblist+0x6c>)
 800d31e:	f007 fde3 	bl	8014ee8 <iprintf>
      tcp_abort(pcb);
 800d322:	68f8      	ldr	r0, [r7, #12]
 800d324:	f7fe ffc0 	bl	800c2a8 <tcp_abort>
      pcb = next;
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	60fb      	str	r3, [r7, #12]
 800d32c:	e002      	b.n	800d334 <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	68db      	ldr	r3, [r3, #12]
 800d332:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d1e6      	bne.n	800d308 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d33a:	bf00      	nop
 800d33c:	bf00      	nop
 800d33e:	3710      	adds	r7, #16
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}
 800d344:	08016c50 	.word	0x08016c50
 800d348:	08017384 	.word	0x08017384
 800d34c:	08016c94 	.word	0x08016c94
 800d350:	080173b8 	.word	0x080173b8

0800d354 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b084      	sub	sp, #16
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d02a      	beq.n	800d3ba <tcp_netif_ip_addr_changed+0x66>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d026      	beq.n	800d3ba <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d36c:	4b15      	ldr	r3, [pc, #84]	@ (800d3c4 <tcp_netif_ip_addr_changed+0x70>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	4619      	mov	r1, r3
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f7ff ffb6 	bl	800d2e4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d378:	4b13      	ldr	r3, [pc, #76]	@ (800d3c8 <tcp_netif_ip_addr_changed+0x74>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	4619      	mov	r1, r3
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f7ff ffb0 	bl	800d2e4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d017      	beq.n	800d3ba <tcp_netif_ip_addr_changed+0x66>
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d013      	beq.n	800d3ba <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d392:	4b0e      	ldr	r3, [pc, #56]	@ (800d3cc <tcp_netif_ip_addr_changed+0x78>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	60fb      	str	r3, [r7, #12]
 800d398:	e00c      	b.n	800d3b4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	681a      	ldr	r2, [r3, #0]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d103      	bne.n	800d3ae <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	681a      	ldr	r2, [r3, #0]
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	68db      	ldr	r3, [r3, #12]
 800d3b2:	60fb      	str	r3, [r7, #12]
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d1ef      	bne.n	800d39a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d3ba:	bf00      	nop
 800d3bc:	3710      	adds	r7, #16
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}
 800d3c2:	bf00      	nop
 800d3c4:	20008368 	.word	0x20008368
 800d3c8:	20008360 	.word	0x20008360
 800d3cc:	20008364 	.word	0x20008364

0800d3d0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b082      	sub	sp, #8
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d007      	beq.n	800d3f0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f7ff fc37 	bl	800cc58 <tcp_segs_free>
    pcb->ooseq = NULL;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d3f0:	bf00      	nop
 800d3f2:	3708      	adds	r7, #8
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}

0800d3f8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d3f8:	b590      	push	{r4, r7, lr}
 800d3fa:	b08d      	sub	sp, #52	@ 0x34
 800d3fc:	af04      	add	r7, sp, #16
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d105      	bne.n	800d414 <tcp_input+0x1c>
 800d408:	4b9b      	ldr	r3, [pc, #620]	@ (800d678 <tcp_input+0x280>)
 800d40a:	2283      	movs	r2, #131	@ 0x83
 800d40c:	499b      	ldr	r1, [pc, #620]	@ (800d67c <tcp_input+0x284>)
 800d40e:	489c      	ldr	r0, [pc, #624]	@ (800d680 <tcp_input+0x288>)
 800d410:	f007 fd6a 	bl	8014ee8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	4a9a      	ldr	r2, [pc, #616]	@ (800d684 <tcp_input+0x28c>)
 800d41a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	895b      	ldrh	r3, [r3, #10]
 800d420:	2b13      	cmp	r3, #19
 800d422:	f240 83d1 	bls.w	800dbc8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d426:	4b98      	ldr	r3, [pc, #608]	@ (800d688 <tcp_input+0x290>)
 800d428:	695b      	ldr	r3, [r3, #20]
 800d42a:	4a97      	ldr	r2, [pc, #604]	@ (800d688 <tcp_input+0x290>)
 800d42c:	6812      	ldr	r2, [r2, #0]
 800d42e:	4611      	mov	r1, r2
 800d430:	4618      	mov	r0, r3
 800d432:	f006 f9a5 	bl	8013780 <ip4_addr_isbroadcast_u32>
 800d436:	4603      	mov	r3, r0
 800d438:	2b00      	cmp	r3, #0
 800d43a:	f040 83c7 	bne.w	800dbcc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d43e:	4b92      	ldr	r3, [pc, #584]	@ (800d688 <tcp_input+0x290>)
 800d440:	695b      	ldr	r3, [r3, #20]
 800d442:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d446:	2be0      	cmp	r3, #224	@ 0xe0
 800d448:	f000 83c0 	beq.w	800dbcc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d44c:	4b8d      	ldr	r3, [pc, #564]	@ (800d684 <tcp_input+0x28c>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	899b      	ldrh	r3, [r3, #12]
 800d452:	b29b      	uxth	r3, r3
 800d454:	4618      	mov	r0, r3
 800d456:	f7fc fd3f 	bl	8009ed8 <lwip_htons>
 800d45a:	4603      	mov	r3, r0
 800d45c:	0b1b      	lsrs	r3, r3, #12
 800d45e:	b29b      	uxth	r3, r3
 800d460:	b2db      	uxtb	r3, r3
 800d462:	009b      	lsls	r3, r3, #2
 800d464:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d466:	7cbb      	ldrb	r3, [r7, #18]
 800d468:	2b13      	cmp	r3, #19
 800d46a:	f240 83b1 	bls.w	800dbd0 <tcp_input+0x7d8>
 800d46e:	7cbb      	ldrb	r3, [r7, #18]
 800d470:	b29a      	uxth	r2, r3
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	891b      	ldrh	r3, [r3, #8]
 800d476:	429a      	cmp	r2, r3
 800d478:	f200 83aa 	bhi.w	800dbd0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d47c:	7cbb      	ldrb	r3, [r7, #18]
 800d47e:	b29b      	uxth	r3, r3
 800d480:	3b14      	subs	r3, #20
 800d482:	b29a      	uxth	r2, r3
 800d484:	4b81      	ldr	r3, [pc, #516]	@ (800d68c <tcp_input+0x294>)
 800d486:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d488:	4b81      	ldr	r3, [pc, #516]	@ (800d690 <tcp_input+0x298>)
 800d48a:	2200      	movs	r2, #0
 800d48c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	895a      	ldrh	r2, [r3, #10]
 800d492:	7cbb      	ldrb	r3, [r7, #18]
 800d494:	b29b      	uxth	r3, r3
 800d496:	429a      	cmp	r2, r3
 800d498:	d309      	bcc.n	800d4ae <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d49a:	4b7c      	ldr	r3, [pc, #496]	@ (800d68c <tcp_input+0x294>)
 800d49c:	881a      	ldrh	r2, [r3, #0]
 800d49e:	4b7d      	ldr	r3, [pc, #500]	@ (800d694 <tcp_input+0x29c>)
 800d4a0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d4a2:	7cbb      	ldrb	r3, [r7, #18]
 800d4a4:	4619      	mov	r1, r3
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f7fe f8e0 	bl	800b66c <pbuf_remove_header>
 800d4ac:	e04e      	b.n	800d54c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d105      	bne.n	800d4c2 <tcp_input+0xca>
 800d4b6:	4b70      	ldr	r3, [pc, #448]	@ (800d678 <tcp_input+0x280>)
 800d4b8:	22c2      	movs	r2, #194	@ 0xc2
 800d4ba:	4977      	ldr	r1, [pc, #476]	@ (800d698 <tcp_input+0x2a0>)
 800d4bc:	4870      	ldr	r0, [pc, #448]	@ (800d680 <tcp_input+0x288>)
 800d4be:	f007 fd13 	bl	8014ee8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d4c2:	2114      	movs	r1, #20
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f7fe f8d1 	bl	800b66c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	895a      	ldrh	r2, [r3, #10]
 800d4ce:	4b71      	ldr	r3, [pc, #452]	@ (800d694 <tcp_input+0x29c>)
 800d4d0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d4d2:	4b6e      	ldr	r3, [pc, #440]	@ (800d68c <tcp_input+0x294>)
 800d4d4:	881a      	ldrh	r2, [r3, #0]
 800d4d6:	4b6f      	ldr	r3, [pc, #444]	@ (800d694 <tcp_input+0x29c>)
 800d4d8:	881b      	ldrh	r3, [r3, #0]
 800d4da:	1ad3      	subs	r3, r2, r3
 800d4dc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d4de:	4b6d      	ldr	r3, [pc, #436]	@ (800d694 <tcp_input+0x29c>)
 800d4e0:	881b      	ldrh	r3, [r3, #0]
 800d4e2:	4619      	mov	r1, r3
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f7fe f8c1 	bl	800b66c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	895b      	ldrh	r3, [r3, #10]
 800d4f0:	8a3a      	ldrh	r2, [r7, #16]
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	f200 836e 	bhi.w	800dbd4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	685b      	ldr	r3, [r3, #4]
 800d4fe:	4a64      	ldr	r2, [pc, #400]	@ (800d690 <tcp_input+0x298>)
 800d500:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	8a3a      	ldrh	r2, [r7, #16]
 800d508:	4611      	mov	r1, r2
 800d50a:	4618      	mov	r0, r3
 800d50c:	f7fe f8ae 	bl	800b66c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	891a      	ldrh	r2, [r3, #8]
 800d514:	8a3b      	ldrh	r3, [r7, #16]
 800d516:	1ad3      	subs	r3, r2, r3
 800d518:	b29a      	uxth	r2, r3
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	895b      	ldrh	r3, [r3, #10]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d005      	beq.n	800d532 <tcp_input+0x13a>
 800d526:	4b54      	ldr	r3, [pc, #336]	@ (800d678 <tcp_input+0x280>)
 800d528:	22df      	movs	r2, #223	@ 0xdf
 800d52a:	495c      	ldr	r1, [pc, #368]	@ (800d69c <tcp_input+0x2a4>)
 800d52c:	4854      	ldr	r0, [pc, #336]	@ (800d680 <tcp_input+0x288>)
 800d52e:	f007 fcdb 	bl	8014ee8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	891a      	ldrh	r2, [r3, #8]
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	891b      	ldrh	r3, [r3, #8]
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d005      	beq.n	800d54c <tcp_input+0x154>
 800d540:	4b4d      	ldr	r3, [pc, #308]	@ (800d678 <tcp_input+0x280>)
 800d542:	22e0      	movs	r2, #224	@ 0xe0
 800d544:	4956      	ldr	r1, [pc, #344]	@ (800d6a0 <tcp_input+0x2a8>)
 800d546:	484e      	ldr	r0, [pc, #312]	@ (800d680 <tcp_input+0x288>)
 800d548:	f007 fcce 	bl	8014ee8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d54c:	4b4d      	ldr	r3, [pc, #308]	@ (800d684 <tcp_input+0x28c>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	881b      	ldrh	r3, [r3, #0]
 800d552:	b29b      	uxth	r3, r3
 800d554:	4a4b      	ldr	r2, [pc, #300]	@ (800d684 <tcp_input+0x28c>)
 800d556:	6814      	ldr	r4, [r2, #0]
 800d558:	4618      	mov	r0, r3
 800d55a:	f7fc fcbd 	bl	8009ed8 <lwip_htons>
 800d55e:	4603      	mov	r3, r0
 800d560:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d562:	4b48      	ldr	r3, [pc, #288]	@ (800d684 <tcp_input+0x28c>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	885b      	ldrh	r3, [r3, #2]
 800d568:	b29b      	uxth	r3, r3
 800d56a:	4a46      	ldr	r2, [pc, #280]	@ (800d684 <tcp_input+0x28c>)
 800d56c:	6814      	ldr	r4, [r2, #0]
 800d56e:	4618      	mov	r0, r3
 800d570:	f7fc fcb2 	bl	8009ed8 <lwip_htons>
 800d574:	4603      	mov	r3, r0
 800d576:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d578:	4b42      	ldr	r3, [pc, #264]	@ (800d684 <tcp_input+0x28c>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	685b      	ldr	r3, [r3, #4]
 800d57e:	4a41      	ldr	r2, [pc, #260]	@ (800d684 <tcp_input+0x28c>)
 800d580:	6814      	ldr	r4, [r2, #0]
 800d582:	4618      	mov	r0, r3
 800d584:	f7fc fcbe 	bl	8009f04 <lwip_htonl>
 800d588:	4603      	mov	r3, r0
 800d58a:	6063      	str	r3, [r4, #4]
 800d58c:	6863      	ldr	r3, [r4, #4]
 800d58e:	4a45      	ldr	r2, [pc, #276]	@ (800d6a4 <tcp_input+0x2ac>)
 800d590:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d592:	4b3c      	ldr	r3, [pc, #240]	@ (800d684 <tcp_input+0x28c>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	689b      	ldr	r3, [r3, #8]
 800d598:	4a3a      	ldr	r2, [pc, #232]	@ (800d684 <tcp_input+0x28c>)
 800d59a:	6814      	ldr	r4, [r2, #0]
 800d59c:	4618      	mov	r0, r3
 800d59e:	f7fc fcb1 	bl	8009f04 <lwip_htonl>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	60a3      	str	r3, [r4, #8]
 800d5a6:	68a3      	ldr	r3, [r4, #8]
 800d5a8:	4a3f      	ldr	r2, [pc, #252]	@ (800d6a8 <tcp_input+0x2b0>)
 800d5aa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d5ac:	4b35      	ldr	r3, [pc, #212]	@ (800d684 <tcp_input+0x28c>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	89db      	ldrh	r3, [r3, #14]
 800d5b2:	b29b      	uxth	r3, r3
 800d5b4:	4a33      	ldr	r2, [pc, #204]	@ (800d684 <tcp_input+0x28c>)
 800d5b6:	6814      	ldr	r4, [r2, #0]
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f7fc fc8d 	bl	8009ed8 <lwip_htons>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d5c2:	4b30      	ldr	r3, [pc, #192]	@ (800d684 <tcp_input+0x28c>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	899b      	ldrh	r3, [r3, #12]
 800d5c8:	b29b      	uxth	r3, r3
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f7fc fc84 	bl	8009ed8 <lwip_htons>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	b2db      	uxtb	r3, r3
 800d5d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d5d8:	b2da      	uxtb	r2, r3
 800d5da:	4b34      	ldr	r3, [pc, #208]	@ (800d6ac <tcp_input+0x2b4>)
 800d5dc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	891a      	ldrh	r2, [r3, #8]
 800d5e2:	4b33      	ldr	r3, [pc, #204]	@ (800d6b0 <tcp_input+0x2b8>)
 800d5e4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d5e6:	4b31      	ldr	r3, [pc, #196]	@ (800d6ac <tcp_input+0x2b4>)
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	f003 0303 	and.w	r3, r3, #3
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d00c      	beq.n	800d60c <tcp_input+0x214>
    tcplen++;
 800d5f2:	4b2f      	ldr	r3, [pc, #188]	@ (800d6b0 <tcp_input+0x2b8>)
 800d5f4:	881b      	ldrh	r3, [r3, #0]
 800d5f6:	3301      	adds	r3, #1
 800d5f8:	b29a      	uxth	r2, r3
 800d5fa:	4b2d      	ldr	r3, [pc, #180]	@ (800d6b0 <tcp_input+0x2b8>)
 800d5fc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	891a      	ldrh	r2, [r3, #8]
 800d602:	4b2b      	ldr	r3, [pc, #172]	@ (800d6b0 <tcp_input+0x2b8>)
 800d604:	881b      	ldrh	r3, [r3, #0]
 800d606:	429a      	cmp	r2, r3
 800d608:	f200 82e6 	bhi.w	800dbd8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d60c:	2300      	movs	r3, #0
 800d60e:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d610:	4b28      	ldr	r3, [pc, #160]	@ (800d6b4 <tcp_input+0x2bc>)
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	61bb      	str	r3, [r7, #24]
 800d616:	e09d      	b.n	800d754 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d618:	69bb      	ldr	r3, [r7, #24]
 800d61a:	7d1b      	ldrb	r3, [r3, #20]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d105      	bne.n	800d62c <tcp_input+0x234>
 800d620:	4b15      	ldr	r3, [pc, #84]	@ (800d678 <tcp_input+0x280>)
 800d622:	22fb      	movs	r2, #251	@ 0xfb
 800d624:	4924      	ldr	r1, [pc, #144]	@ (800d6b8 <tcp_input+0x2c0>)
 800d626:	4816      	ldr	r0, [pc, #88]	@ (800d680 <tcp_input+0x288>)
 800d628:	f007 fc5e 	bl	8014ee8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d62c:	69bb      	ldr	r3, [r7, #24]
 800d62e:	7d1b      	ldrb	r3, [r3, #20]
 800d630:	2b0a      	cmp	r3, #10
 800d632:	d105      	bne.n	800d640 <tcp_input+0x248>
 800d634:	4b10      	ldr	r3, [pc, #64]	@ (800d678 <tcp_input+0x280>)
 800d636:	22fc      	movs	r2, #252	@ 0xfc
 800d638:	4920      	ldr	r1, [pc, #128]	@ (800d6bc <tcp_input+0x2c4>)
 800d63a:	4811      	ldr	r0, [pc, #68]	@ (800d680 <tcp_input+0x288>)
 800d63c:	f007 fc54 	bl	8014ee8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d640:	69bb      	ldr	r3, [r7, #24]
 800d642:	7d1b      	ldrb	r3, [r3, #20]
 800d644:	2b01      	cmp	r3, #1
 800d646:	d105      	bne.n	800d654 <tcp_input+0x25c>
 800d648:	4b0b      	ldr	r3, [pc, #44]	@ (800d678 <tcp_input+0x280>)
 800d64a:	22fd      	movs	r2, #253	@ 0xfd
 800d64c:	491c      	ldr	r1, [pc, #112]	@ (800d6c0 <tcp_input+0x2c8>)
 800d64e:	480c      	ldr	r0, [pc, #48]	@ (800d680 <tcp_input+0x288>)
 800d650:	f007 fc4a 	bl	8014ee8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d654:	69bb      	ldr	r3, [r7, #24]
 800d656:	7a1b      	ldrb	r3, [r3, #8]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d033      	beq.n	800d6c4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d65c:	69bb      	ldr	r3, [r7, #24]
 800d65e:	7a1a      	ldrb	r2, [r3, #8]
 800d660:	4b09      	ldr	r3, [pc, #36]	@ (800d688 <tcp_input+0x290>)
 800d662:	685b      	ldr	r3, [r3, #4]
 800d664:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d668:	3301      	adds	r3, #1
 800d66a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d029      	beq.n	800d6c4 <tcp_input+0x2cc>
      prev = pcb;
 800d670:	69bb      	ldr	r3, [r7, #24]
 800d672:	61fb      	str	r3, [r7, #28]
      continue;
 800d674:	e06b      	b.n	800d74e <tcp_input+0x356>
 800d676:	bf00      	nop
 800d678:	080173e0 	.word	0x080173e0
 800d67c:	08017414 	.word	0x08017414
 800d680:	0801742c 	.word	0x0801742c
 800d684:	20008388 	.word	0x20008388
 800d688:	20005400 	.word	0x20005400
 800d68c:	2000838c 	.word	0x2000838c
 800d690:	20008390 	.word	0x20008390
 800d694:	2000838e 	.word	0x2000838e
 800d698:	08017454 	.word	0x08017454
 800d69c:	08017464 	.word	0x08017464
 800d6a0:	08017470 	.word	0x08017470
 800d6a4:	20008398 	.word	0x20008398
 800d6a8:	2000839c 	.word	0x2000839c
 800d6ac:	200083a4 	.word	0x200083a4
 800d6b0:	200083a2 	.word	0x200083a2
 800d6b4:	20008368 	.word	0x20008368
 800d6b8:	08017490 	.word	0x08017490
 800d6bc:	080174b8 	.word	0x080174b8
 800d6c0:	080174e4 	.word	0x080174e4
    }

    if (pcb->remote_port == tcphdr->src &&
 800d6c4:	69bb      	ldr	r3, [r7, #24]
 800d6c6:	8b1a      	ldrh	r2, [r3, #24]
 800d6c8:	4b72      	ldr	r3, [pc, #456]	@ (800d894 <tcp_input+0x49c>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	881b      	ldrh	r3, [r3, #0]
 800d6ce:	b29b      	uxth	r3, r3
 800d6d0:	429a      	cmp	r2, r3
 800d6d2:	d13a      	bne.n	800d74a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d6d4:	69bb      	ldr	r3, [r7, #24]
 800d6d6:	8ada      	ldrh	r2, [r3, #22]
 800d6d8:	4b6e      	ldr	r3, [pc, #440]	@ (800d894 <tcp_input+0x49c>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	885b      	ldrh	r3, [r3, #2]
 800d6de:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	d132      	bne.n	800d74a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d6e4:	69bb      	ldr	r3, [r7, #24]
 800d6e6:	685a      	ldr	r2, [r3, #4]
 800d6e8:	4b6b      	ldr	r3, [pc, #428]	@ (800d898 <tcp_input+0x4a0>)
 800d6ea:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d12c      	bne.n	800d74a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d6f0:	69bb      	ldr	r3, [r7, #24]
 800d6f2:	681a      	ldr	r2, [r3, #0]
 800d6f4:	4b68      	ldr	r3, [pc, #416]	@ (800d898 <tcp_input+0x4a0>)
 800d6f6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d126      	bne.n	800d74a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d6fc:	69bb      	ldr	r3, [r7, #24]
 800d6fe:	68db      	ldr	r3, [r3, #12]
 800d700:	69ba      	ldr	r2, [r7, #24]
 800d702:	429a      	cmp	r2, r3
 800d704:	d106      	bne.n	800d714 <tcp_input+0x31c>
 800d706:	4b65      	ldr	r3, [pc, #404]	@ (800d89c <tcp_input+0x4a4>)
 800d708:	f240 120d 	movw	r2, #269	@ 0x10d
 800d70c:	4964      	ldr	r1, [pc, #400]	@ (800d8a0 <tcp_input+0x4a8>)
 800d70e:	4865      	ldr	r0, [pc, #404]	@ (800d8a4 <tcp_input+0x4ac>)
 800d710:	f007 fbea 	bl	8014ee8 <iprintf>
      if (prev != NULL) {
 800d714:	69fb      	ldr	r3, [r7, #28]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d00a      	beq.n	800d730 <tcp_input+0x338>
        prev->next = pcb->next;
 800d71a:	69bb      	ldr	r3, [r7, #24]
 800d71c:	68da      	ldr	r2, [r3, #12]
 800d71e:	69fb      	ldr	r3, [r7, #28]
 800d720:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d722:	4b61      	ldr	r3, [pc, #388]	@ (800d8a8 <tcp_input+0x4b0>)
 800d724:	681a      	ldr	r2, [r3, #0]
 800d726:	69bb      	ldr	r3, [r7, #24]
 800d728:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d72a:	4a5f      	ldr	r2, [pc, #380]	@ (800d8a8 <tcp_input+0x4b0>)
 800d72c:	69bb      	ldr	r3, [r7, #24]
 800d72e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	68db      	ldr	r3, [r3, #12]
 800d734:	69ba      	ldr	r2, [r7, #24]
 800d736:	429a      	cmp	r2, r3
 800d738:	d111      	bne.n	800d75e <tcp_input+0x366>
 800d73a:	4b58      	ldr	r3, [pc, #352]	@ (800d89c <tcp_input+0x4a4>)
 800d73c:	f240 1215 	movw	r2, #277	@ 0x115
 800d740:	495a      	ldr	r1, [pc, #360]	@ (800d8ac <tcp_input+0x4b4>)
 800d742:	4858      	ldr	r0, [pc, #352]	@ (800d8a4 <tcp_input+0x4ac>)
 800d744:	f007 fbd0 	bl	8014ee8 <iprintf>
      break;
 800d748:	e009      	b.n	800d75e <tcp_input+0x366>
    }
    prev = pcb;
 800d74a:	69bb      	ldr	r3, [r7, #24]
 800d74c:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d74e:	69bb      	ldr	r3, [r7, #24]
 800d750:	68db      	ldr	r3, [r3, #12]
 800d752:	61bb      	str	r3, [r7, #24]
 800d754:	69bb      	ldr	r3, [r7, #24]
 800d756:	2b00      	cmp	r3, #0
 800d758:	f47f af5e 	bne.w	800d618 <tcp_input+0x220>
 800d75c:	e000      	b.n	800d760 <tcp_input+0x368>
      break;
 800d75e:	bf00      	nop
  }

  if (pcb == NULL) {
 800d760:	69bb      	ldr	r3, [r7, #24]
 800d762:	2b00      	cmp	r3, #0
 800d764:	f040 80aa 	bne.w	800d8bc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d768:	4b51      	ldr	r3, [pc, #324]	@ (800d8b0 <tcp_input+0x4b8>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	61bb      	str	r3, [r7, #24]
 800d76e:	e03f      	b.n	800d7f0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d770:	69bb      	ldr	r3, [r7, #24]
 800d772:	7d1b      	ldrb	r3, [r3, #20]
 800d774:	2b0a      	cmp	r3, #10
 800d776:	d006      	beq.n	800d786 <tcp_input+0x38e>
 800d778:	4b48      	ldr	r3, [pc, #288]	@ (800d89c <tcp_input+0x4a4>)
 800d77a:	f240 121f 	movw	r2, #287	@ 0x11f
 800d77e:	494d      	ldr	r1, [pc, #308]	@ (800d8b4 <tcp_input+0x4bc>)
 800d780:	4848      	ldr	r0, [pc, #288]	@ (800d8a4 <tcp_input+0x4ac>)
 800d782:	f007 fbb1 	bl	8014ee8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d786:	69bb      	ldr	r3, [r7, #24]
 800d788:	7a1b      	ldrb	r3, [r3, #8]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d009      	beq.n	800d7a2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d78e:	69bb      	ldr	r3, [r7, #24]
 800d790:	7a1a      	ldrb	r2, [r3, #8]
 800d792:	4b41      	ldr	r3, [pc, #260]	@ (800d898 <tcp_input+0x4a0>)
 800d794:	685b      	ldr	r3, [r3, #4]
 800d796:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d79a:	3301      	adds	r3, #1
 800d79c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d79e:	429a      	cmp	r2, r3
 800d7a0:	d122      	bne.n	800d7e8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d7a2:	69bb      	ldr	r3, [r7, #24]
 800d7a4:	8b1a      	ldrh	r2, [r3, #24]
 800d7a6:	4b3b      	ldr	r3, [pc, #236]	@ (800d894 <tcp_input+0x49c>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	881b      	ldrh	r3, [r3, #0]
 800d7ac:	b29b      	uxth	r3, r3
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d11b      	bne.n	800d7ea <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800d7b2:	69bb      	ldr	r3, [r7, #24]
 800d7b4:	8ada      	ldrh	r2, [r3, #22]
 800d7b6:	4b37      	ldr	r3, [pc, #220]	@ (800d894 <tcp_input+0x49c>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	885b      	ldrh	r3, [r3, #2]
 800d7bc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d7be:	429a      	cmp	r2, r3
 800d7c0:	d113      	bne.n	800d7ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d7c2:	69bb      	ldr	r3, [r7, #24]
 800d7c4:	685a      	ldr	r2, [r3, #4]
 800d7c6:	4b34      	ldr	r3, [pc, #208]	@ (800d898 <tcp_input+0x4a0>)
 800d7c8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d7ca:	429a      	cmp	r2, r3
 800d7cc:	d10d      	bne.n	800d7ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d7ce:	69bb      	ldr	r3, [r7, #24]
 800d7d0:	681a      	ldr	r2, [r3, #0]
 800d7d2:	4b31      	ldr	r3, [pc, #196]	@ (800d898 <tcp_input+0x4a0>)
 800d7d4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d7d6:	429a      	cmp	r2, r3
 800d7d8:	d107      	bne.n	800d7ea <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800d7da:	69b8      	ldr	r0, [r7, #24]
 800d7dc:	f000 fb56 	bl	800de8c <tcp_timewait_input>
        }
        pbuf_free(p);
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f7fd ffc9 	bl	800b778 <pbuf_free>
        return;
 800d7e6:	e1fd      	b.n	800dbe4 <tcp_input+0x7ec>
        continue;
 800d7e8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d7ea:	69bb      	ldr	r3, [r7, #24]
 800d7ec:	68db      	ldr	r3, [r3, #12]
 800d7ee:	61bb      	str	r3, [r7, #24]
 800d7f0:	69bb      	ldr	r3, [r7, #24]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d1bc      	bne.n	800d770 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d7fa:	4b2f      	ldr	r3, [pc, #188]	@ (800d8b8 <tcp_input+0x4c0>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	617b      	str	r3, [r7, #20]
 800d800:	e02a      	b.n	800d858 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	7a1b      	ldrb	r3, [r3, #8]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d00c      	beq.n	800d824 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	7a1a      	ldrb	r2, [r3, #8]
 800d80e:	4b22      	ldr	r3, [pc, #136]	@ (800d898 <tcp_input+0x4a0>)
 800d810:	685b      	ldr	r3, [r3, #4]
 800d812:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d816:	3301      	adds	r3, #1
 800d818:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d002      	beq.n	800d824 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	61fb      	str	r3, [r7, #28]
        continue;
 800d822:	e016      	b.n	800d852 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	8ada      	ldrh	r2, [r3, #22]
 800d828:	4b1a      	ldr	r3, [pc, #104]	@ (800d894 <tcp_input+0x49c>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	885b      	ldrh	r3, [r3, #2]
 800d82e:	b29b      	uxth	r3, r3
 800d830:	429a      	cmp	r2, r3
 800d832:	d10c      	bne.n	800d84e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	681a      	ldr	r2, [r3, #0]
 800d838:	4b17      	ldr	r3, [pc, #92]	@ (800d898 <tcp_input+0x4a0>)
 800d83a:	695b      	ldr	r3, [r3, #20]
 800d83c:	429a      	cmp	r2, r3
 800d83e:	d00f      	beq.n	800d860 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d00d      	beq.n	800d862 <tcp_input+0x46a>
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d009      	beq.n	800d862 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	68db      	ldr	r3, [r3, #12]
 800d856:	617b      	str	r3, [r7, #20]
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d1d1      	bne.n	800d802 <tcp_input+0x40a>
 800d85e:	e000      	b.n	800d862 <tcp_input+0x46a>
            break;
 800d860:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d029      	beq.n	800d8bc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d868:	69fb      	ldr	r3, [r7, #28]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d00a      	beq.n	800d884 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	68da      	ldr	r2, [r3, #12]
 800d872:	69fb      	ldr	r3, [r7, #28]
 800d874:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d876:	4b10      	ldr	r3, [pc, #64]	@ (800d8b8 <tcp_input+0x4c0>)
 800d878:	681a      	ldr	r2, [r3, #0]
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d87e:	4a0e      	ldr	r2, [pc, #56]	@ (800d8b8 <tcp_input+0x4c0>)
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d884:	6978      	ldr	r0, [r7, #20]
 800d886:	f000 fa03 	bl	800dc90 <tcp_listen_input>
      }
      pbuf_free(p);
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f7fd ff74 	bl	800b778 <pbuf_free>
      return;
 800d890:	e1a8      	b.n	800dbe4 <tcp_input+0x7ec>
 800d892:	bf00      	nop
 800d894:	20008388 	.word	0x20008388
 800d898:	20005400 	.word	0x20005400
 800d89c:	080173e0 	.word	0x080173e0
 800d8a0:	0801750c 	.word	0x0801750c
 800d8a4:	0801742c 	.word	0x0801742c
 800d8a8:	20008368 	.word	0x20008368
 800d8ac:	08017538 	.word	0x08017538
 800d8b0:	2000836c 	.word	0x2000836c
 800d8b4:	08017564 	.word	0x08017564
 800d8b8:	20008364 	.word	0x20008364
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d8bc:	69bb      	ldr	r3, [r7, #24]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	f000 8158 	beq.w	800db74 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d8c4:	4b95      	ldr	r3, [pc, #596]	@ (800db1c <tcp_input+0x724>)
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	891a      	ldrh	r2, [r3, #8]
 800d8ce:	4b93      	ldr	r3, [pc, #588]	@ (800db1c <tcp_input+0x724>)
 800d8d0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d8d2:	4a92      	ldr	r2, [pc, #584]	@ (800db1c <tcp_input+0x724>)
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d8d8:	4b91      	ldr	r3, [pc, #580]	@ (800db20 <tcp_input+0x728>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4a8f      	ldr	r2, [pc, #572]	@ (800db1c <tcp_input+0x724>)
 800d8de:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 800d8e0:	4b90      	ldr	r3, [pc, #576]	@ (800db24 <tcp_input+0x72c>)
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d8e6:	4b90      	ldr	r3, [pc, #576]	@ (800db28 <tcp_input+0x730>)
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d8ec:	4b8f      	ldr	r3, [pc, #572]	@ (800db2c <tcp_input+0x734>)
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d8f2:	4b8f      	ldr	r3, [pc, #572]	@ (800db30 <tcp_input+0x738>)
 800d8f4:	781b      	ldrb	r3, [r3, #0]
 800d8f6:	f003 0308 	and.w	r3, r3, #8
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d006      	beq.n	800d90c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	7b5b      	ldrb	r3, [r3, #13]
 800d902:	f043 0301 	orr.w	r3, r3, #1
 800d906:	b2da      	uxtb	r2, r3
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d90c:	69bb      	ldr	r3, [r7, #24]
 800d90e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d910:	2b00      	cmp	r3, #0
 800d912:	d017      	beq.n	800d944 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d914:	69b8      	ldr	r0, [r7, #24]
 800d916:	f7ff f923 	bl	800cb60 <tcp_process_refused_data>
 800d91a:	4603      	mov	r3, r0
 800d91c:	f113 0f0d 	cmn.w	r3, #13
 800d920:	d007      	beq.n	800d932 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d922:	69bb      	ldr	r3, [r7, #24]
 800d924:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d926:	2b00      	cmp	r3, #0
 800d928:	d00c      	beq.n	800d944 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d92a:	4b82      	ldr	r3, [pc, #520]	@ (800db34 <tcp_input+0x73c>)
 800d92c:	881b      	ldrh	r3, [r3, #0]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d008      	beq.n	800d944 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d932:	69bb      	ldr	r3, [r7, #24]
 800d934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d936:	2b00      	cmp	r3, #0
 800d938:	f040 80e3 	bne.w	800db02 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d93c:	69b8      	ldr	r0, [r7, #24]
 800d93e:	f003 f9bb 	bl	8010cb8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d942:	e0de      	b.n	800db02 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800d944:	4a7c      	ldr	r2, [pc, #496]	@ (800db38 <tcp_input+0x740>)
 800d946:	69bb      	ldr	r3, [r7, #24]
 800d948:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d94a:	69b8      	ldr	r0, [r7, #24]
 800d94c:	f000 fb18 	bl	800df80 <tcp_process>
 800d950:	4603      	mov	r3, r0
 800d952:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d954:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d958:	f113 0f0d 	cmn.w	r3, #13
 800d95c:	f000 80d3 	beq.w	800db06 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800d960:	4b71      	ldr	r3, [pc, #452]	@ (800db28 <tcp_input+0x730>)
 800d962:	781b      	ldrb	r3, [r3, #0]
 800d964:	f003 0308 	and.w	r3, r3, #8
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d015      	beq.n	800d998 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d96c:	69bb      	ldr	r3, [r7, #24]
 800d96e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d972:	2b00      	cmp	r3, #0
 800d974:	d008      	beq.n	800d988 <tcp_input+0x590>
 800d976:	69bb      	ldr	r3, [r7, #24]
 800d978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d97c:	69ba      	ldr	r2, [r7, #24]
 800d97e:	6912      	ldr	r2, [r2, #16]
 800d980:	f06f 010d 	mvn.w	r1, #13
 800d984:	4610      	mov	r0, r2
 800d986:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d988:	69b9      	ldr	r1, [r7, #24]
 800d98a:	486c      	ldr	r0, [pc, #432]	@ (800db3c <tcp_input+0x744>)
 800d98c:	f7ff fbb6 	bl	800d0fc <tcp_pcb_remove>
        tcp_free(pcb);
 800d990:	69b8      	ldr	r0, [r7, #24]
 800d992:	f7fe f9a1 	bl	800bcd8 <tcp_free>
 800d996:	e0da      	b.n	800db4e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800d998:	2300      	movs	r3, #0
 800d99a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d99c:	4b63      	ldr	r3, [pc, #396]	@ (800db2c <tcp_input+0x734>)
 800d99e:	881b      	ldrh	r3, [r3, #0]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d01d      	beq.n	800d9e0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d9a4:	4b61      	ldr	r3, [pc, #388]	@ (800db2c <tcp_input+0x734>)
 800d9a6:	881b      	ldrh	r3, [r3, #0]
 800d9a8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d9aa:	69bb      	ldr	r3, [r7, #24]
 800d9ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d00a      	beq.n	800d9ca <tcp_input+0x5d2>
 800d9b4:	69bb      	ldr	r3, [r7, #24]
 800d9b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d9ba:	69ba      	ldr	r2, [r7, #24]
 800d9bc:	6910      	ldr	r0, [r2, #16]
 800d9be:	89fa      	ldrh	r2, [r7, #14]
 800d9c0:	69b9      	ldr	r1, [r7, #24]
 800d9c2:	4798      	blx	r3
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	74fb      	strb	r3, [r7, #19]
 800d9c8:	e001      	b.n	800d9ce <tcp_input+0x5d6>
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d9ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d9d2:	f113 0f0d 	cmn.w	r3, #13
 800d9d6:	f000 8098 	beq.w	800db0a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d9da:	4b54      	ldr	r3, [pc, #336]	@ (800db2c <tcp_input+0x734>)
 800d9dc:	2200      	movs	r2, #0
 800d9de:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d9e0:	69b8      	ldr	r0, [r7, #24]
 800d9e2:	f000 f915 	bl	800dc10 <tcp_input_delayed_close>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	f040 8090 	bne.w	800db0e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d9ee:	4b4d      	ldr	r3, [pc, #308]	@ (800db24 <tcp_input+0x72c>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d041      	beq.n	800da7a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d9f6:	69bb      	ldr	r3, [r7, #24]
 800d9f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d006      	beq.n	800da0c <tcp_input+0x614>
 800d9fe:	4b50      	ldr	r3, [pc, #320]	@ (800db40 <tcp_input+0x748>)
 800da00:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800da04:	494f      	ldr	r1, [pc, #316]	@ (800db44 <tcp_input+0x74c>)
 800da06:	4850      	ldr	r0, [pc, #320]	@ (800db48 <tcp_input+0x750>)
 800da08:	f007 fa6e 	bl	8014ee8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800da0c:	69bb      	ldr	r3, [r7, #24]
 800da0e:	8b5b      	ldrh	r3, [r3, #26]
 800da10:	f003 0310 	and.w	r3, r3, #16
 800da14:	2b00      	cmp	r3, #0
 800da16:	d008      	beq.n	800da2a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800da18:	4b42      	ldr	r3, [pc, #264]	@ (800db24 <tcp_input+0x72c>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	4618      	mov	r0, r3
 800da1e:	f7fd feab 	bl	800b778 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800da22:	69b8      	ldr	r0, [r7, #24]
 800da24:	f7fe fc40 	bl	800c2a8 <tcp_abort>
            goto aborted;
 800da28:	e091      	b.n	800db4e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800da2a:	69bb      	ldr	r3, [r7, #24]
 800da2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800da30:	2b00      	cmp	r3, #0
 800da32:	d00c      	beq.n	800da4e <tcp_input+0x656>
 800da34:	69bb      	ldr	r3, [r7, #24]
 800da36:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800da3a:	69bb      	ldr	r3, [r7, #24]
 800da3c:	6918      	ldr	r0, [r3, #16]
 800da3e:	4b39      	ldr	r3, [pc, #228]	@ (800db24 <tcp_input+0x72c>)
 800da40:	681a      	ldr	r2, [r3, #0]
 800da42:	2300      	movs	r3, #0
 800da44:	69b9      	ldr	r1, [r7, #24]
 800da46:	47a0      	blx	r4
 800da48:	4603      	mov	r3, r0
 800da4a:	74fb      	strb	r3, [r7, #19]
 800da4c:	e008      	b.n	800da60 <tcp_input+0x668>
 800da4e:	4b35      	ldr	r3, [pc, #212]	@ (800db24 <tcp_input+0x72c>)
 800da50:	681a      	ldr	r2, [r3, #0]
 800da52:	2300      	movs	r3, #0
 800da54:	69b9      	ldr	r1, [r7, #24]
 800da56:	2000      	movs	r0, #0
 800da58:	f7ff f958 	bl	800cd0c <tcp_recv_null>
 800da5c:	4603      	mov	r3, r0
 800da5e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800da60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800da64:	f113 0f0d 	cmn.w	r3, #13
 800da68:	d053      	beq.n	800db12 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800da6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d003      	beq.n	800da7a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800da72:	4b2c      	ldr	r3, [pc, #176]	@ (800db24 <tcp_input+0x72c>)
 800da74:	681a      	ldr	r2, [r3, #0]
 800da76:	69bb      	ldr	r3, [r7, #24]
 800da78:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800da7a:	4b2b      	ldr	r3, [pc, #172]	@ (800db28 <tcp_input+0x730>)
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	f003 0320 	and.w	r3, r3, #32
 800da82:	2b00      	cmp	r3, #0
 800da84:	d030      	beq.n	800dae8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800da86:	69bb      	ldr	r3, [r7, #24]
 800da88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d009      	beq.n	800daa2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800da8e:	69bb      	ldr	r3, [r7, #24]
 800da90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800da92:	7b5a      	ldrb	r2, [r3, #13]
 800da94:	69bb      	ldr	r3, [r7, #24]
 800da96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800da98:	f042 0220 	orr.w	r2, r2, #32
 800da9c:	b2d2      	uxtb	r2, r2
 800da9e:	735a      	strb	r2, [r3, #13]
 800daa0:	e022      	b.n	800dae8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800daa2:	69bb      	ldr	r3, [r7, #24]
 800daa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800daa6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800daaa:	d005      	beq.n	800dab8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800daac:	69bb      	ldr	r3, [r7, #24]
 800daae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dab0:	3301      	adds	r3, #1
 800dab2:	b29a      	uxth	r2, r3
 800dab4:	69bb      	ldr	r3, [r7, #24]
 800dab6:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800dab8:	69bb      	ldr	r3, [r7, #24]
 800daba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d00b      	beq.n	800dada <tcp_input+0x6e2>
 800dac2:	69bb      	ldr	r3, [r7, #24]
 800dac4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800dac8:	69bb      	ldr	r3, [r7, #24]
 800daca:	6918      	ldr	r0, [r3, #16]
 800dacc:	2300      	movs	r3, #0
 800dace:	2200      	movs	r2, #0
 800dad0:	69b9      	ldr	r1, [r7, #24]
 800dad2:	47a0      	blx	r4
 800dad4:	4603      	mov	r3, r0
 800dad6:	74fb      	strb	r3, [r7, #19]
 800dad8:	e001      	b.n	800dade <tcp_input+0x6e6>
 800dada:	2300      	movs	r3, #0
 800dadc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dade:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dae2:	f113 0f0d 	cmn.w	r3, #13
 800dae6:	d016      	beq.n	800db16 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800dae8:	4b13      	ldr	r3, [pc, #76]	@ (800db38 <tcp_input+0x740>)
 800daea:	2200      	movs	r2, #0
 800daec:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800daee:	69b8      	ldr	r0, [r7, #24]
 800daf0:	f000 f88e 	bl	800dc10 <tcp_input_delayed_close>
 800daf4:	4603      	mov	r3, r0
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d128      	bne.n	800db4c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800dafa:	69b8      	ldr	r0, [r7, #24]
 800dafc:	f002 faca 	bl	8010094 <tcp_output>
 800db00:	e025      	b.n	800db4e <tcp_input+0x756>
        goto aborted;
 800db02:	bf00      	nop
 800db04:	e023      	b.n	800db4e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800db06:	bf00      	nop
 800db08:	e021      	b.n	800db4e <tcp_input+0x756>
              goto aborted;
 800db0a:	bf00      	nop
 800db0c:	e01f      	b.n	800db4e <tcp_input+0x756>
          goto aborted;
 800db0e:	bf00      	nop
 800db10:	e01d      	b.n	800db4e <tcp_input+0x756>
            goto aborted;
 800db12:	bf00      	nop
 800db14:	e01b      	b.n	800db4e <tcp_input+0x756>
              goto aborted;
 800db16:	bf00      	nop
 800db18:	e019      	b.n	800db4e <tcp_input+0x756>
 800db1a:	bf00      	nop
 800db1c:	20008374 	.word	0x20008374
 800db20:	20008388 	.word	0x20008388
 800db24:	200083a8 	.word	0x200083a8
 800db28:	200083a5 	.word	0x200083a5
 800db2c:	200083a0 	.word	0x200083a0
 800db30:	200083a4 	.word	0x200083a4
 800db34:	200083a2 	.word	0x200083a2
 800db38:	200083ac 	.word	0x200083ac
 800db3c:	20008368 	.word	0x20008368
 800db40:	080173e0 	.word	0x080173e0
 800db44:	08017594 	.word	0x08017594
 800db48:	0801742c 	.word	0x0801742c
          goto aborted;
 800db4c:	bf00      	nop
    tcp_input_pcb = NULL;
 800db4e:	4b27      	ldr	r3, [pc, #156]	@ (800dbec <tcp_input+0x7f4>)
 800db50:	2200      	movs	r2, #0
 800db52:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800db54:	4b26      	ldr	r3, [pc, #152]	@ (800dbf0 <tcp_input+0x7f8>)
 800db56:	2200      	movs	r2, #0
 800db58:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800db5a:	4b26      	ldr	r3, [pc, #152]	@ (800dbf4 <tcp_input+0x7fc>)
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d03f      	beq.n	800dbe2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800db62:	4b24      	ldr	r3, [pc, #144]	@ (800dbf4 <tcp_input+0x7fc>)
 800db64:	685b      	ldr	r3, [r3, #4]
 800db66:	4618      	mov	r0, r3
 800db68:	f7fd fe06 	bl	800b778 <pbuf_free>
      inseg.p = NULL;
 800db6c:	4b21      	ldr	r3, [pc, #132]	@ (800dbf4 <tcp_input+0x7fc>)
 800db6e:	2200      	movs	r2, #0
 800db70:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800db72:	e036      	b.n	800dbe2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800db74:	4b20      	ldr	r3, [pc, #128]	@ (800dbf8 <tcp_input+0x800>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	899b      	ldrh	r3, [r3, #12]
 800db7a:	b29b      	uxth	r3, r3
 800db7c:	4618      	mov	r0, r3
 800db7e:	f7fc f9ab 	bl	8009ed8 <lwip_htons>
 800db82:	4603      	mov	r3, r0
 800db84:	b2db      	uxtb	r3, r3
 800db86:	f003 0304 	and.w	r3, r3, #4
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d118      	bne.n	800dbc0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800db8e:	4b1b      	ldr	r3, [pc, #108]	@ (800dbfc <tcp_input+0x804>)
 800db90:	6819      	ldr	r1, [r3, #0]
 800db92:	4b1b      	ldr	r3, [pc, #108]	@ (800dc00 <tcp_input+0x808>)
 800db94:	881b      	ldrh	r3, [r3, #0]
 800db96:	461a      	mov	r2, r3
 800db98:	4b1a      	ldr	r3, [pc, #104]	@ (800dc04 <tcp_input+0x80c>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800db9e:	4b16      	ldr	r3, [pc, #88]	@ (800dbf8 <tcp_input+0x800>)
 800dba0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dba2:	885b      	ldrh	r3, [r3, #2]
 800dba4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dba6:	4a14      	ldr	r2, [pc, #80]	@ (800dbf8 <tcp_input+0x800>)
 800dba8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dbaa:	8812      	ldrh	r2, [r2, #0]
 800dbac:	b292      	uxth	r2, r2
 800dbae:	9202      	str	r2, [sp, #8]
 800dbb0:	9301      	str	r3, [sp, #4]
 800dbb2:	4b15      	ldr	r3, [pc, #84]	@ (800dc08 <tcp_input+0x810>)
 800dbb4:	9300      	str	r3, [sp, #0]
 800dbb6:	4b15      	ldr	r3, [pc, #84]	@ (800dc0c <tcp_input+0x814>)
 800dbb8:	4602      	mov	r2, r0
 800dbba:	2000      	movs	r0, #0
 800dbbc:	f003 f82a 	bl	8010c14 <tcp_rst>
    pbuf_free(p);
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f7fd fdd9 	bl	800b778 <pbuf_free>
  return;
 800dbc6:	e00c      	b.n	800dbe2 <tcp_input+0x7ea>
    goto dropped;
 800dbc8:	bf00      	nop
 800dbca:	e006      	b.n	800dbda <tcp_input+0x7e2>
    goto dropped;
 800dbcc:	bf00      	nop
 800dbce:	e004      	b.n	800dbda <tcp_input+0x7e2>
    goto dropped;
 800dbd0:	bf00      	nop
 800dbd2:	e002      	b.n	800dbda <tcp_input+0x7e2>
      goto dropped;
 800dbd4:	bf00      	nop
 800dbd6:	e000      	b.n	800dbda <tcp_input+0x7e2>
      goto dropped;
 800dbd8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f7fd fdcc 	bl	800b778 <pbuf_free>
 800dbe0:	e000      	b.n	800dbe4 <tcp_input+0x7ec>
  return;
 800dbe2:	bf00      	nop
}
 800dbe4:	3724      	adds	r7, #36	@ 0x24
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd90      	pop	{r4, r7, pc}
 800dbea:	bf00      	nop
 800dbec:	200083ac 	.word	0x200083ac
 800dbf0:	200083a8 	.word	0x200083a8
 800dbf4:	20008374 	.word	0x20008374
 800dbf8:	20008388 	.word	0x20008388
 800dbfc:	2000839c 	.word	0x2000839c
 800dc00:	200083a2 	.word	0x200083a2
 800dc04:	20008398 	.word	0x20008398
 800dc08:	20005410 	.word	0x20005410
 800dc0c:	20005414 	.word	0x20005414

0800dc10 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b082      	sub	sp, #8
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d106      	bne.n	800dc2c <tcp_input_delayed_close+0x1c>
 800dc1e:	4b17      	ldr	r3, [pc, #92]	@ (800dc7c <tcp_input_delayed_close+0x6c>)
 800dc20:	f240 225a 	movw	r2, #602	@ 0x25a
 800dc24:	4916      	ldr	r1, [pc, #88]	@ (800dc80 <tcp_input_delayed_close+0x70>)
 800dc26:	4817      	ldr	r0, [pc, #92]	@ (800dc84 <tcp_input_delayed_close+0x74>)
 800dc28:	f007 f95e 	bl	8014ee8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800dc2c:	4b16      	ldr	r3, [pc, #88]	@ (800dc88 <tcp_input_delayed_close+0x78>)
 800dc2e:	781b      	ldrb	r3, [r3, #0]
 800dc30:	f003 0310 	and.w	r3, r3, #16
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d01c      	beq.n	800dc72 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	8b5b      	ldrh	r3, [r3, #26]
 800dc3c:	f003 0310 	and.w	r3, r3, #16
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d10d      	bne.n	800dc60 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d008      	beq.n	800dc60 <tcp_input_delayed_close+0x50>
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dc54:	687a      	ldr	r2, [r7, #4]
 800dc56:	6912      	ldr	r2, [r2, #16]
 800dc58:	f06f 010e 	mvn.w	r1, #14
 800dc5c:	4610      	mov	r0, r2
 800dc5e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dc60:	6879      	ldr	r1, [r7, #4]
 800dc62:	480a      	ldr	r0, [pc, #40]	@ (800dc8c <tcp_input_delayed_close+0x7c>)
 800dc64:	f7ff fa4a 	bl	800d0fc <tcp_pcb_remove>
    tcp_free(pcb);
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f7fe f835 	bl	800bcd8 <tcp_free>
    return 1;
 800dc6e:	2301      	movs	r3, #1
 800dc70:	e000      	b.n	800dc74 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800dc72:	2300      	movs	r3, #0
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3708      	adds	r7, #8
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}
 800dc7c:	080173e0 	.word	0x080173e0
 800dc80:	080175b0 	.word	0x080175b0
 800dc84:	0801742c 	.word	0x0801742c
 800dc88:	200083a5 	.word	0x200083a5
 800dc8c:	20008368 	.word	0x20008368

0800dc90 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800dc90:	b590      	push	{r4, r7, lr}
 800dc92:	b08b      	sub	sp, #44	@ 0x2c
 800dc94:	af04      	add	r7, sp, #16
 800dc96:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800dc98:	4b6f      	ldr	r3, [pc, #444]	@ (800de58 <tcp_listen_input+0x1c8>)
 800dc9a:	781b      	ldrb	r3, [r3, #0]
 800dc9c:	f003 0304 	and.w	r3, r3, #4
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	f040 80d2 	bne.w	800de4a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d106      	bne.n	800dcba <tcp_listen_input+0x2a>
 800dcac:	4b6b      	ldr	r3, [pc, #428]	@ (800de5c <tcp_listen_input+0x1cc>)
 800dcae:	f240 2281 	movw	r2, #641	@ 0x281
 800dcb2:	496b      	ldr	r1, [pc, #428]	@ (800de60 <tcp_listen_input+0x1d0>)
 800dcb4:	486b      	ldr	r0, [pc, #428]	@ (800de64 <tcp_listen_input+0x1d4>)
 800dcb6:	f007 f917 	bl	8014ee8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800dcba:	4b67      	ldr	r3, [pc, #412]	@ (800de58 <tcp_listen_input+0x1c8>)
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	f003 0310 	and.w	r3, r3, #16
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d019      	beq.n	800dcfa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dcc6:	4b68      	ldr	r3, [pc, #416]	@ (800de68 <tcp_listen_input+0x1d8>)
 800dcc8:	6819      	ldr	r1, [r3, #0]
 800dcca:	4b68      	ldr	r3, [pc, #416]	@ (800de6c <tcp_listen_input+0x1dc>)
 800dccc:	881b      	ldrh	r3, [r3, #0]
 800dcce:	461a      	mov	r2, r3
 800dcd0:	4b67      	ldr	r3, [pc, #412]	@ (800de70 <tcp_listen_input+0x1e0>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dcd6:	4b67      	ldr	r3, [pc, #412]	@ (800de74 <tcp_listen_input+0x1e4>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dcda:	885b      	ldrh	r3, [r3, #2]
 800dcdc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dcde:	4a65      	ldr	r2, [pc, #404]	@ (800de74 <tcp_listen_input+0x1e4>)
 800dce0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dce2:	8812      	ldrh	r2, [r2, #0]
 800dce4:	b292      	uxth	r2, r2
 800dce6:	9202      	str	r2, [sp, #8]
 800dce8:	9301      	str	r3, [sp, #4]
 800dcea:	4b63      	ldr	r3, [pc, #396]	@ (800de78 <tcp_listen_input+0x1e8>)
 800dcec:	9300      	str	r3, [sp, #0]
 800dcee:	4b63      	ldr	r3, [pc, #396]	@ (800de7c <tcp_listen_input+0x1ec>)
 800dcf0:	4602      	mov	r2, r0
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f002 ff8e 	bl	8010c14 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800dcf8:	e0a9      	b.n	800de4e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800dcfa:	4b57      	ldr	r3, [pc, #348]	@ (800de58 <tcp_listen_input+0x1c8>)
 800dcfc:	781b      	ldrb	r3, [r3, #0]
 800dcfe:	f003 0302 	and.w	r3, r3, #2
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	f000 80a3 	beq.w	800de4e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	7d5b      	ldrb	r3, [r3, #21]
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f7ff f921 	bl	800cf54 <tcp_alloc>
 800dd12:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d111      	bne.n	800dd3e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	699b      	ldr	r3, [r3, #24]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d00a      	beq.n	800dd38 <tcp_listen_input+0xa8>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	699b      	ldr	r3, [r3, #24]
 800dd26:	687a      	ldr	r2, [r7, #4]
 800dd28:	6910      	ldr	r0, [r2, #16]
 800dd2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dd2e:	2100      	movs	r1, #0
 800dd30:	4798      	blx	r3
 800dd32:	4603      	mov	r3, r0
 800dd34:	73bb      	strb	r3, [r7, #14]
      return;
 800dd36:	e08b      	b.n	800de50 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800dd38:	23f0      	movs	r3, #240	@ 0xf0
 800dd3a:	73bb      	strb	r3, [r7, #14]
      return;
 800dd3c:	e088      	b.n	800de50 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800dd3e:	4b50      	ldr	r3, [pc, #320]	@ (800de80 <tcp_listen_input+0x1f0>)
 800dd40:	695a      	ldr	r2, [r3, #20]
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800dd46:	4b4e      	ldr	r3, [pc, #312]	@ (800de80 <tcp_listen_input+0x1f0>)
 800dd48:	691a      	ldr	r2, [r3, #16]
 800dd4a:	697b      	ldr	r3, [r7, #20]
 800dd4c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	8ada      	ldrh	r2, [r3, #22]
 800dd52:	697b      	ldr	r3, [r7, #20]
 800dd54:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800dd56:	4b47      	ldr	r3, [pc, #284]	@ (800de74 <tcp_listen_input+0x1e4>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	881b      	ldrh	r3, [r3, #0]
 800dd5c:	b29a      	uxth	r2, r3
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	2203      	movs	r2, #3
 800dd66:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800dd68:	4b41      	ldr	r3, [pc, #260]	@ (800de70 <tcp_listen_input+0x1e0>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	1c5a      	adds	r2, r3, #1
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800dd7a:	6978      	ldr	r0, [r7, #20]
 800dd7c:	f7ff fa52 	bl	800d224 <tcp_next_iss>
 800dd80:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	693a      	ldr	r2, [r7, #16]
 800dd86:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	693a      	ldr	r2, [r7, #16]
 800dd8c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	693a      	ldr	r2, [r7, #16]
 800dd92:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	693a      	ldr	r2, [r7, #16]
 800dd98:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800dd9a:	4b35      	ldr	r3, [pc, #212]	@ (800de70 <tcp_listen_input+0x1e0>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	1e5a      	subs	r2, r3, #1
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	691a      	ldr	r2, [r3, #16]
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	687a      	ldr	r2, [r7, #4]
 800ddb0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	7a5b      	ldrb	r3, [r3, #9]
 800ddb6:	f003 030c 	and.w	r3, r3, #12
 800ddba:	b2da      	uxtb	r2, r3
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	7a1a      	ldrb	r2, [r3, #8]
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ddc8:	4b2e      	ldr	r3, [pc, #184]	@ (800de84 <tcp_listen_input+0x1f4>)
 800ddca:	681a      	ldr	r2, [r3, #0]
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	60da      	str	r2, [r3, #12]
 800ddd0:	4a2c      	ldr	r2, [pc, #176]	@ (800de84 <tcp_listen_input+0x1f4>)
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	6013      	str	r3, [r2, #0]
 800ddd6:	f003 f8df 	bl	8010f98 <tcp_timer_needed>
 800ddda:	4b2b      	ldr	r3, [pc, #172]	@ (800de88 <tcp_listen_input+0x1f8>)
 800dddc:	2201      	movs	r2, #1
 800ddde:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800dde0:	6978      	ldr	r0, [r7, #20]
 800dde2:	f001 fd8b 	bl	800f8fc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800dde6:	4b23      	ldr	r3, [pc, #140]	@ (800de74 <tcp_listen_input+0x1e4>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	89db      	ldrh	r3, [r3, #14]
 800ddec:	b29a      	uxth	r2, r3
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ddfa:	697b      	ldr	r3, [r7, #20]
 800ddfc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800de04:	697b      	ldr	r3, [r7, #20]
 800de06:	3304      	adds	r3, #4
 800de08:	4618      	mov	r0, r3
 800de0a:	f005 fa23 	bl	8013254 <ip4_route>
 800de0e:	4601      	mov	r1, r0
 800de10:	697b      	ldr	r3, [r7, #20]
 800de12:	3304      	adds	r3, #4
 800de14:	461a      	mov	r2, r3
 800de16:	4620      	mov	r0, r4
 800de18:	f7ff fa2a 	bl	800d270 <tcp_eff_send_mss_netif>
 800de1c:	4603      	mov	r3, r0
 800de1e:	461a      	mov	r2, r3
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800de24:	2112      	movs	r1, #18
 800de26:	6978      	ldr	r0, [r7, #20]
 800de28:	f002 f846 	bl	800feb8 <tcp_enqueue_flags>
 800de2c:	4603      	mov	r3, r0
 800de2e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800de30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d004      	beq.n	800de42 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800de38:	2100      	movs	r1, #0
 800de3a:	6978      	ldr	r0, [r7, #20]
 800de3c:	f7fe f976 	bl	800c12c <tcp_abandon>
      return;
 800de40:	e006      	b.n	800de50 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800de42:	6978      	ldr	r0, [r7, #20]
 800de44:	f002 f926 	bl	8010094 <tcp_output>
  return;
 800de48:	e001      	b.n	800de4e <tcp_listen_input+0x1be>
    return;
 800de4a:	bf00      	nop
 800de4c:	e000      	b.n	800de50 <tcp_listen_input+0x1c0>
  return;
 800de4e:	bf00      	nop
}
 800de50:	371c      	adds	r7, #28
 800de52:	46bd      	mov	sp, r7
 800de54:	bd90      	pop	{r4, r7, pc}
 800de56:	bf00      	nop
 800de58:	200083a4 	.word	0x200083a4
 800de5c:	080173e0 	.word	0x080173e0
 800de60:	080175d8 	.word	0x080175d8
 800de64:	0801742c 	.word	0x0801742c
 800de68:	2000839c 	.word	0x2000839c
 800de6c:	200083a2 	.word	0x200083a2
 800de70:	20008398 	.word	0x20008398
 800de74:	20008388 	.word	0x20008388
 800de78:	20005410 	.word	0x20005410
 800de7c:	20005414 	.word	0x20005414
 800de80:	20005400 	.word	0x20005400
 800de84:	20008368 	.word	0x20008368
 800de88:	20008370 	.word	0x20008370

0800de8c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b086      	sub	sp, #24
 800de90:	af04      	add	r7, sp, #16
 800de92:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800de94:	4b2f      	ldr	r3, [pc, #188]	@ (800df54 <tcp_timewait_input+0xc8>)
 800de96:	781b      	ldrb	r3, [r3, #0]
 800de98:	f003 0304 	and.w	r3, r3, #4
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d153      	bne.n	800df48 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d106      	bne.n	800deb4 <tcp_timewait_input+0x28>
 800dea6:	4b2c      	ldr	r3, [pc, #176]	@ (800df58 <tcp_timewait_input+0xcc>)
 800dea8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800deac:	492b      	ldr	r1, [pc, #172]	@ (800df5c <tcp_timewait_input+0xd0>)
 800deae:	482c      	ldr	r0, [pc, #176]	@ (800df60 <tcp_timewait_input+0xd4>)
 800deb0:	f007 f81a 	bl	8014ee8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800deb4:	4b27      	ldr	r3, [pc, #156]	@ (800df54 <tcp_timewait_input+0xc8>)
 800deb6:	781b      	ldrb	r3, [r3, #0]
 800deb8:	f003 0302 	and.w	r3, r3, #2
 800debc:	2b00      	cmp	r3, #0
 800debe:	d02a      	beq.n	800df16 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800dec0:	4b28      	ldr	r3, [pc, #160]	@ (800df64 <tcp_timewait_input+0xd8>)
 800dec2:	681a      	ldr	r2, [r3, #0]
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dec8:	1ad3      	subs	r3, r2, r3
 800deca:	2b00      	cmp	r3, #0
 800decc:	db2d      	blt.n	800df2a <tcp_timewait_input+0x9e>
 800dece:	4b25      	ldr	r3, [pc, #148]	@ (800df64 <tcp_timewait_input+0xd8>)
 800ded0:	681a      	ldr	r2, [r3, #0]
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ded6:	6879      	ldr	r1, [r7, #4]
 800ded8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800deda:	440b      	add	r3, r1
 800dedc:	1ad3      	subs	r3, r2, r3
 800dede:	2b00      	cmp	r3, #0
 800dee0:	dc23      	bgt.n	800df2a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dee2:	4b21      	ldr	r3, [pc, #132]	@ (800df68 <tcp_timewait_input+0xdc>)
 800dee4:	6819      	ldr	r1, [r3, #0]
 800dee6:	4b21      	ldr	r3, [pc, #132]	@ (800df6c <tcp_timewait_input+0xe0>)
 800dee8:	881b      	ldrh	r3, [r3, #0]
 800deea:	461a      	mov	r2, r3
 800deec:	4b1d      	ldr	r3, [pc, #116]	@ (800df64 <tcp_timewait_input+0xd8>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800def2:	4b1f      	ldr	r3, [pc, #124]	@ (800df70 <tcp_timewait_input+0xe4>)
 800def4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800def6:	885b      	ldrh	r3, [r3, #2]
 800def8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800defa:	4a1d      	ldr	r2, [pc, #116]	@ (800df70 <tcp_timewait_input+0xe4>)
 800defc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800defe:	8812      	ldrh	r2, [r2, #0]
 800df00:	b292      	uxth	r2, r2
 800df02:	9202      	str	r2, [sp, #8]
 800df04:	9301      	str	r3, [sp, #4]
 800df06:	4b1b      	ldr	r3, [pc, #108]	@ (800df74 <tcp_timewait_input+0xe8>)
 800df08:	9300      	str	r3, [sp, #0]
 800df0a:	4b1b      	ldr	r3, [pc, #108]	@ (800df78 <tcp_timewait_input+0xec>)
 800df0c:	4602      	mov	r2, r0
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	f002 fe80 	bl	8010c14 <tcp_rst>
      return;
 800df14:	e01b      	b.n	800df4e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800df16:	4b0f      	ldr	r3, [pc, #60]	@ (800df54 <tcp_timewait_input+0xc8>)
 800df18:	781b      	ldrb	r3, [r3, #0]
 800df1a:	f003 0301 	and.w	r3, r3, #1
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d003      	beq.n	800df2a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800df22:	4b16      	ldr	r3, [pc, #88]	@ (800df7c <tcp_timewait_input+0xf0>)
 800df24:	681a      	ldr	r2, [r3, #0]
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800df2a:	4b10      	ldr	r3, [pc, #64]	@ (800df6c <tcp_timewait_input+0xe0>)
 800df2c:	881b      	ldrh	r3, [r3, #0]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d00c      	beq.n	800df4c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	8b5b      	ldrh	r3, [r3, #26]
 800df36:	f043 0302 	orr.w	r3, r3, #2
 800df3a:	b29a      	uxth	r2, r3
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f002 f8a7 	bl	8010094 <tcp_output>
  }
  return;
 800df46:	e001      	b.n	800df4c <tcp_timewait_input+0xc0>
    return;
 800df48:	bf00      	nop
 800df4a:	e000      	b.n	800df4e <tcp_timewait_input+0xc2>
  return;
 800df4c:	bf00      	nop
}
 800df4e:	3708      	adds	r7, #8
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}
 800df54:	200083a4 	.word	0x200083a4
 800df58:	080173e0 	.word	0x080173e0
 800df5c:	080175f8 	.word	0x080175f8
 800df60:	0801742c 	.word	0x0801742c
 800df64:	20008398 	.word	0x20008398
 800df68:	2000839c 	.word	0x2000839c
 800df6c:	200083a2 	.word	0x200083a2
 800df70:	20008388 	.word	0x20008388
 800df74:	20005410 	.word	0x20005410
 800df78:	20005414 	.word	0x20005414
 800df7c:	2000835c 	.word	0x2000835c

0800df80 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800df80:	b590      	push	{r4, r7, lr}
 800df82:	b08d      	sub	sp, #52	@ 0x34
 800df84:	af04      	add	r7, sp, #16
 800df86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800df88:	2300      	movs	r3, #0
 800df8a:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 800df8c:	2300      	movs	r3, #0
 800df8e:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d106      	bne.n	800dfa4 <tcp_process+0x24>
 800df96:	4b9d      	ldr	r3, [pc, #628]	@ (800e20c <tcp_process+0x28c>)
 800df98:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800df9c:	499c      	ldr	r1, [pc, #624]	@ (800e210 <tcp_process+0x290>)
 800df9e:	489d      	ldr	r0, [pc, #628]	@ (800e214 <tcp_process+0x294>)
 800dfa0:	f006 ffa2 	bl	8014ee8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800dfa4:	4b9c      	ldr	r3, [pc, #624]	@ (800e218 <tcp_process+0x298>)
 800dfa6:	781b      	ldrb	r3, [r3, #0]
 800dfa8:	f003 0304 	and.w	r3, r3, #4
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d04e      	beq.n	800e04e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	7d1b      	ldrb	r3, [r3, #20]
 800dfb4:	2b02      	cmp	r3, #2
 800dfb6:	d108      	bne.n	800dfca <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dfbc:	4b97      	ldr	r3, [pc, #604]	@ (800e21c <tcp_process+0x29c>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d123      	bne.n	800e00c <tcp_process+0x8c>
        acceptable = 1;
 800dfc4:	2301      	movs	r3, #1
 800dfc6:	77fb      	strb	r3, [r7, #31]
 800dfc8:	e020      	b.n	800e00c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dfce:	4b94      	ldr	r3, [pc, #592]	@ (800e220 <tcp_process+0x2a0>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	429a      	cmp	r2, r3
 800dfd4:	d102      	bne.n	800dfdc <tcp_process+0x5c>
        acceptable = 1;
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	77fb      	strb	r3, [r7, #31]
 800dfda:	e017      	b.n	800e00c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dfdc:	4b90      	ldr	r3, [pc, #576]	@ (800e220 <tcp_process+0x2a0>)
 800dfde:	681a      	ldr	r2, [r3, #0]
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfe4:	1ad3      	subs	r3, r2, r3
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	db10      	blt.n	800e00c <tcp_process+0x8c>
 800dfea:	4b8d      	ldr	r3, [pc, #564]	@ (800e220 <tcp_process+0x2a0>)
 800dfec:	681a      	ldr	r2, [r3, #0]
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dff2:	6879      	ldr	r1, [r7, #4]
 800dff4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800dff6:	440b      	add	r3, r1
 800dff8:	1ad3      	subs	r3, r2, r3
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	dc06      	bgt.n	800e00c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	8b5b      	ldrh	r3, [r3, #26]
 800e002:	f043 0302 	orr.w	r3, r3, #2
 800e006:	b29a      	uxth	r2, r3
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e00c:	7ffb      	ldrb	r3, [r7, #31]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d01b      	beq.n	800e04a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	7d1b      	ldrb	r3, [r3, #20]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d106      	bne.n	800e028 <tcp_process+0xa8>
 800e01a:	4b7c      	ldr	r3, [pc, #496]	@ (800e20c <tcp_process+0x28c>)
 800e01c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800e020:	4980      	ldr	r1, [pc, #512]	@ (800e224 <tcp_process+0x2a4>)
 800e022:	487c      	ldr	r0, [pc, #496]	@ (800e214 <tcp_process+0x294>)
 800e024:	f006 ff60 	bl	8014ee8 <iprintf>
      recv_flags |= TF_RESET;
 800e028:	4b7f      	ldr	r3, [pc, #508]	@ (800e228 <tcp_process+0x2a8>)
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	f043 0308 	orr.w	r3, r3, #8
 800e030:	b2da      	uxtb	r2, r3
 800e032:	4b7d      	ldr	r3, [pc, #500]	@ (800e228 <tcp_process+0x2a8>)
 800e034:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	8b5b      	ldrh	r3, [r3, #26]
 800e03a:	f023 0301 	bic.w	r3, r3, #1
 800e03e:	b29a      	uxth	r2, r3
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e044:	f06f 030d 	mvn.w	r3, #13
 800e048:	e37a      	b.n	800e740 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e04a:	2300      	movs	r3, #0
 800e04c:	e378      	b.n	800e740 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e04e:	4b72      	ldr	r3, [pc, #456]	@ (800e218 <tcp_process+0x298>)
 800e050:	781b      	ldrb	r3, [r3, #0]
 800e052:	f003 0302 	and.w	r3, r3, #2
 800e056:	2b00      	cmp	r3, #0
 800e058:	d010      	beq.n	800e07c <tcp_process+0xfc>
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	7d1b      	ldrb	r3, [r3, #20]
 800e05e:	2b02      	cmp	r3, #2
 800e060:	d00c      	beq.n	800e07c <tcp_process+0xfc>
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	7d1b      	ldrb	r3, [r3, #20]
 800e066:	2b03      	cmp	r3, #3
 800e068:	d008      	beq.n	800e07c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	8b5b      	ldrh	r3, [r3, #26]
 800e06e:	f043 0302 	orr.w	r3, r3, #2
 800e072:	b29a      	uxth	r2, r3
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e078:	2300      	movs	r3, #0
 800e07a:	e361      	b.n	800e740 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	8b5b      	ldrh	r3, [r3, #26]
 800e080:	f003 0310 	and.w	r3, r3, #16
 800e084:	2b00      	cmp	r3, #0
 800e086:	d103      	bne.n	800e090 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e088:	4b68      	ldr	r3, [pc, #416]	@ (800e22c <tcp_process+0x2ac>)
 800e08a:	681a      	ldr	r2, [r3, #0]
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2200      	movs	r2, #0
 800e094:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2200      	movs	r2, #0
 800e09c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f001 fc2b 	bl	800f8fc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	7d1b      	ldrb	r3, [r3, #20]
 800e0aa:	3b02      	subs	r3, #2
 800e0ac:	2b07      	cmp	r3, #7
 800e0ae:	f200 8337 	bhi.w	800e720 <tcp_process+0x7a0>
 800e0b2:	a201      	add	r2, pc, #4	@ (adr r2, 800e0b8 <tcp_process+0x138>)
 800e0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0b8:	0800e0d9 	.word	0x0800e0d9
 800e0bc:	0800e309 	.word	0x0800e309
 800e0c0:	0800e481 	.word	0x0800e481
 800e0c4:	0800e4ab 	.word	0x0800e4ab
 800e0c8:	0800e5cf 	.word	0x0800e5cf
 800e0cc:	0800e481 	.word	0x0800e481
 800e0d0:	0800e65b 	.word	0x0800e65b
 800e0d4:	0800e6eb 	.word	0x0800e6eb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e0d8:	4b4f      	ldr	r3, [pc, #316]	@ (800e218 <tcp_process+0x298>)
 800e0da:	781b      	ldrb	r3, [r3, #0]
 800e0dc:	f003 0310 	and.w	r3, r3, #16
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	f000 80e4 	beq.w	800e2ae <tcp_process+0x32e>
 800e0e6:	4b4c      	ldr	r3, [pc, #304]	@ (800e218 <tcp_process+0x298>)
 800e0e8:	781b      	ldrb	r3, [r3, #0]
 800e0ea:	f003 0302 	and.w	r3, r3, #2
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	f000 80dd 	beq.w	800e2ae <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e0f8:	1c5a      	adds	r2, r3, #1
 800e0fa:	4b48      	ldr	r3, [pc, #288]	@ (800e21c <tcp_process+0x29c>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	429a      	cmp	r2, r3
 800e100:	f040 80d5 	bne.w	800e2ae <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e104:	4b46      	ldr	r3, [pc, #280]	@ (800e220 <tcp_process+0x2a0>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	1c5a      	adds	r2, r3, #1
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800e116:	4b41      	ldr	r3, [pc, #260]	@ (800e21c <tcp_process+0x29c>)
 800e118:	681a      	ldr	r2, [r3, #0]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e11e:	4b44      	ldr	r3, [pc, #272]	@ (800e230 <tcp_process+0x2b0>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	89db      	ldrh	r3, [r3, #14]
 800e124:	b29a      	uxth	r2, r3
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e138:	4b39      	ldr	r3, [pc, #228]	@ (800e220 <tcp_process+0x2a0>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	1e5a      	subs	r2, r3, #1
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2204      	movs	r2, #4
 800e146:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	3304      	adds	r3, #4
 800e150:	4618      	mov	r0, r3
 800e152:	f005 f87f 	bl	8013254 <ip4_route>
 800e156:	4601      	mov	r1, r0
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	3304      	adds	r3, #4
 800e15c:	461a      	mov	r2, r3
 800e15e:	4620      	mov	r0, r4
 800e160:	f7ff f886 	bl	800d270 <tcp_eff_send_mss_netif>
 800e164:	4603      	mov	r3, r0
 800e166:	461a      	mov	r2, r3
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e170:	009a      	lsls	r2, r3, #2
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e176:	005b      	lsls	r3, r3, #1
 800e178:	f241 111c 	movw	r1, #4380	@ 0x111c
 800e17c:	428b      	cmp	r3, r1
 800e17e:	bf38      	it	cc
 800e180:	460b      	movcc	r3, r1
 800e182:	429a      	cmp	r2, r3
 800e184:	d204      	bcs.n	800e190 <tcp_process+0x210>
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e18a:	009b      	lsls	r3, r3, #2
 800e18c:	b29b      	uxth	r3, r3
 800e18e:	e00d      	b.n	800e1ac <tcp_process+0x22c>
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e194:	005b      	lsls	r3, r3, #1
 800e196:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e19a:	4293      	cmp	r3, r2
 800e19c:	d904      	bls.n	800e1a8 <tcp_process+0x228>
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e1a2:	005b      	lsls	r3, r3, #1
 800e1a4:	b29b      	uxth	r3, r3
 800e1a6:	e001      	b.n	800e1ac <tcp_process+0x22c>
 800e1a8:	f241 131c 	movw	r3, #4380	@ 0x111c
 800e1ac:	687a      	ldr	r2, [r7, #4]
 800e1ae:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d106      	bne.n	800e1ca <tcp_process+0x24a>
 800e1bc:	4b13      	ldr	r3, [pc, #76]	@ (800e20c <tcp_process+0x28c>)
 800e1be:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800e1c2:	491c      	ldr	r1, [pc, #112]	@ (800e234 <tcp_process+0x2b4>)
 800e1c4:	4813      	ldr	r0, [pc, #76]	@ (800e214 <tcp_process+0x294>)
 800e1c6:	f006 fe8f 	bl	8014ee8 <iprintf>
        --pcb->snd_queuelen;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e1d0:	3b01      	subs	r3, #1
 800e1d2:	b29a      	uxth	r2, r3
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e1de:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 800e1e0:	697b      	ldr	r3, [r7, #20]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d12a      	bne.n	800e23c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e1ea:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e1ec:	697b      	ldr	r3, [r7, #20]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d106      	bne.n	800e200 <tcp_process+0x280>
 800e1f2:	4b06      	ldr	r3, [pc, #24]	@ (800e20c <tcp_process+0x28c>)
 800e1f4:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800e1f8:	490f      	ldr	r1, [pc, #60]	@ (800e238 <tcp_process+0x2b8>)
 800e1fa:	4806      	ldr	r0, [pc, #24]	@ (800e214 <tcp_process+0x294>)
 800e1fc:	f006 fe74 	bl	8014ee8 <iprintf>
          pcb->unsent = rseg->next;
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	681a      	ldr	r2, [r3, #0]
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e208:	e01c      	b.n	800e244 <tcp_process+0x2c4>
 800e20a:	bf00      	nop
 800e20c:	080173e0 	.word	0x080173e0
 800e210:	08017618 	.word	0x08017618
 800e214:	0801742c 	.word	0x0801742c
 800e218:	200083a4 	.word	0x200083a4
 800e21c:	2000839c 	.word	0x2000839c
 800e220:	20008398 	.word	0x20008398
 800e224:	08017634 	.word	0x08017634
 800e228:	200083a5 	.word	0x200083a5
 800e22c:	2000835c 	.word	0x2000835c
 800e230:	20008388 	.word	0x20008388
 800e234:	08017654 	.word	0x08017654
 800e238:	0801766c 	.word	0x0801766c
        } else {
          pcb->unacked = rseg->next;
 800e23c:	697b      	ldr	r3, [r7, #20]
 800e23e:	681a      	ldr	r2, [r3, #0]
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800e244:	6978      	ldr	r0, [r7, #20]
 800e246:	f7fe fd1c 	bl	800cc82 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d104      	bne.n	800e25c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e258:	861a      	strh	r2, [r3, #48]	@ 0x30
 800e25a:	e006      	b.n	800e26a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2200      	movs	r2, #0
 800e260:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	2200      	movs	r2, #0
 800e266:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e270:	2b00      	cmp	r3, #0
 800e272:	d00a      	beq.n	800e28a <tcp_process+0x30a>
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e27a:	687a      	ldr	r2, [r7, #4]
 800e27c:	6910      	ldr	r0, [r2, #16]
 800e27e:	2200      	movs	r2, #0
 800e280:	6879      	ldr	r1, [r7, #4]
 800e282:	4798      	blx	r3
 800e284:	4603      	mov	r3, r0
 800e286:	77bb      	strb	r3, [r7, #30]
 800e288:	e001      	b.n	800e28e <tcp_process+0x30e>
 800e28a:	2300      	movs	r3, #0
 800e28c:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 800e28e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800e292:	f113 0f0d 	cmn.w	r3, #13
 800e296:	d102      	bne.n	800e29e <tcp_process+0x31e>
          return ERR_ABRT;
 800e298:	f06f 030c 	mvn.w	r3, #12
 800e29c:	e250      	b.n	800e740 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	8b5b      	ldrh	r3, [r3, #26]
 800e2a2:	f043 0302 	orr.w	r3, r3, #2
 800e2a6:	b29a      	uxth	r2, r3
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e2ac:	e23a      	b.n	800e724 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e2ae:	4b98      	ldr	r3, [pc, #608]	@ (800e510 <tcp_process+0x590>)
 800e2b0:	781b      	ldrb	r3, [r3, #0]
 800e2b2:	f003 0310 	and.w	r3, r3, #16
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	f000 8234 	beq.w	800e724 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2bc:	4b95      	ldr	r3, [pc, #596]	@ (800e514 <tcp_process+0x594>)
 800e2be:	6819      	ldr	r1, [r3, #0]
 800e2c0:	4b95      	ldr	r3, [pc, #596]	@ (800e518 <tcp_process+0x598>)
 800e2c2:	881b      	ldrh	r3, [r3, #0]
 800e2c4:	461a      	mov	r2, r3
 800e2c6:	4b95      	ldr	r3, [pc, #596]	@ (800e51c <tcp_process+0x59c>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e2cc:	4b94      	ldr	r3, [pc, #592]	@ (800e520 <tcp_process+0x5a0>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2d0:	885b      	ldrh	r3, [r3, #2]
 800e2d2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e2d4:	4a92      	ldr	r2, [pc, #584]	@ (800e520 <tcp_process+0x5a0>)
 800e2d6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2d8:	8812      	ldrh	r2, [r2, #0]
 800e2da:	b292      	uxth	r2, r2
 800e2dc:	9202      	str	r2, [sp, #8]
 800e2de:	9301      	str	r3, [sp, #4]
 800e2e0:	4b90      	ldr	r3, [pc, #576]	@ (800e524 <tcp_process+0x5a4>)
 800e2e2:	9300      	str	r3, [sp, #0]
 800e2e4:	4b90      	ldr	r3, [pc, #576]	@ (800e528 <tcp_process+0x5a8>)
 800e2e6:	4602      	mov	r2, r0
 800e2e8:	6878      	ldr	r0, [r7, #4]
 800e2ea:	f002 fc93 	bl	8010c14 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e2f4:	2b05      	cmp	r3, #5
 800e2f6:	f200 8215 	bhi.w	800e724 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f002 fa5f 	bl	80107c4 <tcp_rexmit_rto>
      break;
 800e306:	e20d      	b.n	800e724 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e308:	4b81      	ldr	r3, [pc, #516]	@ (800e510 <tcp_process+0x590>)
 800e30a:	781b      	ldrb	r3, [r3, #0]
 800e30c:	f003 0310 	and.w	r3, r3, #16
 800e310:	2b00      	cmp	r3, #0
 800e312:	f000 80a1 	beq.w	800e458 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e316:	4b7f      	ldr	r3, [pc, #508]	@ (800e514 <tcp_process+0x594>)
 800e318:	681a      	ldr	r2, [r3, #0]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e31e:	1ad3      	subs	r3, r2, r3
 800e320:	3b01      	subs	r3, #1
 800e322:	2b00      	cmp	r3, #0
 800e324:	db7e      	blt.n	800e424 <tcp_process+0x4a4>
 800e326:	4b7b      	ldr	r3, [pc, #492]	@ (800e514 <tcp_process+0x594>)
 800e328:	681a      	ldr	r2, [r3, #0]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e32e:	1ad3      	subs	r3, r2, r3
 800e330:	2b00      	cmp	r3, #0
 800e332:	dc77      	bgt.n	800e424 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2204      	movs	r2, #4
 800e338:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d102      	bne.n	800e348 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e342:	23fa      	movs	r3, #250	@ 0xfa
 800e344:	77bb      	strb	r3, [r7, #30]
 800e346:	e01d      	b.n	800e384 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e34c:	699b      	ldr	r3, [r3, #24]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d106      	bne.n	800e360 <tcp_process+0x3e0>
 800e352:	4b76      	ldr	r3, [pc, #472]	@ (800e52c <tcp_process+0x5ac>)
 800e354:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800e358:	4975      	ldr	r1, [pc, #468]	@ (800e530 <tcp_process+0x5b0>)
 800e35a:	4876      	ldr	r0, [pc, #472]	@ (800e534 <tcp_process+0x5b4>)
 800e35c:	f006 fdc4 	bl	8014ee8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e364:	699b      	ldr	r3, [r3, #24]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d00a      	beq.n	800e380 <tcp_process+0x400>
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e36e:	699b      	ldr	r3, [r3, #24]
 800e370:	687a      	ldr	r2, [r7, #4]
 800e372:	6910      	ldr	r0, [r2, #16]
 800e374:	2200      	movs	r2, #0
 800e376:	6879      	ldr	r1, [r7, #4]
 800e378:	4798      	blx	r3
 800e37a:	4603      	mov	r3, r0
 800e37c:	77bb      	strb	r3, [r7, #30]
 800e37e:	e001      	b.n	800e384 <tcp_process+0x404>
 800e380:	23f0      	movs	r3, #240	@ 0xf0
 800e382:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 800e384:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d00a      	beq.n	800e3a2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e38c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800e390:	f113 0f0d 	cmn.w	r3, #13
 800e394:	d002      	beq.n	800e39c <tcp_process+0x41c>
              tcp_abort(pcb);
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f7fd ff86 	bl	800c2a8 <tcp_abort>
            }
            return ERR_ABRT;
 800e39c:	f06f 030c 	mvn.w	r3, #12
 800e3a0:	e1ce      	b.n	800e740 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f000 fae0 	bl	800e968 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e3a8:	4b63      	ldr	r3, [pc, #396]	@ (800e538 <tcp_process+0x5b8>)
 800e3aa:	881b      	ldrh	r3, [r3, #0]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d005      	beq.n	800e3bc <tcp_process+0x43c>
            recv_acked--;
 800e3b0:	4b61      	ldr	r3, [pc, #388]	@ (800e538 <tcp_process+0x5b8>)
 800e3b2:	881b      	ldrh	r3, [r3, #0]
 800e3b4:	3b01      	subs	r3, #1
 800e3b6:	b29a      	uxth	r2, r3
 800e3b8:	4b5f      	ldr	r3, [pc, #380]	@ (800e538 <tcp_process+0x5b8>)
 800e3ba:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e3c0:	009a      	lsls	r2, r3, #2
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e3c6:	005b      	lsls	r3, r3, #1
 800e3c8:	f241 111c 	movw	r1, #4380	@ 0x111c
 800e3cc:	428b      	cmp	r3, r1
 800e3ce:	bf38      	it	cc
 800e3d0:	460b      	movcc	r3, r1
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d204      	bcs.n	800e3e0 <tcp_process+0x460>
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e3da:	009b      	lsls	r3, r3, #2
 800e3dc:	b29b      	uxth	r3, r3
 800e3de:	e00d      	b.n	800e3fc <tcp_process+0x47c>
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e3e4:	005b      	lsls	r3, r3, #1
 800e3e6:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e3ea:	4293      	cmp	r3, r2
 800e3ec:	d904      	bls.n	800e3f8 <tcp_process+0x478>
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e3f2:	005b      	lsls	r3, r3, #1
 800e3f4:	b29b      	uxth	r3, r3
 800e3f6:	e001      	b.n	800e3fc <tcp_process+0x47c>
 800e3f8:	f241 131c 	movw	r3, #4380	@ 0x111c
 800e3fc:	687a      	ldr	r2, [r7, #4]
 800e3fe:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e402:	4b4e      	ldr	r3, [pc, #312]	@ (800e53c <tcp_process+0x5bc>)
 800e404:	781b      	ldrb	r3, [r3, #0]
 800e406:	f003 0320 	and.w	r3, r3, #32
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d037      	beq.n	800e47e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	8b5b      	ldrh	r3, [r3, #26]
 800e412:	f043 0302 	orr.w	r3, r3, #2
 800e416:	b29a      	uxth	r2, r3
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2207      	movs	r2, #7
 800e420:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e422:	e02c      	b.n	800e47e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e424:	4b3b      	ldr	r3, [pc, #236]	@ (800e514 <tcp_process+0x594>)
 800e426:	6819      	ldr	r1, [r3, #0]
 800e428:	4b3b      	ldr	r3, [pc, #236]	@ (800e518 <tcp_process+0x598>)
 800e42a:	881b      	ldrh	r3, [r3, #0]
 800e42c:	461a      	mov	r2, r3
 800e42e:	4b3b      	ldr	r3, [pc, #236]	@ (800e51c <tcp_process+0x59c>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e434:	4b3a      	ldr	r3, [pc, #232]	@ (800e520 <tcp_process+0x5a0>)
 800e436:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e438:	885b      	ldrh	r3, [r3, #2]
 800e43a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e43c:	4a38      	ldr	r2, [pc, #224]	@ (800e520 <tcp_process+0x5a0>)
 800e43e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e440:	8812      	ldrh	r2, [r2, #0]
 800e442:	b292      	uxth	r2, r2
 800e444:	9202      	str	r2, [sp, #8]
 800e446:	9301      	str	r3, [sp, #4]
 800e448:	4b36      	ldr	r3, [pc, #216]	@ (800e524 <tcp_process+0x5a4>)
 800e44a:	9300      	str	r3, [sp, #0]
 800e44c:	4b36      	ldr	r3, [pc, #216]	@ (800e528 <tcp_process+0x5a8>)
 800e44e:	4602      	mov	r2, r0
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f002 fbdf 	bl	8010c14 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e456:	e167      	b.n	800e728 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e458:	4b2d      	ldr	r3, [pc, #180]	@ (800e510 <tcp_process+0x590>)
 800e45a:	781b      	ldrb	r3, [r3, #0]
 800e45c:	f003 0302 	and.w	r3, r3, #2
 800e460:	2b00      	cmp	r3, #0
 800e462:	f000 8161 	beq.w	800e728 <tcp_process+0x7a8>
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e46a:	1e5a      	subs	r2, r3, #1
 800e46c:	4b2b      	ldr	r3, [pc, #172]	@ (800e51c <tcp_process+0x59c>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	429a      	cmp	r2, r3
 800e472:	f040 8159 	bne.w	800e728 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f002 f9c6 	bl	8010808 <tcp_rexmit>
      break;
 800e47c:	e154      	b.n	800e728 <tcp_process+0x7a8>
 800e47e:	e153      	b.n	800e728 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f000 fa71 	bl	800e968 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e486:	4b2d      	ldr	r3, [pc, #180]	@ (800e53c <tcp_process+0x5bc>)
 800e488:	781b      	ldrb	r3, [r3, #0]
 800e48a:	f003 0320 	and.w	r3, r3, #32
 800e48e:	2b00      	cmp	r3, #0
 800e490:	f000 814c 	beq.w	800e72c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	8b5b      	ldrh	r3, [r3, #26]
 800e498:	f043 0302 	orr.w	r3, r3, #2
 800e49c:	b29a      	uxth	r2, r3
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2207      	movs	r2, #7
 800e4a6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e4a8:	e140      	b.n	800e72c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f000 fa5c 	bl	800e968 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e4b0:	4b22      	ldr	r3, [pc, #136]	@ (800e53c <tcp_process+0x5bc>)
 800e4b2:	781b      	ldrb	r3, [r3, #0]
 800e4b4:	f003 0320 	and.w	r3, r3, #32
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d071      	beq.n	800e5a0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e4bc:	4b14      	ldr	r3, [pc, #80]	@ (800e510 <tcp_process+0x590>)
 800e4be:	781b      	ldrb	r3, [r3, #0]
 800e4c0:	f003 0310 	and.w	r3, r3, #16
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d060      	beq.n	800e58a <tcp_process+0x60a>
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e4cc:	4b11      	ldr	r3, [pc, #68]	@ (800e514 <tcp_process+0x594>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	429a      	cmp	r2, r3
 800e4d2:	d15a      	bne.n	800e58a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d156      	bne.n	800e58a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	8b5b      	ldrh	r3, [r3, #26]
 800e4e0:	f043 0302 	orr.w	r3, r3, #2
 800e4e4:	b29a      	uxth	r2, r3
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f7fe fdb6 	bl	800d05c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e4f0:	4b13      	ldr	r3, [pc, #76]	@ (800e540 <tcp_process+0x5c0>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	687a      	ldr	r2, [r7, #4]
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	d105      	bne.n	800e506 <tcp_process+0x586>
 800e4fa:	4b11      	ldr	r3, [pc, #68]	@ (800e540 <tcp_process+0x5c0>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	68db      	ldr	r3, [r3, #12]
 800e500:	4a0f      	ldr	r2, [pc, #60]	@ (800e540 <tcp_process+0x5c0>)
 800e502:	6013      	str	r3, [r2, #0]
 800e504:	e02e      	b.n	800e564 <tcp_process+0x5e4>
 800e506:	4b0e      	ldr	r3, [pc, #56]	@ (800e540 <tcp_process+0x5c0>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	613b      	str	r3, [r7, #16]
 800e50c:	e027      	b.n	800e55e <tcp_process+0x5de>
 800e50e:	bf00      	nop
 800e510:	200083a4 	.word	0x200083a4
 800e514:	2000839c 	.word	0x2000839c
 800e518:	200083a2 	.word	0x200083a2
 800e51c:	20008398 	.word	0x20008398
 800e520:	20008388 	.word	0x20008388
 800e524:	20005410 	.word	0x20005410
 800e528:	20005414 	.word	0x20005414
 800e52c:	080173e0 	.word	0x080173e0
 800e530:	08017680 	.word	0x08017680
 800e534:	0801742c 	.word	0x0801742c
 800e538:	200083a0 	.word	0x200083a0
 800e53c:	200083a5 	.word	0x200083a5
 800e540:	20008368 	.word	0x20008368
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	68db      	ldr	r3, [r3, #12]
 800e548:	687a      	ldr	r2, [r7, #4]
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d104      	bne.n	800e558 <tcp_process+0x5d8>
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	68da      	ldr	r2, [r3, #12]
 800e552:	693b      	ldr	r3, [r7, #16]
 800e554:	60da      	str	r2, [r3, #12]
 800e556:	e005      	b.n	800e564 <tcp_process+0x5e4>
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	68db      	ldr	r3, [r3, #12]
 800e55c:	613b      	str	r3, [r7, #16]
 800e55e:	693b      	ldr	r3, [r7, #16]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d1ef      	bne.n	800e544 <tcp_process+0x5c4>
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2200      	movs	r2, #0
 800e568:	60da      	str	r2, [r3, #12]
 800e56a:	4b77      	ldr	r3, [pc, #476]	@ (800e748 <tcp_process+0x7c8>)
 800e56c:	2201      	movs	r2, #1
 800e56e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	220a      	movs	r2, #10
 800e574:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e576:	4b75      	ldr	r3, [pc, #468]	@ (800e74c <tcp_process+0x7cc>)
 800e578:	681a      	ldr	r2, [r3, #0]
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	60da      	str	r2, [r3, #12]
 800e57e:	4a73      	ldr	r2, [pc, #460]	@ (800e74c <tcp_process+0x7cc>)
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6013      	str	r3, [r2, #0]
 800e584:	f002 fd08 	bl	8010f98 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e588:	e0d2      	b.n	800e730 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	8b5b      	ldrh	r3, [r3, #26]
 800e58e:	f043 0302 	orr.w	r3, r3, #2
 800e592:	b29a      	uxth	r2, r3
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2208      	movs	r2, #8
 800e59c:	751a      	strb	r2, [r3, #20]
      break;
 800e59e:	e0c7      	b.n	800e730 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e5a0:	4b6b      	ldr	r3, [pc, #428]	@ (800e750 <tcp_process+0x7d0>)
 800e5a2:	781b      	ldrb	r3, [r3, #0]
 800e5a4:	f003 0310 	and.w	r3, r3, #16
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	f000 80c1 	beq.w	800e730 <tcp_process+0x7b0>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e5b2:	4b68      	ldr	r3, [pc, #416]	@ (800e754 <tcp_process+0x7d4>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	429a      	cmp	r2, r3
 800e5b8:	f040 80ba 	bne.w	800e730 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	f040 80b5 	bne.w	800e730 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2206      	movs	r2, #6
 800e5ca:	751a      	strb	r2, [r3, #20]
      break;
 800e5cc:	e0b0      	b.n	800e730 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f000 f9ca 	bl	800e968 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e5d4:	4b60      	ldr	r3, [pc, #384]	@ (800e758 <tcp_process+0x7d8>)
 800e5d6:	781b      	ldrb	r3, [r3, #0]
 800e5d8:	f003 0320 	and.w	r3, r3, #32
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	f000 80a9 	beq.w	800e734 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	8b5b      	ldrh	r3, [r3, #26]
 800e5e6:	f043 0302 	orr.w	r3, r3, #2
 800e5ea:	b29a      	uxth	r2, r3
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	f7fe fd33 	bl	800d05c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e5f6:	4b59      	ldr	r3, [pc, #356]	@ (800e75c <tcp_process+0x7dc>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	687a      	ldr	r2, [r7, #4]
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d105      	bne.n	800e60c <tcp_process+0x68c>
 800e600:	4b56      	ldr	r3, [pc, #344]	@ (800e75c <tcp_process+0x7dc>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	68db      	ldr	r3, [r3, #12]
 800e606:	4a55      	ldr	r2, [pc, #340]	@ (800e75c <tcp_process+0x7dc>)
 800e608:	6013      	str	r3, [r2, #0]
 800e60a:	e013      	b.n	800e634 <tcp_process+0x6b4>
 800e60c:	4b53      	ldr	r3, [pc, #332]	@ (800e75c <tcp_process+0x7dc>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	60fb      	str	r3, [r7, #12]
 800e612:	e00c      	b.n	800e62e <tcp_process+0x6ae>
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	68db      	ldr	r3, [r3, #12]
 800e618:	687a      	ldr	r2, [r7, #4]
 800e61a:	429a      	cmp	r2, r3
 800e61c:	d104      	bne.n	800e628 <tcp_process+0x6a8>
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	68da      	ldr	r2, [r3, #12]
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	60da      	str	r2, [r3, #12]
 800e626:	e005      	b.n	800e634 <tcp_process+0x6b4>
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	68db      	ldr	r3, [r3, #12]
 800e62c:	60fb      	str	r3, [r7, #12]
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d1ef      	bne.n	800e614 <tcp_process+0x694>
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2200      	movs	r2, #0
 800e638:	60da      	str	r2, [r3, #12]
 800e63a:	4b43      	ldr	r3, [pc, #268]	@ (800e748 <tcp_process+0x7c8>)
 800e63c:	2201      	movs	r2, #1
 800e63e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	220a      	movs	r2, #10
 800e644:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e646:	4b41      	ldr	r3, [pc, #260]	@ (800e74c <tcp_process+0x7cc>)
 800e648:	681a      	ldr	r2, [r3, #0]
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	60da      	str	r2, [r3, #12]
 800e64e:	4a3f      	ldr	r2, [pc, #252]	@ (800e74c <tcp_process+0x7cc>)
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6013      	str	r3, [r2, #0]
 800e654:	f002 fca0 	bl	8010f98 <tcp_timer_needed>
      }
      break;
 800e658:	e06c      	b.n	800e734 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e65a:	6878      	ldr	r0, [r7, #4]
 800e65c:	f000 f984 	bl	800e968 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e660:	4b3b      	ldr	r3, [pc, #236]	@ (800e750 <tcp_process+0x7d0>)
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	f003 0310 	and.w	r3, r3, #16
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d065      	beq.n	800e738 <tcp_process+0x7b8>
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e670:	4b38      	ldr	r3, [pc, #224]	@ (800e754 <tcp_process+0x7d4>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	429a      	cmp	r2, r3
 800e676:	d15f      	bne.n	800e738 <tcp_process+0x7b8>
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d15b      	bne.n	800e738 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f7fe fceb 	bl	800d05c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e686:	4b35      	ldr	r3, [pc, #212]	@ (800e75c <tcp_process+0x7dc>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	687a      	ldr	r2, [r7, #4]
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d105      	bne.n	800e69c <tcp_process+0x71c>
 800e690:	4b32      	ldr	r3, [pc, #200]	@ (800e75c <tcp_process+0x7dc>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	68db      	ldr	r3, [r3, #12]
 800e696:	4a31      	ldr	r2, [pc, #196]	@ (800e75c <tcp_process+0x7dc>)
 800e698:	6013      	str	r3, [r2, #0]
 800e69a:	e013      	b.n	800e6c4 <tcp_process+0x744>
 800e69c:	4b2f      	ldr	r3, [pc, #188]	@ (800e75c <tcp_process+0x7dc>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	61bb      	str	r3, [r7, #24]
 800e6a2:	e00c      	b.n	800e6be <tcp_process+0x73e>
 800e6a4:	69bb      	ldr	r3, [r7, #24]
 800e6a6:	68db      	ldr	r3, [r3, #12]
 800e6a8:	687a      	ldr	r2, [r7, #4]
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d104      	bne.n	800e6b8 <tcp_process+0x738>
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	68da      	ldr	r2, [r3, #12]
 800e6b2:	69bb      	ldr	r3, [r7, #24]
 800e6b4:	60da      	str	r2, [r3, #12]
 800e6b6:	e005      	b.n	800e6c4 <tcp_process+0x744>
 800e6b8:	69bb      	ldr	r3, [r7, #24]
 800e6ba:	68db      	ldr	r3, [r3, #12]
 800e6bc:	61bb      	str	r3, [r7, #24]
 800e6be:	69bb      	ldr	r3, [r7, #24]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d1ef      	bne.n	800e6a4 <tcp_process+0x724>
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	60da      	str	r2, [r3, #12]
 800e6ca:	4b1f      	ldr	r3, [pc, #124]	@ (800e748 <tcp_process+0x7c8>)
 800e6cc:	2201      	movs	r2, #1
 800e6ce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	220a      	movs	r2, #10
 800e6d4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e6d6:	4b1d      	ldr	r3, [pc, #116]	@ (800e74c <tcp_process+0x7cc>)
 800e6d8:	681a      	ldr	r2, [r3, #0]
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	60da      	str	r2, [r3, #12]
 800e6de:	4a1b      	ldr	r2, [pc, #108]	@ (800e74c <tcp_process+0x7cc>)
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6013      	str	r3, [r2, #0]
 800e6e4:	f002 fc58 	bl	8010f98 <tcp_timer_needed>
      }
      break;
 800e6e8:	e026      	b.n	800e738 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f000 f93c 	bl	800e968 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e6f0:	4b17      	ldr	r3, [pc, #92]	@ (800e750 <tcp_process+0x7d0>)
 800e6f2:	781b      	ldrb	r3, [r3, #0]
 800e6f4:	f003 0310 	and.w	r3, r3, #16
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d01f      	beq.n	800e73c <tcp_process+0x7bc>
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e700:	4b14      	ldr	r3, [pc, #80]	@ (800e754 <tcp_process+0x7d4>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	429a      	cmp	r2, r3
 800e706:	d119      	bne.n	800e73c <tcp_process+0x7bc>
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d115      	bne.n	800e73c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e710:	4b11      	ldr	r3, [pc, #68]	@ (800e758 <tcp_process+0x7d8>)
 800e712:	781b      	ldrb	r3, [r3, #0]
 800e714:	f043 0310 	orr.w	r3, r3, #16
 800e718:	b2da      	uxtb	r2, r3
 800e71a:	4b0f      	ldr	r3, [pc, #60]	@ (800e758 <tcp_process+0x7d8>)
 800e71c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e71e:	e00d      	b.n	800e73c <tcp_process+0x7bc>
    default:
      break;
 800e720:	bf00      	nop
 800e722:	e00c      	b.n	800e73e <tcp_process+0x7be>
      break;
 800e724:	bf00      	nop
 800e726:	e00a      	b.n	800e73e <tcp_process+0x7be>
      break;
 800e728:	bf00      	nop
 800e72a:	e008      	b.n	800e73e <tcp_process+0x7be>
      break;
 800e72c:	bf00      	nop
 800e72e:	e006      	b.n	800e73e <tcp_process+0x7be>
      break;
 800e730:	bf00      	nop
 800e732:	e004      	b.n	800e73e <tcp_process+0x7be>
      break;
 800e734:	bf00      	nop
 800e736:	e002      	b.n	800e73e <tcp_process+0x7be>
      break;
 800e738:	bf00      	nop
 800e73a:	e000      	b.n	800e73e <tcp_process+0x7be>
      break;
 800e73c:	bf00      	nop
  }
  return ERR_OK;
 800e73e:	2300      	movs	r3, #0
}
 800e740:	4618      	mov	r0, r3
 800e742:	3724      	adds	r7, #36	@ 0x24
 800e744:	46bd      	mov	sp, r7
 800e746:	bd90      	pop	{r4, r7, pc}
 800e748:	20008370 	.word	0x20008370
 800e74c:	2000836c 	.word	0x2000836c
 800e750:	200083a4 	.word	0x200083a4
 800e754:	2000839c 	.word	0x2000839c
 800e758:	200083a5 	.word	0x200083a5
 800e75c:	20008368 	.word	0x20008368

0800e760 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e760:	b590      	push	{r4, r7, lr}
 800e762:	b085      	sub	sp, #20
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
 800e768:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d106      	bne.n	800e77e <tcp_oos_insert_segment+0x1e>
 800e770:	4b3b      	ldr	r3, [pc, #236]	@ (800e860 <tcp_oos_insert_segment+0x100>)
 800e772:	f240 421f 	movw	r2, #1055	@ 0x41f
 800e776:	493b      	ldr	r1, [pc, #236]	@ (800e864 <tcp_oos_insert_segment+0x104>)
 800e778:	483b      	ldr	r0, [pc, #236]	@ (800e868 <tcp_oos_insert_segment+0x108>)
 800e77a:	f006 fbb5 	bl	8014ee8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	691b      	ldr	r3, [r3, #16]
 800e782:	899b      	ldrh	r3, [r3, #12]
 800e784:	b29b      	uxth	r3, r3
 800e786:	4618      	mov	r0, r3
 800e788:	f7fb fba6 	bl	8009ed8 <lwip_htons>
 800e78c:	4603      	mov	r3, r0
 800e78e:	b2db      	uxtb	r3, r3
 800e790:	f003 0301 	and.w	r3, r3, #1
 800e794:	2b00      	cmp	r3, #0
 800e796:	d028      	beq.n	800e7ea <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e798:	6838      	ldr	r0, [r7, #0]
 800e79a:	f7fe fa5d 	bl	800cc58 <tcp_segs_free>
    next = NULL;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	603b      	str	r3, [r7, #0]
 800e7a2:	e056      	b.n	800e852 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	691b      	ldr	r3, [r3, #16]
 800e7a8:	899b      	ldrh	r3, [r3, #12]
 800e7aa:	b29b      	uxth	r3, r3
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f7fb fb93 	bl	8009ed8 <lwip_htons>
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	b2db      	uxtb	r3, r3
 800e7b6:	f003 0301 	and.w	r3, r3, #1
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d00d      	beq.n	800e7da <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	691b      	ldr	r3, [r3, #16]
 800e7c2:	899b      	ldrh	r3, [r3, #12]
 800e7c4:	b29c      	uxth	r4, r3
 800e7c6:	2001      	movs	r0, #1
 800e7c8:	f7fb fb86 	bl	8009ed8 <lwip_htons>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	461a      	mov	r2, r3
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	691b      	ldr	r3, [r3, #16]
 800e7d4:	4322      	orrs	r2, r4
 800e7d6:	b292      	uxth	r2, r2
 800e7d8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e7e4:	68f8      	ldr	r0, [r7, #12]
 800e7e6:	f7fe fa4c 	bl	800cc82 <tcp_seg_free>
    while (next &&
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d00e      	beq.n	800e80e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	891b      	ldrh	r3, [r3, #8]
 800e7f4:	461a      	mov	r2, r3
 800e7f6:	4b1d      	ldr	r3, [pc, #116]	@ (800e86c <tcp_oos_insert_segment+0x10c>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	441a      	add	r2, r3
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	691b      	ldr	r3, [r3, #16]
 800e800:	685b      	ldr	r3, [r3, #4]
 800e802:	6839      	ldr	r1, [r7, #0]
 800e804:	8909      	ldrh	r1, [r1, #8]
 800e806:	440b      	add	r3, r1
 800e808:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	daca      	bge.n	800e7a4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d01e      	beq.n	800e852 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	891b      	ldrh	r3, [r3, #8]
 800e818:	461a      	mov	r2, r3
 800e81a:	4b14      	ldr	r3, [pc, #80]	@ (800e86c <tcp_oos_insert_segment+0x10c>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	441a      	add	r2, r3
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	691b      	ldr	r3, [r3, #16]
 800e824:	685b      	ldr	r3, [r3, #4]
 800e826:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e828:	2b00      	cmp	r3, #0
 800e82a:	dd12      	ble.n	800e852 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	691b      	ldr	r3, [r3, #16]
 800e830:	685b      	ldr	r3, [r3, #4]
 800e832:	b29a      	uxth	r2, r3
 800e834:	4b0d      	ldr	r3, [pc, #52]	@ (800e86c <tcp_oos_insert_segment+0x10c>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	b29b      	uxth	r3, r3
 800e83a:	1ad3      	subs	r3, r2, r3
 800e83c:	b29a      	uxth	r2, r3
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	685a      	ldr	r2, [r3, #4]
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	891b      	ldrh	r3, [r3, #8]
 800e84a:	4619      	mov	r1, r3
 800e84c:	4610      	mov	r0, r2
 800e84e:	f7fc fe0d 	bl	800b46c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	683a      	ldr	r2, [r7, #0]
 800e856:	601a      	str	r2, [r3, #0]
}
 800e858:	bf00      	nop
 800e85a:	3714      	adds	r7, #20
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd90      	pop	{r4, r7, pc}
 800e860:	080173e0 	.word	0x080173e0
 800e864:	080176a0 	.word	0x080176a0
 800e868:	0801742c 	.word	0x0801742c
 800e86c:	20008398 	.word	0x20008398

0800e870 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e870:	b5b0      	push	{r4, r5, r7, lr}
 800e872:	b086      	sub	sp, #24
 800e874:	af00      	add	r7, sp, #0
 800e876:	60f8      	str	r0, [r7, #12]
 800e878:	60b9      	str	r1, [r7, #8]
 800e87a:	607a      	str	r2, [r7, #4]
 800e87c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e87e:	e03e      	b.n	800e8fe <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	685b      	ldr	r3, [r3, #4]
 800e88e:	4618      	mov	r0, r3
 800e890:	f7fc fffa 	bl	800b888 <pbuf_clen>
 800e894:	4603      	mov	r3, r0
 800e896:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e89e:	8a7a      	ldrh	r2, [r7, #18]
 800e8a0:	429a      	cmp	r2, r3
 800e8a2:	d906      	bls.n	800e8b2 <tcp_free_acked_segments+0x42>
 800e8a4:	4b2a      	ldr	r3, [pc, #168]	@ (800e950 <tcp_free_acked_segments+0xe0>)
 800e8a6:	f240 4257 	movw	r2, #1111	@ 0x457
 800e8aa:	492a      	ldr	r1, [pc, #168]	@ (800e954 <tcp_free_acked_segments+0xe4>)
 800e8ac:	482a      	ldr	r0, [pc, #168]	@ (800e958 <tcp_free_acked_segments+0xe8>)
 800e8ae:	f006 fb1b 	bl	8014ee8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800e8b8:	8a7b      	ldrh	r3, [r7, #18]
 800e8ba:	1ad3      	subs	r3, r2, r3
 800e8bc:	b29a      	uxth	r2, r3
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e8c4:	697b      	ldr	r3, [r7, #20]
 800e8c6:	891a      	ldrh	r2, [r3, #8]
 800e8c8:	4b24      	ldr	r3, [pc, #144]	@ (800e95c <tcp_free_acked_segments+0xec>)
 800e8ca:	881b      	ldrh	r3, [r3, #0]
 800e8cc:	4413      	add	r3, r2
 800e8ce:	b29a      	uxth	r2, r3
 800e8d0:	4b22      	ldr	r3, [pc, #136]	@ (800e95c <tcp_free_acked_segments+0xec>)
 800e8d2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e8d4:	6978      	ldr	r0, [r7, #20]
 800e8d6:	f7fe f9d4 	bl	800cc82 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d00c      	beq.n	800e8fe <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d109      	bne.n	800e8fe <tcp_free_acked_segments+0x8e>
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d106      	bne.n	800e8fe <tcp_free_acked_segments+0x8e>
 800e8f0:	4b17      	ldr	r3, [pc, #92]	@ (800e950 <tcp_free_acked_segments+0xe0>)
 800e8f2:	f240 4261 	movw	r2, #1121	@ 0x461
 800e8f6:	491a      	ldr	r1, [pc, #104]	@ (800e960 <tcp_free_acked_segments+0xf0>)
 800e8f8:	4817      	ldr	r0, [pc, #92]	@ (800e958 <tcp_free_acked_segments+0xe8>)
 800e8fa:	f006 faf5 	bl	8014ee8 <iprintf>
  while (seg_list != NULL &&
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d020      	beq.n	800e946 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	691b      	ldr	r3, [r3, #16]
 800e908:	685b      	ldr	r3, [r3, #4]
 800e90a:	4618      	mov	r0, r3
 800e90c:	f7fb fafa 	bl	8009f04 <lwip_htonl>
 800e910:	4604      	mov	r4, r0
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	891b      	ldrh	r3, [r3, #8]
 800e916:	461d      	mov	r5, r3
 800e918:	68bb      	ldr	r3, [r7, #8]
 800e91a:	691b      	ldr	r3, [r3, #16]
 800e91c:	899b      	ldrh	r3, [r3, #12]
 800e91e:	b29b      	uxth	r3, r3
 800e920:	4618      	mov	r0, r3
 800e922:	f7fb fad9 	bl	8009ed8 <lwip_htons>
 800e926:	4603      	mov	r3, r0
 800e928:	b2db      	uxtb	r3, r3
 800e92a:	f003 0303 	and.w	r3, r3, #3
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d001      	beq.n	800e936 <tcp_free_acked_segments+0xc6>
 800e932:	2301      	movs	r3, #1
 800e934:	e000      	b.n	800e938 <tcp_free_acked_segments+0xc8>
 800e936:	2300      	movs	r3, #0
 800e938:	442b      	add	r3, r5
 800e93a:	18e2      	adds	r2, r4, r3
 800e93c:	4b09      	ldr	r3, [pc, #36]	@ (800e964 <tcp_free_acked_segments+0xf4>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800e942:	2b00      	cmp	r3, #0
 800e944:	dd9c      	ble.n	800e880 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800e946:	68bb      	ldr	r3, [r7, #8]
}
 800e948:	4618      	mov	r0, r3
 800e94a:	3718      	adds	r7, #24
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bdb0      	pop	{r4, r5, r7, pc}
 800e950:	080173e0 	.word	0x080173e0
 800e954:	080176c8 	.word	0x080176c8
 800e958:	0801742c 	.word	0x0801742c
 800e95c:	200083a0 	.word	0x200083a0
 800e960:	080176f0 	.word	0x080176f0
 800e964:	2000839c 	.word	0x2000839c

0800e968 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e968:	b5b0      	push	{r4, r5, r7, lr}
 800e96a:	b094      	sub	sp, #80	@ 0x50
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e970:	2300      	movs	r3, #0
 800e972:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d106      	bne.n	800e988 <tcp_receive+0x20>
 800e97a:	4b91      	ldr	r3, [pc, #580]	@ (800ebc0 <tcp_receive+0x258>)
 800e97c:	f240 427b 	movw	r2, #1147	@ 0x47b
 800e980:	4990      	ldr	r1, [pc, #576]	@ (800ebc4 <tcp_receive+0x25c>)
 800e982:	4891      	ldr	r0, [pc, #580]	@ (800ebc8 <tcp_receive+0x260>)
 800e984:	f006 fab0 	bl	8014ee8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	7d1b      	ldrb	r3, [r3, #20]
 800e98c:	2b03      	cmp	r3, #3
 800e98e:	d806      	bhi.n	800e99e <tcp_receive+0x36>
 800e990:	4b8b      	ldr	r3, [pc, #556]	@ (800ebc0 <tcp_receive+0x258>)
 800e992:	f240 427c 	movw	r2, #1148	@ 0x47c
 800e996:	498d      	ldr	r1, [pc, #564]	@ (800ebcc <tcp_receive+0x264>)
 800e998:	488b      	ldr	r0, [pc, #556]	@ (800ebc8 <tcp_receive+0x260>)
 800e99a:	f006 faa5 	bl	8014ee8 <iprintf>

  if (flags & TCP_ACK) {
 800e99e:	4b8c      	ldr	r3, [pc, #560]	@ (800ebd0 <tcp_receive+0x268>)
 800e9a0:	781b      	ldrb	r3, [r3, #0]
 800e9a2:	f003 0310 	and.w	r3, r3, #16
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	f000 8264 	beq.w	800ee74 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e9b2:	461a      	mov	r2, r3
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e9b8:	4413      	add	r3, r2
 800e9ba:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e9c0:	4b84      	ldr	r3, [pc, #528]	@ (800ebd4 <tcp_receive+0x26c>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	1ad3      	subs	r3, r2, r3
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	db1b      	blt.n	800ea02 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e9ce:	4b81      	ldr	r3, [pc, #516]	@ (800ebd4 <tcp_receive+0x26c>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	d106      	bne.n	800e9e4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e9da:	4b7f      	ldr	r3, [pc, #508]	@ (800ebd8 <tcp_receive+0x270>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	1ad3      	subs	r3, r2, r3
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	db0e      	blt.n	800ea02 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e9e8:	4b7b      	ldr	r3, [pc, #492]	@ (800ebd8 <tcp_receive+0x270>)
 800e9ea:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d125      	bne.n	800ea3c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e9f0:	4b7a      	ldr	r3, [pc, #488]	@ (800ebdc <tcp_receive+0x274>)
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	89db      	ldrh	r3, [r3, #14]
 800e9f6:	b29a      	uxth	r2, r3
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	d91c      	bls.n	800ea3c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ea02:	4b76      	ldr	r3, [pc, #472]	@ (800ebdc <tcp_receive+0x274>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	89db      	ldrh	r3, [r3, #14]
 800ea08:	b29a      	uxth	r2, r3
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	d205      	bcs.n	800ea2c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800ea2c:	4b69      	ldr	r3, [pc, #420]	@ (800ebd4 <tcp_receive+0x26c>)
 800ea2e:	681a      	ldr	r2, [r3, #0]
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800ea34:	4b68      	ldr	r3, [pc, #416]	@ (800ebd8 <tcp_receive+0x270>)
 800ea36:	681a      	ldr	r2, [r3, #0]
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ea3c:	4b66      	ldr	r3, [pc, #408]	@ (800ebd8 <tcp_receive+0x270>)
 800ea3e:	681a      	ldr	r2, [r3, #0]
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea44:	1ad3      	subs	r3, r2, r3
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	dc58      	bgt.n	800eafc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ea4a:	4b65      	ldr	r3, [pc, #404]	@ (800ebe0 <tcp_receive+0x278>)
 800ea4c:	881b      	ldrh	r3, [r3, #0]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d14b      	bne.n	800eaea <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea56:	687a      	ldr	r2, [r7, #4]
 800ea58:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800ea5c:	4413      	add	r3, r2
 800ea5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d142      	bne.n	800eaea <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	db3d      	blt.n	800eaea <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ea72:	4b59      	ldr	r3, [pc, #356]	@ (800ebd8 <tcp_receive+0x270>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d137      	bne.n	800eaea <tcp_receive+0x182>
              found_dupack = 1;
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ea84:	2bff      	cmp	r3, #255	@ 0xff
 800ea86:	d007      	beq.n	800ea98 <tcp_receive+0x130>
                ++pcb->dupacks;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ea8e:	3301      	adds	r3, #1
 800ea90:	b2da      	uxtb	r2, r3
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ea9e:	2b03      	cmp	r3, #3
 800eaa0:	d91b      	bls.n	800eada <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eaac:	4413      	add	r3, r2
 800eaae:	b29a      	uxth	r2, r3
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d30a      	bcc.n	800ead0 <tcp_receive+0x168>
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eac4:	4413      	add	r3, r2
 800eac6:	b29a      	uxth	r2, r3
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800eace:	e004      	b.n	800eada <tcp_receive+0x172>
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ead6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800eae0:	2b02      	cmp	r3, #2
 800eae2:	d902      	bls.n	800eaea <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f001 fefb 	bl	80108e0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800eaea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	f040 8161 	bne.w	800edb4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800eafa:	e15b      	b.n	800edb4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800eafc:	4b36      	ldr	r3, [pc, #216]	@ (800ebd8 <tcp_receive+0x270>)
 800eafe:	681a      	ldr	r2, [r3, #0]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb04:	1ad3      	subs	r3, r2, r3
 800eb06:	3b01      	subs	r3, #1
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	f2c0 814e 	blt.w	800edaa <tcp_receive+0x442>
 800eb0e:	4b32      	ldr	r3, [pc, #200]	@ (800ebd8 <tcp_receive+0x270>)
 800eb10:	681a      	ldr	r2, [r3, #0]
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb16:	1ad3      	subs	r3, r2, r3
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	f300 8146 	bgt.w	800edaa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	8b5b      	ldrh	r3, [r3, #26]
 800eb22:	f003 0304 	and.w	r3, r3, #4
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d010      	beq.n	800eb4c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	8b5b      	ldrh	r3, [r3, #26]
 800eb2e:	f023 0304 	bic.w	r3, r3, #4
 800eb32:	b29a      	uxth	r2, r3
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2200      	movs	r2, #0
 800eb48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800eb5a:	10db      	asrs	r3, r3, #3
 800eb5c:	b21b      	sxth	r3, r3
 800eb5e:	b29a      	uxth	r2, r3
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800eb66:	b29b      	uxth	r3, r3
 800eb68:	4413      	add	r3, r2
 800eb6a:	b29b      	uxth	r3, r3
 800eb6c:	b21a      	sxth	r2, r3
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800eb74:	4b18      	ldr	r3, [pc, #96]	@ (800ebd8 <tcp_receive+0x270>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	b29a      	uxth	r2, r3
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb7e:	b29b      	uxth	r3, r3
 800eb80:	1ad3      	subs	r3, r2, r3
 800eb82:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2200      	movs	r2, #0
 800eb88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800eb8c:	4b12      	ldr	r3, [pc, #72]	@ (800ebd8 <tcp_receive+0x270>)
 800eb8e:	681a      	ldr	r2, [r3, #0]
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	7d1b      	ldrb	r3, [r3, #20]
 800eb98:	2b03      	cmp	r3, #3
 800eb9a:	f240 8097 	bls.w	800eccc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800ebaa:	429a      	cmp	r2, r3
 800ebac:	d245      	bcs.n	800ec3a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	8b5b      	ldrh	r3, [r3, #26]
 800ebb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d014      	beq.n	800ebe4 <tcp_receive+0x27c>
 800ebba:	2301      	movs	r3, #1
 800ebbc:	e013      	b.n	800ebe6 <tcp_receive+0x27e>
 800ebbe:	bf00      	nop
 800ebc0:	080173e0 	.word	0x080173e0
 800ebc4:	08017710 	.word	0x08017710
 800ebc8:	0801742c 	.word	0x0801742c
 800ebcc:	0801772c 	.word	0x0801772c
 800ebd0:	200083a4 	.word	0x200083a4
 800ebd4:	20008398 	.word	0x20008398
 800ebd8:	2000839c 	.word	0x2000839c
 800ebdc:	20008388 	.word	0x20008388
 800ebe0:	200083a2 	.word	0x200083a2
 800ebe4:	2302      	movs	r3, #2
 800ebe6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ebea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800ebee:	b29a      	uxth	r2, r3
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ebf4:	fb12 f303 	smulbb	r3, r2, r3
 800ebf8:	b29b      	uxth	r3, r3
 800ebfa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ebfc:	4293      	cmp	r3, r2
 800ebfe:	bf28      	it	cs
 800ec00:	4613      	movcs	r3, r2
 800ec02:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ec0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ec0c:	4413      	add	r3, r2
 800ec0e:	b29a      	uxth	r2, r3
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ec16:	429a      	cmp	r2, r3
 800ec18:	d309      	bcc.n	800ec2e <tcp_receive+0x2c6>
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ec20:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ec22:	4413      	add	r3, r2
 800ec24:	b29a      	uxth	r2, r3
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ec2c:	e04e      	b.n	800eccc <tcp_receive+0x364>
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ec34:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ec38:	e048      	b.n	800eccc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800ec40:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ec42:	4413      	add	r3, r2
 800ec44:	b29a      	uxth	r2, r3
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	d309      	bcc.n	800ec64 <tcp_receive+0x2fc>
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800ec56:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ec58:	4413      	add	r3, r2
 800ec5a:	b29a      	uxth	r2, r3
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ec62:	e004      	b.n	800ec6e <tcp_receive+0x306>
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ec6a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	d326      	bcc.n	800eccc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ec8a:	1ad3      	subs	r3, r2, r3
 800ec8c:	b29a      	uxth	r2, r3
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ec9e:	4413      	add	r3, r2
 800eca0:	b29a      	uxth	r2, r3
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	d30a      	bcc.n	800ecc2 <tcp_receive+0x35a>
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ecb6:	4413      	add	r3, r2
 800ecb8:	b29a      	uxth	r2, r3
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ecc0:	e004      	b.n	800eccc <tcp_receive+0x364>
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ecc8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ecd4:	4a98      	ldr	r2, [pc, #608]	@ (800ef38 <tcp_receive+0x5d0>)
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	f7ff fdca 	bl	800e870 <tcp_free_acked_segments>
 800ecdc:	4602      	mov	r2, r0
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ecea:	4a94      	ldr	r2, [pc, #592]	@ (800ef3c <tcp_receive+0x5d4>)
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f7ff fdbf 	bl	800e870 <tcp_free_acked_segments>
 800ecf2:	4602      	mov	r2, r0
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d104      	bne.n	800ed0a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ed06:	861a      	strh	r2, [r3, #48]	@ 0x30
 800ed08:	e002      	b.n	800ed10 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2200      	movs	r2, #0
 800ed14:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d103      	bne.n	800ed26 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	2200      	movs	r2, #0
 800ed22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800ed2c:	4b84      	ldr	r3, [pc, #528]	@ (800ef40 <tcp_receive+0x5d8>)
 800ed2e:	881b      	ldrh	r3, [r3, #0]
 800ed30:	4413      	add	r3, r2
 800ed32:	b29a      	uxth	r2, r3
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	8b5b      	ldrh	r3, [r3, #26]
 800ed3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d035      	beq.n	800edb2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d118      	bne.n	800ed80 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d00c      	beq.n	800ed70 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed5e:	691b      	ldr	r3, [r3, #16]
 800ed60:	685b      	ldr	r3, [r3, #4]
 800ed62:	4618      	mov	r0, r3
 800ed64:	f7fb f8ce 	bl	8009f04 <lwip_htonl>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	dc20      	bgt.n	800edb2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	8b5b      	ldrh	r3, [r3, #26]
 800ed74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ed78:	b29a      	uxth	r2, r3
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ed7e:	e018      	b.n	800edb2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ed88:	691b      	ldr	r3, [r3, #16]
 800ed8a:	685b      	ldr	r3, [r3, #4]
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f7fb f8b9 	bl	8009f04 <lwip_htonl>
 800ed92:	4603      	mov	r3, r0
 800ed94:	1ae3      	subs	r3, r4, r3
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	dc0b      	bgt.n	800edb2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	8b5b      	ldrh	r3, [r3, #26]
 800ed9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800eda2:	b29a      	uxth	r2, r3
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800eda8:	e003      	b.n	800edb2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	f001 ff84 	bl	8010cb8 <tcp_send_empty_ack>
 800edb0:	e000      	b.n	800edb4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800edb2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d05b      	beq.n	800ee74 <tcp_receive+0x50c>
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800edc0:	4b60      	ldr	r3, [pc, #384]	@ (800ef44 <tcp_receive+0x5dc>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	1ad3      	subs	r3, r2, r3
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	da54      	bge.n	800ee74 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800edca:	4b5f      	ldr	r3, [pc, #380]	@ (800ef48 <tcp_receive+0x5e0>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	b29a      	uxth	r2, r3
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edd4:	b29b      	uxth	r3, r3
 800edd6:	1ad3      	subs	r3, r2, r3
 800edd8:	b29b      	uxth	r3, r3
 800edda:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800edde:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ede8:	10db      	asrs	r3, r3, #3
 800edea:	b21b      	sxth	r3, r3
 800edec:	b29b      	uxth	r3, r3
 800edee:	1ad3      	subs	r3, r2, r3
 800edf0:	b29b      	uxth	r3, r3
 800edf2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800edfc:	b29a      	uxth	r2, r3
 800edfe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ee02:	4413      	add	r3, r2
 800ee04:	b29b      	uxth	r3, r3
 800ee06:	b21a      	sxth	r2, r3
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800ee0c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	da05      	bge.n	800ee20 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800ee14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ee18:	425b      	negs	r3, r3
 800ee1a:	b29b      	uxth	r3, r3
 800ee1c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800ee20:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ee2a:	109b      	asrs	r3, r3, #2
 800ee2c:	b21b      	sxth	r3, r3
 800ee2e:	b29b      	uxth	r3, r3
 800ee30:	1ad3      	subs	r3, r2, r3
 800ee32:	b29b      	uxth	r3, r3
 800ee34:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ee3e:	b29a      	uxth	r2, r3
 800ee40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ee44:	4413      	add	r3, r2
 800ee46:	b29b      	uxth	r3, r3
 800ee48:	b21a      	sxth	r2, r3
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ee54:	10db      	asrs	r3, r3, #3
 800ee56:	b21b      	sxth	r3, r3
 800ee58:	b29a      	uxth	r2, r3
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ee60:	b29b      	uxth	r3, r3
 800ee62:	4413      	add	r3, r2
 800ee64:	b29b      	uxth	r3, r3
 800ee66:	b21a      	sxth	r2, r3
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2200      	movs	r2, #0
 800ee72:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ee74:	4b35      	ldr	r3, [pc, #212]	@ (800ef4c <tcp_receive+0x5e4>)
 800ee76:	881b      	ldrh	r3, [r3, #0]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	f000 84df 	beq.w	800f83c <tcp_receive+0xed4>
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	7d1b      	ldrb	r3, [r3, #20]
 800ee82:	2b06      	cmp	r3, #6
 800ee84:	f200 84da 	bhi.w	800f83c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ee8c:	4b30      	ldr	r3, [pc, #192]	@ (800ef50 <tcp_receive+0x5e8>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	1ad3      	subs	r3, r2, r3
 800ee92:	3b01      	subs	r3, #1
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	f2c0 808f 	blt.w	800efb8 <tcp_receive+0x650>
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ee9e:	4b2b      	ldr	r3, [pc, #172]	@ (800ef4c <tcp_receive+0x5e4>)
 800eea0:	881b      	ldrh	r3, [r3, #0]
 800eea2:	4619      	mov	r1, r3
 800eea4:	4b2a      	ldr	r3, [pc, #168]	@ (800ef50 <tcp_receive+0x5e8>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	440b      	add	r3, r1
 800eeaa:	1ad3      	subs	r3, r2, r3
 800eeac:	3301      	adds	r3, #1
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	f300 8082 	bgt.w	800efb8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800eeb4:	4b27      	ldr	r3, [pc, #156]	@ (800ef54 <tcp_receive+0x5ec>)
 800eeb6:	685b      	ldr	r3, [r3, #4]
 800eeb8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eebe:	4b24      	ldr	r3, [pc, #144]	@ (800ef50 <tcp_receive+0x5e8>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	1ad3      	subs	r3, r2, r3
 800eec4:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800eec6:	4b23      	ldr	r3, [pc, #140]	@ (800ef54 <tcp_receive+0x5ec>)
 800eec8:	685b      	ldr	r3, [r3, #4]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d106      	bne.n	800eedc <tcp_receive+0x574>
 800eece:	4b22      	ldr	r3, [pc, #136]	@ (800ef58 <tcp_receive+0x5f0>)
 800eed0:	f240 5294 	movw	r2, #1428	@ 0x594
 800eed4:	4921      	ldr	r1, [pc, #132]	@ (800ef5c <tcp_receive+0x5f4>)
 800eed6:	4822      	ldr	r0, [pc, #136]	@ (800ef60 <tcp_receive+0x5f8>)
 800eed8:	f006 f806 	bl	8014ee8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800eedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eede:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800eee2:	4293      	cmp	r3, r2
 800eee4:	d906      	bls.n	800eef4 <tcp_receive+0x58c>
 800eee6:	4b1c      	ldr	r3, [pc, #112]	@ (800ef58 <tcp_receive+0x5f0>)
 800eee8:	f240 5295 	movw	r2, #1429	@ 0x595
 800eeec:	491d      	ldr	r1, [pc, #116]	@ (800ef64 <tcp_receive+0x5fc>)
 800eeee:	481c      	ldr	r0, [pc, #112]	@ (800ef60 <tcp_receive+0x5f8>)
 800eef0:	f005 fffa 	bl	8014ee8 <iprintf>
      off = (u16_t)off32;
 800eef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eef6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800eefa:	4b16      	ldr	r3, [pc, #88]	@ (800ef54 <tcp_receive+0x5ec>)
 800eefc:	685b      	ldr	r3, [r3, #4]
 800eefe:	891b      	ldrh	r3, [r3, #8]
 800ef00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ef04:	429a      	cmp	r2, r3
 800ef06:	d906      	bls.n	800ef16 <tcp_receive+0x5ae>
 800ef08:	4b13      	ldr	r3, [pc, #76]	@ (800ef58 <tcp_receive+0x5f0>)
 800ef0a:	f240 5297 	movw	r2, #1431	@ 0x597
 800ef0e:	4916      	ldr	r1, [pc, #88]	@ (800ef68 <tcp_receive+0x600>)
 800ef10:	4813      	ldr	r0, [pc, #76]	@ (800ef60 <tcp_receive+0x5f8>)
 800ef12:	f005 ffe9 	bl	8014ee8 <iprintf>
      inseg.len -= off;
 800ef16:	4b0f      	ldr	r3, [pc, #60]	@ (800ef54 <tcp_receive+0x5ec>)
 800ef18:	891a      	ldrh	r2, [r3, #8]
 800ef1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ef1e:	1ad3      	subs	r3, r2, r3
 800ef20:	b29a      	uxth	r2, r3
 800ef22:	4b0c      	ldr	r3, [pc, #48]	@ (800ef54 <tcp_receive+0x5ec>)
 800ef24:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ef26:	4b0b      	ldr	r3, [pc, #44]	@ (800ef54 <tcp_receive+0x5ec>)
 800ef28:	685b      	ldr	r3, [r3, #4]
 800ef2a:	891a      	ldrh	r2, [r3, #8]
 800ef2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ef30:	1ad3      	subs	r3, r2, r3
 800ef32:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800ef34:	e02a      	b.n	800ef8c <tcp_receive+0x624>
 800ef36:	bf00      	nop
 800ef38:	08017748 	.word	0x08017748
 800ef3c:	08017750 	.word	0x08017750
 800ef40:	200083a0 	.word	0x200083a0
 800ef44:	2000839c 	.word	0x2000839c
 800ef48:	2000835c 	.word	0x2000835c
 800ef4c:	200083a2 	.word	0x200083a2
 800ef50:	20008398 	.word	0x20008398
 800ef54:	20008374 	.word	0x20008374
 800ef58:	080173e0 	.word	0x080173e0
 800ef5c:	08017758 	.word	0x08017758
 800ef60:	0801742c 	.word	0x0801742c
 800ef64:	08017768 	.word	0x08017768
 800ef68:	08017778 	.word	0x08017778
        off -= p->len;
 800ef6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef6e:	895b      	ldrh	r3, [r3, #10]
 800ef70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ef74:	1ad3      	subs	r3, r2, r3
 800ef76:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ef7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef7c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800ef7e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ef80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef82:	2200      	movs	r2, #0
 800ef84:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ef86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800ef8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef8e:	895b      	ldrh	r3, [r3, #10]
 800ef90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ef94:	429a      	cmp	r2, r3
 800ef96:	d8e9      	bhi.n	800ef6c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ef98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ef9c:	4619      	mov	r1, r3
 800ef9e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800efa0:	f7fc fb64 	bl	800b66c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efa8:	4a90      	ldr	r2, [pc, #576]	@ (800f1ec <tcp_receive+0x884>)
 800efaa:	6013      	str	r3, [r2, #0]
 800efac:	4b90      	ldr	r3, [pc, #576]	@ (800f1f0 <tcp_receive+0x888>)
 800efae:	691b      	ldr	r3, [r3, #16]
 800efb0:	4a8e      	ldr	r2, [pc, #568]	@ (800f1ec <tcp_receive+0x884>)
 800efb2:	6812      	ldr	r2, [r2, #0]
 800efb4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800efb6:	e00d      	b.n	800efd4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800efb8:	4b8c      	ldr	r3, [pc, #560]	@ (800f1ec <tcp_receive+0x884>)
 800efba:	681a      	ldr	r2, [r3, #0]
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efc0:	1ad3      	subs	r3, r2, r3
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	da06      	bge.n	800efd4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	8b5b      	ldrh	r3, [r3, #26]
 800efca:	f043 0302 	orr.w	r3, r3, #2
 800efce:	b29a      	uxth	r2, r3
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800efd4:	4b85      	ldr	r3, [pc, #532]	@ (800f1ec <tcp_receive+0x884>)
 800efd6:	681a      	ldr	r2, [r3, #0]
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efdc:	1ad3      	subs	r3, r2, r3
 800efde:	2b00      	cmp	r3, #0
 800efe0:	f2c0 8427 	blt.w	800f832 <tcp_receive+0xeca>
 800efe4:	4b81      	ldr	r3, [pc, #516]	@ (800f1ec <tcp_receive+0x884>)
 800efe6:	681a      	ldr	r2, [r3, #0]
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efec:	6879      	ldr	r1, [r7, #4]
 800efee:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800eff0:	440b      	add	r3, r1
 800eff2:	1ad3      	subs	r3, r2, r3
 800eff4:	3301      	adds	r3, #1
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	f300 841b 	bgt.w	800f832 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f000:	4b7a      	ldr	r3, [pc, #488]	@ (800f1ec <tcp_receive+0x884>)
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	429a      	cmp	r2, r3
 800f006:	f040 8298 	bne.w	800f53a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f00a:	4b79      	ldr	r3, [pc, #484]	@ (800f1f0 <tcp_receive+0x888>)
 800f00c:	891c      	ldrh	r4, [r3, #8]
 800f00e:	4b78      	ldr	r3, [pc, #480]	@ (800f1f0 <tcp_receive+0x888>)
 800f010:	691b      	ldr	r3, [r3, #16]
 800f012:	899b      	ldrh	r3, [r3, #12]
 800f014:	b29b      	uxth	r3, r3
 800f016:	4618      	mov	r0, r3
 800f018:	f7fa ff5e 	bl	8009ed8 <lwip_htons>
 800f01c:	4603      	mov	r3, r0
 800f01e:	b2db      	uxtb	r3, r3
 800f020:	f003 0303 	and.w	r3, r3, #3
 800f024:	2b00      	cmp	r3, #0
 800f026:	d001      	beq.n	800f02c <tcp_receive+0x6c4>
 800f028:	2301      	movs	r3, #1
 800f02a:	e000      	b.n	800f02e <tcp_receive+0x6c6>
 800f02c:	2300      	movs	r3, #0
 800f02e:	4423      	add	r3, r4
 800f030:	b29a      	uxth	r2, r3
 800f032:	4b70      	ldr	r3, [pc, #448]	@ (800f1f4 <tcp_receive+0x88c>)
 800f034:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f03a:	4b6e      	ldr	r3, [pc, #440]	@ (800f1f4 <tcp_receive+0x88c>)
 800f03c:	881b      	ldrh	r3, [r3, #0]
 800f03e:	429a      	cmp	r2, r3
 800f040:	d274      	bcs.n	800f12c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f042:	4b6b      	ldr	r3, [pc, #428]	@ (800f1f0 <tcp_receive+0x888>)
 800f044:	691b      	ldr	r3, [r3, #16]
 800f046:	899b      	ldrh	r3, [r3, #12]
 800f048:	b29b      	uxth	r3, r3
 800f04a:	4618      	mov	r0, r3
 800f04c:	f7fa ff44 	bl	8009ed8 <lwip_htons>
 800f050:	4603      	mov	r3, r0
 800f052:	b2db      	uxtb	r3, r3
 800f054:	f003 0301 	and.w	r3, r3, #1
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d01e      	beq.n	800f09a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f05c:	4b64      	ldr	r3, [pc, #400]	@ (800f1f0 <tcp_receive+0x888>)
 800f05e:	691b      	ldr	r3, [r3, #16]
 800f060:	899b      	ldrh	r3, [r3, #12]
 800f062:	b29b      	uxth	r3, r3
 800f064:	b21b      	sxth	r3, r3
 800f066:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f06a:	b21c      	sxth	r4, r3
 800f06c:	4b60      	ldr	r3, [pc, #384]	@ (800f1f0 <tcp_receive+0x888>)
 800f06e:	691b      	ldr	r3, [r3, #16]
 800f070:	899b      	ldrh	r3, [r3, #12]
 800f072:	b29b      	uxth	r3, r3
 800f074:	4618      	mov	r0, r3
 800f076:	f7fa ff2f 	bl	8009ed8 <lwip_htons>
 800f07a:	4603      	mov	r3, r0
 800f07c:	b2db      	uxtb	r3, r3
 800f07e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800f082:	b29b      	uxth	r3, r3
 800f084:	4618      	mov	r0, r3
 800f086:	f7fa ff27 	bl	8009ed8 <lwip_htons>
 800f08a:	4603      	mov	r3, r0
 800f08c:	b21b      	sxth	r3, r3
 800f08e:	4323      	orrs	r3, r4
 800f090:	b21a      	sxth	r2, r3
 800f092:	4b57      	ldr	r3, [pc, #348]	@ (800f1f0 <tcp_receive+0x888>)
 800f094:	691b      	ldr	r3, [r3, #16]
 800f096:	b292      	uxth	r2, r2
 800f098:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f09e:	4b54      	ldr	r3, [pc, #336]	@ (800f1f0 <tcp_receive+0x888>)
 800f0a0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f0a2:	4b53      	ldr	r3, [pc, #332]	@ (800f1f0 <tcp_receive+0x888>)
 800f0a4:	691b      	ldr	r3, [r3, #16]
 800f0a6:	899b      	ldrh	r3, [r3, #12]
 800f0a8:	b29b      	uxth	r3, r3
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f7fa ff14 	bl	8009ed8 <lwip_htons>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	b2db      	uxtb	r3, r3
 800f0b4:	f003 0302 	and.w	r3, r3, #2
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d005      	beq.n	800f0c8 <tcp_receive+0x760>
            inseg.len -= 1;
 800f0bc:	4b4c      	ldr	r3, [pc, #304]	@ (800f1f0 <tcp_receive+0x888>)
 800f0be:	891b      	ldrh	r3, [r3, #8]
 800f0c0:	3b01      	subs	r3, #1
 800f0c2:	b29a      	uxth	r2, r3
 800f0c4:	4b4a      	ldr	r3, [pc, #296]	@ (800f1f0 <tcp_receive+0x888>)
 800f0c6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f0c8:	4b49      	ldr	r3, [pc, #292]	@ (800f1f0 <tcp_receive+0x888>)
 800f0ca:	685b      	ldr	r3, [r3, #4]
 800f0cc:	4a48      	ldr	r2, [pc, #288]	@ (800f1f0 <tcp_receive+0x888>)
 800f0ce:	8912      	ldrh	r2, [r2, #8]
 800f0d0:	4611      	mov	r1, r2
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f7fc f9ca 	bl	800b46c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f0d8:	4b45      	ldr	r3, [pc, #276]	@ (800f1f0 <tcp_receive+0x888>)
 800f0da:	891c      	ldrh	r4, [r3, #8]
 800f0dc:	4b44      	ldr	r3, [pc, #272]	@ (800f1f0 <tcp_receive+0x888>)
 800f0de:	691b      	ldr	r3, [r3, #16]
 800f0e0:	899b      	ldrh	r3, [r3, #12]
 800f0e2:	b29b      	uxth	r3, r3
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f7fa fef7 	bl	8009ed8 <lwip_htons>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	b2db      	uxtb	r3, r3
 800f0ee:	f003 0303 	and.w	r3, r3, #3
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d001      	beq.n	800f0fa <tcp_receive+0x792>
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	e000      	b.n	800f0fc <tcp_receive+0x794>
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	4423      	add	r3, r4
 800f0fe:	b29a      	uxth	r2, r3
 800f100:	4b3c      	ldr	r3, [pc, #240]	@ (800f1f4 <tcp_receive+0x88c>)
 800f102:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f104:	4b3b      	ldr	r3, [pc, #236]	@ (800f1f4 <tcp_receive+0x88c>)
 800f106:	881b      	ldrh	r3, [r3, #0]
 800f108:	461a      	mov	r2, r3
 800f10a:	4b38      	ldr	r3, [pc, #224]	@ (800f1ec <tcp_receive+0x884>)
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	441a      	add	r2, r3
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f114:	6879      	ldr	r1, [r7, #4]
 800f116:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f118:	440b      	add	r3, r1
 800f11a:	429a      	cmp	r2, r3
 800f11c:	d006      	beq.n	800f12c <tcp_receive+0x7c4>
 800f11e:	4b36      	ldr	r3, [pc, #216]	@ (800f1f8 <tcp_receive+0x890>)
 800f120:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800f124:	4935      	ldr	r1, [pc, #212]	@ (800f1fc <tcp_receive+0x894>)
 800f126:	4836      	ldr	r0, [pc, #216]	@ (800f200 <tcp_receive+0x898>)
 800f128:	f005 fede 	bl	8014ee8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f130:	2b00      	cmp	r3, #0
 800f132:	f000 80e6 	beq.w	800f302 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f136:	4b2e      	ldr	r3, [pc, #184]	@ (800f1f0 <tcp_receive+0x888>)
 800f138:	691b      	ldr	r3, [r3, #16]
 800f13a:	899b      	ldrh	r3, [r3, #12]
 800f13c:	b29b      	uxth	r3, r3
 800f13e:	4618      	mov	r0, r3
 800f140:	f7fa feca 	bl	8009ed8 <lwip_htons>
 800f144:	4603      	mov	r3, r0
 800f146:	b2db      	uxtb	r3, r3
 800f148:	f003 0301 	and.w	r3, r3, #1
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d010      	beq.n	800f172 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f150:	e00a      	b.n	800f168 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f156:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f15c:	681a      	ldr	r2, [r3, #0]
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800f162:	68f8      	ldr	r0, [r7, #12]
 800f164:	f7fd fd8d 	bl	800cc82 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d1f0      	bne.n	800f152 <tcp_receive+0x7ea>
 800f170:	e0c7      	b.n	800f302 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f176:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f178:	e051      	b.n	800f21e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f17a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f17c:	691b      	ldr	r3, [r3, #16]
 800f17e:	899b      	ldrh	r3, [r3, #12]
 800f180:	b29b      	uxth	r3, r3
 800f182:	4618      	mov	r0, r3
 800f184:	f7fa fea8 	bl	8009ed8 <lwip_htons>
 800f188:	4603      	mov	r3, r0
 800f18a:	b2db      	uxtb	r3, r3
 800f18c:	f003 0301 	and.w	r3, r3, #1
 800f190:	2b00      	cmp	r3, #0
 800f192:	d03c      	beq.n	800f20e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f194:	4b16      	ldr	r3, [pc, #88]	@ (800f1f0 <tcp_receive+0x888>)
 800f196:	691b      	ldr	r3, [r3, #16]
 800f198:	899b      	ldrh	r3, [r3, #12]
 800f19a:	b29b      	uxth	r3, r3
 800f19c:	4618      	mov	r0, r3
 800f19e:	f7fa fe9b 	bl	8009ed8 <lwip_htons>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	b2db      	uxtb	r3, r3
 800f1a6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d12f      	bne.n	800f20e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f1ae:	4b10      	ldr	r3, [pc, #64]	@ (800f1f0 <tcp_receive+0x888>)
 800f1b0:	691b      	ldr	r3, [r3, #16]
 800f1b2:	899b      	ldrh	r3, [r3, #12]
 800f1b4:	b29c      	uxth	r4, r3
 800f1b6:	2001      	movs	r0, #1
 800f1b8:	f7fa fe8e 	bl	8009ed8 <lwip_htons>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	461a      	mov	r2, r3
 800f1c0:	4b0b      	ldr	r3, [pc, #44]	@ (800f1f0 <tcp_receive+0x888>)
 800f1c2:	691b      	ldr	r3, [r3, #16]
 800f1c4:	4322      	orrs	r2, r4
 800f1c6:	b292      	uxth	r2, r2
 800f1c8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f1ca:	4b09      	ldr	r3, [pc, #36]	@ (800f1f0 <tcp_receive+0x888>)
 800f1cc:	891c      	ldrh	r4, [r3, #8]
 800f1ce:	4b08      	ldr	r3, [pc, #32]	@ (800f1f0 <tcp_receive+0x888>)
 800f1d0:	691b      	ldr	r3, [r3, #16]
 800f1d2:	899b      	ldrh	r3, [r3, #12]
 800f1d4:	b29b      	uxth	r3, r3
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f7fa fe7e 	bl	8009ed8 <lwip_htons>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	b2db      	uxtb	r3, r3
 800f1e0:	f003 0303 	and.w	r3, r3, #3
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d00d      	beq.n	800f204 <tcp_receive+0x89c>
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	e00c      	b.n	800f206 <tcp_receive+0x89e>
 800f1ec:	20008398 	.word	0x20008398
 800f1f0:	20008374 	.word	0x20008374
 800f1f4:	200083a2 	.word	0x200083a2
 800f1f8:	080173e0 	.word	0x080173e0
 800f1fc:	08017788 	.word	0x08017788
 800f200:	0801742c 	.word	0x0801742c
 800f204:	2300      	movs	r3, #0
 800f206:	4423      	add	r3, r4
 800f208:	b29a      	uxth	r2, r3
 800f20a:	4b98      	ldr	r3, [pc, #608]	@ (800f46c <tcp_receive+0xb04>)
 800f20c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f20e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f210:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800f218:	6938      	ldr	r0, [r7, #16]
 800f21a:	f7fd fd32 	bl	800cc82 <tcp_seg_free>
            while (next &&
 800f21e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f220:	2b00      	cmp	r3, #0
 800f222:	d00e      	beq.n	800f242 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f224:	4b91      	ldr	r3, [pc, #580]	@ (800f46c <tcp_receive+0xb04>)
 800f226:	881b      	ldrh	r3, [r3, #0]
 800f228:	461a      	mov	r2, r3
 800f22a:	4b91      	ldr	r3, [pc, #580]	@ (800f470 <tcp_receive+0xb08>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	441a      	add	r2, r3
 800f230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f232:	691b      	ldr	r3, [r3, #16]
 800f234:	685b      	ldr	r3, [r3, #4]
 800f236:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f238:	8909      	ldrh	r1, [r1, #8]
 800f23a:	440b      	add	r3, r1
 800f23c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f23e:	2b00      	cmp	r3, #0
 800f240:	da9b      	bge.n	800f17a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f244:	2b00      	cmp	r3, #0
 800f246:	d059      	beq.n	800f2fc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f248:	4b88      	ldr	r3, [pc, #544]	@ (800f46c <tcp_receive+0xb04>)
 800f24a:	881b      	ldrh	r3, [r3, #0]
 800f24c:	461a      	mov	r2, r3
 800f24e:	4b88      	ldr	r3, [pc, #544]	@ (800f470 <tcp_receive+0xb08>)
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	441a      	add	r2, r3
 800f254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f256:	691b      	ldr	r3, [r3, #16]
 800f258:	685b      	ldr	r3, [r3, #4]
 800f25a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	dd4d      	ble.n	800f2fc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f262:	691b      	ldr	r3, [r3, #16]
 800f264:	685b      	ldr	r3, [r3, #4]
 800f266:	b29a      	uxth	r2, r3
 800f268:	4b81      	ldr	r3, [pc, #516]	@ (800f470 <tcp_receive+0xb08>)
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	b29b      	uxth	r3, r3
 800f26e:	1ad3      	subs	r3, r2, r3
 800f270:	b29a      	uxth	r2, r3
 800f272:	4b80      	ldr	r3, [pc, #512]	@ (800f474 <tcp_receive+0xb0c>)
 800f274:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f276:	4b7f      	ldr	r3, [pc, #508]	@ (800f474 <tcp_receive+0xb0c>)
 800f278:	691b      	ldr	r3, [r3, #16]
 800f27a:	899b      	ldrh	r3, [r3, #12]
 800f27c:	b29b      	uxth	r3, r3
 800f27e:	4618      	mov	r0, r3
 800f280:	f7fa fe2a 	bl	8009ed8 <lwip_htons>
 800f284:	4603      	mov	r3, r0
 800f286:	b2db      	uxtb	r3, r3
 800f288:	f003 0302 	and.w	r3, r3, #2
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d005      	beq.n	800f29c <tcp_receive+0x934>
                inseg.len -= 1;
 800f290:	4b78      	ldr	r3, [pc, #480]	@ (800f474 <tcp_receive+0xb0c>)
 800f292:	891b      	ldrh	r3, [r3, #8]
 800f294:	3b01      	subs	r3, #1
 800f296:	b29a      	uxth	r2, r3
 800f298:	4b76      	ldr	r3, [pc, #472]	@ (800f474 <tcp_receive+0xb0c>)
 800f29a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f29c:	4b75      	ldr	r3, [pc, #468]	@ (800f474 <tcp_receive+0xb0c>)
 800f29e:	685b      	ldr	r3, [r3, #4]
 800f2a0:	4a74      	ldr	r2, [pc, #464]	@ (800f474 <tcp_receive+0xb0c>)
 800f2a2:	8912      	ldrh	r2, [r2, #8]
 800f2a4:	4611      	mov	r1, r2
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f7fc f8e0 	bl	800b46c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f2ac:	4b71      	ldr	r3, [pc, #452]	@ (800f474 <tcp_receive+0xb0c>)
 800f2ae:	891c      	ldrh	r4, [r3, #8]
 800f2b0:	4b70      	ldr	r3, [pc, #448]	@ (800f474 <tcp_receive+0xb0c>)
 800f2b2:	691b      	ldr	r3, [r3, #16]
 800f2b4:	899b      	ldrh	r3, [r3, #12]
 800f2b6:	b29b      	uxth	r3, r3
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f7fa fe0d 	bl	8009ed8 <lwip_htons>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	b2db      	uxtb	r3, r3
 800f2c2:	f003 0303 	and.w	r3, r3, #3
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d001      	beq.n	800f2ce <tcp_receive+0x966>
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	e000      	b.n	800f2d0 <tcp_receive+0x968>
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	4423      	add	r3, r4
 800f2d2:	b29a      	uxth	r2, r3
 800f2d4:	4b65      	ldr	r3, [pc, #404]	@ (800f46c <tcp_receive+0xb04>)
 800f2d6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f2d8:	4b64      	ldr	r3, [pc, #400]	@ (800f46c <tcp_receive+0xb04>)
 800f2da:	881b      	ldrh	r3, [r3, #0]
 800f2dc:	461a      	mov	r2, r3
 800f2de:	4b64      	ldr	r3, [pc, #400]	@ (800f470 <tcp_receive+0xb08>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	441a      	add	r2, r3
 800f2e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2e6:	691b      	ldr	r3, [r3, #16]
 800f2e8:	685b      	ldr	r3, [r3, #4]
 800f2ea:	429a      	cmp	r2, r3
 800f2ec:	d006      	beq.n	800f2fc <tcp_receive+0x994>
 800f2ee:	4b62      	ldr	r3, [pc, #392]	@ (800f478 <tcp_receive+0xb10>)
 800f2f0:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800f2f4:	4961      	ldr	r1, [pc, #388]	@ (800f47c <tcp_receive+0xb14>)
 800f2f6:	4862      	ldr	r0, [pc, #392]	@ (800f480 <tcp_receive+0xb18>)
 800f2f8:	f005 fdf6 	bl	8014ee8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f300:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f302:	4b5a      	ldr	r3, [pc, #360]	@ (800f46c <tcp_receive+0xb04>)
 800f304:	881b      	ldrh	r3, [r3, #0]
 800f306:	461a      	mov	r2, r3
 800f308:	4b59      	ldr	r3, [pc, #356]	@ (800f470 <tcp_receive+0xb08>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	441a      	add	r2, r3
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f316:	4b55      	ldr	r3, [pc, #340]	@ (800f46c <tcp_receive+0xb04>)
 800f318:	881b      	ldrh	r3, [r3, #0]
 800f31a:	429a      	cmp	r2, r3
 800f31c:	d206      	bcs.n	800f32c <tcp_receive+0x9c4>
 800f31e:	4b56      	ldr	r3, [pc, #344]	@ (800f478 <tcp_receive+0xb10>)
 800f320:	f240 6207 	movw	r2, #1543	@ 0x607
 800f324:	4957      	ldr	r1, [pc, #348]	@ (800f484 <tcp_receive+0xb1c>)
 800f326:	4856      	ldr	r0, [pc, #344]	@ (800f480 <tcp_receive+0xb18>)
 800f328:	f005 fdde 	bl	8014ee8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f330:	4b4e      	ldr	r3, [pc, #312]	@ (800f46c <tcp_receive+0xb04>)
 800f332:	881b      	ldrh	r3, [r3, #0]
 800f334:	1ad3      	subs	r3, r2, r3
 800f336:	b29a      	uxth	r2, r3
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f7fc ffbf 	bl	800c2c0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f342:	4b4c      	ldr	r3, [pc, #304]	@ (800f474 <tcp_receive+0xb0c>)
 800f344:	685b      	ldr	r3, [r3, #4]
 800f346:	891b      	ldrh	r3, [r3, #8]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d006      	beq.n	800f35a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f34c:	4b49      	ldr	r3, [pc, #292]	@ (800f474 <tcp_receive+0xb0c>)
 800f34e:	685b      	ldr	r3, [r3, #4]
 800f350:	4a4d      	ldr	r2, [pc, #308]	@ (800f488 <tcp_receive+0xb20>)
 800f352:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f354:	4b47      	ldr	r3, [pc, #284]	@ (800f474 <tcp_receive+0xb0c>)
 800f356:	2200      	movs	r2, #0
 800f358:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f35a:	4b46      	ldr	r3, [pc, #280]	@ (800f474 <tcp_receive+0xb0c>)
 800f35c:	691b      	ldr	r3, [r3, #16]
 800f35e:	899b      	ldrh	r3, [r3, #12]
 800f360:	b29b      	uxth	r3, r3
 800f362:	4618      	mov	r0, r3
 800f364:	f7fa fdb8 	bl	8009ed8 <lwip_htons>
 800f368:	4603      	mov	r3, r0
 800f36a:	b2db      	uxtb	r3, r3
 800f36c:	f003 0301 	and.w	r3, r3, #1
 800f370:	2b00      	cmp	r3, #0
 800f372:	f000 80b8 	beq.w	800f4e6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f376:	4b45      	ldr	r3, [pc, #276]	@ (800f48c <tcp_receive+0xb24>)
 800f378:	781b      	ldrb	r3, [r3, #0]
 800f37a:	f043 0320 	orr.w	r3, r3, #32
 800f37e:	b2da      	uxtb	r2, r3
 800f380:	4b42      	ldr	r3, [pc, #264]	@ (800f48c <tcp_receive+0xb24>)
 800f382:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f384:	e0af      	b.n	800f4e6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f38a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f390:	691b      	ldr	r3, [r3, #16]
 800f392:	685b      	ldr	r3, [r3, #4]
 800f394:	4a36      	ldr	r2, [pc, #216]	@ (800f470 <tcp_receive+0xb08>)
 800f396:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f398:	68bb      	ldr	r3, [r7, #8]
 800f39a:	891b      	ldrh	r3, [r3, #8]
 800f39c:	461c      	mov	r4, r3
 800f39e:	68bb      	ldr	r3, [r7, #8]
 800f3a0:	691b      	ldr	r3, [r3, #16]
 800f3a2:	899b      	ldrh	r3, [r3, #12]
 800f3a4:	b29b      	uxth	r3, r3
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7fa fd96 	bl	8009ed8 <lwip_htons>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	b2db      	uxtb	r3, r3
 800f3b0:	f003 0303 	and.w	r3, r3, #3
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d001      	beq.n	800f3bc <tcp_receive+0xa54>
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	e000      	b.n	800f3be <tcp_receive+0xa56>
 800f3bc:	2300      	movs	r3, #0
 800f3be:	191a      	adds	r2, r3, r4
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3c4:	441a      	add	r2, r3
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f3ce:	461c      	mov	r4, r3
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	891b      	ldrh	r3, [r3, #8]
 800f3d4:	461d      	mov	r5, r3
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	691b      	ldr	r3, [r3, #16]
 800f3da:	899b      	ldrh	r3, [r3, #12]
 800f3dc:	b29b      	uxth	r3, r3
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7fa fd7a 	bl	8009ed8 <lwip_htons>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	b2db      	uxtb	r3, r3
 800f3e8:	f003 0303 	and.w	r3, r3, #3
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d001      	beq.n	800f3f4 <tcp_receive+0xa8c>
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	e000      	b.n	800f3f6 <tcp_receive+0xa8e>
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	442b      	add	r3, r5
 800f3f8:	429c      	cmp	r4, r3
 800f3fa:	d206      	bcs.n	800f40a <tcp_receive+0xaa2>
 800f3fc:	4b1e      	ldr	r3, [pc, #120]	@ (800f478 <tcp_receive+0xb10>)
 800f3fe:	f240 622b 	movw	r2, #1579	@ 0x62b
 800f402:	4923      	ldr	r1, [pc, #140]	@ (800f490 <tcp_receive+0xb28>)
 800f404:	481e      	ldr	r0, [pc, #120]	@ (800f480 <tcp_receive+0xb18>)
 800f406:	f005 fd6f 	bl	8014ee8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	891b      	ldrh	r3, [r3, #8]
 800f40e:	461c      	mov	r4, r3
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	691b      	ldr	r3, [r3, #16]
 800f414:	899b      	ldrh	r3, [r3, #12]
 800f416:	b29b      	uxth	r3, r3
 800f418:	4618      	mov	r0, r3
 800f41a:	f7fa fd5d 	bl	8009ed8 <lwip_htons>
 800f41e:	4603      	mov	r3, r0
 800f420:	b2db      	uxtb	r3, r3
 800f422:	f003 0303 	and.w	r3, r3, #3
 800f426:	2b00      	cmp	r3, #0
 800f428:	d001      	beq.n	800f42e <tcp_receive+0xac6>
 800f42a:	2301      	movs	r3, #1
 800f42c:	e000      	b.n	800f430 <tcp_receive+0xac8>
 800f42e:	2300      	movs	r3, #0
 800f430:	1919      	adds	r1, r3, r4
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f436:	b28b      	uxth	r3, r1
 800f438:	1ad3      	subs	r3, r2, r3
 800f43a:	b29a      	uxth	r2, r3
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f7fc ff3d 	bl	800c2c0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f446:	68bb      	ldr	r3, [r7, #8]
 800f448:	685b      	ldr	r3, [r3, #4]
 800f44a:	891b      	ldrh	r3, [r3, #8]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d028      	beq.n	800f4a2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f450:	4b0d      	ldr	r3, [pc, #52]	@ (800f488 <tcp_receive+0xb20>)
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d01d      	beq.n	800f494 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800f458:	4b0b      	ldr	r3, [pc, #44]	@ (800f488 <tcp_receive+0xb20>)
 800f45a:	681a      	ldr	r2, [r3, #0]
 800f45c:	68bb      	ldr	r3, [r7, #8]
 800f45e:	685b      	ldr	r3, [r3, #4]
 800f460:	4619      	mov	r1, r3
 800f462:	4610      	mov	r0, r2
 800f464:	f7fc fa4a 	bl	800b8fc <pbuf_cat>
 800f468:	e018      	b.n	800f49c <tcp_receive+0xb34>
 800f46a:	bf00      	nop
 800f46c:	200083a2 	.word	0x200083a2
 800f470:	20008398 	.word	0x20008398
 800f474:	20008374 	.word	0x20008374
 800f478:	080173e0 	.word	0x080173e0
 800f47c:	080177c0 	.word	0x080177c0
 800f480:	0801742c 	.word	0x0801742c
 800f484:	080177fc 	.word	0x080177fc
 800f488:	200083a8 	.word	0x200083a8
 800f48c:	200083a5 	.word	0x200083a5
 800f490:	0801781c 	.word	0x0801781c
            } else {
              recv_data = cseg->p;
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	685b      	ldr	r3, [r3, #4]
 800f498:	4a70      	ldr	r2, [pc, #448]	@ (800f65c <tcp_receive+0xcf4>)
 800f49a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f49c:	68bb      	ldr	r3, [r7, #8]
 800f49e:	2200      	movs	r2, #0
 800f4a0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	691b      	ldr	r3, [r3, #16]
 800f4a6:	899b      	ldrh	r3, [r3, #12]
 800f4a8:	b29b      	uxth	r3, r3
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f7fa fd14 	bl	8009ed8 <lwip_htons>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	b2db      	uxtb	r3, r3
 800f4b4:	f003 0301 	and.w	r3, r3, #1
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d00d      	beq.n	800f4d8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f4bc:	4b68      	ldr	r3, [pc, #416]	@ (800f660 <tcp_receive+0xcf8>)
 800f4be:	781b      	ldrb	r3, [r3, #0]
 800f4c0:	f043 0320 	orr.w	r3, r3, #32
 800f4c4:	b2da      	uxtb	r2, r3
 800f4c6:	4b66      	ldr	r3, [pc, #408]	@ (800f660 <tcp_receive+0xcf8>)
 800f4c8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	7d1b      	ldrb	r3, [r3, #20]
 800f4ce:	2b04      	cmp	r3, #4
 800f4d0:	d102      	bne.n	800f4d8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	2207      	movs	r2, #7
 800f4d6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	681a      	ldr	r2, [r3, #0]
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800f4e0:	68b8      	ldr	r0, [r7, #8]
 800f4e2:	f7fd fbce 	bl	800cc82 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d008      	beq.n	800f500 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f4f2:	691b      	ldr	r3, [r3, #16]
 800f4f4:	685a      	ldr	r2, [r3, #4]
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800f4fa:	429a      	cmp	r2, r3
 800f4fc:	f43f af43 	beq.w	800f386 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	8b5b      	ldrh	r3, [r3, #26]
 800f504:	f003 0301 	and.w	r3, r3, #1
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d00e      	beq.n	800f52a <tcp_receive+0xbc2>
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	8b5b      	ldrh	r3, [r3, #26]
 800f510:	f023 0301 	bic.w	r3, r3, #1
 800f514:	b29a      	uxth	r2, r3
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	835a      	strh	r2, [r3, #26]
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	8b5b      	ldrh	r3, [r3, #26]
 800f51e:	f043 0302 	orr.w	r3, r3, #2
 800f522:	b29a      	uxth	r2, r3
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f528:	e187      	b.n	800f83a <tcp_receive+0xed2>
        tcp_ack(pcb);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	8b5b      	ldrh	r3, [r3, #26]
 800f52e:	f043 0301 	orr.w	r3, r3, #1
 800f532:	b29a      	uxth	r2, r3
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f538:	e17f      	b.n	800f83a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d106      	bne.n	800f550 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f542:	4848      	ldr	r0, [pc, #288]	@ (800f664 <tcp_receive+0xcfc>)
 800f544:	f7fd fbb6 	bl	800ccb4 <tcp_seg_copy>
 800f548:	4602      	mov	r2, r0
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	675a      	str	r2, [r3, #116]	@ 0x74
 800f54e:	e16c      	b.n	800f82a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f550:	2300      	movs	r3, #0
 800f552:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f558:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f55a:	e156      	b.n	800f80a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800f55c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f55e:	691b      	ldr	r3, [r3, #16]
 800f560:	685a      	ldr	r2, [r3, #4]
 800f562:	4b41      	ldr	r3, [pc, #260]	@ (800f668 <tcp_receive+0xd00>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	429a      	cmp	r2, r3
 800f568:	d11d      	bne.n	800f5a6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f56a:	4b3e      	ldr	r3, [pc, #248]	@ (800f664 <tcp_receive+0xcfc>)
 800f56c:	891a      	ldrh	r2, [r3, #8]
 800f56e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f570:	891b      	ldrh	r3, [r3, #8]
 800f572:	429a      	cmp	r2, r3
 800f574:	f240 814e 	bls.w	800f814 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f578:	483a      	ldr	r0, [pc, #232]	@ (800f664 <tcp_receive+0xcfc>)
 800f57a:	f7fd fb9b 	bl	800ccb4 <tcp_seg_copy>
 800f57e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f580:	697b      	ldr	r3, [r7, #20]
 800f582:	2b00      	cmp	r3, #0
 800f584:	f000 8148 	beq.w	800f818 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800f588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d003      	beq.n	800f596 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800f58e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f590:	697a      	ldr	r2, [r7, #20]
 800f592:	601a      	str	r2, [r3, #0]
 800f594:	e002      	b.n	800f59c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	697a      	ldr	r2, [r7, #20]
 800f59a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f59c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f59e:	6978      	ldr	r0, [r7, #20]
 800f5a0:	f7ff f8de 	bl	800e760 <tcp_oos_insert_segment>
                }
                break;
 800f5a4:	e138      	b.n	800f818 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f5a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d117      	bne.n	800f5dc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f5ac:	4b2e      	ldr	r3, [pc, #184]	@ (800f668 <tcp_receive+0xd00>)
 800f5ae:	681a      	ldr	r2, [r3, #0]
 800f5b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5b2:	691b      	ldr	r3, [r3, #16]
 800f5b4:	685b      	ldr	r3, [r3, #4]
 800f5b6:	1ad3      	subs	r3, r2, r3
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	da57      	bge.n	800f66c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f5bc:	4829      	ldr	r0, [pc, #164]	@ (800f664 <tcp_receive+0xcfc>)
 800f5be:	f7fd fb79 	bl	800ccb4 <tcp_seg_copy>
 800f5c2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f5c4:	69bb      	ldr	r3, [r7, #24]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	f000 8128 	beq.w	800f81c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	69ba      	ldr	r2, [r7, #24]
 800f5d0:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f5d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f5d4:	69b8      	ldr	r0, [r7, #24]
 800f5d6:	f7ff f8c3 	bl	800e760 <tcp_oos_insert_segment>
                  }
                  break;
 800f5da:	e11f      	b.n	800f81c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f5dc:	4b22      	ldr	r3, [pc, #136]	@ (800f668 <tcp_receive+0xd00>)
 800f5de:	681a      	ldr	r2, [r3, #0]
 800f5e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5e2:	691b      	ldr	r3, [r3, #16]
 800f5e4:	685b      	ldr	r3, [r3, #4]
 800f5e6:	1ad3      	subs	r3, r2, r3
 800f5e8:	3b01      	subs	r3, #1
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	db3e      	blt.n	800f66c <tcp_receive+0xd04>
 800f5ee:	4b1e      	ldr	r3, [pc, #120]	@ (800f668 <tcp_receive+0xd00>)
 800f5f0:	681a      	ldr	r2, [r3, #0]
 800f5f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5f4:	691b      	ldr	r3, [r3, #16]
 800f5f6:	685b      	ldr	r3, [r3, #4]
 800f5f8:	1ad3      	subs	r3, r2, r3
 800f5fa:	3301      	adds	r3, #1
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	dc35      	bgt.n	800f66c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f600:	4818      	ldr	r0, [pc, #96]	@ (800f664 <tcp_receive+0xcfc>)
 800f602:	f7fd fb57 	bl	800ccb4 <tcp_seg_copy>
 800f606:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f608:	69fb      	ldr	r3, [r7, #28]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	f000 8108 	beq.w	800f820 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f612:	691b      	ldr	r3, [r3, #16]
 800f614:	685b      	ldr	r3, [r3, #4]
 800f616:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f618:	8912      	ldrh	r2, [r2, #8]
 800f61a:	441a      	add	r2, r3
 800f61c:	4b12      	ldr	r3, [pc, #72]	@ (800f668 <tcp_receive+0xd00>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	1ad3      	subs	r3, r2, r3
 800f622:	2b00      	cmp	r3, #0
 800f624:	dd12      	ble.n	800f64c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f626:	4b10      	ldr	r3, [pc, #64]	@ (800f668 <tcp_receive+0xd00>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	b29a      	uxth	r2, r3
 800f62c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f62e:	691b      	ldr	r3, [r3, #16]
 800f630:	685b      	ldr	r3, [r3, #4]
 800f632:	b29b      	uxth	r3, r3
 800f634:	1ad3      	subs	r3, r2, r3
 800f636:	b29a      	uxth	r2, r3
 800f638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f63a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f63c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f63e:	685a      	ldr	r2, [r3, #4]
 800f640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f642:	891b      	ldrh	r3, [r3, #8]
 800f644:	4619      	mov	r1, r3
 800f646:	4610      	mov	r0, r2
 800f648:	f7fb ff10 	bl	800b46c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f64c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f64e:	69fa      	ldr	r2, [r7, #28]
 800f650:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f652:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f654:	69f8      	ldr	r0, [r7, #28]
 800f656:	f7ff f883 	bl	800e760 <tcp_oos_insert_segment>
                  }
                  break;
 800f65a:	e0e1      	b.n	800f820 <tcp_receive+0xeb8>
 800f65c:	200083a8 	.word	0x200083a8
 800f660:	200083a5 	.word	0x200083a5
 800f664:	20008374 	.word	0x20008374
 800f668:	20008398 	.word	0x20008398
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f66c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f66e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	2b00      	cmp	r3, #0
 800f676:	f040 80c5 	bne.w	800f804 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f67a:	4b7f      	ldr	r3, [pc, #508]	@ (800f878 <tcp_receive+0xf10>)
 800f67c:	681a      	ldr	r2, [r3, #0]
 800f67e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f680:	691b      	ldr	r3, [r3, #16]
 800f682:	685b      	ldr	r3, [r3, #4]
 800f684:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f686:	2b00      	cmp	r3, #0
 800f688:	f340 80bc 	ble.w	800f804 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f68c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f68e:	691b      	ldr	r3, [r3, #16]
 800f690:	899b      	ldrh	r3, [r3, #12]
 800f692:	b29b      	uxth	r3, r3
 800f694:	4618      	mov	r0, r3
 800f696:	f7fa fc1f 	bl	8009ed8 <lwip_htons>
 800f69a:	4603      	mov	r3, r0
 800f69c:	b2db      	uxtb	r3, r3
 800f69e:	f003 0301 	and.w	r3, r3, #1
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	f040 80be 	bne.w	800f824 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f6a8:	4874      	ldr	r0, [pc, #464]	@ (800f87c <tcp_receive+0xf14>)
 800f6aa:	f7fd fb03 	bl	800ccb4 <tcp_seg_copy>
 800f6ae:	4602      	mov	r2, r0
 800f6b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6b2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f6b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	f000 80b5 	beq.w	800f828 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f6be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6c0:	691b      	ldr	r3, [r3, #16]
 800f6c2:	685b      	ldr	r3, [r3, #4]
 800f6c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f6c6:	8912      	ldrh	r2, [r2, #8]
 800f6c8:	441a      	add	r2, r3
 800f6ca:	4b6b      	ldr	r3, [pc, #428]	@ (800f878 <tcp_receive+0xf10>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	1ad3      	subs	r3, r2, r3
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	dd12      	ble.n	800f6fa <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f6d4:	4b68      	ldr	r3, [pc, #416]	@ (800f878 <tcp_receive+0xf10>)
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	b29a      	uxth	r2, r3
 800f6da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6dc:	691b      	ldr	r3, [r3, #16]
 800f6de:	685b      	ldr	r3, [r3, #4]
 800f6e0:	b29b      	uxth	r3, r3
 800f6e2:	1ad3      	subs	r3, r2, r3
 800f6e4:	b29a      	uxth	r2, r3
 800f6e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6e8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f6ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6ec:	685a      	ldr	r2, [r3, #4]
 800f6ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6f0:	891b      	ldrh	r3, [r3, #8]
 800f6f2:	4619      	mov	r1, r3
 800f6f4:	4610      	mov	r0, r2
 800f6f6:	f7fb feb9 	bl	800b46c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f6fa:	4b61      	ldr	r3, [pc, #388]	@ (800f880 <tcp_receive+0xf18>)
 800f6fc:	881b      	ldrh	r3, [r3, #0]
 800f6fe:	461a      	mov	r2, r3
 800f700:	4b5d      	ldr	r3, [pc, #372]	@ (800f878 <tcp_receive+0xf10>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	441a      	add	r2, r3
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f70a:	6879      	ldr	r1, [r7, #4]
 800f70c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f70e:	440b      	add	r3, r1
 800f710:	1ad3      	subs	r3, r2, r3
 800f712:	2b00      	cmp	r3, #0
 800f714:	f340 8088 	ble.w	800f828 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	691b      	ldr	r3, [r3, #16]
 800f71e:	899b      	ldrh	r3, [r3, #12]
 800f720:	b29b      	uxth	r3, r3
 800f722:	4618      	mov	r0, r3
 800f724:	f7fa fbd8 	bl	8009ed8 <lwip_htons>
 800f728:	4603      	mov	r3, r0
 800f72a:	b2db      	uxtb	r3, r3
 800f72c:	f003 0301 	and.w	r3, r3, #1
 800f730:	2b00      	cmp	r3, #0
 800f732:	d021      	beq.n	800f778 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	691b      	ldr	r3, [r3, #16]
 800f73a:	899b      	ldrh	r3, [r3, #12]
 800f73c:	b29b      	uxth	r3, r3
 800f73e:	b21b      	sxth	r3, r3
 800f740:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f744:	b21c      	sxth	r4, r3
 800f746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	691b      	ldr	r3, [r3, #16]
 800f74c:	899b      	ldrh	r3, [r3, #12]
 800f74e:	b29b      	uxth	r3, r3
 800f750:	4618      	mov	r0, r3
 800f752:	f7fa fbc1 	bl	8009ed8 <lwip_htons>
 800f756:	4603      	mov	r3, r0
 800f758:	b2db      	uxtb	r3, r3
 800f75a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800f75e:	b29b      	uxth	r3, r3
 800f760:	4618      	mov	r0, r3
 800f762:	f7fa fbb9 	bl	8009ed8 <lwip_htons>
 800f766:	4603      	mov	r3, r0
 800f768:	b21b      	sxth	r3, r3
 800f76a:	4323      	orrs	r3, r4
 800f76c:	b21a      	sxth	r2, r3
 800f76e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	691b      	ldr	r3, [r3, #16]
 800f774:	b292      	uxth	r2, r2
 800f776:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f77c:	b29a      	uxth	r2, r3
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f782:	4413      	add	r3, r2
 800f784:	b299      	uxth	r1, r3
 800f786:	4b3c      	ldr	r3, [pc, #240]	@ (800f878 <tcp_receive+0xf10>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	b29a      	uxth	r2, r3
 800f78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	1a8a      	subs	r2, r1, r2
 800f792:	b292      	uxth	r2, r2
 800f794:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	685a      	ldr	r2, [r3, #4]
 800f79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	891b      	ldrh	r3, [r3, #8]
 800f7a2:	4619      	mov	r1, r3
 800f7a4:	4610      	mov	r0, r2
 800f7a6:	f7fb fe61 	bl	800b46c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f7aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	891c      	ldrh	r4, [r3, #8]
 800f7b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	691b      	ldr	r3, [r3, #16]
 800f7b6:	899b      	ldrh	r3, [r3, #12]
 800f7b8:	b29b      	uxth	r3, r3
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f7fa fb8c 	bl	8009ed8 <lwip_htons>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	b2db      	uxtb	r3, r3
 800f7c4:	f003 0303 	and.w	r3, r3, #3
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d001      	beq.n	800f7d0 <tcp_receive+0xe68>
 800f7cc:	2301      	movs	r3, #1
 800f7ce:	e000      	b.n	800f7d2 <tcp_receive+0xe6a>
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	4423      	add	r3, r4
 800f7d4:	b29a      	uxth	r2, r3
 800f7d6:	4b2a      	ldr	r3, [pc, #168]	@ (800f880 <tcp_receive+0xf18>)
 800f7d8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f7da:	4b29      	ldr	r3, [pc, #164]	@ (800f880 <tcp_receive+0xf18>)
 800f7dc:	881b      	ldrh	r3, [r3, #0]
 800f7de:	461a      	mov	r2, r3
 800f7e0:	4b25      	ldr	r3, [pc, #148]	@ (800f878 <tcp_receive+0xf10>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	441a      	add	r2, r3
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7ea:	6879      	ldr	r1, [r7, #4]
 800f7ec:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f7ee:	440b      	add	r3, r1
 800f7f0:	429a      	cmp	r2, r3
 800f7f2:	d019      	beq.n	800f828 <tcp_receive+0xec0>
 800f7f4:	4b23      	ldr	r3, [pc, #140]	@ (800f884 <tcp_receive+0xf1c>)
 800f7f6:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800f7fa:	4923      	ldr	r1, [pc, #140]	@ (800f888 <tcp_receive+0xf20>)
 800f7fc:	4823      	ldr	r0, [pc, #140]	@ (800f88c <tcp_receive+0xf24>)
 800f7fe:	f005 fb73 	bl	8014ee8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f802:	e011      	b.n	800f828 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f80a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	f47f aea5 	bne.w	800f55c <tcp_receive+0xbf4>
 800f812:	e00a      	b.n	800f82a <tcp_receive+0xec2>
                break;
 800f814:	bf00      	nop
 800f816:	e008      	b.n	800f82a <tcp_receive+0xec2>
                break;
 800f818:	bf00      	nop
 800f81a:	e006      	b.n	800f82a <tcp_receive+0xec2>
                  break;
 800f81c:	bf00      	nop
 800f81e:	e004      	b.n	800f82a <tcp_receive+0xec2>
                  break;
 800f820:	bf00      	nop
 800f822:	e002      	b.n	800f82a <tcp_receive+0xec2>
                  break;
 800f824:	bf00      	nop
 800f826:	e000      	b.n	800f82a <tcp_receive+0xec2>
                break;
 800f828:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800f82a:	6878      	ldr	r0, [r7, #4]
 800f82c:	f001 fa44 	bl	8010cb8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800f830:	e003      	b.n	800f83a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	f001 fa40 	bl	8010cb8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f838:	e01a      	b.n	800f870 <tcp_receive+0xf08>
 800f83a:	e019      	b.n	800f870 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f83c:	4b0e      	ldr	r3, [pc, #56]	@ (800f878 <tcp_receive+0xf10>)
 800f83e:	681a      	ldr	r2, [r3, #0]
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f844:	1ad3      	subs	r3, r2, r3
 800f846:	2b00      	cmp	r3, #0
 800f848:	db0a      	blt.n	800f860 <tcp_receive+0xef8>
 800f84a:	4b0b      	ldr	r3, [pc, #44]	@ (800f878 <tcp_receive+0xf10>)
 800f84c:	681a      	ldr	r2, [r3, #0]
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f852:	6879      	ldr	r1, [r7, #4]
 800f854:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f856:	440b      	add	r3, r1
 800f858:	1ad3      	subs	r3, r2, r3
 800f85a:	3301      	adds	r3, #1
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	dd07      	ble.n	800f870 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	8b5b      	ldrh	r3, [r3, #26]
 800f864:	f043 0302 	orr.w	r3, r3, #2
 800f868:	b29a      	uxth	r2, r3
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f86e:	e7ff      	b.n	800f870 <tcp_receive+0xf08>
 800f870:	bf00      	nop
 800f872:	3750      	adds	r7, #80	@ 0x50
 800f874:	46bd      	mov	sp, r7
 800f876:	bdb0      	pop	{r4, r5, r7, pc}
 800f878:	20008398 	.word	0x20008398
 800f87c:	20008374 	.word	0x20008374
 800f880:	200083a2 	.word	0x200083a2
 800f884:	080173e0 	.word	0x080173e0
 800f888:	08017788 	.word	0x08017788
 800f88c:	0801742c 	.word	0x0801742c

0800f890 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f890:	b480      	push	{r7}
 800f892:	b083      	sub	sp, #12
 800f894:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f896:	4b15      	ldr	r3, [pc, #84]	@ (800f8ec <tcp_get_next_optbyte+0x5c>)
 800f898:	881b      	ldrh	r3, [r3, #0]
 800f89a:	1c5a      	adds	r2, r3, #1
 800f89c:	b291      	uxth	r1, r2
 800f89e:	4a13      	ldr	r2, [pc, #76]	@ (800f8ec <tcp_get_next_optbyte+0x5c>)
 800f8a0:	8011      	strh	r1, [r2, #0]
 800f8a2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f8a4:	4b12      	ldr	r3, [pc, #72]	@ (800f8f0 <tcp_get_next_optbyte+0x60>)
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d004      	beq.n	800f8b6 <tcp_get_next_optbyte+0x26>
 800f8ac:	4b11      	ldr	r3, [pc, #68]	@ (800f8f4 <tcp_get_next_optbyte+0x64>)
 800f8ae:	881b      	ldrh	r3, [r3, #0]
 800f8b0:	88fa      	ldrh	r2, [r7, #6]
 800f8b2:	429a      	cmp	r2, r3
 800f8b4:	d208      	bcs.n	800f8c8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f8b6:	4b10      	ldr	r3, [pc, #64]	@ (800f8f8 <tcp_get_next_optbyte+0x68>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	3314      	adds	r3, #20
 800f8bc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f8be:	88fb      	ldrh	r3, [r7, #6]
 800f8c0:	683a      	ldr	r2, [r7, #0]
 800f8c2:	4413      	add	r3, r2
 800f8c4:	781b      	ldrb	r3, [r3, #0]
 800f8c6:	e00b      	b.n	800f8e0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f8c8:	88fb      	ldrh	r3, [r7, #6]
 800f8ca:	b2da      	uxtb	r2, r3
 800f8cc:	4b09      	ldr	r3, [pc, #36]	@ (800f8f4 <tcp_get_next_optbyte+0x64>)
 800f8ce:	881b      	ldrh	r3, [r3, #0]
 800f8d0:	b2db      	uxtb	r3, r3
 800f8d2:	1ad3      	subs	r3, r2, r3
 800f8d4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f8d6:	4b06      	ldr	r3, [pc, #24]	@ (800f8f0 <tcp_get_next_optbyte+0x60>)
 800f8d8:	681a      	ldr	r2, [r3, #0]
 800f8da:	797b      	ldrb	r3, [r7, #5]
 800f8dc:	4413      	add	r3, r2
 800f8de:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	370c      	adds	r7, #12
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ea:	4770      	bx	lr
 800f8ec:	20008394 	.word	0x20008394
 800f8f0:	20008390 	.word	0x20008390
 800f8f4:	2000838e 	.word	0x2000838e
 800f8f8:	20008388 	.word	0x20008388

0800f8fc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b084      	sub	sp, #16
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d106      	bne.n	800f918 <tcp_parseopt+0x1c>
 800f90a:	4b32      	ldr	r3, [pc, #200]	@ (800f9d4 <tcp_parseopt+0xd8>)
 800f90c:	f240 727d 	movw	r2, #1917	@ 0x77d
 800f910:	4931      	ldr	r1, [pc, #196]	@ (800f9d8 <tcp_parseopt+0xdc>)
 800f912:	4832      	ldr	r0, [pc, #200]	@ (800f9dc <tcp_parseopt+0xe0>)
 800f914:	f005 fae8 	bl	8014ee8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f918:	4b31      	ldr	r3, [pc, #196]	@ (800f9e0 <tcp_parseopt+0xe4>)
 800f91a:	881b      	ldrh	r3, [r3, #0]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d056      	beq.n	800f9ce <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f920:	4b30      	ldr	r3, [pc, #192]	@ (800f9e4 <tcp_parseopt+0xe8>)
 800f922:	2200      	movs	r2, #0
 800f924:	801a      	strh	r2, [r3, #0]
 800f926:	e046      	b.n	800f9b6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800f928:	f7ff ffb2 	bl	800f890 <tcp_get_next_optbyte>
 800f92c:	4603      	mov	r3, r0
 800f92e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f930:	7bfb      	ldrb	r3, [r7, #15]
 800f932:	2b02      	cmp	r3, #2
 800f934:	d006      	beq.n	800f944 <tcp_parseopt+0x48>
 800f936:	2b02      	cmp	r3, #2
 800f938:	dc2a      	bgt.n	800f990 <tcp_parseopt+0x94>
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d042      	beq.n	800f9c4 <tcp_parseopt+0xc8>
 800f93e:	2b01      	cmp	r3, #1
 800f940:	d038      	beq.n	800f9b4 <tcp_parseopt+0xb8>
 800f942:	e025      	b.n	800f990 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f944:	f7ff ffa4 	bl	800f890 <tcp_get_next_optbyte>
 800f948:	4603      	mov	r3, r0
 800f94a:	2b04      	cmp	r3, #4
 800f94c:	d13c      	bne.n	800f9c8 <tcp_parseopt+0xcc>
 800f94e:	4b25      	ldr	r3, [pc, #148]	@ (800f9e4 <tcp_parseopt+0xe8>)
 800f950:	881b      	ldrh	r3, [r3, #0]
 800f952:	3301      	adds	r3, #1
 800f954:	4a22      	ldr	r2, [pc, #136]	@ (800f9e0 <tcp_parseopt+0xe4>)
 800f956:	8812      	ldrh	r2, [r2, #0]
 800f958:	4293      	cmp	r3, r2
 800f95a:	da35      	bge.n	800f9c8 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f95c:	f7ff ff98 	bl	800f890 <tcp_get_next_optbyte>
 800f960:	4603      	mov	r3, r0
 800f962:	021b      	lsls	r3, r3, #8
 800f964:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f966:	f7ff ff93 	bl	800f890 <tcp_get_next_optbyte>
 800f96a:	4603      	mov	r3, r0
 800f96c:	461a      	mov	r2, r3
 800f96e:	89bb      	ldrh	r3, [r7, #12]
 800f970:	4313      	orrs	r3, r2
 800f972:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f974:	89bb      	ldrh	r3, [r7, #12]
 800f976:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800f97a:	d804      	bhi.n	800f986 <tcp_parseopt+0x8a>
 800f97c:	89bb      	ldrh	r3, [r7, #12]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d001      	beq.n	800f986 <tcp_parseopt+0x8a>
 800f982:	89ba      	ldrh	r2, [r7, #12]
 800f984:	e001      	b.n	800f98a <tcp_parseopt+0x8e>
 800f986:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800f98e:	e012      	b.n	800f9b6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800f990:	f7ff ff7e 	bl	800f890 <tcp_get_next_optbyte>
 800f994:	4603      	mov	r3, r0
 800f996:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800f998:	7afb      	ldrb	r3, [r7, #11]
 800f99a:	2b01      	cmp	r3, #1
 800f99c:	d916      	bls.n	800f9cc <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f99e:	7afb      	ldrb	r3, [r7, #11]
 800f9a0:	b29a      	uxth	r2, r3
 800f9a2:	4b10      	ldr	r3, [pc, #64]	@ (800f9e4 <tcp_parseopt+0xe8>)
 800f9a4:	881b      	ldrh	r3, [r3, #0]
 800f9a6:	4413      	add	r3, r2
 800f9a8:	b29b      	uxth	r3, r3
 800f9aa:	3b02      	subs	r3, #2
 800f9ac:	b29a      	uxth	r2, r3
 800f9ae:	4b0d      	ldr	r3, [pc, #52]	@ (800f9e4 <tcp_parseopt+0xe8>)
 800f9b0:	801a      	strh	r2, [r3, #0]
 800f9b2:	e000      	b.n	800f9b6 <tcp_parseopt+0xba>
          break;
 800f9b4:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f9b6:	4b0b      	ldr	r3, [pc, #44]	@ (800f9e4 <tcp_parseopt+0xe8>)
 800f9b8:	881a      	ldrh	r2, [r3, #0]
 800f9ba:	4b09      	ldr	r3, [pc, #36]	@ (800f9e0 <tcp_parseopt+0xe4>)
 800f9bc:	881b      	ldrh	r3, [r3, #0]
 800f9be:	429a      	cmp	r2, r3
 800f9c0:	d3b2      	bcc.n	800f928 <tcp_parseopt+0x2c>
 800f9c2:	e004      	b.n	800f9ce <tcp_parseopt+0xd2>
          return;
 800f9c4:	bf00      	nop
 800f9c6:	e002      	b.n	800f9ce <tcp_parseopt+0xd2>
            return;
 800f9c8:	bf00      	nop
 800f9ca:	e000      	b.n	800f9ce <tcp_parseopt+0xd2>
            return;
 800f9cc:	bf00      	nop
      }
    }
  }
}
 800f9ce:	3710      	adds	r7, #16
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	bd80      	pop	{r7, pc}
 800f9d4:	080173e0 	.word	0x080173e0
 800f9d8:	08017844 	.word	0x08017844
 800f9dc:	0801742c 	.word	0x0801742c
 800f9e0:	2000838c 	.word	0x2000838c
 800f9e4:	20008394 	.word	0x20008394

0800f9e8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f9e8:	b480      	push	{r7}
 800f9ea:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f9ec:	4b05      	ldr	r3, [pc, #20]	@ (800fa04 <tcp_trigger_input_pcb_close+0x1c>)
 800f9ee:	781b      	ldrb	r3, [r3, #0]
 800f9f0:	f043 0310 	orr.w	r3, r3, #16
 800f9f4:	b2da      	uxtb	r2, r3
 800f9f6:	4b03      	ldr	r3, [pc, #12]	@ (800fa04 <tcp_trigger_input_pcb_close+0x1c>)
 800f9f8:	701a      	strb	r2, [r3, #0]
}
 800f9fa:	bf00      	nop
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa02:	4770      	bx	lr
 800fa04:	200083a5 	.word	0x200083a5

0800fa08 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b084      	sub	sp, #16
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	60f8      	str	r0, [r7, #12]
 800fa10:	60b9      	str	r1, [r7, #8]
 800fa12:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d00a      	beq.n	800fa30 <tcp_route+0x28>
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	7a1b      	ldrb	r3, [r3, #8]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d006      	beq.n	800fa30 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	7a1b      	ldrb	r3, [r3, #8]
 800fa26:	4618      	mov	r0, r3
 800fa28:	f7fb fb46 	bl	800b0b8 <netif_get_by_index>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	e003      	b.n	800fa38 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800fa30:	6878      	ldr	r0, [r7, #4]
 800fa32:	f003 fc0f 	bl	8013254 <ip4_route>
 800fa36:	4603      	mov	r3, r0
  }
}
 800fa38:	4618      	mov	r0, r3
 800fa3a:	3710      	adds	r7, #16
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	bd80      	pop	{r7, pc}

0800fa40 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800fa40:	b590      	push	{r4, r7, lr}
 800fa42:	b087      	sub	sp, #28
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	60f8      	str	r0, [r7, #12]
 800fa48:	60b9      	str	r1, [r7, #8]
 800fa4a:	603b      	str	r3, [r7, #0]
 800fa4c:	4613      	mov	r3, r2
 800fa4e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d105      	bne.n	800fa62 <tcp_create_segment+0x22>
 800fa56:	4b45      	ldr	r3, [pc, #276]	@ (800fb6c <tcp_create_segment+0x12c>)
 800fa58:	22a3      	movs	r2, #163	@ 0xa3
 800fa5a:	4945      	ldr	r1, [pc, #276]	@ (800fb70 <tcp_create_segment+0x130>)
 800fa5c:	4845      	ldr	r0, [pc, #276]	@ (800fb74 <tcp_create_segment+0x134>)
 800fa5e:	f005 fa43 	bl	8014ee8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d105      	bne.n	800fa74 <tcp_create_segment+0x34>
 800fa68:	4b40      	ldr	r3, [pc, #256]	@ (800fb6c <tcp_create_segment+0x12c>)
 800fa6a:	22a4      	movs	r2, #164	@ 0xa4
 800fa6c:	4942      	ldr	r1, [pc, #264]	@ (800fb78 <tcp_create_segment+0x138>)
 800fa6e:	4841      	ldr	r0, [pc, #260]	@ (800fb74 <tcp_create_segment+0x134>)
 800fa70:	f005 fa3a 	bl	8014ee8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fa74:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fa78:	009b      	lsls	r3, r3, #2
 800fa7a:	b2db      	uxtb	r3, r3
 800fa7c:	f003 0304 	and.w	r3, r3, #4
 800fa80:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800fa82:	2003      	movs	r0, #3
 800fa84:	f7fa fe9c 	bl	800a7c0 <memp_malloc>
 800fa88:	6138      	str	r0, [r7, #16]
 800fa8a:	693b      	ldr	r3, [r7, #16]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d104      	bne.n	800fa9a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800fa90:	68b8      	ldr	r0, [r7, #8]
 800fa92:	f7fb fe71 	bl	800b778 <pbuf_free>
    return NULL;
 800fa96:	2300      	movs	r3, #0
 800fa98:	e063      	b.n	800fb62 <tcp_create_segment+0x122>
  }
  seg->flags = optflags;
 800fa9a:	693b      	ldr	r3, [r7, #16]
 800fa9c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800faa0:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 800faa2:	693b      	ldr	r3, [r7, #16]
 800faa4:	2200      	movs	r2, #0
 800faa6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800faa8:	693b      	ldr	r3, [r7, #16]
 800faaa:	68ba      	ldr	r2, [r7, #8]
 800faac:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800faae:	68bb      	ldr	r3, [r7, #8]
 800fab0:	891a      	ldrh	r2, [r3, #8]
 800fab2:	7dfb      	ldrb	r3, [r7, #23]
 800fab4:	b29b      	uxth	r3, r3
 800fab6:	429a      	cmp	r2, r3
 800fab8:	d205      	bcs.n	800fac6 <tcp_create_segment+0x86>
 800faba:	4b2c      	ldr	r3, [pc, #176]	@ (800fb6c <tcp_create_segment+0x12c>)
 800fabc:	22b0      	movs	r2, #176	@ 0xb0
 800fabe:	492f      	ldr	r1, [pc, #188]	@ (800fb7c <tcp_create_segment+0x13c>)
 800fac0:	482c      	ldr	r0, [pc, #176]	@ (800fb74 <tcp_create_segment+0x134>)
 800fac2:	f005 fa11 	bl	8014ee8 <iprintf>
  seg->len = p->tot_len - optlen;
 800fac6:	68bb      	ldr	r3, [r7, #8]
 800fac8:	891a      	ldrh	r2, [r3, #8]
 800faca:	7dfb      	ldrb	r3, [r7, #23]
 800facc:	b29b      	uxth	r3, r3
 800face:	1ad3      	subs	r3, r2, r3
 800fad0:	b29a      	uxth	r2, r3
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 800fad6:	693b      	ldr	r3, [r7, #16]
 800fad8:	2200      	movs	r2, #0
 800fada:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800fadc:	2114      	movs	r1, #20
 800fade:	68b8      	ldr	r0, [r7, #8]
 800fae0:	f7fb fdb4 	bl	800b64c <pbuf_add_header>
 800fae4:	4603      	mov	r3, r0
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d004      	beq.n	800faf4 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800faea:	6938      	ldr	r0, [r7, #16]
 800faec:	f7fd f8c9 	bl	800cc82 <tcp_seg_free>
    return NULL;
 800faf0:	2300      	movs	r3, #0
 800faf2:	e036      	b.n	800fb62 <tcp_create_segment+0x122>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800faf4:	693b      	ldr	r3, [r7, #16]
 800faf6:	685b      	ldr	r3, [r3, #4]
 800faf8:	685a      	ldr	r2, [r3, #4]
 800fafa:	693b      	ldr	r3, [r7, #16]
 800fafc:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	8ada      	ldrh	r2, [r3, #22]
 800fb02:	693b      	ldr	r3, [r7, #16]
 800fb04:	691c      	ldr	r4, [r3, #16]
 800fb06:	4610      	mov	r0, r2
 800fb08:	f7fa f9e6 	bl	8009ed8 <lwip_htons>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	8b1a      	ldrh	r2, [r3, #24]
 800fb14:	693b      	ldr	r3, [r7, #16]
 800fb16:	691c      	ldr	r4, [r3, #16]
 800fb18:	4610      	mov	r0, r2
 800fb1a:	f7fa f9dd 	bl	8009ed8 <lwip_htons>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800fb22:	693b      	ldr	r3, [r7, #16]
 800fb24:	691c      	ldr	r4, [r3, #16]
 800fb26:	6838      	ldr	r0, [r7, #0]
 800fb28:	f7fa f9ec 	bl	8009f04 <lwip_htonl>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800fb30:	7dfb      	ldrb	r3, [r7, #23]
 800fb32:	089b      	lsrs	r3, r3, #2
 800fb34:	b2db      	uxtb	r3, r3
 800fb36:	3305      	adds	r3, #5
 800fb38:	b29b      	uxth	r3, r3
 800fb3a:	031b      	lsls	r3, r3, #12
 800fb3c:	b29a      	uxth	r2, r3
 800fb3e:	79fb      	ldrb	r3, [r7, #7]
 800fb40:	b29b      	uxth	r3, r3
 800fb42:	4313      	orrs	r3, r2
 800fb44:	b29a      	uxth	r2, r3
 800fb46:	693b      	ldr	r3, [r7, #16]
 800fb48:	691c      	ldr	r4, [r3, #16]
 800fb4a:	4610      	mov	r0, r2
 800fb4c:	f7fa f9c4 	bl	8009ed8 <lwip_htons>
 800fb50:	4603      	mov	r3, r0
 800fb52:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800fb54:	693b      	ldr	r3, [r7, #16]
 800fb56:	691b      	ldr	r3, [r3, #16]
 800fb58:	2200      	movs	r2, #0
 800fb5a:	749a      	strb	r2, [r3, #18]
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	74da      	strb	r2, [r3, #19]
  return seg;
 800fb60:	693b      	ldr	r3, [r7, #16]
}
 800fb62:	4618      	mov	r0, r3
 800fb64:	371c      	adds	r7, #28
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bd90      	pop	{r4, r7, pc}
 800fb6a:	bf00      	nop
 800fb6c:	08017860 	.word	0x08017860
 800fb70:	08017894 	.word	0x08017894
 800fb74:	080178b4 	.word	0x080178b4
 800fb78:	080178dc 	.word	0x080178dc
 800fb7c:	08017900 	.word	0x08017900

0800fb80 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800fb80:	b590      	push	{r4, r7, lr}
 800fb82:	b08b      	sub	sp, #44	@ 0x2c
 800fb84:	af02      	add	r7, sp, #8
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	460b      	mov	r3, r1
 800fb8a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	61bb      	str	r3, [r7, #24]
 800fb90:	2300      	movs	r3, #0
 800fb92:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800fb94:	2300      	movs	r3, #0
 800fb96:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d106      	bne.n	800fbac <tcp_split_unsent_seg+0x2c>
 800fb9e:	4b97      	ldr	r3, [pc, #604]	@ (800fdfc <tcp_split_unsent_seg+0x27c>)
 800fba0:	f240 324b 	movw	r2, #843	@ 0x34b
 800fba4:	4996      	ldr	r1, [pc, #600]	@ (800fe00 <tcp_split_unsent_seg+0x280>)
 800fba6:	4897      	ldr	r0, [pc, #604]	@ (800fe04 <tcp_split_unsent_seg+0x284>)
 800fba8:	f005 f99e 	bl	8014ee8 <iprintf>

  useg = pcb->unsent;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fbb0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d102      	bne.n	800fbbe <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800fbb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fbbc:	e119      	b.n	800fdf2 <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 800fbbe:	887b      	ldrh	r3, [r7, #2]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d109      	bne.n	800fbd8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800fbc4:	4b8d      	ldr	r3, [pc, #564]	@ (800fdfc <tcp_split_unsent_seg+0x27c>)
 800fbc6:	f240 3253 	movw	r2, #851	@ 0x353
 800fbca:	498f      	ldr	r1, [pc, #572]	@ (800fe08 <tcp_split_unsent_seg+0x288>)
 800fbcc:	488d      	ldr	r0, [pc, #564]	@ (800fe04 <tcp_split_unsent_seg+0x284>)
 800fbce:	f005 f98b 	bl	8014ee8 <iprintf>
    return ERR_VAL;
 800fbd2:	f06f 0305 	mvn.w	r3, #5
 800fbd6:	e10c      	b.n	800fdf2 <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 800fbd8:	697b      	ldr	r3, [r7, #20]
 800fbda:	891b      	ldrh	r3, [r3, #8]
 800fbdc:	887a      	ldrh	r2, [r7, #2]
 800fbde:	429a      	cmp	r2, r3
 800fbe0:	d301      	bcc.n	800fbe6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	e105      	b.n	800fdf2 <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fbea:	887a      	ldrh	r2, [r7, #2]
 800fbec:	429a      	cmp	r2, r3
 800fbee:	d906      	bls.n	800fbfe <tcp_split_unsent_seg+0x7e>
 800fbf0:	4b82      	ldr	r3, [pc, #520]	@ (800fdfc <tcp_split_unsent_seg+0x27c>)
 800fbf2:	f240 325b 	movw	r2, #859	@ 0x35b
 800fbf6:	4985      	ldr	r1, [pc, #532]	@ (800fe0c <tcp_split_unsent_seg+0x28c>)
 800fbf8:	4882      	ldr	r0, [pc, #520]	@ (800fe04 <tcp_split_unsent_seg+0x284>)
 800fbfa:	f005 f975 	bl	8014ee8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	891b      	ldrh	r3, [r3, #8]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d106      	bne.n	800fc14 <tcp_split_unsent_seg+0x94>
 800fc06:	4b7d      	ldr	r3, [pc, #500]	@ (800fdfc <tcp_split_unsent_seg+0x27c>)
 800fc08:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800fc0c:	4980      	ldr	r1, [pc, #512]	@ (800fe10 <tcp_split_unsent_seg+0x290>)
 800fc0e:	487d      	ldr	r0, [pc, #500]	@ (800fe04 <tcp_split_unsent_seg+0x284>)
 800fc10:	f005 f96a 	bl	8014ee8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	7b1b      	ldrb	r3, [r3, #12]
 800fc18:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800fc1a:	7bfb      	ldrb	r3, [r7, #15]
 800fc1c:	009b      	lsls	r3, r3, #2
 800fc1e:	b2db      	uxtb	r3, r3
 800fc20:	f003 0304 	and.w	r3, r3, #4
 800fc24:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	891a      	ldrh	r2, [r3, #8]
 800fc2a:	887b      	ldrh	r3, [r7, #2]
 800fc2c:	1ad3      	subs	r3, r2, r3
 800fc2e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800fc30:	7bbb      	ldrb	r3, [r7, #14]
 800fc32:	b29a      	uxth	r2, r3
 800fc34:	89bb      	ldrh	r3, [r7, #12]
 800fc36:	4413      	add	r3, r2
 800fc38:	b29b      	uxth	r3, r3
 800fc3a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fc3e:	4619      	mov	r1, r3
 800fc40:	2036      	movs	r0, #54	@ 0x36
 800fc42:	f7fb fab5 	bl	800b1b0 <pbuf_alloc>
 800fc46:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fc48:	693b      	ldr	r3, [r7, #16]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	f000 80ba 	beq.w	800fdc4 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800fc50:	697b      	ldr	r3, [r7, #20]
 800fc52:	685b      	ldr	r3, [r3, #4]
 800fc54:	891a      	ldrh	r2, [r3, #8]
 800fc56:	697b      	ldr	r3, [r7, #20]
 800fc58:	891b      	ldrh	r3, [r3, #8]
 800fc5a:	1ad3      	subs	r3, r2, r3
 800fc5c:	b29a      	uxth	r2, r3
 800fc5e:	887b      	ldrh	r3, [r7, #2]
 800fc60:	4413      	add	r3, r2
 800fc62:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800fc64:	697b      	ldr	r3, [r7, #20]
 800fc66:	6858      	ldr	r0, [r3, #4]
 800fc68:	693b      	ldr	r3, [r7, #16]
 800fc6a:	685a      	ldr	r2, [r3, #4]
 800fc6c:	7bbb      	ldrb	r3, [r7, #14]
 800fc6e:	18d1      	adds	r1, r2, r3
 800fc70:	897b      	ldrh	r3, [r7, #10]
 800fc72:	89ba      	ldrh	r2, [r7, #12]
 800fc74:	f7fb ff7a 	bl	800bb6c <pbuf_copy_partial>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	461a      	mov	r2, r3
 800fc7c:	89bb      	ldrh	r3, [r7, #12]
 800fc7e:	4293      	cmp	r3, r2
 800fc80:	f040 80a2 	bne.w	800fdc8 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800fc84:	697b      	ldr	r3, [r7, #20]
 800fc86:	691b      	ldr	r3, [r3, #16]
 800fc88:	899b      	ldrh	r3, [r3, #12]
 800fc8a:	b29b      	uxth	r3, r3
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f7fa f923 	bl	8009ed8 <lwip_htons>
 800fc92:	4603      	mov	r3, r0
 800fc94:	b2db      	uxtb	r3, r3
 800fc96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fc9a:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 800fca0:	7ffb      	ldrb	r3, [r7, #31]
 800fca2:	f003 0308 	and.w	r3, r3, #8
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d007      	beq.n	800fcba <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800fcaa:	7ffb      	ldrb	r3, [r7, #31]
 800fcac:	f023 0308 	bic.w	r3, r3, #8
 800fcb0:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 800fcb2:	7fbb      	ldrb	r3, [r7, #30]
 800fcb4:	f043 0308 	orr.w	r3, r3, #8
 800fcb8:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 800fcba:	7ffb      	ldrb	r3, [r7, #31]
 800fcbc:	f003 0301 	and.w	r3, r3, #1
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d007      	beq.n	800fcd4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800fcc4:	7ffb      	ldrb	r3, [r7, #31]
 800fcc6:	f023 0301 	bic.w	r3, r3, #1
 800fcca:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 800fccc:	7fbb      	ldrb	r3, [r7, #30]
 800fcce:	f043 0301 	orr.w	r3, r3, #1
 800fcd2:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	691b      	ldr	r3, [r3, #16]
 800fcd8:	685b      	ldr	r3, [r3, #4]
 800fcda:	4618      	mov	r0, r3
 800fcdc:	f7fa f912 	bl	8009f04 <lwip_htonl>
 800fce0:	4602      	mov	r2, r0
 800fce2:	887b      	ldrh	r3, [r7, #2]
 800fce4:	18d1      	adds	r1, r2, r3
 800fce6:	7fba      	ldrb	r2, [r7, #30]
 800fce8:	7bfb      	ldrb	r3, [r7, #15]
 800fcea:	9300      	str	r3, [sp, #0]
 800fcec:	460b      	mov	r3, r1
 800fcee:	6939      	ldr	r1, [r7, #16]
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f7ff fea5 	bl	800fa40 <tcp_create_segment>
 800fcf6:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 800fcf8:	69bb      	ldr	r3, [r7, #24]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d066      	beq.n	800fdcc <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	685b      	ldr	r3, [r3, #4]
 800fd02:	4618      	mov	r0, r3
 800fd04:	f7fb fdc0 	bl	800b888 <pbuf_clen>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	461a      	mov	r2, r3
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fd12:	1a9b      	subs	r3, r3, r2
 800fd14:	b29a      	uxth	r2, r3
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800fd1c:	697b      	ldr	r3, [r7, #20]
 800fd1e:	6858      	ldr	r0, [r3, #4]
 800fd20:	697b      	ldr	r3, [r7, #20]
 800fd22:	685b      	ldr	r3, [r3, #4]
 800fd24:	891a      	ldrh	r2, [r3, #8]
 800fd26:	89bb      	ldrh	r3, [r7, #12]
 800fd28:	1ad3      	subs	r3, r2, r3
 800fd2a:	b29b      	uxth	r3, r3
 800fd2c:	4619      	mov	r1, r3
 800fd2e:	f7fb fb9d 	bl	800b46c <pbuf_realloc>
  useg->len -= remainder;
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	891a      	ldrh	r2, [r3, #8]
 800fd36:	89bb      	ldrh	r3, [r7, #12]
 800fd38:	1ad3      	subs	r3, r2, r3
 800fd3a:	b29a      	uxth	r2, r3
 800fd3c:	697b      	ldr	r3, [r7, #20]
 800fd3e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800fd40:	697b      	ldr	r3, [r7, #20]
 800fd42:	691b      	ldr	r3, [r3, #16]
 800fd44:	899b      	ldrh	r3, [r3, #12]
 800fd46:	b29c      	uxth	r4, r3
 800fd48:	7ffb      	ldrb	r3, [r7, #31]
 800fd4a:	b29b      	uxth	r3, r3
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f7fa f8c3 	bl	8009ed8 <lwip_htons>
 800fd52:	4603      	mov	r3, r0
 800fd54:	461a      	mov	r2, r3
 800fd56:	697b      	ldr	r3, [r7, #20]
 800fd58:	691b      	ldr	r3, [r3, #16]
 800fd5a:	4322      	orrs	r2, r4
 800fd5c:	b292      	uxth	r2, r2
 800fd5e:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 800fd60:	697b      	ldr	r3, [r7, #20]
 800fd62:	2200      	movs	r2, #0
 800fd64:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800fd66:	697b      	ldr	r3, [r7, #20]
 800fd68:	685b      	ldr	r3, [r3, #4]
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f7fb fd8c 	bl	800b888 <pbuf_clen>
 800fd70:	4603      	mov	r3, r0
 800fd72:	461a      	mov	r2, r3
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fd7a:	4413      	add	r3, r2
 800fd7c:	b29a      	uxth	r2, r3
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fd84:	69bb      	ldr	r3, [r7, #24]
 800fd86:	685b      	ldr	r3, [r3, #4]
 800fd88:	4618      	mov	r0, r3
 800fd8a:	f7fb fd7d 	bl	800b888 <pbuf_clen>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	461a      	mov	r2, r3
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fd98:	4413      	add	r3, r2
 800fd9a:	b29a      	uxth	r2, r3
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800fda2:	697b      	ldr	r3, [r7, #20]
 800fda4:	681a      	ldr	r2, [r3, #0]
 800fda6:	69bb      	ldr	r3, [r7, #24]
 800fda8:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800fdaa:	697b      	ldr	r3, [r7, #20]
 800fdac:	69ba      	ldr	r2, [r7, #24]
 800fdae:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800fdb0:	69bb      	ldr	r3, [r7, #24]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d103      	bne.n	800fdc0 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2200      	movs	r2, #0
 800fdbc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	e016      	b.n	800fdf2 <tcp_split_unsent_seg+0x272>
    goto memerr;
 800fdc4:	bf00      	nop
 800fdc6:	e002      	b.n	800fdce <tcp_split_unsent_seg+0x24e>
    goto memerr;
 800fdc8:	bf00      	nop
 800fdca:	e000      	b.n	800fdce <tcp_split_unsent_seg+0x24e>
    goto memerr;
 800fdcc:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800fdce:	69bb      	ldr	r3, [r7, #24]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d006      	beq.n	800fde2 <tcp_split_unsent_seg+0x262>
 800fdd4:	4b09      	ldr	r3, [pc, #36]	@ (800fdfc <tcp_split_unsent_seg+0x27c>)
 800fdd6:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800fdda:	490e      	ldr	r1, [pc, #56]	@ (800fe14 <tcp_split_unsent_seg+0x294>)
 800fddc:	4809      	ldr	r0, [pc, #36]	@ (800fe04 <tcp_split_unsent_seg+0x284>)
 800fdde:	f005 f883 	bl	8014ee8 <iprintf>
  if (p != NULL) {
 800fde2:	693b      	ldr	r3, [r7, #16]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d002      	beq.n	800fdee <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 800fde8:	6938      	ldr	r0, [r7, #16]
 800fdea:	f7fb fcc5 	bl	800b778 <pbuf_free>
  }

  return ERR_MEM;
 800fdee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	3724      	adds	r7, #36	@ 0x24
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	bd90      	pop	{r4, r7, pc}
 800fdfa:	bf00      	nop
 800fdfc:	08017860 	.word	0x08017860
 800fe00:	08017c50 	.word	0x08017c50
 800fe04:	080178b4 	.word	0x080178b4
 800fe08:	08017c74 	.word	0x08017c74
 800fe0c:	08017c98 	.word	0x08017c98
 800fe10:	08017ca8 	.word	0x08017ca8
 800fe14:	08017cb8 	.word	0x08017cb8

0800fe18 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800fe18:	b590      	push	{r4, r7, lr}
 800fe1a:	b085      	sub	sp, #20
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d106      	bne.n	800fe34 <tcp_send_fin+0x1c>
 800fe26:	4b21      	ldr	r3, [pc, #132]	@ (800feac <tcp_send_fin+0x94>)
 800fe28:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800fe2c:	4920      	ldr	r1, [pc, #128]	@ (800feb0 <tcp_send_fin+0x98>)
 800fe2e:	4821      	ldr	r0, [pc, #132]	@ (800feb4 <tcp_send_fin+0x9c>)
 800fe30:	f005 f85a 	bl	8014ee8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d02e      	beq.n	800fe9a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe40:	60fb      	str	r3, [r7, #12]
 800fe42:	e002      	b.n	800fe4a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d1f8      	bne.n	800fe44 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	691b      	ldr	r3, [r3, #16]
 800fe56:	899b      	ldrh	r3, [r3, #12]
 800fe58:	b29b      	uxth	r3, r3
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f7fa f83c 	bl	8009ed8 <lwip_htons>
 800fe60:	4603      	mov	r3, r0
 800fe62:	b2db      	uxtb	r3, r3
 800fe64:	f003 0307 	and.w	r3, r3, #7
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d116      	bne.n	800fe9a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	691b      	ldr	r3, [r3, #16]
 800fe70:	899b      	ldrh	r3, [r3, #12]
 800fe72:	b29c      	uxth	r4, r3
 800fe74:	2001      	movs	r0, #1
 800fe76:	f7fa f82f 	bl	8009ed8 <lwip_htons>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	461a      	mov	r2, r3
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	691b      	ldr	r3, [r3, #16]
 800fe82:	4322      	orrs	r2, r4
 800fe84:	b292      	uxth	r2, r2
 800fe86:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	8b5b      	ldrh	r3, [r3, #26]
 800fe8c:	f043 0320 	orr.w	r3, r3, #32
 800fe90:	b29a      	uxth	r2, r3
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800fe96:	2300      	movs	r3, #0
 800fe98:	e004      	b.n	800fea4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800fe9a:	2101      	movs	r1, #1
 800fe9c:	6878      	ldr	r0, [r7, #4]
 800fe9e:	f000 f80b 	bl	800feb8 <tcp_enqueue_flags>
 800fea2:	4603      	mov	r3, r0
}
 800fea4:	4618      	mov	r0, r3
 800fea6:	3714      	adds	r7, #20
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd90      	pop	{r4, r7, pc}
 800feac:	08017860 	.word	0x08017860
 800feb0:	08017cc4 	.word	0x08017cc4
 800feb4:	080178b4 	.word	0x080178b4

0800feb8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b088      	sub	sp, #32
 800febc:	af02      	add	r7, sp, #8
 800febe:	6078      	str	r0, [r7, #4]
 800fec0:	460b      	mov	r3, r1
 800fec2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800fec4:	2300      	movs	r3, #0
 800fec6:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 800fec8:	2300      	movs	r3, #0
 800feca:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800fecc:	78fb      	ldrb	r3, [r7, #3]
 800fece:	f003 0303 	and.w	r3, r3, #3
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d106      	bne.n	800fee4 <tcp_enqueue_flags+0x2c>
 800fed6:	4b67      	ldr	r3, [pc, #412]	@ (8010074 <tcp_enqueue_flags+0x1bc>)
 800fed8:	f240 4211 	movw	r2, #1041	@ 0x411
 800fedc:	4966      	ldr	r1, [pc, #408]	@ (8010078 <tcp_enqueue_flags+0x1c0>)
 800fede:	4867      	ldr	r0, [pc, #412]	@ (801007c <tcp_enqueue_flags+0x1c4>)
 800fee0:	f005 f802 	bl	8014ee8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d106      	bne.n	800fef8 <tcp_enqueue_flags+0x40>
 800feea:	4b62      	ldr	r3, [pc, #392]	@ (8010074 <tcp_enqueue_flags+0x1bc>)
 800feec:	f240 4213 	movw	r2, #1043	@ 0x413
 800fef0:	4963      	ldr	r1, [pc, #396]	@ (8010080 <tcp_enqueue_flags+0x1c8>)
 800fef2:	4862      	ldr	r0, [pc, #392]	@ (801007c <tcp_enqueue_flags+0x1c4>)
 800fef4:	f004 fff8 	bl	8014ee8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800fef8:	78fb      	ldrb	r3, [r7, #3]
 800fefa:	f003 0302 	and.w	r3, r3, #2
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d001      	beq.n	800ff06 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ff02:	2301      	movs	r3, #1
 800ff04:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ff06:	7dfb      	ldrb	r3, [r7, #23]
 800ff08:	009b      	lsls	r3, r3, #2
 800ff0a:	b2db      	uxtb	r3, r3
 800ff0c:	f003 0304 	and.w	r3, r3, #4
 800ff10:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ff12:	7dbb      	ldrb	r3, [r7, #22]
 800ff14:	b29b      	uxth	r3, r3
 800ff16:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ff1a:	4619      	mov	r1, r3
 800ff1c:	2036      	movs	r0, #54	@ 0x36
 800ff1e:	f7fb f947 	bl	800b1b0 <pbuf_alloc>
 800ff22:	60f8      	str	r0, [r7, #12]
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d109      	bne.n	800ff3e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	8b5b      	ldrh	r3, [r3, #26]
 800ff2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff32:	b29a      	uxth	r2, r3
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ff38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ff3c:	e095      	b.n	801006a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	895a      	ldrh	r2, [r3, #10]
 800ff42:	7dbb      	ldrb	r3, [r7, #22]
 800ff44:	b29b      	uxth	r3, r3
 800ff46:	429a      	cmp	r2, r3
 800ff48:	d206      	bcs.n	800ff58 <tcp_enqueue_flags+0xa0>
 800ff4a:	4b4a      	ldr	r3, [pc, #296]	@ (8010074 <tcp_enqueue_flags+0x1bc>)
 800ff4c:	f240 4239 	movw	r2, #1081	@ 0x439
 800ff50:	494c      	ldr	r1, [pc, #304]	@ (8010084 <tcp_enqueue_flags+0x1cc>)
 800ff52:	484a      	ldr	r0, [pc, #296]	@ (801007c <tcp_enqueue_flags+0x1c4>)
 800ff54:	f004 ffc8 	bl	8014ee8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800ff5c:	78fa      	ldrb	r2, [r7, #3]
 800ff5e:	7dfb      	ldrb	r3, [r7, #23]
 800ff60:	9300      	str	r3, [sp, #0]
 800ff62:	460b      	mov	r3, r1
 800ff64:	68f9      	ldr	r1, [r7, #12]
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f7ff fd6a 	bl	800fa40 <tcp_create_segment>
 800ff6c:	60b8      	str	r0, [r7, #8]
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d109      	bne.n	800ff88 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	8b5b      	ldrh	r3, [r3, #26]
 800ff78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff7c:	b29a      	uxth	r2, r3
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ff82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ff86:	e070      	b.n	801006a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ff88:	68bb      	ldr	r3, [r7, #8]
 800ff8a:	691b      	ldr	r3, [r3, #16]
 800ff8c:	f003 0303 	and.w	r3, r3, #3
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d006      	beq.n	800ffa2 <tcp_enqueue_flags+0xea>
 800ff94:	4b37      	ldr	r3, [pc, #220]	@ (8010074 <tcp_enqueue_flags+0x1bc>)
 800ff96:	f240 4242 	movw	r2, #1090	@ 0x442
 800ff9a:	493b      	ldr	r1, [pc, #236]	@ (8010088 <tcp_enqueue_flags+0x1d0>)
 800ff9c:	4837      	ldr	r0, [pc, #220]	@ (801007c <tcp_enqueue_flags+0x1c4>)
 800ff9e:	f004 ffa3 	bl	8014ee8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ffa2:	68bb      	ldr	r3, [r7, #8]
 800ffa4:	891b      	ldrh	r3, [r3, #8]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d006      	beq.n	800ffb8 <tcp_enqueue_flags+0x100>
 800ffaa:	4b32      	ldr	r3, [pc, #200]	@ (8010074 <tcp_enqueue_flags+0x1bc>)
 800ffac:	f240 4243 	movw	r2, #1091	@ 0x443
 800ffb0:	4936      	ldr	r1, [pc, #216]	@ (801008c <tcp_enqueue_flags+0x1d4>)
 800ffb2:	4832      	ldr	r0, [pc, #200]	@ (801007c <tcp_enqueue_flags+0x1c4>)
 800ffb4:	f004 ff98 	bl	8014ee8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d103      	bne.n	800ffc8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	68ba      	ldr	r2, [r7, #8]
 800ffc4:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ffc6:	e00d      	b.n	800ffe4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ffcc:	613b      	str	r3, [r7, #16]
 800ffce:	e002      	b.n	800ffd6 <tcp_enqueue_flags+0x11e>
 800ffd0:	693b      	ldr	r3, [r7, #16]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	613b      	str	r3, [r7, #16]
 800ffd6:	693b      	ldr	r3, [r7, #16]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d1f8      	bne.n	800ffd0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ffde:	693b      	ldr	r3, [r7, #16]
 800ffe0:	68ba      	ldr	r2, [r7, #8]
 800ffe2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ffec:	78fb      	ldrb	r3, [r7, #3]
 800ffee:	f003 0302 	and.w	r3, r3, #2
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d104      	bne.n	8010000 <tcp_enqueue_flags+0x148>
 800fff6:	78fb      	ldrb	r3, [r7, #3]
 800fff8:	f003 0301 	and.w	r3, r3, #1
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d004      	beq.n	801000a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010004:	1c5a      	adds	r2, r3, #1
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801000a:	78fb      	ldrb	r3, [r7, #3]
 801000c:	f003 0301 	and.w	r3, r3, #1
 8010010:	2b00      	cmp	r3, #0
 8010012:	d006      	beq.n	8010022 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	8b5b      	ldrh	r3, [r3, #26]
 8010018:	f043 0320 	orr.w	r3, r3, #32
 801001c:	b29a      	uxth	r2, r3
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	685b      	ldr	r3, [r3, #4]
 8010026:	4618      	mov	r0, r3
 8010028:	f7fb fc2e 	bl	800b888 <pbuf_clen>
 801002c:	4603      	mov	r3, r0
 801002e:	461a      	mov	r2, r3
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010036:	4413      	add	r3, r2
 8010038:	b29a      	uxth	r2, r3
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010046:	2b00      	cmp	r3, #0
 8010048:	d00e      	beq.n	8010068 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801004e:	2b00      	cmp	r3, #0
 8010050:	d10a      	bne.n	8010068 <tcp_enqueue_flags+0x1b0>
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010056:	2b00      	cmp	r3, #0
 8010058:	d106      	bne.n	8010068 <tcp_enqueue_flags+0x1b0>
 801005a:	4b06      	ldr	r3, [pc, #24]	@ (8010074 <tcp_enqueue_flags+0x1bc>)
 801005c:	f240 4265 	movw	r2, #1125	@ 0x465
 8010060:	490b      	ldr	r1, [pc, #44]	@ (8010090 <tcp_enqueue_flags+0x1d8>)
 8010062:	4806      	ldr	r0, [pc, #24]	@ (801007c <tcp_enqueue_flags+0x1c4>)
 8010064:	f004 ff40 	bl	8014ee8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010068:	2300      	movs	r3, #0
}
 801006a:	4618      	mov	r0, r3
 801006c:	3718      	adds	r7, #24
 801006e:	46bd      	mov	sp, r7
 8010070:	bd80      	pop	{r7, pc}
 8010072:	bf00      	nop
 8010074:	08017860 	.word	0x08017860
 8010078:	08017ce0 	.word	0x08017ce0
 801007c:	080178b4 	.word	0x080178b4
 8010080:	08017d38 	.word	0x08017d38
 8010084:	08017d58 	.word	0x08017d58
 8010088:	08017d94 	.word	0x08017d94
 801008c:	08017dac 	.word	0x08017dac
 8010090:	08017dd8 	.word	0x08017dd8

08010094 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010094:	b5b0      	push	{r4, r5, r7, lr}
 8010096:	b08a      	sub	sp, #40	@ 0x28
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d106      	bne.n	80100b0 <tcp_output+0x1c>
 80100a2:	4b8a      	ldr	r3, [pc, #552]	@ (80102cc <tcp_output+0x238>)
 80100a4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80100a8:	4989      	ldr	r1, [pc, #548]	@ (80102d0 <tcp_output+0x23c>)
 80100aa:	488a      	ldr	r0, [pc, #552]	@ (80102d4 <tcp_output+0x240>)
 80100ac:	f004 ff1c 	bl	8014ee8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	7d1b      	ldrb	r3, [r3, #20]
 80100b4:	2b01      	cmp	r3, #1
 80100b6:	d106      	bne.n	80100c6 <tcp_output+0x32>
 80100b8:	4b84      	ldr	r3, [pc, #528]	@ (80102cc <tcp_output+0x238>)
 80100ba:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80100be:	4986      	ldr	r1, [pc, #536]	@ (80102d8 <tcp_output+0x244>)
 80100c0:	4884      	ldr	r0, [pc, #528]	@ (80102d4 <tcp_output+0x240>)
 80100c2:	f004 ff11 	bl	8014ee8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80100c6:	4b85      	ldr	r3, [pc, #532]	@ (80102dc <tcp_output+0x248>)
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	687a      	ldr	r2, [r7, #4]
 80100cc:	429a      	cmp	r2, r3
 80100ce:	d101      	bne.n	80100d4 <tcp_output+0x40>
    return ERR_OK;
 80100d0:	2300      	movs	r3, #0
 80100d2:	e1d1      	b.n	8010478 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80100e0:	4293      	cmp	r3, r2
 80100e2:	bf28      	it	cs
 80100e4:	4613      	movcs	r3, r2
 80100e6:	b29b      	uxth	r3, r3
 80100e8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80100ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80100f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d10b      	bne.n	801010e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	8b5b      	ldrh	r3, [r3, #26]
 80100fa:	f003 0302 	and.w	r3, r3, #2
 80100fe:	2b00      	cmp	r3, #0
 8010100:	f000 81ad 	beq.w	801045e <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 8010104:	6878      	ldr	r0, [r7, #4]
 8010106:	f000 fdd7 	bl	8010cb8 <tcp_send_empty_ack>
 801010a:	4603      	mov	r3, r0
 801010c:	e1b4      	b.n	8010478 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801010e:	6879      	ldr	r1, [r7, #4]
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	3304      	adds	r3, #4
 8010114:	461a      	mov	r2, r3
 8010116:	6878      	ldr	r0, [r7, #4]
 8010118:	f7ff fc76 	bl	800fa08 <tcp_route>
 801011c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801011e:	697b      	ldr	r3, [r7, #20]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d102      	bne.n	801012a <tcp_output+0x96>
    return ERR_RTE;
 8010124:	f06f 0303 	mvn.w	r3, #3
 8010128:	e1a6      	b.n	8010478 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d003      	beq.n	8010138 <tcp_output+0xa4>
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d111      	bne.n	801015c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010138:	697b      	ldr	r3, [r7, #20]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d002      	beq.n	8010144 <tcp_output+0xb0>
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	3304      	adds	r3, #4
 8010142:	e000      	b.n	8010146 <tcp_output+0xb2>
 8010144:	2300      	movs	r3, #0
 8010146:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010148:	693b      	ldr	r3, [r7, #16]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d102      	bne.n	8010154 <tcp_output+0xc0>
      return ERR_RTE;
 801014e:	f06f 0303 	mvn.w	r3, #3
 8010152:	e191      	b.n	8010478 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010154:	693b      	ldr	r3, [r7, #16]
 8010156:	681a      	ldr	r2, [r3, #0]
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801015c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801015e:	691b      	ldr	r3, [r3, #16]
 8010160:	685b      	ldr	r3, [r3, #4]
 8010162:	4618      	mov	r0, r3
 8010164:	f7f9 fece 	bl	8009f04 <lwip_htonl>
 8010168:	4602      	mov	r2, r0
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801016e:	1ad3      	subs	r3, r2, r3
 8010170:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010172:	8912      	ldrh	r2, [r2, #8]
 8010174:	4413      	add	r3, r2
 8010176:	69ba      	ldr	r2, [r7, #24]
 8010178:	429a      	cmp	r2, r3
 801017a:	d227      	bcs.n	80101cc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010182:	461a      	mov	r2, r3
 8010184:	69bb      	ldr	r3, [r7, #24]
 8010186:	4293      	cmp	r3, r2
 8010188:	d114      	bne.n	80101b4 <tcp_output+0x120>
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801018e:	2b00      	cmp	r3, #0
 8010190:	d110      	bne.n	80101b4 <tcp_output+0x120>
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010198:	2b00      	cmp	r3, #0
 801019a:	d10b      	bne.n	80101b4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2200      	movs	r2, #0
 80101a0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2201      	movs	r2, #1
 80101a8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2200      	movs	r2, #0
 80101b0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	8b5b      	ldrh	r3, [r3, #26]
 80101b8:	f003 0302 	and.w	r3, r3, #2
 80101bc:	2b00      	cmp	r3, #0
 80101be:	f000 8150 	beq.w	8010462 <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	f000 fd78 	bl	8010cb8 <tcp_send_empty_ack>
 80101c8:	4603      	mov	r3, r0
 80101ca:	e155      	b.n	8010478 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2200      	movs	r2, #0
 80101d0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80101d8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80101da:	6a3b      	ldr	r3, [r7, #32]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	f000 811f 	beq.w	8010420 <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 80101e2:	e002      	b.n	80101ea <tcp_output+0x156>
 80101e4:	6a3b      	ldr	r3, [r7, #32]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	623b      	str	r3, [r7, #32]
 80101ea:	6a3b      	ldr	r3, [r7, #32]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d1f8      	bne.n	80101e4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80101f2:	e115      	b.n	8010420 <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80101f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101f6:	691b      	ldr	r3, [r3, #16]
 80101f8:	899b      	ldrh	r3, [r3, #12]
 80101fa:	b29b      	uxth	r3, r3
 80101fc:	4618      	mov	r0, r3
 80101fe:	f7f9 fe6b 	bl	8009ed8 <lwip_htons>
 8010202:	4603      	mov	r3, r0
 8010204:	b2db      	uxtb	r3, r3
 8010206:	f003 0304 	and.w	r3, r3, #4
 801020a:	2b00      	cmp	r3, #0
 801020c:	d006      	beq.n	801021c <tcp_output+0x188>
 801020e:	4b2f      	ldr	r3, [pc, #188]	@ (80102cc <tcp_output+0x238>)
 8010210:	f240 5236 	movw	r2, #1334	@ 0x536
 8010214:	4932      	ldr	r1, [pc, #200]	@ (80102e0 <tcp_output+0x24c>)
 8010216:	482f      	ldr	r0, [pc, #188]	@ (80102d4 <tcp_output+0x240>)
 8010218:	f004 fe66 	bl	8014ee8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010220:	2b00      	cmp	r3, #0
 8010222:	d01f      	beq.n	8010264 <tcp_output+0x1d0>
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	8b5b      	ldrh	r3, [r3, #26]
 8010228:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801022c:	2b00      	cmp	r3, #0
 801022e:	d119      	bne.n	8010264 <tcp_output+0x1d0>
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010234:	2b00      	cmp	r3, #0
 8010236:	d00b      	beq.n	8010250 <tcp_output+0x1bc>
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d110      	bne.n	8010264 <tcp_output+0x1d0>
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010246:	891a      	ldrh	r2, [r3, #8]
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801024c:	429a      	cmp	r2, r3
 801024e:	d209      	bcs.n	8010264 <tcp_output+0x1d0>
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010256:	2b00      	cmp	r3, #0
 8010258:	d004      	beq.n	8010264 <tcp_output+0x1d0>
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010260:	2b08      	cmp	r3, #8
 8010262:	d901      	bls.n	8010268 <tcp_output+0x1d4>
 8010264:	2301      	movs	r3, #1
 8010266:	e000      	b.n	801026a <tcp_output+0x1d6>
 8010268:	2300      	movs	r3, #0
 801026a:	2b00      	cmp	r3, #0
 801026c:	d106      	bne.n	801027c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	8b5b      	ldrh	r3, [r3, #26]
 8010272:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010276:	2b00      	cmp	r3, #0
 8010278:	f000 80e7 	beq.w	801044a <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	7d1b      	ldrb	r3, [r3, #20]
 8010280:	2b02      	cmp	r3, #2
 8010282:	d00d      	beq.n	80102a0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010286:	691b      	ldr	r3, [r3, #16]
 8010288:	899b      	ldrh	r3, [r3, #12]
 801028a:	b29c      	uxth	r4, r3
 801028c:	2010      	movs	r0, #16
 801028e:	f7f9 fe23 	bl	8009ed8 <lwip_htons>
 8010292:	4603      	mov	r3, r0
 8010294:	461a      	mov	r2, r3
 8010296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010298:	691b      	ldr	r3, [r3, #16]
 801029a:	4322      	orrs	r2, r4
 801029c:	b292      	uxth	r2, r2
 801029e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80102a0:	697a      	ldr	r2, [r7, #20]
 80102a2:	6879      	ldr	r1, [r7, #4]
 80102a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80102a6:	f000 f90b 	bl	80104c0 <tcp_output_segment>
 80102aa:	4603      	mov	r3, r0
 80102ac:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80102ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d016      	beq.n	80102e4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	8b5b      	ldrh	r3, [r3, #26]
 80102ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80102be:	b29a      	uxth	r2, r3
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	835a      	strh	r2, [r3, #26]
      return err;
 80102c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102c8:	e0d6      	b.n	8010478 <tcp_output+0x3e4>
 80102ca:	bf00      	nop
 80102cc:	08017860 	.word	0x08017860
 80102d0:	08017e00 	.word	0x08017e00
 80102d4:	080178b4 	.word	0x080178b4
 80102d8:	08017e18 	.word	0x08017e18
 80102dc:	200083ac 	.word	0x200083ac
 80102e0:	08017e40 	.word	0x08017e40
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 80102e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102e6:	2200      	movs	r2, #0
 80102e8:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80102ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102ec:	681a      	ldr	r2, [r3, #0]
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	7d1b      	ldrb	r3, [r3, #20]
 80102f6:	2b02      	cmp	r3, #2
 80102f8:	d006      	beq.n	8010308 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	8b5b      	ldrh	r3, [r3, #26]
 80102fe:	f023 0303 	bic.w	r3, r3, #3
 8010302:	b29a      	uxth	r2, r3
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801030a:	691b      	ldr	r3, [r3, #16]
 801030c:	685b      	ldr	r3, [r3, #4]
 801030e:	4618      	mov	r0, r3
 8010310:	f7f9 fdf8 	bl	8009f04 <lwip_htonl>
 8010314:	4604      	mov	r4, r0
 8010316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010318:	891b      	ldrh	r3, [r3, #8]
 801031a:	461d      	mov	r5, r3
 801031c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801031e:	691b      	ldr	r3, [r3, #16]
 8010320:	899b      	ldrh	r3, [r3, #12]
 8010322:	b29b      	uxth	r3, r3
 8010324:	4618      	mov	r0, r3
 8010326:	f7f9 fdd7 	bl	8009ed8 <lwip_htons>
 801032a:	4603      	mov	r3, r0
 801032c:	b2db      	uxtb	r3, r3
 801032e:	f003 0303 	and.w	r3, r3, #3
 8010332:	2b00      	cmp	r3, #0
 8010334:	d001      	beq.n	801033a <tcp_output+0x2a6>
 8010336:	2301      	movs	r3, #1
 8010338:	e000      	b.n	801033c <tcp_output+0x2a8>
 801033a:	2300      	movs	r3, #0
 801033c:	442b      	add	r3, r5
 801033e:	4423      	add	r3, r4
 8010340:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010346:	68bb      	ldr	r3, [r7, #8]
 8010348:	1ad3      	subs	r3, r2, r3
 801034a:	2b00      	cmp	r3, #0
 801034c:	da02      	bge.n	8010354 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	68ba      	ldr	r2, [r7, #8]
 8010352:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010356:	891b      	ldrh	r3, [r3, #8]
 8010358:	461c      	mov	r4, r3
 801035a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801035c:	691b      	ldr	r3, [r3, #16]
 801035e:	899b      	ldrh	r3, [r3, #12]
 8010360:	b29b      	uxth	r3, r3
 8010362:	4618      	mov	r0, r3
 8010364:	f7f9 fdb8 	bl	8009ed8 <lwip_htons>
 8010368:	4603      	mov	r3, r0
 801036a:	b2db      	uxtb	r3, r3
 801036c:	f003 0303 	and.w	r3, r3, #3
 8010370:	2b00      	cmp	r3, #0
 8010372:	d001      	beq.n	8010378 <tcp_output+0x2e4>
 8010374:	2301      	movs	r3, #1
 8010376:	e000      	b.n	801037a <tcp_output+0x2e6>
 8010378:	2300      	movs	r3, #0
 801037a:	4423      	add	r3, r4
 801037c:	2b00      	cmp	r3, #0
 801037e:	d049      	beq.n	8010414 <tcp_output+0x380>
      seg->next = NULL;
 8010380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010382:	2200      	movs	r2, #0
 8010384:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801038a:	2b00      	cmp	r3, #0
 801038c:	d105      	bne.n	801039a <tcp_output+0x306>
        pcb->unacked = seg;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010392:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8010394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010396:	623b      	str	r3, [r7, #32]
 8010398:	e03f      	b.n	801041a <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801039a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801039c:	691b      	ldr	r3, [r3, #16]
 801039e:	685b      	ldr	r3, [r3, #4]
 80103a0:	4618      	mov	r0, r3
 80103a2:	f7f9 fdaf 	bl	8009f04 <lwip_htonl>
 80103a6:	4604      	mov	r4, r0
 80103a8:	6a3b      	ldr	r3, [r7, #32]
 80103aa:	691b      	ldr	r3, [r3, #16]
 80103ac:	685b      	ldr	r3, [r3, #4]
 80103ae:	4618      	mov	r0, r3
 80103b0:	f7f9 fda8 	bl	8009f04 <lwip_htonl>
 80103b4:	4603      	mov	r3, r0
 80103b6:	1ae3      	subs	r3, r4, r3
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	da24      	bge.n	8010406 <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	3370      	adds	r3, #112	@ 0x70
 80103c0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80103c2:	e002      	b.n	80103ca <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80103c4:	69fb      	ldr	r3, [r7, #28]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80103ca:	69fb      	ldr	r3, [r7, #28]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d011      	beq.n	80103f6 <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80103d2:	69fb      	ldr	r3, [r7, #28]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	691b      	ldr	r3, [r3, #16]
 80103d8:	685b      	ldr	r3, [r3, #4]
 80103da:	4618      	mov	r0, r3
 80103dc:	f7f9 fd92 	bl	8009f04 <lwip_htonl>
 80103e0:	4604      	mov	r4, r0
 80103e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103e4:	691b      	ldr	r3, [r3, #16]
 80103e6:	685b      	ldr	r3, [r3, #4]
 80103e8:	4618      	mov	r0, r3
 80103ea:	f7f9 fd8b 	bl	8009f04 <lwip_htonl>
 80103ee:	4603      	mov	r3, r0
 80103f0:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	dbe6      	blt.n	80103c4 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 80103f6:	69fb      	ldr	r3, [r7, #28]
 80103f8:	681a      	ldr	r2, [r3, #0]
 80103fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103fc:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80103fe:	69fb      	ldr	r3, [r7, #28]
 8010400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010402:	601a      	str	r2, [r3, #0]
 8010404:	e009      	b.n	801041a <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010406:	6a3b      	ldr	r3, [r7, #32]
 8010408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801040a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801040c:	6a3b      	ldr	r3, [r7, #32]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	623b      	str	r3, [r7, #32]
 8010412:	e002      	b.n	801041a <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010414:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010416:	f7fc fc34 	bl	800cc82 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801041e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8010420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010422:	2b00      	cmp	r3, #0
 8010424:	d012      	beq.n	801044c <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010428:	691b      	ldr	r3, [r3, #16]
 801042a:	685b      	ldr	r3, [r3, #4]
 801042c:	4618      	mov	r0, r3
 801042e:	f7f9 fd69 	bl	8009f04 <lwip_htonl>
 8010432:	4602      	mov	r2, r0
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010438:	1ad3      	subs	r3, r2, r3
 801043a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801043c:	8912      	ldrh	r2, [r2, #8]
 801043e:	4413      	add	r3, r2
  while (seg != NULL &&
 8010440:	69ba      	ldr	r2, [r7, #24]
 8010442:	429a      	cmp	r2, r3
 8010444:	f4bf aed6 	bcs.w	80101f4 <tcp_output+0x160>
 8010448:	e000      	b.n	801044c <tcp_output+0x3b8>
      break;
 801044a:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010450:	2b00      	cmp	r3, #0
 8010452:	d108      	bne.n	8010466 <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2200      	movs	r2, #0
 8010458:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801045c:	e004      	b.n	8010468 <tcp_output+0x3d4>
    goto output_done;
 801045e:	bf00      	nop
 8010460:	e002      	b.n	8010468 <tcp_output+0x3d4>
    goto output_done;
 8010462:	bf00      	nop
 8010464:	e000      	b.n	8010468 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010466:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	8b5b      	ldrh	r3, [r3, #26]
 801046c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010470:	b29a      	uxth	r2, r3
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010476:	2300      	movs	r3, #0
}
 8010478:	4618      	mov	r0, r3
 801047a:	3728      	adds	r7, #40	@ 0x28
 801047c:	46bd      	mov	sp, r7
 801047e:	bdb0      	pop	{r4, r5, r7, pc}

08010480 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b082      	sub	sp, #8
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d106      	bne.n	801049c <tcp_output_segment_busy+0x1c>
 801048e:	4b09      	ldr	r3, [pc, #36]	@ (80104b4 <tcp_output_segment_busy+0x34>)
 8010490:	f240 529a 	movw	r2, #1434	@ 0x59a
 8010494:	4908      	ldr	r1, [pc, #32]	@ (80104b8 <tcp_output_segment_busy+0x38>)
 8010496:	4809      	ldr	r0, [pc, #36]	@ (80104bc <tcp_output_segment_busy+0x3c>)
 8010498:	f004 fd26 	bl	8014ee8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	685b      	ldr	r3, [r3, #4]
 80104a0:	7b9b      	ldrb	r3, [r3, #14]
 80104a2:	2b01      	cmp	r3, #1
 80104a4:	d001      	beq.n	80104aa <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80104a6:	2301      	movs	r3, #1
 80104a8:	e000      	b.n	80104ac <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80104aa:	2300      	movs	r3, #0
}
 80104ac:	4618      	mov	r0, r3
 80104ae:	3708      	adds	r7, #8
 80104b0:	46bd      	mov	sp, r7
 80104b2:	bd80      	pop	{r7, pc}
 80104b4:	08017860 	.word	0x08017860
 80104b8:	08017e58 	.word	0x08017e58
 80104bc:	080178b4 	.word	0x080178b4

080104c0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80104c0:	b5b0      	push	{r4, r5, r7, lr}
 80104c2:	b08c      	sub	sp, #48	@ 0x30
 80104c4:	af04      	add	r7, sp, #16
 80104c6:	60f8      	str	r0, [r7, #12]
 80104c8:	60b9      	str	r1, [r7, #8]
 80104ca:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d106      	bne.n	80104e0 <tcp_output_segment+0x20>
 80104d2:	4b64      	ldr	r3, [pc, #400]	@ (8010664 <tcp_output_segment+0x1a4>)
 80104d4:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80104d8:	4963      	ldr	r1, [pc, #396]	@ (8010668 <tcp_output_segment+0x1a8>)
 80104da:	4864      	ldr	r0, [pc, #400]	@ (801066c <tcp_output_segment+0x1ac>)
 80104dc:	f004 fd04 	bl	8014ee8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80104e0:	68bb      	ldr	r3, [r7, #8]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d106      	bne.n	80104f4 <tcp_output_segment+0x34>
 80104e6:	4b5f      	ldr	r3, [pc, #380]	@ (8010664 <tcp_output_segment+0x1a4>)
 80104e8:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80104ec:	4960      	ldr	r1, [pc, #384]	@ (8010670 <tcp_output_segment+0x1b0>)
 80104ee:	485f      	ldr	r0, [pc, #380]	@ (801066c <tcp_output_segment+0x1ac>)
 80104f0:	f004 fcfa 	bl	8014ee8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d106      	bne.n	8010508 <tcp_output_segment+0x48>
 80104fa:	4b5a      	ldr	r3, [pc, #360]	@ (8010664 <tcp_output_segment+0x1a4>)
 80104fc:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8010500:	495c      	ldr	r1, [pc, #368]	@ (8010674 <tcp_output_segment+0x1b4>)
 8010502:	485a      	ldr	r0, [pc, #360]	@ (801066c <tcp_output_segment+0x1ac>)
 8010504:	f004 fcf0 	bl	8014ee8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010508:	68f8      	ldr	r0, [r7, #12]
 801050a:	f7ff ffb9 	bl	8010480 <tcp_output_segment_busy>
 801050e:	4603      	mov	r3, r0
 8010510:	2b00      	cmp	r3, #0
 8010512:	d001      	beq.n	8010518 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010514:	2300      	movs	r3, #0
 8010516:	e0a1      	b.n	801065c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010518:	68bb      	ldr	r3, [r7, #8]
 801051a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	691c      	ldr	r4, [r3, #16]
 8010520:	4610      	mov	r0, r2
 8010522:	f7f9 fcef 	bl	8009f04 <lwip_htonl>
 8010526:	4603      	mov	r3, r0
 8010528:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801052a:	68bb      	ldr	r3, [r7, #8]
 801052c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	691c      	ldr	r4, [r3, #16]
 8010532:	4610      	mov	r0, r2
 8010534:	f7f9 fcd0 	bl	8009ed8 <lwip_htons>
 8010538:	4603      	mov	r3, r0
 801053a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801053c:	68bb      	ldr	r3, [r7, #8]
 801053e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010540:	68ba      	ldr	r2, [r7, #8]
 8010542:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8010544:	441a      	add	r2, r3
 8010546:	68bb      	ldr	r3, [r7, #8]
 8010548:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	691b      	ldr	r3, [r3, #16]
 801054e:	3314      	adds	r3, #20
 8010550:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	7b1b      	ldrb	r3, [r3, #12]
 8010556:	f003 0301 	and.w	r3, r3, #1
 801055a:	2b00      	cmp	r3, #0
 801055c:	d015      	beq.n	801058a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801055e:	68bb      	ldr	r3, [r7, #8]
 8010560:	3304      	adds	r3, #4
 8010562:	461a      	mov	r2, r3
 8010564:	6879      	ldr	r1, [r7, #4]
 8010566:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801056a:	f7fc fe81 	bl	800d270 <tcp_eff_send_mss_netif>
 801056e:	4603      	mov	r3, r0
 8010570:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010572:	8b7b      	ldrh	r3, [r7, #26]
 8010574:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8010578:	4618      	mov	r0, r3
 801057a:	f7f9 fcc3 	bl	8009f04 <lwip_htonl>
 801057e:	4602      	mov	r2, r0
 8010580:	69fb      	ldr	r3, [r7, #28]
 8010582:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010584:	69fb      	ldr	r3, [r7, #28]
 8010586:	3304      	adds	r3, #4
 8010588:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801058a:	68bb      	ldr	r3, [r7, #8]
 801058c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010590:	2b00      	cmp	r3, #0
 8010592:	da02      	bge.n	801059a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	2200      	movs	r2, #0
 8010598:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d10c      	bne.n	80105bc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80105a2:	4b35      	ldr	r3, [pc, #212]	@ (8010678 <tcp_output_segment+0x1b8>)
 80105a4:	681a      	ldr	r2, [r3, #0]
 80105a6:	68bb      	ldr	r3, [r7, #8]
 80105a8:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	691b      	ldr	r3, [r3, #16]
 80105ae:	685b      	ldr	r3, [r3, #4]
 80105b0:	4618      	mov	r0, r3
 80105b2:	f7f9 fca7 	bl	8009f04 <lwip_htonl>
 80105b6:	4602      	mov	r2, r0
 80105b8:	68bb      	ldr	r3, [r7, #8]
 80105ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	691a      	ldr	r2, [r3, #16]
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	685b      	ldr	r3, [r3, #4]
 80105c4:	685b      	ldr	r3, [r3, #4]
 80105c6:	1ad3      	subs	r3, r2, r3
 80105c8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	685b      	ldr	r3, [r3, #4]
 80105ce:	8959      	ldrh	r1, [r3, #10]
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	685b      	ldr	r3, [r3, #4]
 80105d4:	8b3a      	ldrh	r2, [r7, #24]
 80105d6:	1a8a      	subs	r2, r1, r2
 80105d8:	b292      	uxth	r2, r2
 80105da:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	685b      	ldr	r3, [r3, #4]
 80105e0:	8919      	ldrh	r1, [r3, #8]
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	685b      	ldr	r3, [r3, #4]
 80105e6:	8b3a      	ldrh	r2, [r7, #24]
 80105e8:	1a8a      	subs	r2, r1, r2
 80105ea:	b292      	uxth	r2, r2
 80105ec:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	685b      	ldr	r3, [r3, #4]
 80105f2:	68fa      	ldr	r2, [r7, #12]
 80105f4:	6912      	ldr	r2, [r2, #16]
 80105f6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	691b      	ldr	r3, [r3, #16]
 80105fc:	2200      	movs	r2, #0
 80105fe:	741a      	strb	r2, [r3, #16]
 8010600:	2200      	movs	r2, #0
 8010602:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	691a      	ldr	r2, [r3, #16]
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	7b1b      	ldrb	r3, [r3, #12]
 801060c:	f003 0301 	and.w	r3, r3, #1
 8010610:	2b00      	cmp	r3, #0
 8010612:	d001      	beq.n	8010618 <tcp_output_segment+0x158>
 8010614:	2318      	movs	r3, #24
 8010616:	e000      	b.n	801061a <tcp_output_segment+0x15a>
 8010618:	2314      	movs	r3, #20
 801061a:	4413      	add	r3, r2
 801061c:	69fa      	ldr	r2, [r7, #28]
 801061e:	429a      	cmp	r2, r3
 8010620:	d006      	beq.n	8010630 <tcp_output_segment+0x170>
 8010622:	4b10      	ldr	r3, [pc, #64]	@ (8010664 <tcp_output_segment+0x1a4>)
 8010624:	f240 621c 	movw	r2, #1564	@ 0x61c
 8010628:	4914      	ldr	r1, [pc, #80]	@ (801067c <tcp_output_segment+0x1bc>)
 801062a:	4810      	ldr	r0, [pc, #64]	@ (801066c <tcp_output_segment+0x1ac>)
 801062c:	f004 fc5c 	bl	8014ee8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	6858      	ldr	r0, [r3, #4]
 8010634:	68b9      	ldr	r1, [r7, #8]
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	1d1c      	adds	r4, r3, #4
 801063a:	68bb      	ldr	r3, [r7, #8]
 801063c:	7add      	ldrb	r5, [r3, #11]
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	7a9b      	ldrb	r3, [r3, #10]
 8010642:	687a      	ldr	r2, [r7, #4]
 8010644:	9202      	str	r2, [sp, #8]
 8010646:	2206      	movs	r2, #6
 8010648:	9201      	str	r2, [sp, #4]
 801064a:	9300      	str	r3, [sp, #0]
 801064c:	462b      	mov	r3, r5
 801064e:	4622      	mov	r2, r4
 8010650:	f002 ffbe 	bl	80135d0 <ip4_output_if>
 8010654:	4603      	mov	r3, r0
 8010656:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8010658:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801065c:	4618      	mov	r0, r3
 801065e:	3720      	adds	r7, #32
 8010660:	46bd      	mov	sp, r7
 8010662:	bdb0      	pop	{r4, r5, r7, pc}
 8010664:	08017860 	.word	0x08017860
 8010668:	08017e80 	.word	0x08017e80
 801066c:	080178b4 	.word	0x080178b4
 8010670:	08017ea0 	.word	0x08017ea0
 8010674:	08017ec0 	.word	0x08017ec0
 8010678:	2000835c 	.word	0x2000835c
 801067c:	08017ee4 	.word	0x08017ee4

08010680 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8010680:	b5b0      	push	{r4, r5, r7, lr}
 8010682:	b084      	sub	sp, #16
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d106      	bne.n	801069c <tcp_rexmit_rto_prepare+0x1c>
 801068e:	4b36      	ldr	r3, [pc, #216]	@ (8010768 <tcp_rexmit_rto_prepare+0xe8>)
 8010690:	f240 6263 	movw	r2, #1635	@ 0x663
 8010694:	4935      	ldr	r1, [pc, #212]	@ (801076c <tcp_rexmit_rto_prepare+0xec>)
 8010696:	4836      	ldr	r0, [pc, #216]	@ (8010770 <tcp_rexmit_rto_prepare+0xf0>)
 8010698:	f004 fc26 	bl	8014ee8 <iprintf>

  if (pcb->unacked == NULL) {
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d102      	bne.n	80106aa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80106a4:	f06f 0305 	mvn.w	r3, #5
 80106a8:	e059      	b.n	801075e <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80106ae:	60fb      	str	r3, [r7, #12]
 80106b0:	e00b      	b.n	80106ca <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80106b2:	68f8      	ldr	r0, [r7, #12]
 80106b4:	f7ff fee4 	bl	8010480 <tcp_output_segment_busy>
 80106b8:	4603      	mov	r3, r0
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d002      	beq.n	80106c4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80106be:	f06f 0305 	mvn.w	r3, #5
 80106c2:	e04c      	b.n	801075e <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	60fb      	str	r3, [r7, #12]
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d1ef      	bne.n	80106b2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80106d2:	68f8      	ldr	r0, [r7, #12]
 80106d4:	f7ff fed4 	bl	8010480 <tcp_output_segment_busy>
 80106d8:	4603      	mov	r3, r0
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d002      	beq.n	80106e4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80106de:	f06f 0305 	mvn.w	r3, #5
 80106e2:	e03c      	b.n	801075e <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d104      	bne.n	80106fe <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	895a      	ldrh	r2, [r3, #10]
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	2200      	movs	r2, #0
 801070a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	8b5b      	ldrh	r3, [r3, #26]
 8010710:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8010714:	b29a      	uxth	r2, r3
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	691b      	ldr	r3, [r3, #16]
 801071e:	685b      	ldr	r3, [r3, #4]
 8010720:	4618      	mov	r0, r3
 8010722:	f7f9 fbef 	bl	8009f04 <lwip_htonl>
 8010726:	4604      	mov	r4, r0
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	891b      	ldrh	r3, [r3, #8]
 801072c:	461d      	mov	r5, r3
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	691b      	ldr	r3, [r3, #16]
 8010732:	899b      	ldrh	r3, [r3, #12]
 8010734:	b29b      	uxth	r3, r3
 8010736:	4618      	mov	r0, r3
 8010738:	f7f9 fbce 	bl	8009ed8 <lwip_htons>
 801073c:	4603      	mov	r3, r0
 801073e:	b2db      	uxtb	r3, r3
 8010740:	f003 0303 	and.w	r3, r3, #3
 8010744:	2b00      	cmp	r3, #0
 8010746:	d001      	beq.n	801074c <tcp_rexmit_rto_prepare+0xcc>
 8010748:	2301      	movs	r3, #1
 801074a:	e000      	b.n	801074e <tcp_rexmit_rto_prepare+0xce>
 801074c:	2300      	movs	r3, #0
 801074e:	442b      	add	r3, r5
 8010750:	18e2      	adds	r2, r4, r3
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	2200      	movs	r2, #0
 801075a:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801075c:	2300      	movs	r3, #0
}
 801075e:	4618      	mov	r0, r3
 8010760:	3710      	adds	r7, #16
 8010762:	46bd      	mov	sp, r7
 8010764:	bdb0      	pop	{r4, r5, r7, pc}
 8010766:	bf00      	nop
 8010768:	08017860 	.word	0x08017860
 801076c:	08017ef8 	.word	0x08017ef8
 8010770:	080178b4 	.word	0x080178b4

08010774 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b082      	sub	sp, #8
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d106      	bne.n	8010790 <tcp_rexmit_rto_commit+0x1c>
 8010782:	4b0d      	ldr	r3, [pc, #52]	@ (80107b8 <tcp_rexmit_rto_commit+0x44>)
 8010784:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8010788:	490c      	ldr	r1, [pc, #48]	@ (80107bc <tcp_rexmit_rto_commit+0x48>)
 801078a:	480d      	ldr	r0, [pc, #52]	@ (80107c0 <tcp_rexmit_rto_commit+0x4c>)
 801078c:	f004 fbac 	bl	8014ee8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010796:	2bff      	cmp	r3, #255	@ 0xff
 8010798:	d007      	beq.n	80107aa <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80107a0:	3301      	adds	r3, #1
 80107a2:	b2da      	uxtb	r2, r3
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80107aa:	6878      	ldr	r0, [r7, #4]
 80107ac:	f7ff fc72 	bl	8010094 <tcp_output>
}
 80107b0:	bf00      	nop
 80107b2:	3708      	adds	r7, #8
 80107b4:	46bd      	mov	sp, r7
 80107b6:	bd80      	pop	{r7, pc}
 80107b8:	08017860 	.word	0x08017860
 80107bc:	08017f1c 	.word	0x08017f1c
 80107c0:	080178b4 	.word	0x080178b4

080107c4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b082      	sub	sp, #8
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d106      	bne.n	80107e0 <tcp_rexmit_rto+0x1c>
 80107d2:	4b0a      	ldr	r3, [pc, #40]	@ (80107fc <tcp_rexmit_rto+0x38>)
 80107d4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80107d8:	4909      	ldr	r1, [pc, #36]	@ (8010800 <tcp_rexmit_rto+0x3c>)
 80107da:	480a      	ldr	r0, [pc, #40]	@ (8010804 <tcp_rexmit_rto+0x40>)
 80107dc:	f004 fb84 	bl	8014ee8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f7ff ff4d 	bl	8010680 <tcp_rexmit_rto_prepare>
 80107e6:	4603      	mov	r3, r0
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d102      	bne.n	80107f2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80107ec:	6878      	ldr	r0, [r7, #4]
 80107ee:	f7ff ffc1 	bl	8010774 <tcp_rexmit_rto_commit>
  }
}
 80107f2:	bf00      	nop
 80107f4:	3708      	adds	r7, #8
 80107f6:	46bd      	mov	sp, r7
 80107f8:	bd80      	pop	{r7, pc}
 80107fa:	bf00      	nop
 80107fc:	08017860 	.word	0x08017860
 8010800:	08017f40 	.word	0x08017f40
 8010804:	080178b4 	.word	0x080178b4

08010808 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010808:	b590      	push	{r4, r7, lr}
 801080a:	b085      	sub	sp, #20
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d106      	bne.n	8010824 <tcp_rexmit+0x1c>
 8010816:	4b2f      	ldr	r3, [pc, #188]	@ (80108d4 <tcp_rexmit+0xcc>)
 8010818:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801081c:	492e      	ldr	r1, [pc, #184]	@ (80108d8 <tcp_rexmit+0xd0>)
 801081e:	482f      	ldr	r0, [pc, #188]	@ (80108dc <tcp_rexmit+0xd4>)
 8010820:	f004 fb62 	bl	8014ee8 <iprintf>

  if (pcb->unacked == NULL) {
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010828:	2b00      	cmp	r3, #0
 801082a:	d102      	bne.n	8010832 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801082c:	f06f 0305 	mvn.w	r3, #5
 8010830:	e04c      	b.n	80108cc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010836:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010838:	68b8      	ldr	r0, [r7, #8]
 801083a:	f7ff fe21 	bl	8010480 <tcp_output_segment_busy>
 801083e:	4603      	mov	r3, r0
 8010840:	2b00      	cmp	r3, #0
 8010842:	d002      	beq.n	801084a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010844:	f06f 0305 	mvn.w	r3, #5
 8010848:	e040      	b.n	80108cc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801084a:	68bb      	ldr	r3, [r7, #8]
 801084c:	681a      	ldr	r2, [r3, #0]
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	336c      	adds	r3, #108	@ 0x6c
 8010856:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010858:	e002      	b.n	8010860 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d011      	beq.n	801088c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	691b      	ldr	r3, [r3, #16]
 801086e:	685b      	ldr	r3, [r3, #4]
 8010870:	4618      	mov	r0, r3
 8010872:	f7f9 fb47 	bl	8009f04 <lwip_htonl>
 8010876:	4604      	mov	r4, r0
 8010878:	68bb      	ldr	r3, [r7, #8]
 801087a:	691b      	ldr	r3, [r3, #16]
 801087c:	685b      	ldr	r3, [r3, #4]
 801087e:	4618      	mov	r0, r3
 8010880:	f7f9 fb40 	bl	8009f04 <lwip_htonl>
 8010884:	4603      	mov	r3, r0
 8010886:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010888:	2b00      	cmp	r3, #0
 801088a:	dbe6      	blt.n	801085a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	681a      	ldr	r2, [r3, #0]
 8010890:	68bb      	ldr	r3, [r7, #8]
 8010892:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	68ba      	ldr	r2, [r7, #8]
 8010898:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801089a:	68bb      	ldr	r3, [r7, #8]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d103      	bne.n	80108aa <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	2200      	movs	r2, #0
 80108a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80108b0:	2bff      	cmp	r3, #255	@ 0xff
 80108b2:	d007      	beq.n	80108c4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80108ba:	3301      	adds	r3, #1
 80108bc:	b2da      	uxtb	r2, r3
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	2200      	movs	r2, #0
 80108c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80108ca:	2300      	movs	r3, #0
}
 80108cc:	4618      	mov	r0, r3
 80108ce:	3714      	adds	r7, #20
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd90      	pop	{r4, r7, pc}
 80108d4:	08017860 	.word	0x08017860
 80108d8:	08017f5c 	.word	0x08017f5c
 80108dc:	080178b4 	.word	0x080178b4

080108e0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b082      	sub	sp, #8
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d106      	bne.n	80108fc <tcp_rexmit_fast+0x1c>
 80108ee:	4b2a      	ldr	r3, [pc, #168]	@ (8010998 <tcp_rexmit_fast+0xb8>)
 80108f0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80108f4:	4929      	ldr	r1, [pc, #164]	@ (801099c <tcp_rexmit_fast+0xbc>)
 80108f6:	482a      	ldr	r0, [pc, #168]	@ (80109a0 <tcp_rexmit_fast+0xc0>)
 80108f8:	f004 faf6 	bl	8014ee8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010900:	2b00      	cmp	r3, #0
 8010902:	d045      	beq.n	8010990 <tcp_rexmit_fast+0xb0>
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	8b5b      	ldrh	r3, [r3, #26]
 8010908:	f003 0304 	and.w	r3, r3, #4
 801090c:	2b00      	cmp	r3, #0
 801090e:	d13f      	bne.n	8010990 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010910:	6878      	ldr	r0, [r7, #4]
 8010912:	f7ff ff79 	bl	8010808 <tcp_rexmit>
 8010916:	4603      	mov	r3, r0
 8010918:	2b00      	cmp	r3, #0
 801091a:	d139      	bne.n	8010990 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010928:	4293      	cmp	r3, r2
 801092a:	bf28      	it	cs
 801092c:	4613      	movcs	r3, r2
 801092e:	b29b      	uxth	r3, r3
 8010930:	2b00      	cmp	r3, #0
 8010932:	da00      	bge.n	8010936 <tcp_rexmit_fast+0x56>
 8010934:	3301      	adds	r3, #1
 8010936:	105b      	asrs	r3, r3, #1
 8010938:	b29a      	uxth	r2, r3
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8010946:	461a      	mov	r2, r3
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801094c:	005b      	lsls	r3, r3, #1
 801094e:	429a      	cmp	r2, r3
 8010950:	d206      	bcs.n	8010960 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010956:	005b      	lsls	r3, r3, #1
 8010958:	b29a      	uxth	r2, r3
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801096a:	4619      	mov	r1, r3
 801096c:	0049      	lsls	r1, r1, #1
 801096e:	440b      	add	r3, r1
 8010970:	b29b      	uxth	r3, r3
 8010972:	4413      	add	r3, r2
 8010974:	b29a      	uxth	r2, r3
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	8b5b      	ldrh	r3, [r3, #26]
 8010980:	f043 0304 	orr.w	r3, r3, #4
 8010984:	b29a      	uxth	r2, r3
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	2200      	movs	r2, #0
 801098e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8010990:	bf00      	nop
 8010992:	3708      	adds	r7, #8
 8010994:	46bd      	mov	sp, r7
 8010996:	bd80      	pop	{r7, pc}
 8010998:	08017860 	.word	0x08017860
 801099c:	08017f74 	.word	0x08017f74
 80109a0:	080178b4 	.word	0x080178b4

080109a4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b086      	sub	sp, #24
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	60f8      	str	r0, [r7, #12]
 80109ac:	607b      	str	r3, [r7, #4]
 80109ae:	460b      	mov	r3, r1
 80109b0:	817b      	strh	r3, [r7, #10]
 80109b2:	4613      	mov	r3, r2
 80109b4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80109b6:	897a      	ldrh	r2, [r7, #10]
 80109b8:	893b      	ldrh	r3, [r7, #8]
 80109ba:	4413      	add	r3, r2
 80109bc:	b29b      	uxth	r3, r3
 80109be:	3314      	adds	r3, #20
 80109c0:	b29b      	uxth	r3, r3
 80109c2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80109c6:	4619      	mov	r1, r3
 80109c8:	2022      	movs	r0, #34	@ 0x22
 80109ca:	f7fa fbf1 	bl	800b1b0 <pbuf_alloc>
 80109ce:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80109d0:	697b      	ldr	r3, [r7, #20]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d04d      	beq.n	8010a72 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80109d6:	897b      	ldrh	r3, [r7, #10]
 80109d8:	3313      	adds	r3, #19
 80109da:	697a      	ldr	r2, [r7, #20]
 80109dc:	8952      	ldrh	r2, [r2, #10]
 80109de:	4293      	cmp	r3, r2
 80109e0:	db06      	blt.n	80109f0 <tcp_output_alloc_header_common+0x4c>
 80109e2:	4b26      	ldr	r3, [pc, #152]	@ (8010a7c <tcp_output_alloc_header_common+0xd8>)
 80109e4:	f240 7223 	movw	r2, #1827	@ 0x723
 80109e8:	4925      	ldr	r1, [pc, #148]	@ (8010a80 <tcp_output_alloc_header_common+0xdc>)
 80109ea:	4826      	ldr	r0, [pc, #152]	@ (8010a84 <tcp_output_alloc_header_common+0xe0>)
 80109ec:	f004 fa7c 	bl	8014ee8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80109f0:	697b      	ldr	r3, [r7, #20]
 80109f2:	685b      	ldr	r3, [r3, #4]
 80109f4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80109f6:	8c3b      	ldrh	r3, [r7, #32]
 80109f8:	4618      	mov	r0, r3
 80109fa:	f7f9 fa6d 	bl	8009ed8 <lwip_htons>
 80109fe:	4603      	mov	r3, r0
 8010a00:	461a      	mov	r2, r3
 8010a02:	693b      	ldr	r3, [r7, #16]
 8010a04:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010a06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f7f9 fa65 	bl	8009ed8 <lwip_htons>
 8010a0e:	4603      	mov	r3, r0
 8010a10:	461a      	mov	r2, r3
 8010a12:	693b      	ldr	r3, [r7, #16]
 8010a14:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010a16:	693b      	ldr	r3, [r7, #16]
 8010a18:	687a      	ldr	r2, [r7, #4]
 8010a1a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010a1c:	68f8      	ldr	r0, [r7, #12]
 8010a1e:	f7f9 fa71 	bl	8009f04 <lwip_htonl>
 8010a22:	4602      	mov	r2, r0
 8010a24:	693b      	ldr	r3, [r7, #16]
 8010a26:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010a28:	897b      	ldrh	r3, [r7, #10]
 8010a2a:	089b      	lsrs	r3, r3, #2
 8010a2c:	b29b      	uxth	r3, r3
 8010a2e:	3305      	adds	r3, #5
 8010a30:	b29b      	uxth	r3, r3
 8010a32:	031b      	lsls	r3, r3, #12
 8010a34:	b29a      	uxth	r2, r3
 8010a36:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010a3a:	b29b      	uxth	r3, r3
 8010a3c:	4313      	orrs	r3, r2
 8010a3e:	b29b      	uxth	r3, r3
 8010a40:	4618      	mov	r0, r3
 8010a42:	f7f9 fa49 	bl	8009ed8 <lwip_htons>
 8010a46:	4603      	mov	r3, r0
 8010a48:	461a      	mov	r2, r3
 8010a4a:	693b      	ldr	r3, [r7, #16]
 8010a4c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010a4e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010a50:	4618      	mov	r0, r3
 8010a52:	f7f9 fa41 	bl	8009ed8 <lwip_htons>
 8010a56:	4603      	mov	r3, r0
 8010a58:	461a      	mov	r2, r3
 8010a5a:	693b      	ldr	r3, [r7, #16]
 8010a5c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010a5e:	693b      	ldr	r3, [r7, #16]
 8010a60:	2200      	movs	r2, #0
 8010a62:	741a      	strb	r2, [r3, #16]
 8010a64:	2200      	movs	r2, #0
 8010a66:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010a68:	693b      	ldr	r3, [r7, #16]
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	749a      	strb	r2, [r3, #18]
 8010a6e:	2200      	movs	r2, #0
 8010a70:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010a72:	697b      	ldr	r3, [r7, #20]
}
 8010a74:	4618      	mov	r0, r3
 8010a76:	3718      	adds	r7, #24
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	bd80      	pop	{r7, pc}
 8010a7c:	08017860 	.word	0x08017860
 8010a80:	08017f94 	.word	0x08017f94
 8010a84:	080178b4 	.word	0x080178b4

08010a88 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010a88:	b5b0      	push	{r4, r5, r7, lr}
 8010a8a:	b08a      	sub	sp, #40	@ 0x28
 8010a8c:	af04      	add	r7, sp, #16
 8010a8e:	60f8      	str	r0, [r7, #12]
 8010a90:	607b      	str	r3, [r7, #4]
 8010a92:	460b      	mov	r3, r1
 8010a94:	817b      	strh	r3, [r7, #10]
 8010a96:	4613      	mov	r3, r2
 8010a98:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d106      	bne.n	8010aae <tcp_output_alloc_header+0x26>
 8010aa0:	4b15      	ldr	r3, [pc, #84]	@ (8010af8 <tcp_output_alloc_header+0x70>)
 8010aa2:	f240 7242 	movw	r2, #1858	@ 0x742
 8010aa6:	4915      	ldr	r1, [pc, #84]	@ (8010afc <tcp_output_alloc_header+0x74>)
 8010aa8:	4815      	ldr	r0, [pc, #84]	@ (8010b00 <tcp_output_alloc_header+0x78>)
 8010aaa:	f004 fa1d 	bl	8014ee8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	8adb      	ldrh	r3, [r3, #22]
 8010ab6:	68fa      	ldr	r2, [r7, #12]
 8010ab8:	8b12      	ldrh	r2, [r2, #24]
 8010aba:	68f9      	ldr	r1, [r7, #12]
 8010abc:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8010abe:	893d      	ldrh	r5, [r7, #8]
 8010ac0:	897c      	ldrh	r4, [r7, #10]
 8010ac2:	9103      	str	r1, [sp, #12]
 8010ac4:	2110      	movs	r1, #16
 8010ac6:	9102      	str	r1, [sp, #8]
 8010ac8:	9201      	str	r2, [sp, #4]
 8010aca:	9300      	str	r3, [sp, #0]
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	462a      	mov	r2, r5
 8010ad0:	4621      	mov	r1, r4
 8010ad2:	f7ff ff67 	bl	80109a4 <tcp_output_alloc_header_common>
 8010ad6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010ad8:	697b      	ldr	r3, [r7, #20]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d006      	beq.n	8010aec <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ae2:	68fa      	ldr	r2, [r7, #12]
 8010ae4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8010ae6:	441a      	add	r2, r3
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8010aec:	697b      	ldr	r3, [r7, #20]
}
 8010aee:	4618      	mov	r0, r3
 8010af0:	3718      	adds	r7, #24
 8010af2:	46bd      	mov	sp, r7
 8010af4:	bdb0      	pop	{r4, r5, r7, pc}
 8010af6:	bf00      	nop
 8010af8:	08017860 	.word	0x08017860
 8010afc:	08017fc4 	.word	0x08017fc4
 8010b00:	080178b4 	.word	0x080178b4

08010b04 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b088      	sub	sp, #32
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	60f8      	str	r0, [r7, #12]
 8010b0c:	60b9      	str	r1, [r7, #8]
 8010b0e:	4611      	mov	r1, r2
 8010b10:	461a      	mov	r2, r3
 8010b12:	460b      	mov	r3, r1
 8010b14:	71fb      	strb	r3, [r7, #7]
 8010b16:	4613      	mov	r3, r2
 8010b18:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010b1e:	68bb      	ldr	r3, [r7, #8]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d106      	bne.n	8010b32 <tcp_output_fill_options+0x2e>
 8010b24:	4b12      	ldr	r3, [pc, #72]	@ (8010b70 <tcp_output_fill_options+0x6c>)
 8010b26:	f240 7256 	movw	r2, #1878	@ 0x756
 8010b2a:	4912      	ldr	r1, [pc, #72]	@ (8010b74 <tcp_output_fill_options+0x70>)
 8010b2c:	4812      	ldr	r0, [pc, #72]	@ (8010b78 <tcp_output_fill_options+0x74>)
 8010b2e:	f004 f9db 	bl	8014ee8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010b32:	68bb      	ldr	r3, [r7, #8]
 8010b34:	685b      	ldr	r3, [r3, #4]
 8010b36:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010b38:	69bb      	ldr	r3, [r7, #24]
 8010b3a:	3314      	adds	r3, #20
 8010b3c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010b3e:	8bfb      	ldrh	r3, [r7, #30]
 8010b40:	009b      	lsls	r3, r3, #2
 8010b42:	461a      	mov	r2, r3
 8010b44:	79fb      	ldrb	r3, [r7, #7]
 8010b46:	009b      	lsls	r3, r3, #2
 8010b48:	f003 0304 	and.w	r3, r3, #4
 8010b4c:	4413      	add	r3, r2
 8010b4e:	3314      	adds	r3, #20
 8010b50:	69ba      	ldr	r2, [r7, #24]
 8010b52:	4413      	add	r3, r2
 8010b54:	697a      	ldr	r2, [r7, #20]
 8010b56:	429a      	cmp	r2, r3
 8010b58:	d006      	beq.n	8010b68 <tcp_output_fill_options+0x64>
 8010b5a:	4b05      	ldr	r3, [pc, #20]	@ (8010b70 <tcp_output_fill_options+0x6c>)
 8010b5c:	f240 7275 	movw	r2, #1909	@ 0x775
 8010b60:	4906      	ldr	r1, [pc, #24]	@ (8010b7c <tcp_output_fill_options+0x78>)
 8010b62:	4805      	ldr	r0, [pc, #20]	@ (8010b78 <tcp_output_fill_options+0x74>)
 8010b64:	f004 f9c0 	bl	8014ee8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010b68:	bf00      	nop
 8010b6a:	3720      	adds	r7, #32
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}
 8010b70:	08017860 	.word	0x08017860
 8010b74:	08017fec 	.word	0x08017fec
 8010b78:	080178b4 	.word	0x080178b4
 8010b7c:	08017ee4 	.word	0x08017ee4

08010b80 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b08a      	sub	sp, #40	@ 0x28
 8010b84:	af04      	add	r7, sp, #16
 8010b86:	60f8      	str	r0, [r7, #12]
 8010b88:	60b9      	str	r1, [r7, #8]
 8010b8a:	607a      	str	r2, [r7, #4]
 8010b8c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010b8e:	68bb      	ldr	r3, [r7, #8]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d106      	bne.n	8010ba2 <tcp_output_control_segment+0x22>
 8010b94:	4b1c      	ldr	r3, [pc, #112]	@ (8010c08 <tcp_output_control_segment+0x88>)
 8010b96:	f240 7287 	movw	r2, #1927	@ 0x787
 8010b9a:	491c      	ldr	r1, [pc, #112]	@ (8010c0c <tcp_output_control_segment+0x8c>)
 8010b9c:	481c      	ldr	r0, [pc, #112]	@ (8010c10 <tcp_output_control_segment+0x90>)
 8010b9e:	f004 f9a3 	bl	8014ee8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010ba2:	683a      	ldr	r2, [r7, #0]
 8010ba4:	6879      	ldr	r1, [r7, #4]
 8010ba6:	68f8      	ldr	r0, [r7, #12]
 8010ba8:	f7fe ff2e 	bl	800fa08 <tcp_route>
 8010bac:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010bae:	693b      	ldr	r3, [r7, #16]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d102      	bne.n	8010bba <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010bb4:	23fc      	movs	r3, #252	@ 0xfc
 8010bb6:	75fb      	strb	r3, [r7, #23]
 8010bb8:	e01c      	b.n	8010bf4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d006      	beq.n	8010bce <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	7adb      	ldrb	r3, [r3, #11]
 8010bc4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	7a9b      	ldrb	r3, [r3, #10]
 8010bca:	757b      	strb	r3, [r7, #21]
 8010bcc:	e003      	b.n	8010bd6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010bce:	23ff      	movs	r3, #255	@ 0xff
 8010bd0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010bd6:	7dba      	ldrb	r2, [r7, #22]
 8010bd8:	693b      	ldr	r3, [r7, #16]
 8010bda:	9302      	str	r3, [sp, #8]
 8010bdc:	2306      	movs	r3, #6
 8010bde:	9301      	str	r3, [sp, #4]
 8010be0:	7d7b      	ldrb	r3, [r7, #21]
 8010be2:	9300      	str	r3, [sp, #0]
 8010be4:	4613      	mov	r3, r2
 8010be6:	683a      	ldr	r2, [r7, #0]
 8010be8:	6879      	ldr	r1, [r7, #4]
 8010bea:	68b8      	ldr	r0, [r7, #8]
 8010bec:	f002 fcf0 	bl	80135d0 <ip4_output_if>
 8010bf0:	4603      	mov	r3, r0
 8010bf2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010bf4:	68b8      	ldr	r0, [r7, #8]
 8010bf6:	f7fa fdbf 	bl	800b778 <pbuf_free>
  return err;
 8010bfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010bfe:	4618      	mov	r0, r3
 8010c00:	3718      	adds	r7, #24
 8010c02:	46bd      	mov	sp, r7
 8010c04:	bd80      	pop	{r7, pc}
 8010c06:	bf00      	nop
 8010c08:	08017860 	.word	0x08017860
 8010c0c:	08018014 	.word	0x08018014
 8010c10:	080178b4 	.word	0x080178b4

08010c14 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010c14:	b590      	push	{r4, r7, lr}
 8010c16:	b08b      	sub	sp, #44	@ 0x2c
 8010c18:	af04      	add	r7, sp, #16
 8010c1a:	60f8      	str	r0, [r7, #12]
 8010c1c:	60b9      	str	r1, [r7, #8]
 8010c1e:	607a      	str	r2, [r7, #4]
 8010c20:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010c22:	683b      	ldr	r3, [r7, #0]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d106      	bne.n	8010c36 <tcp_rst+0x22>
 8010c28:	4b1f      	ldr	r3, [pc, #124]	@ (8010ca8 <tcp_rst+0x94>)
 8010c2a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8010c2e:	491f      	ldr	r1, [pc, #124]	@ (8010cac <tcp_rst+0x98>)
 8010c30:	481f      	ldr	r0, [pc, #124]	@ (8010cb0 <tcp_rst+0x9c>)
 8010c32:	f004 f959 	bl	8014ee8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d106      	bne.n	8010c4a <tcp_rst+0x36>
 8010c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8010ca8 <tcp_rst+0x94>)
 8010c3e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8010c42:	491c      	ldr	r1, [pc, #112]	@ (8010cb4 <tcp_rst+0xa0>)
 8010c44:	481a      	ldr	r0, [pc, #104]	@ (8010cb0 <tcp_rst+0x9c>)
 8010c46:	f004 f94f 	bl	8014ee8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010c4e:	f246 0308 	movw	r3, #24584	@ 0x6008
 8010c52:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010c54:	7dfb      	ldrb	r3, [r7, #23]
 8010c56:	b29c      	uxth	r4, r3
 8010c58:	68b8      	ldr	r0, [r7, #8]
 8010c5a:	f7f9 f953 	bl	8009f04 <lwip_htonl>
 8010c5e:	4602      	mov	r2, r0
 8010c60:	8abb      	ldrh	r3, [r7, #20]
 8010c62:	9303      	str	r3, [sp, #12]
 8010c64:	2314      	movs	r3, #20
 8010c66:	9302      	str	r3, [sp, #8]
 8010c68:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8010c6a:	9301      	str	r3, [sp, #4]
 8010c6c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010c6e:	9300      	str	r3, [sp, #0]
 8010c70:	4613      	mov	r3, r2
 8010c72:	2200      	movs	r2, #0
 8010c74:	4621      	mov	r1, r4
 8010c76:	6878      	ldr	r0, [r7, #4]
 8010c78:	f7ff fe94 	bl	80109a4 <tcp_output_alloc_header_common>
 8010c7c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010c7e:	693b      	ldr	r3, [r7, #16]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d00c      	beq.n	8010c9e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010c84:	7dfb      	ldrb	r3, [r7, #23]
 8010c86:	2200      	movs	r2, #0
 8010c88:	6939      	ldr	r1, [r7, #16]
 8010c8a:	68f8      	ldr	r0, [r7, #12]
 8010c8c:	f7ff ff3a 	bl	8010b04 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c92:	683a      	ldr	r2, [r7, #0]
 8010c94:	6939      	ldr	r1, [r7, #16]
 8010c96:	68f8      	ldr	r0, [r7, #12]
 8010c98:	f7ff ff72 	bl	8010b80 <tcp_output_control_segment>
 8010c9c:	e000      	b.n	8010ca0 <tcp_rst+0x8c>
    return;
 8010c9e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010ca0:	371c      	adds	r7, #28
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	bd90      	pop	{r4, r7, pc}
 8010ca6:	bf00      	nop
 8010ca8:	08017860 	.word	0x08017860
 8010cac:	08018040 	.word	0x08018040
 8010cb0:	080178b4 	.word	0x080178b4
 8010cb4:	0801805c 	.word	0x0801805c

08010cb8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010cb8:	b590      	push	{r4, r7, lr}
 8010cba:	b087      	sub	sp, #28
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d106      	bne.n	8010cdc <tcp_send_empty_ack+0x24>
 8010cce:	4b28      	ldr	r3, [pc, #160]	@ (8010d70 <tcp_send_empty_ack+0xb8>)
 8010cd0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8010cd4:	4927      	ldr	r1, [pc, #156]	@ (8010d74 <tcp_send_empty_ack+0xbc>)
 8010cd6:	4828      	ldr	r0, [pc, #160]	@ (8010d78 <tcp_send_empty_ack+0xc0>)
 8010cd8:	f004 f906 	bl	8014ee8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010cdc:	7dfb      	ldrb	r3, [r7, #23]
 8010cde:	009b      	lsls	r3, r3, #2
 8010ce0:	b2db      	uxtb	r3, r3
 8010ce2:	f003 0304 	and.w	r3, r3, #4
 8010ce6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010ce8:	7d7b      	ldrb	r3, [r7, #21]
 8010cea:	b29c      	uxth	r4, r3
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f7f9 f907 	bl	8009f04 <lwip_htonl>
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	4621      	mov	r1, r4
 8010cfc:	6878      	ldr	r0, [r7, #4]
 8010cfe:	f7ff fec3 	bl	8010a88 <tcp_output_alloc_header>
 8010d02:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010d04:	693b      	ldr	r3, [r7, #16]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d109      	bne.n	8010d1e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	8b5b      	ldrh	r3, [r3, #26]
 8010d0e:	f043 0303 	orr.w	r3, r3, #3
 8010d12:	b29a      	uxth	r2, r3
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010d18:	f06f 0301 	mvn.w	r3, #1
 8010d1c:	e023      	b.n	8010d66 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010d1e:	7dbb      	ldrb	r3, [r7, #22]
 8010d20:	7dfa      	ldrb	r2, [r7, #23]
 8010d22:	6939      	ldr	r1, [r7, #16]
 8010d24:	6878      	ldr	r0, [r7, #4]
 8010d26:	f7ff feed 	bl	8010b04 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010d2a:	687a      	ldr	r2, [r7, #4]
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	3304      	adds	r3, #4
 8010d30:	6939      	ldr	r1, [r7, #16]
 8010d32:	6878      	ldr	r0, [r7, #4]
 8010d34:	f7ff ff24 	bl	8010b80 <tcp_output_control_segment>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d007      	beq.n	8010d54 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	8b5b      	ldrh	r3, [r3, #26]
 8010d48:	f043 0303 	orr.w	r3, r3, #3
 8010d4c:	b29a      	uxth	r2, r3
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	835a      	strh	r2, [r3, #26]
 8010d52:	e006      	b.n	8010d62 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	8b5b      	ldrh	r3, [r3, #26]
 8010d58:	f023 0303 	bic.w	r3, r3, #3
 8010d5c:	b29a      	uxth	r2, r3
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8010d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010d66:	4618      	mov	r0, r3
 8010d68:	371c      	adds	r7, #28
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	bd90      	pop	{r4, r7, pc}
 8010d6e:	bf00      	nop
 8010d70:	08017860 	.word	0x08017860
 8010d74:	08018078 	.word	0x08018078
 8010d78:	080178b4 	.word	0x080178b4

08010d7c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010d7c:	b590      	push	{r4, r7, lr}
 8010d7e:	b085      	sub	sp, #20
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010d84:	2300      	movs	r3, #0
 8010d86:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d106      	bne.n	8010d9c <tcp_keepalive+0x20>
 8010d8e:	4b18      	ldr	r3, [pc, #96]	@ (8010df0 <tcp_keepalive+0x74>)
 8010d90:	f640 0224 	movw	r2, #2084	@ 0x824
 8010d94:	4917      	ldr	r1, [pc, #92]	@ (8010df4 <tcp_keepalive+0x78>)
 8010d96:	4818      	ldr	r0, [pc, #96]	@ (8010df8 <tcp_keepalive+0x7c>)
 8010d98:	f004 f8a6 	bl	8014ee8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010d9c:	7abb      	ldrb	r3, [r7, #10]
 8010d9e:	b29c      	uxth	r4, r3
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010da4:	3b01      	subs	r3, #1
 8010da6:	4618      	mov	r0, r3
 8010da8:	f7f9 f8ac 	bl	8009f04 <lwip_htonl>
 8010dac:	4603      	mov	r3, r0
 8010dae:	2200      	movs	r2, #0
 8010db0:	4621      	mov	r1, r4
 8010db2:	6878      	ldr	r0, [r7, #4]
 8010db4:	f7ff fe68 	bl	8010a88 <tcp_output_alloc_header>
 8010db8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d102      	bne.n	8010dc6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8010dc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010dc4:	e010      	b.n	8010de8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010dc6:	7abb      	ldrb	r3, [r7, #10]
 8010dc8:	2200      	movs	r2, #0
 8010dca:	68f9      	ldr	r1, [r7, #12]
 8010dcc:	6878      	ldr	r0, [r7, #4]
 8010dce:	f7ff fe99 	bl	8010b04 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010dd2:	687a      	ldr	r2, [r7, #4]
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	3304      	adds	r3, #4
 8010dd8:	68f9      	ldr	r1, [r7, #12]
 8010dda:	6878      	ldr	r0, [r7, #4]
 8010ddc:	f7ff fed0 	bl	8010b80 <tcp_output_control_segment>
 8010de0:	4603      	mov	r3, r0
 8010de2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010de4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010de8:	4618      	mov	r0, r3
 8010dea:	3714      	adds	r7, #20
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bd90      	pop	{r4, r7, pc}
 8010df0:	08017860 	.word	0x08017860
 8010df4:	08018098 	.word	0x08018098
 8010df8:	080178b4 	.word	0x080178b4

08010dfc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010dfc:	b590      	push	{r4, r7, lr}
 8010dfe:	b08b      	sub	sp, #44	@ 0x2c
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010e04:	2300      	movs	r3, #0
 8010e06:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d106      	bne.n	8010e1c <tcp_zero_window_probe+0x20>
 8010e0e:	4b4d      	ldr	r3, [pc, #308]	@ (8010f44 <tcp_zero_window_probe+0x148>)
 8010e10:	f640 024f 	movw	r2, #2127	@ 0x84f
 8010e14:	494c      	ldr	r1, [pc, #304]	@ (8010f48 <tcp_zero_window_probe+0x14c>)
 8010e16:	484d      	ldr	r0, [pc, #308]	@ (8010f4c <tcp_zero_window_probe+0x150>)
 8010e18:	f004 f866 	bl	8014ee8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010e20:	627b      	str	r3, [r7, #36]	@ 0x24
  if (seg == NULL) {
 8010e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d101      	bne.n	8010e2c <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8010e28:	2300      	movs	r3, #0
 8010e2a:	e087      	b.n	8010f3c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8010e32:	2bff      	cmp	r3, #255	@ 0xff
 8010e34:	d007      	beq.n	8010e46 <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8010e3c:	3301      	adds	r3, #1
 8010e3e:	b2da      	uxtb	r2, r3
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e48:	691b      	ldr	r3, [r3, #16]
 8010e4a:	899b      	ldrh	r3, [r3, #12]
 8010e4c:	b29b      	uxth	r3, r3
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f7f9 f842 	bl	8009ed8 <lwip_htons>
 8010e54:	4603      	mov	r3, r0
 8010e56:	b2db      	uxtb	r3, r3
 8010e58:	f003 0301 	and.w	r3, r3, #1
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d005      	beq.n	8010e6c <tcp_zero_window_probe+0x70>
 8010e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e62:	891b      	ldrh	r3, [r3, #8]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d101      	bne.n	8010e6c <tcp_zero_window_probe+0x70>
 8010e68:	2301      	movs	r3, #1
 8010e6a:	e000      	b.n	8010e6e <tcp_zero_window_probe+0x72>
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8010e72:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	bf0c      	ite	eq
 8010e7a:	2301      	moveq	r3, #1
 8010e7c:	2300      	movne	r3, #0
 8010e7e:	b2db      	uxtb	r3, r3
 8010e80:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010e82:	7cfb      	ldrb	r3, [r7, #19]
 8010e84:	b299      	uxth	r1, r3
 8010e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e88:	691b      	ldr	r3, [r3, #16]
 8010e8a:	685b      	ldr	r3, [r3, #4]
 8010e8c:	8c3a      	ldrh	r2, [r7, #32]
 8010e8e:	6878      	ldr	r0, [r7, #4]
 8010e90:	f7ff fdfa 	bl	8010a88 <tcp_output_alloc_header>
 8010e94:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8010e96:	69fb      	ldr	r3, [r7, #28]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d102      	bne.n	8010ea2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010e9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010ea0:	e04c      	b.n	8010f3c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8010ea2:	69fb      	ldr	r3, [r7, #28]
 8010ea4:	685b      	ldr	r3, [r3, #4]
 8010ea6:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 8010ea8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d011      	beq.n	8010ed4 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010eb0:	69bb      	ldr	r3, [r7, #24]
 8010eb2:	899b      	ldrh	r3, [r3, #12]
 8010eb4:	b29b      	uxth	r3, r3
 8010eb6:	b21b      	sxth	r3, r3
 8010eb8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8010ebc:	b21c      	sxth	r4, r3
 8010ebe:	2011      	movs	r0, #17
 8010ec0:	f7f9 f80a 	bl	8009ed8 <lwip_htons>
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	b21b      	sxth	r3, r3
 8010ec8:	4323      	orrs	r3, r4
 8010eca:	b21b      	sxth	r3, r3
 8010ecc:	b29a      	uxth	r2, r3
 8010ece:	69bb      	ldr	r3, [r7, #24]
 8010ed0:	819a      	strh	r2, [r3, #12]
 8010ed2:	e010      	b.n	8010ef6 <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8010ed4:	69fb      	ldr	r3, [r7, #28]
 8010ed6:	685b      	ldr	r3, [r3, #4]
 8010ed8:	3314      	adds	r3, #20
 8010eda:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ede:	6858      	ldr	r0, [r3, #4]
 8010ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ee2:	685b      	ldr	r3, [r3, #4]
 8010ee4:	891a      	ldrh	r2, [r3, #8]
 8010ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ee8:	891b      	ldrh	r3, [r3, #8]
 8010eea:	1ad3      	subs	r3, r2, r3
 8010eec:	b29b      	uxth	r3, r3
 8010eee:	2201      	movs	r2, #1
 8010ef0:	6979      	ldr	r1, [r7, #20]
 8010ef2:	f7fa fe3b 	bl	800bb6c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ef8:	691b      	ldr	r3, [r3, #16]
 8010efa:	685b      	ldr	r3, [r3, #4]
 8010efc:	4618      	mov	r0, r3
 8010efe:	f7f9 f801 	bl	8009f04 <lwip_htonl>
 8010f02:	4603      	mov	r3, r0
 8010f04:	3301      	adds	r3, #1
 8010f06:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	1ad3      	subs	r3, r2, r3
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	da02      	bge.n	8010f1a <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	68fa      	ldr	r2, [r7, #12]
 8010f18:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010f1a:	7cfb      	ldrb	r3, [r7, #19]
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	69f9      	ldr	r1, [r7, #28]
 8010f20:	6878      	ldr	r0, [r7, #4]
 8010f22:	f7ff fdef 	bl	8010b04 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010f26:	687a      	ldr	r2, [r7, #4]
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	3304      	adds	r3, #4
 8010f2c:	69f9      	ldr	r1, [r7, #28]
 8010f2e:	6878      	ldr	r0, [r7, #4]
 8010f30:	f7ff fe26 	bl	8010b80 <tcp_output_control_segment>
 8010f34:	4603      	mov	r3, r0
 8010f36:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010f38:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	372c      	adds	r7, #44	@ 0x2c
 8010f40:	46bd      	mov	sp, r7
 8010f42:	bd90      	pop	{r4, r7, pc}
 8010f44:	08017860 	.word	0x08017860
 8010f48:	080180b4 	.word	0x080180b4
 8010f4c:	080178b4 	.word	0x080178b4

08010f50 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b082      	sub	sp, #8
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010f58:	f7fa fef6 	bl	800bd48 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8010f88 <tcpip_tcp_timer+0x38>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d103      	bne.n	8010f6c <tcpip_tcp_timer+0x1c>
 8010f64:	4b09      	ldr	r3, [pc, #36]	@ (8010f8c <tcpip_tcp_timer+0x3c>)
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d005      	beq.n	8010f78 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010f6c:	2200      	movs	r2, #0
 8010f6e:	4908      	ldr	r1, [pc, #32]	@ (8010f90 <tcpip_tcp_timer+0x40>)
 8010f70:	20fa      	movs	r0, #250	@ 0xfa
 8010f72:	f000 f8f3 	bl	801115c <sys_timeout>
 8010f76:	e003      	b.n	8010f80 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010f78:	4b06      	ldr	r3, [pc, #24]	@ (8010f94 <tcpip_tcp_timer+0x44>)
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	601a      	str	r2, [r3, #0]
  }
}
 8010f7e:	bf00      	nop
 8010f80:	bf00      	nop
 8010f82:	3708      	adds	r7, #8
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd80      	pop	{r7, pc}
 8010f88:	20008368 	.word	0x20008368
 8010f8c:	2000836c 	.word	0x2000836c
 8010f90:	08010f51 	.word	0x08010f51
 8010f94:	200083b8 	.word	0x200083b8

08010f98 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8010fc8 <tcp_timer_needed+0x30>)
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d10f      	bne.n	8010fc4 <tcp_timer_needed+0x2c>
 8010fa4:	4b09      	ldr	r3, [pc, #36]	@ (8010fcc <tcp_timer_needed+0x34>)
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d103      	bne.n	8010fb4 <tcp_timer_needed+0x1c>
 8010fac:	4b08      	ldr	r3, [pc, #32]	@ (8010fd0 <tcp_timer_needed+0x38>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d007      	beq.n	8010fc4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8010fb4:	4b04      	ldr	r3, [pc, #16]	@ (8010fc8 <tcp_timer_needed+0x30>)
 8010fb6:	2201      	movs	r2, #1
 8010fb8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010fba:	2200      	movs	r2, #0
 8010fbc:	4905      	ldr	r1, [pc, #20]	@ (8010fd4 <tcp_timer_needed+0x3c>)
 8010fbe:	20fa      	movs	r0, #250	@ 0xfa
 8010fc0:	f000 f8cc 	bl	801115c <sys_timeout>
  }
}
 8010fc4:	bf00      	nop
 8010fc6:	bd80      	pop	{r7, pc}
 8010fc8:	200083b8 	.word	0x200083b8
 8010fcc:	20008368 	.word	0x20008368
 8010fd0:	2000836c 	.word	0x2000836c
 8010fd4:	08010f51 	.word	0x08010f51

08010fd8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b086      	sub	sp, #24
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	60f8      	str	r0, [r7, #12]
 8010fe0:	60b9      	str	r1, [r7, #8]
 8010fe2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010fe4:	2006      	movs	r0, #6
 8010fe6:	f7f9 fbeb 	bl	800a7c0 <memp_malloc>
 8010fea:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8010fec:	693b      	ldr	r3, [r7, #16]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d109      	bne.n	8011006 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010ff2:	693b      	ldr	r3, [r7, #16]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d151      	bne.n	801109c <sys_timeout_abs+0xc4>
 8010ff8:	4b2a      	ldr	r3, [pc, #168]	@ (80110a4 <sys_timeout_abs+0xcc>)
 8010ffa:	22be      	movs	r2, #190	@ 0xbe
 8010ffc:	492a      	ldr	r1, [pc, #168]	@ (80110a8 <sys_timeout_abs+0xd0>)
 8010ffe:	482b      	ldr	r0, [pc, #172]	@ (80110ac <sys_timeout_abs+0xd4>)
 8011000:	f003 ff72 	bl	8014ee8 <iprintf>
    return;
 8011004:	e04a      	b.n	801109c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011006:	693b      	ldr	r3, [r7, #16]
 8011008:	2200      	movs	r2, #0
 801100a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801100c:	693b      	ldr	r3, [r7, #16]
 801100e:	68ba      	ldr	r2, [r7, #8]
 8011010:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011012:	693b      	ldr	r3, [r7, #16]
 8011014:	687a      	ldr	r2, [r7, #4]
 8011016:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011018:	693b      	ldr	r3, [r7, #16]
 801101a:	68fa      	ldr	r2, [r7, #12]
 801101c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801101e:	4b24      	ldr	r3, [pc, #144]	@ (80110b0 <sys_timeout_abs+0xd8>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d103      	bne.n	801102e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011026:	4a22      	ldr	r2, [pc, #136]	@ (80110b0 <sys_timeout_abs+0xd8>)
 8011028:	693b      	ldr	r3, [r7, #16]
 801102a:	6013      	str	r3, [r2, #0]
    return;
 801102c:	e037      	b.n	801109e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801102e:	693b      	ldr	r3, [r7, #16]
 8011030:	685a      	ldr	r2, [r3, #4]
 8011032:	4b1f      	ldr	r3, [pc, #124]	@ (80110b0 <sys_timeout_abs+0xd8>)
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	685b      	ldr	r3, [r3, #4]
 8011038:	1ad3      	subs	r3, r2, r3
 801103a:	0fdb      	lsrs	r3, r3, #31
 801103c:	f003 0301 	and.w	r3, r3, #1
 8011040:	b2db      	uxtb	r3, r3
 8011042:	2b00      	cmp	r3, #0
 8011044:	d007      	beq.n	8011056 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011046:	4b1a      	ldr	r3, [pc, #104]	@ (80110b0 <sys_timeout_abs+0xd8>)
 8011048:	681a      	ldr	r2, [r3, #0]
 801104a:	693b      	ldr	r3, [r7, #16]
 801104c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801104e:	4a18      	ldr	r2, [pc, #96]	@ (80110b0 <sys_timeout_abs+0xd8>)
 8011050:	693b      	ldr	r3, [r7, #16]
 8011052:	6013      	str	r3, [r2, #0]
 8011054:	e023      	b.n	801109e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011056:	4b16      	ldr	r3, [pc, #88]	@ (80110b0 <sys_timeout_abs+0xd8>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	617b      	str	r3, [r7, #20]
 801105c:	e01a      	b.n	8011094 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801105e:	697b      	ldr	r3, [r7, #20]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d00b      	beq.n	801107e <sys_timeout_abs+0xa6>
 8011066:	693b      	ldr	r3, [r7, #16]
 8011068:	685a      	ldr	r2, [r3, #4]
 801106a:	697b      	ldr	r3, [r7, #20]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	685b      	ldr	r3, [r3, #4]
 8011070:	1ad3      	subs	r3, r2, r3
 8011072:	0fdb      	lsrs	r3, r3, #31
 8011074:	f003 0301 	and.w	r3, r3, #1
 8011078:	b2db      	uxtb	r3, r3
 801107a:	2b00      	cmp	r3, #0
 801107c:	d007      	beq.n	801108e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801107e:	697b      	ldr	r3, [r7, #20]
 8011080:	681a      	ldr	r2, [r3, #0]
 8011082:	693b      	ldr	r3, [r7, #16]
 8011084:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011086:	697b      	ldr	r3, [r7, #20]
 8011088:	693a      	ldr	r2, [r7, #16]
 801108a:	601a      	str	r2, [r3, #0]
        break;
 801108c:	e007      	b.n	801109e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801108e:	697b      	ldr	r3, [r7, #20]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	617b      	str	r3, [r7, #20]
 8011094:	697b      	ldr	r3, [r7, #20]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d1e1      	bne.n	801105e <sys_timeout_abs+0x86>
 801109a:	e000      	b.n	801109e <sys_timeout_abs+0xc6>
    return;
 801109c:	bf00      	nop
      }
    }
  }
}
 801109e:	3718      	adds	r7, #24
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd80      	pop	{r7, pc}
 80110a4:	080180d8 	.word	0x080180d8
 80110a8:	0801810c 	.word	0x0801810c
 80110ac:	0801814c 	.word	0x0801814c
 80110b0:	200083b0 	.word	0x200083b0

080110b4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b086      	sub	sp, #24
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80110c0:	697b      	ldr	r3, [r7, #20]
 80110c2:	685b      	ldr	r3, [r3, #4]
 80110c4:	4798      	blx	r3

  now = sys_now();
 80110c6:	f7f8 fccb 	bl	8009a60 <sys_now>
 80110ca:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80110cc:	697b      	ldr	r3, [r7, #20]
 80110ce:	681a      	ldr	r2, [r3, #0]
 80110d0:	4b0f      	ldr	r3, [pc, #60]	@ (8011110 <lwip_cyclic_timer+0x5c>)
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	4413      	add	r3, r2
 80110d6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80110d8:	68fa      	ldr	r2, [r7, #12]
 80110da:	693b      	ldr	r3, [r7, #16]
 80110dc:	1ad3      	subs	r3, r2, r3
 80110de:	0fdb      	lsrs	r3, r3, #31
 80110e0:	f003 0301 	and.w	r3, r3, #1
 80110e4:	b2db      	uxtb	r3, r3
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d009      	beq.n	80110fe <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80110ea:	697b      	ldr	r3, [r7, #20]
 80110ec:	681a      	ldr	r2, [r3, #0]
 80110ee:	693b      	ldr	r3, [r7, #16]
 80110f0:	4413      	add	r3, r2
 80110f2:	687a      	ldr	r2, [r7, #4]
 80110f4:	4907      	ldr	r1, [pc, #28]	@ (8011114 <lwip_cyclic_timer+0x60>)
 80110f6:	4618      	mov	r0, r3
 80110f8:	f7ff ff6e 	bl	8010fd8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80110fc:	e004      	b.n	8011108 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80110fe:	687a      	ldr	r2, [r7, #4]
 8011100:	4904      	ldr	r1, [pc, #16]	@ (8011114 <lwip_cyclic_timer+0x60>)
 8011102:	68f8      	ldr	r0, [r7, #12]
 8011104:	f7ff ff68 	bl	8010fd8 <sys_timeout_abs>
}
 8011108:	bf00      	nop
 801110a:	3718      	adds	r7, #24
 801110c:	46bd      	mov	sp, r7
 801110e:	bd80      	pop	{r7, pc}
 8011110:	200083b4 	.word	0x200083b4
 8011114:	080110b5 	.word	0x080110b5

08011118 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011118:	b580      	push	{r7, lr}
 801111a:	b082      	sub	sp, #8
 801111c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801111e:	2301      	movs	r3, #1
 8011120:	607b      	str	r3, [r7, #4]
 8011122:	e00e      	b.n	8011142 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011124:	4a0b      	ldr	r2, [pc, #44]	@ (8011154 <sys_timeouts_init+0x3c>)
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	00db      	lsls	r3, r3, #3
 8011130:	4a08      	ldr	r2, [pc, #32]	@ (8011154 <sys_timeouts_init+0x3c>)
 8011132:	4413      	add	r3, r2
 8011134:	461a      	mov	r2, r3
 8011136:	4908      	ldr	r1, [pc, #32]	@ (8011158 <sys_timeouts_init+0x40>)
 8011138:	f000 f810 	bl	801115c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	3301      	adds	r3, #1
 8011140:	607b      	str	r3, [r7, #4]
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	2b02      	cmp	r3, #2
 8011146:	d9ed      	bls.n	8011124 <sys_timeouts_init+0xc>
  }
}
 8011148:	bf00      	nop
 801114a:	bf00      	nop
 801114c:	3708      	adds	r7, #8
 801114e:	46bd      	mov	sp, r7
 8011150:	bd80      	pop	{r7, pc}
 8011152:	bf00      	nop
 8011154:	0801949c 	.word	0x0801949c
 8011158:	080110b5 	.word	0x080110b5

0801115c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801115c:	b580      	push	{r7, lr}
 801115e:	b086      	sub	sp, #24
 8011160:	af00      	add	r7, sp, #0
 8011162:	60f8      	str	r0, [r7, #12]
 8011164:	60b9      	str	r1, [r7, #8]
 8011166:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801116e:	d306      	bcc.n	801117e <sys_timeout+0x22>
 8011170:	4b0a      	ldr	r3, [pc, #40]	@ (801119c <sys_timeout+0x40>)
 8011172:	f240 1229 	movw	r2, #297	@ 0x129
 8011176:	490a      	ldr	r1, [pc, #40]	@ (80111a0 <sys_timeout+0x44>)
 8011178:	480a      	ldr	r0, [pc, #40]	@ (80111a4 <sys_timeout+0x48>)
 801117a:	f003 feb5 	bl	8014ee8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801117e:	f7f8 fc6f 	bl	8009a60 <sys_now>
 8011182:	4602      	mov	r2, r0
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	4413      	add	r3, r2
 8011188:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801118a:	687a      	ldr	r2, [r7, #4]
 801118c:	68b9      	ldr	r1, [r7, #8]
 801118e:	6978      	ldr	r0, [r7, #20]
 8011190:	f7ff ff22 	bl	8010fd8 <sys_timeout_abs>
#endif
}
 8011194:	bf00      	nop
 8011196:	3718      	adds	r7, #24
 8011198:	46bd      	mov	sp, r7
 801119a:	bd80      	pop	{r7, pc}
 801119c:	080180d8 	.word	0x080180d8
 80111a0:	08018174 	.word	0x08018174
 80111a4:	0801814c 	.word	0x0801814c

080111a8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b084      	sub	sp, #16
 80111ac:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80111ae:	f7f8 fc57 	bl	8009a60 <sys_now>
 80111b2:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 80111b4:	4b1a      	ldr	r3, [pc, #104]	@ (8011220 <sys_check_timeouts+0x78>)
 80111b6:	781b      	ldrb	r3, [r3, #0]
 80111b8:	b2db      	uxtb	r3, r3
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d001      	beq.n	80111c2 <sys_check_timeouts+0x1a>
 80111be:	f7f9 ffa1 	bl	800b104 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 80111c2:	4b18      	ldr	r3, [pc, #96]	@ (8011224 <sys_check_timeouts+0x7c>)
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80111c8:	68bb      	ldr	r3, [r7, #8]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d022      	beq.n	8011214 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80111ce:	68bb      	ldr	r3, [r7, #8]
 80111d0:	685b      	ldr	r3, [r3, #4]
 80111d2:	68fa      	ldr	r2, [r7, #12]
 80111d4:	1ad3      	subs	r3, r2, r3
 80111d6:	0fdb      	lsrs	r3, r3, #31
 80111d8:	f003 0301 	and.w	r3, r3, #1
 80111dc:	b2db      	uxtb	r3, r3
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d11a      	bne.n	8011218 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80111e2:	68bb      	ldr	r3, [r7, #8]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	4a0f      	ldr	r2, [pc, #60]	@ (8011224 <sys_check_timeouts+0x7c>)
 80111e8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80111ea:	68bb      	ldr	r3, [r7, #8]
 80111ec:	689b      	ldr	r3, [r3, #8]
 80111ee:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80111f0:	68bb      	ldr	r3, [r7, #8]
 80111f2:	68db      	ldr	r3, [r3, #12]
 80111f4:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80111f6:	68bb      	ldr	r3, [r7, #8]
 80111f8:	685b      	ldr	r3, [r3, #4]
 80111fa:	4a0b      	ldr	r2, [pc, #44]	@ (8011228 <sys_check_timeouts+0x80>)
 80111fc:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80111fe:	68b9      	ldr	r1, [r7, #8]
 8011200:	2006      	movs	r0, #6
 8011202:	f7f9 fb4d 	bl	800a8a0 <memp_free>
    if (handler != NULL) {
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d0d3      	beq.n	80111b4 <sys_check_timeouts+0xc>
      handler(arg);
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	6838      	ldr	r0, [r7, #0]
 8011210:	4798      	blx	r3
  do {
 8011212:	e7cf      	b.n	80111b4 <sys_check_timeouts+0xc>
      return;
 8011214:	bf00      	nop
 8011216:	e000      	b.n	801121a <sys_check_timeouts+0x72>
      return;
 8011218:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801121a:	3710      	adds	r7, #16
 801121c:	46bd      	mov	sp, r7
 801121e:	bd80      	pop	{r7, pc}
 8011220:	20008359 	.word	0x20008359
 8011224:	200083b0 	.word	0x200083b0
 8011228:	200083b4 	.word	0x200083b4

0801122c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801122c:	b580      	push	{r7, lr}
 801122e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011230:	f003 fd5a 	bl	8014ce8 <rand>
 8011234:	4603      	mov	r3, r0
 8011236:	b29b      	uxth	r3, r3
 8011238:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801123c:	b29b      	uxth	r3, r3
 801123e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8011242:	b29a      	uxth	r2, r3
 8011244:	4b01      	ldr	r3, [pc, #4]	@ (801124c <udp_init+0x20>)
 8011246:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011248:	bf00      	nop
 801124a:	bd80      	pop	{r7, pc}
 801124c:	2000006c 	.word	0x2000006c

08011250 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011250:	b480      	push	{r7}
 8011252:	b083      	sub	sp, #12
 8011254:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011256:	2300      	movs	r3, #0
 8011258:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801125a:	4b17      	ldr	r3, [pc, #92]	@ (80112b8 <udp_new_port+0x68>)
 801125c:	881b      	ldrh	r3, [r3, #0]
 801125e:	1c5a      	adds	r2, r3, #1
 8011260:	b291      	uxth	r1, r2
 8011262:	4a15      	ldr	r2, [pc, #84]	@ (80112b8 <udp_new_port+0x68>)
 8011264:	8011      	strh	r1, [r2, #0]
 8011266:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801126a:	4293      	cmp	r3, r2
 801126c:	d103      	bne.n	8011276 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801126e:	4b12      	ldr	r3, [pc, #72]	@ (80112b8 <udp_new_port+0x68>)
 8011270:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8011274:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011276:	4b11      	ldr	r3, [pc, #68]	@ (80112bc <udp_new_port+0x6c>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	603b      	str	r3, [r7, #0]
 801127c:	e011      	b.n	80112a2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801127e:	683b      	ldr	r3, [r7, #0]
 8011280:	8a5a      	ldrh	r2, [r3, #18]
 8011282:	4b0d      	ldr	r3, [pc, #52]	@ (80112b8 <udp_new_port+0x68>)
 8011284:	881b      	ldrh	r3, [r3, #0]
 8011286:	429a      	cmp	r2, r3
 8011288:	d108      	bne.n	801129c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801128a:	88fb      	ldrh	r3, [r7, #6]
 801128c:	3301      	adds	r3, #1
 801128e:	80fb      	strh	r3, [r7, #6]
 8011290:	88fb      	ldrh	r3, [r7, #6]
 8011292:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011296:	d3e0      	bcc.n	801125a <udp_new_port+0xa>
        return 0;
 8011298:	2300      	movs	r3, #0
 801129a:	e007      	b.n	80112ac <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801129c:	683b      	ldr	r3, [r7, #0]
 801129e:	68db      	ldr	r3, [r3, #12]
 80112a0:	603b      	str	r3, [r7, #0]
 80112a2:	683b      	ldr	r3, [r7, #0]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d1ea      	bne.n	801127e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80112a8:	4b03      	ldr	r3, [pc, #12]	@ (80112b8 <udp_new_port+0x68>)
 80112aa:	881b      	ldrh	r3, [r3, #0]
}
 80112ac:	4618      	mov	r0, r3
 80112ae:	370c      	adds	r7, #12
 80112b0:	46bd      	mov	sp, r7
 80112b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b6:	4770      	bx	lr
 80112b8:	2000006c 	.word	0x2000006c
 80112bc:	200083bc 	.word	0x200083bc

080112c0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b084      	sub	sp, #16
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	60f8      	str	r0, [r7, #12]
 80112c8:	60b9      	str	r1, [r7, #8]
 80112ca:	4613      	mov	r3, r2
 80112cc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d105      	bne.n	80112e0 <udp_input_local_match+0x20>
 80112d4:	4b27      	ldr	r3, [pc, #156]	@ (8011374 <udp_input_local_match+0xb4>)
 80112d6:	2287      	movs	r2, #135	@ 0x87
 80112d8:	4927      	ldr	r1, [pc, #156]	@ (8011378 <udp_input_local_match+0xb8>)
 80112da:	4828      	ldr	r0, [pc, #160]	@ (801137c <udp_input_local_match+0xbc>)
 80112dc:	f003 fe04 	bl	8014ee8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80112e0:	68bb      	ldr	r3, [r7, #8]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d105      	bne.n	80112f2 <udp_input_local_match+0x32>
 80112e6:	4b23      	ldr	r3, [pc, #140]	@ (8011374 <udp_input_local_match+0xb4>)
 80112e8:	2288      	movs	r2, #136	@ 0x88
 80112ea:	4925      	ldr	r1, [pc, #148]	@ (8011380 <udp_input_local_match+0xc0>)
 80112ec:	4823      	ldr	r0, [pc, #140]	@ (801137c <udp_input_local_match+0xbc>)
 80112ee:	f003 fdfb 	bl	8014ee8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	7a1b      	ldrb	r3, [r3, #8]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d00b      	beq.n	8011312 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	7a1a      	ldrb	r2, [r3, #8]
 80112fe:	4b21      	ldr	r3, [pc, #132]	@ (8011384 <udp_input_local_match+0xc4>)
 8011300:	685b      	ldr	r3, [r3, #4]
 8011302:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011306:	3301      	adds	r3, #1
 8011308:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801130a:	429a      	cmp	r2, r3
 801130c:	d001      	beq.n	8011312 <udp_input_local_match+0x52>
    return 0;
 801130e:	2300      	movs	r3, #0
 8011310:	e02b      	b.n	801136a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011312:	79fb      	ldrb	r3, [r7, #7]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d018      	beq.n	801134a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d013      	beq.n	8011346 <udp_input_local_match+0x86>
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d00f      	beq.n	8011346 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011326:	4b17      	ldr	r3, [pc, #92]	@ (8011384 <udp_input_local_match+0xc4>)
 8011328:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801132a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801132e:	d00a      	beq.n	8011346 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	681a      	ldr	r2, [r3, #0]
 8011334:	4b13      	ldr	r3, [pc, #76]	@ (8011384 <udp_input_local_match+0xc4>)
 8011336:	695b      	ldr	r3, [r3, #20]
 8011338:	405a      	eors	r2, r3
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	3308      	adds	r3, #8
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011342:	2b00      	cmp	r3, #0
 8011344:	d110      	bne.n	8011368 <udp_input_local_match+0xa8>
          return 1;
 8011346:	2301      	movs	r3, #1
 8011348:	e00f      	b.n	801136a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d009      	beq.n	8011364 <udp_input_local_match+0xa4>
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d005      	beq.n	8011364 <udp_input_local_match+0xa4>
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	681a      	ldr	r2, [r3, #0]
 801135c:	4b09      	ldr	r3, [pc, #36]	@ (8011384 <udp_input_local_match+0xc4>)
 801135e:	695b      	ldr	r3, [r3, #20]
 8011360:	429a      	cmp	r2, r3
 8011362:	d101      	bne.n	8011368 <udp_input_local_match+0xa8>
        return 1;
 8011364:	2301      	movs	r3, #1
 8011366:	e000      	b.n	801136a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011368:	2300      	movs	r3, #0
}
 801136a:	4618      	mov	r0, r3
 801136c:	3710      	adds	r7, #16
 801136e:	46bd      	mov	sp, r7
 8011370:	bd80      	pop	{r7, pc}
 8011372:	bf00      	nop
 8011374:	080181c0 	.word	0x080181c0
 8011378:	080181f0 	.word	0x080181f0
 801137c:	08018214 	.word	0x08018214
 8011380:	0801823c 	.word	0x0801823c
 8011384:	20005400 	.word	0x20005400

08011388 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011388:	b590      	push	{r4, r7, lr}
 801138a:	b08d      	sub	sp, #52	@ 0x34
 801138c:	af02      	add	r7, sp, #8
 801138e:	6078      	str	r0, [r7, #4]
 8011390:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011392:	2300      	movs	r3, #0
 8011394:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d105      	bne.n	80113a8 <udp_input+0x20>
 801139c:	4b95      	ldr	r3, [pc, #596]	@ (80115f4 <udp_input+0x26c>)
 801139e:	22cf      	movs	r2, #207	@ 0xcf
 80113a0:	4995      	ldr	r1, [pc, #596]	@ (80115f8 <udp_input+0x270>)
 80113a2:	4896      	ldr	r0, [pc, #600]	@ (80115fc <udp_input+0x274>)
 80113a4:	f003 fda0 	bl	8014ee8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80113a8:	683b      	ldr	r3, [r7, #0]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d105      	bne.n	80113ba <udp_input+0x32>
 80113ae:	4b91      	ldr	r3, [pc, #580]	@ (80115f4 <udp_input+0x26c>)
 80113b0:	22d0      	movs	r2, #208	@ 0xd0
 80113b2:	4993      	ldr	r1, [pc, #588]	@ (8011600 <udp_input+0x278>)
 80113b4:	4891      	ldr	r0, [pc, #580]	@ (80115fc <udp_input+0x274>)
 80113b6:	f003 fd97 	bl	8014ee8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	895b      	ldrh	r3, [r3, #10]
 80113be:	2b07      	cmp	r3, #7
 80113c0:	d809      	bhi.n	80113d6 <udp_input+0x4e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	891b      	ldrh	r3, [r3, #8]
 80113c6:	4619      	mov	r1, r3
 80113c8:	488e      	ldr	r0, [pc, #568]	@ (8011604 <udp_input+0x27c>)
 80113ca:	f003 fd8d 	bl	8014ee8 <iprintf>
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80113ce:	6878      	ldr	r0, [r7, #4]
 80113d0:	f7fa f9d2 	bl	800b778 <pbuf_free>
    goto end;
 80113d4:	e18d      	b.n	80116f2 <udp_input+0x36a>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	685b      	ldr	r3, [r3, #4]
 80113da:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80113dc:	4b8a      	ldr	r3, [pc, #552]	@ (8011608 <udp_input+0x280>)
 80113de:	695b      	ldr	r3, [r3, #20]
 80113e0:	4a89      	ldr	r2, [pc, #548]	@ (8011608 <udp_input+0x280>)
 80113e2:	6812      	ldr	r2, [r2, #0]
 80113e4:	4611      	mov	r1, r2
 80113e6:	4618      	mov	r0, r3
 80113e8:	f002 f9ca 	bl	8013780 <ip4_addr_isbroadcast_u32>
 80113ec:	4603      	mov	r3, r0
 80113ee:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	891b      	ldrh	r3, [r3, #8]
 80113f4:	4619      	mov	r1, r3
 80113f6:	4885      	ldr	r0, [pc, #532]	@ (801160c <udp_input+0x284>)
 80113f8:	f003 fd76 	bl	8014ee8 <iprintf>

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80113fc:	697b      	ldr	r3, [r7, #20]
 80113fe:	881b      	ldrh	r3, [r3, #0]
 8011400:	b29b      	uxth	r3, r3
 8011402:	4618      	mov	r0, r3
 8011404:	f7f8 fd68 	bl	8009ed8 <lwip_htons>
 8011408:	4603      	mov	r3, r0
 801140a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801140c:	697b      	ldr	r3, [r7, #20]
 801140e:	885b      	ldrh	r3, [r3, #2]
 8011410:	b29b      	uxth	r3, r3
 8011412:	4618      	mov	r0, r3
 8011414:	f7f8 fd60 	bl	8009ed8 <lwip_htons>
 8011418:	4603      	mov	r3, r0
 801141a:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 801141c:	6978      	ldr	r0, [r7, #20]
 801141e:	f000 fd3b 	bl	8011e98 <udp_debug_print>

  /* print the UDP source and destination */
  LWIP_DEBUGF(UDP_DEBUG, ("udp ("));
 8011422:	487b      	ldr	r0, [pc, #492]	@ (8011610 <udp_input+0x288>)
 8011424:	f003 fd60 	bl	8014ee8 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
 8011428:	4b77      	ldr	r3, [pc, #476]	@ (8011608 <udp_input+0x280>)
 801142a:	695b      	ldr	r3, [r3, #20]
 801142c:	b2db      	uxtb	r3, r3
 801142e:	4619      	mov	r1, r3
 8011430:	4b75      	ldr	r3, [pc, #468]	@ (8011608 <udp_input+0x280>)
 8011432:	695b      	ldr	r3, [r3, #20]
 8011434:	0a1b      	lsrs	r3, r3, #8
 8011436:	b2db      	uxtb	r3, r3
 8011438:	461a      	mov	r2, r3
 801143a:	4b73      	ldr	r3, [pc, #460]	@ (8011608 <udp_input+0x280>)
 801143c:	695b      	ldr	r3, [r3, #20]
 801143e:	0c1b      	lsrs	r3, r3, #16
 8011440:	b2db      	uxtb	r3, r3
 8011442:	4618      	mov	r0, r3
 8011444:	4b70      	ldr	r3, [pc, #448]	@ (8011608 <udp_input+0x280>)
 8011446:	695b      	ldr	r3, [r3, #20]
 8011448:	0e1b      	lsrs	r3, r3, #24
 801144a:	b2db      	uxtb	r3, r3
 801144c:	9300      	str	r3, [sp, #0]
 801144e:	4603      	mov	r3, r0
 8011450:	4870      	ldr	r0, [pc, #448]	@ (8011614 <udp_input+0x28c>)
 8011452:	f003 fd49 	bl	8014ee8 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
 8011456:	697b      	ldr	r3, [r7, #20]
 8011458:	885b      	ldrh	r3, [r3, #2]
 801145a:	b29b      	uxth	r3, r3
 801145c:	4618      	mov	r0, r3
 801145e:	f7f8 fd3b 	bl	8009ed8 <lwip_htons>
 8011462:	4603      	mov	r3, r0
 8011464:	4619      	mov	r1, r3
 8011466:	486c      	ldr	r0, [pc, #432]	@ (8011618 <udp_input+0x290>)
 8011468:	f003 fd3e 	bl	8014ee8 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
 801146c:	4b66      	ldr	r3, [pc, #408]	@ (8011608 <udp_input+0x280>)
 801146e:	691b      	ldr	r3, [r3, #16]
 8011470:	b2db      	uxtb	r3, r3
 8011472:	4619      	mov	r1, r3
 8011474:	4b64      	ldr	r3, [pc, #400]	@ (8011608 <udp_input+0x280>)
 8011476:	691b      	ldr	r3, [r3, #16]
 8011478:	0a1b      	lsrs	r3, r3, #8
 801147a:	b2db      	uxtb	r3, r3
 801147c:	461a      	mov	r2, r3
 801147e:	4b62      	ldr	r3, [pc, #392]	@ (8011608 <udp_input+0x280>)
 8011480:	691b      	ldr	r3, [r3, #16]
 8011482:	0c1b      	lsrs	r3, r3, #16
 8011484:	b2db      	uxtb	r3, r3
 8011486:	4618      	mov	r0, r3
 8011488:	4b5f      	ldr	r3, [pc, #380]	@ (8011608 <udp_input+0x280>)
 801148a:	691b      	ldr	r3, [r3, #16]
 801148c:	0e1b      	lsrs	r3, r3, #24
 801148e:	b2db      	uxtb	r3, r3
 8011490:	9300      	str	r3, [sp, #0]
 8011492:	4603      	mov	r3, r0
 8011494:	485f      	ldr	r0, [pc, #380]	@ (8011614 <udp_input+0x28c>)
 8011496:	f003 fd27 	bl	8014ee8 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));
 801149a:	697b      	ldr	r3, [r7, #20]
 801149c:	881b      	ldrh	r3, [r3, #0]
 801149e:	b29b      	uxth	r3, r3
 80114a0:	4618      	mov	r0, r3
 80114a2:	f7f8 fd19 	bl	8009ed8 <lwip_htons>
 80114a6:	4603      	mov	r3, r0
 80114a8:	4619      	mov	r1, r3
 80114aa:	485c      	ldr	r0, [pc, #368]	@ (801161c <udp_input+0x294>)
 80114ac:	f003 fd1c 	bl	8014ee8 <iprintf>

  pcb = NULL;
 80114b0:	2300      	movs	r3, #0
 80114b2:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80114b4:	2300      	movs	r3, #0
 80114b6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80114b8:	2300      	movs	r3, #0
 80114ba:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80114bc:	4b58      	ldr	r3, [pc, #352]	@ (8011620 <udp_input+0x298>)
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80114c2:	e091      	b.n	80115e8 <udp_input+0x260>
    /* print the PCB local and remote address */
    LWIP_DEBUGF(UDP_DEBUG, ("pcb ("));
 80114c4:	4857      	ldr	r0, [pc, #348]	@ (8011624 <udp_input+0x29c>)
 80114c6:	f003 fd0f 	bl	8014ee8 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->local_ip);
 80114ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	b2db      	uxtb	r3, r3
 80114d0:	4619      	mov	r1, r3
 80114d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	0a1b      	lsrs	r3, r3, #8
 80114d8:	b2db      	uxtb	r3, r3
 80114da:	461a      	mov	r2, r3
 80114dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	0c1b      	lsrs	r3, r3, #16
 80114e2:	b2db      	uxtb	r3, r3
 80114e4:	4618      	mov	r0, r3
 80114e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	0e1b      	lsrs	r3, r3, #24
 80114ec:	b2db      	uxtb	r3, r3
 80114ee:	9300      	str	r3, [sp, #0]
 80114f0:	4603      	mov	r3, r0
 80114f2:	4848      	ldr	r0, [pc, #288]	@ (8011614 <udp_input+0x28c>)
 80114f4:	f003 fcf8 	bl	8014ee8 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
 80114f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114fa:	8a5b      	ldrh	r3, [r3, #18]
 80114fc:	4619      	mov	r1, r3
 80114fe:	4846      	ldr	r0, [pc, #280]	@ (8011618 <udp_input+0x290>)
 8011500:	f003 fcf2 	bl	8014ee8 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
 8011504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011506:	685b      	ldr	r3, [r3, #4]
 8011508:	b2db      	uxtb	r3, r3
 801150a:	4619      	mov	r1, r3
 801150c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801150e:	685b      	ldr	r3, [r3, #4]
 8011510:	0a1b      	lsrs	r3, r3, #8
 8011512:	b2db      	uxtb	r3, r3
 8011514:	461a      	mov	r2, r3
 8011516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011518:	685b      	ldr	r3, [r3, #4]
 801151a:	0c1b      	lsrs	r3, r3, #16
 801151c:	b2db      	uxtb	r3, r3
 801151e:	4618      	mov	r0, r3
 8011520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011522:	685b      	ldr	r3, [r3, #4]
 8011524:	0e1b      	lsrs	r3, r3, #24
 8011526:	b2db      	uxtb	r3, r3
 8011528:	9300      	str	r3, [sp, #0]
 801152a:	4603      	mov	r3, r0
 801152c:	4839      	ldr	r0, [pc, #228]	@ (8011614 <udp_input+0x28c>)
 801152e:	f003 fcdb 	bl	8014ee8 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));
 8011532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011534:	8a9b      	ldrh	r3, [r3, #20]
 8011536:	4619      	mov	r1, r3
 8011538:	4838      	ldr	r0, [pc, #224]	@ (801161c <udp_input+0x294>)
 801153a:	f003 fcd5 	bl	8014ee8 <iprintf>

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801153e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011540:	8a5b      	ldrh	r3, [r3, #18]
 8011542:	89fa      	ldrh	r2, [r7, #14]
 8011544:	429a      	cmp	r2, r3
 8011546:	d14a      	bne.n	80115de <udp_input+0x256>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011548:	7cfb      	ldrb	r3, [r7, #19]
 801154a:	461a      	mov	r2, r3
 801154c:	6839      	ldr	r1, [r7, #0]
 801154e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011550:	f7ff feb6 	bl	80112c0 <udp_input_local_match>
 8011554:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011556:	2b00      	cmp	r3, #0
 8011558:	d041      	beq.n	80115de <udp_input+0x256>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801155a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801155c:	7c1b      	ldrb	r3, [r3, #16]
 801155e:	f003 0304 	and.w	r3, r3, #4
 8011562:	2b00      	cmp	r3, #0
 8011564:	d11d      	bne.n	80115a2 <udp_input+0x21a>
        if (uncon_pcb == NULL) {
 8011566:	69fb      	ldr	r3, [r7, #28]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d102      	bne.n	8011572 <udp_input+0x1ea>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801156c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801156e:	61fb      	str	r3, [r7, #28]
 8011570:	e017      	b.n	80115a2 <udp_input+0x21a>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011572:	7cfb      	ldrb	r3, [r7, #19]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d014      	beq.n	80115a2 <udp_input+0x21a>
 8011578:	4b23      	ldr	r3, [pc, #140]	@ (8011608 <udp_input+0x280>)
 801157a:	695b      	ldr	r3, [r3, #20]
 801157c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011580:	d10f      	bne.n	80115a2 <udp_input+0x21a>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011582:	69fb      	ldr	r3, [r7, #28]
 8011584:	681a      	ldr	r2, [r3, #0]
 8011586:	683b      	ldr	r3, [r7, #0]
 8011588:	3304      	adds	r3, #4
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	429a      	cmp	r2, r3
 801158e:	d008      	beq.n	80115a2 <udp_input+0x21a>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011592:	681a      	ldr	r2, [r3, #0]
 8011594:	683b      	ldr	r3, [r7, #0]
 8011596:	3304      	adds	r3, #4
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	429a      	cmp	r2, r3
 801159c:	d101      	bne.n	80115a2 <udp_input+0x21a>
              /* better match */
              uncon_pcb = pcb;
 801159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115a0:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80115a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115a4:	8a9b      	ldrh	r3, [r3, #20]
 80115a6:	8a3a      	ldrh	r2, [r7, #16]
 80115a8:	429a      	cmp	r2, r3
 80115aa:	d118      	bne.n	80115de <udp_input+0x256>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80115ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115ae:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d005      	beq.n	80115c0 <udp_input+0x238>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80115b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115b6:	685a      	ldr	r2, [r3, #4]
 80115b8:	4b13      	ldr	r3, [pc, #76]	@ (8011608 <udp_input+0x280>)
 80115ba:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80115bc:	429a      	cmp	r2, r3
 80115be:	d10e      	bne.n	80115de <udp_input+0x256>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80115c0:	6a3b      	ldr	r3, [r7, #32]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d030      	beq.n	8011628 <udp_input+0x2a0>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80115c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115c8:	68da      	ldr	r2, [r3, #12]
 80115ca:	6a3b      	ldr	r3, [r7, #32]
 80115cc:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80115ce:	4b14      	ldr	r3, [pc, #80]	@ (8011620 <udp_input+0x298>)
 80115d0:	681a      	ldr	r2, [r3, #0]
 80115d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115d4:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80115d6:	4a12      	ldr	r2, [pc, #72]	@ (8011620 <udp_input+0x298>)
 80115d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115da:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80115dc:	e024      	b.n	8011628 <udp_input+0x2a0>
      }
    }

    prev = pcb;
 80115de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115e0:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80115e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115e4:	68db      	ldr	r3, [r3, #12]
 80115e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80115e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	f47f af6a 	bne.w	80114c4 <udp_input+0x13c>
 80115f0:	e01b      	b.n	801162a <udp_input+0x2a2>
 80115f2:	bf00      	nop
 80115f4:	080181c0 	.word	0x080181c0
 80115f8:	08018264 	.word	0x08018264
 80115fc:	08018214 	.word	0x08018214
 8011600:	0801827c 	.word	0x0801827c
 8011604:	08018298 	.word	0x08018298
 8011608:	20005400 	.word	0x20005400
 801160c:	080182d0 	.word	0x080182d0
 8011610:	080182fc 	.word	0x080182fc
 8011614:	08018304 	.word	0x08018304
 8011618:	08018314 	.word	0x08018314
 801161c:	08018324 	.word	0x08018324
 8011620:	200083bc 	.word	0x200083bc
 8011624:	0801832c 	.word	0x0801832c
        break;
 8011628:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801162a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801162c:	2b00      	cmp	r3, #0
 801162e:	d101      	bne.n	8011634 <udp_input+0x2ac>
    pcb = uncon_pcb;
 8011630:	69fb      	ldr	r3, [r7, #28]
 8011632:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011636:	2b00      	cmp	r3, #0
 8011638:	d002      	beq.n	8011640 <udp_input+0x2b8>
    for_us = 1;
 801163a:	2301      	movs	r3, #1
 801163c:	76fb      	strb	r3, [r7, #27]
 801163e:	e00a      	b.n	8011656 <udp_input+0x2ce>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011640:	683b      	ldr	r3, [r7, #0]
 8011642:	3304      	adds	r3, #4
 8011644:	681a      	ldr	r2, [r3, #0]
 8011646:	4b2d      	ldr	r3, [pc, #180]	@ (80116fc <udp_input+0x374>)
 8011648:	695b      	ldr	r3, [r3, #20]
 801164a:	429a      	cmp	r2, r3
 801164c:	bf0c      	ite	eq
 801164e:	2301      	moveq	r3, #1
 8011650:	2300      	movne	r3, #0
 8011652:	b2db      	uxtb	r3, r3
 8011654:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011656:	7efb      	ldrb	r3, [r7, #27]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d047      	beq.n	80116ec <udp_input+0x364>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
 801165c:	4828      	ldr	r0, [pc, #160]	@ (8011700 <udp_input+0x378>)
 801165e:	f003 fcb3 	bl	8014fc8 <puts>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011662:	2108      	movs	r1, #8
 8011664:	6878      	ldr	r0, [r7, #4]
 8011666:	f7fa f801 	bl	800b66c <pbuf_remove_header>
 801166a:	4603      	mov	r3, r0
 801166c:	2b00      	cmp	r3, #0
 801166e:	d00a      	beq.n	8011686 <udp_input+0x2fe>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011670:	4b24      	ldr	r3, [pc, #144]	@ (8011704 <udp_input+0x37c>)
 8011672:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8011676:	4924      	ldr	r1, [pc, #144]	@ (8011708 <udp_input+0x380>)
 8011678:	4824      	ldr	r0, [pc, #144]	@ (801170c <udp_input+0x384>)
 801167a:	f003 fc35 	bl	8014ee8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801167e:	6878      	ldr	r0, [r7, #4]
 8011680:	f7fa f87a 	bl	800b778 <pbuf_free>
      goto end;
 8011684:	e035      	b.n	80116f2 <udp_input+0x36a>
    }

    if (pcb != NULL) {
 8011686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011688:	2b00      	cmp	r3, #0
 801168a:	d012      	beq.n	80116b2 <udp_input+0x32a>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801168c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801168e:	699b      	ldr	r3, [r3, #24]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d00a      	beq.n	80116aa <udp_input+0x322>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011696:	699c      	ldr	r4, [r3, #24]
 8011698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801169a:	69d8      	ldr	r0, [r3, #28]
 801169c:	8a3b      	ldrh	r3, [r7, #16]
 801169e:	9300      	str	r3, [sp, #0]
 80116a0:	4b1b      	ldr	r3, [pc, #108]	@ (8011710 <udp_input+0x388>)
 80116a2:	687a      	ldr	r2, [r7, #4]
 80116a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80116a6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80116a8:	e024      	b.n	80116f4 <udp_input+0x36c>
        pbuf_free(p);
 80116aa:	6878      	ldr	r0, [r7, #4]
 80116ac:	f7fa f864 	bl	800b778 <pbuf_free>
        goto end;
 80116b0:	e01f      	b.n	80116f2 <udp_input+0x36a>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
 80116b2:	4818      	ldr	r0, [pc, #96]	@ (8011714 <udp_input+0x38c>)
 80116b4:	f003 fc88 	bl	8014fc8 <puts>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80116b8:	7cfb      	ldrb	r3, [r7, #19]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d112      	bne.n	80116e4 <udp_input+0x35c>
 80116be:	4b0f      	ldr	r3, [pc, #60]	@ (80116fc <udp_input+0x374>)
 80116c0:	695b      	ldr	r3, [r3, #20]
 80116c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80116c6:	2be0      	cmp	r3, #224	@ 0xe0
 80116c8:	d00c      	beq.n	80116e4 <udp_input+0x35c>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80116ca:	4b0c      	ldr	r3, [pc, #48]	@ (80116fc <udp_input+0x374>)
 80116cc:	899b      	ldrh	r3, [r3, #12]
 80116ce:	3308      	adds	r3, #8
 80116d0:	b29b      	uxth	r3, r3
 80116d2:	b21b      	sxth	r3, r3
 80116d4:	4619      	mov	r1, r3
 80116d6:	6878      	ldr	r0, [r7, #4]
 80116d8:	f7fa f83b 	bl	800b752 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80116dc:	2103      	movs	r1, #3
 80116de:	6878      	ldr	r0, [r7, #4]
 80116e0:	f001 fcee 	bl	80130c0 <icmp_dest_unreach>
      pbuf_free(p);
 80116e4:	6878      	ldr	r0, [r7, #4]
 80116e6:	f7fa f847 	bl	800b778 <pbuf_free>
  return;
 80116ea:	e003      	b.n	80116f4 <udp_input+0x36c>
    pbuf_free(p);
 80116ec:	6878      	ldr	r0, [r7, #4]
 80116ee:	f7fa f843 	bl	800b778 <pbuf_free>
  return;
 80116f2:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80116f4:	372c      	adds	r7, #44	@ 0x2c
 80116f6:	46bd      	mov	sp, r7
 80116f8:	bd90      	pop	{r4, r7, pc}
 80116fa:	bf00      	nop
 80116fc:	20005400 	.word	0x20005400
 8011700:	08018334 	.word	0x08018334
 8011704:	080181c0 	.word	0x080181c0
 8011708:	08018354 	.word	0x08018354
 801170c:	08018214 	.word	0x08018214
 8011710:	20005410 	.word	0x20005410
 8011714:	08018370 	.word	0x08018370

08011718 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8011718:	b580      	push	{r7, lr}
 801171a:	b088      	sub	sp, #32
 801171c:	af02      	add	r7, sp, #8
 801171e:	60f8      	str	r0, [r7, #12]
 8011720:	60b9      	str	r1, [r7, #8]
 8011722:	607a      	str	r2, [r7, #4]
 8011724:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d109      	bne.n	8011740 <udp_sendto+0x28>
 801172c:	4b3b      	ldr	r3, [pc, #236]	@ (801181c <udp_sendto+0x104>)
 801172e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8011732:	493b      	ldr	r1, [pc, #236]	@ (8011820 <udp_sendto+0x108>)
 8011734:	483b      	ldr	r0, [pc, #236]	@ (8011824 <udp_sendto+0x10c>)
 8011736:	f003 fbd7 	bl	8014ee8 <iprintf>
 801173a:	f06f 030f 	mvn.w	r3, #15
 801173e:	e068      	b.n	8011812 <udp_sendto+0xfa>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8011740:	68bb      	ldr	r3, [r7, #8]
 8011742:	2b00      	cmp	r3, #0
 8011744:	d109      	bne.n	801175a <udp_sendto+0x42>
 8011746:	4b35      	ldr	r3, [pc, #212]	@ (801181c <udp_sendto+0x104>)
 8011748:	f240 2219 	movw	r2, #537	@ 0x219
 801174c:	4936      	ldr	r1, [pc, #216]	@ (8011828 <udp_sendto+0x110>)
 801174e:	4835      	ldr	r0, [pc, #212]	@ (8011824 <udp_sendto+0x10c>)
 8011750:	f003 fbca 	bl	8014ee8 <iprintf>
 8011754:	f06f 030f 	mvn.w	r3, #15
 8011758:	e05b      	b.n	8011812 <udp_sendto+0xfa>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d109      	bne.n	8011774 <udp_sendto+0x5c>
 8011760:	4b2e      	ldr	r3, [pc, #184]	@ (801181c <udp_sendto+0x104>)
 8011762:	f240 221a 	movw	r2, #538	@ 0x21a
 8011766:	4931      	ldr	r1, [pc, #196]	@ (801182c <udp_sendto+0x114>)
 8011768:	482e      	ldr	r0, [pc, #184]	@ (8011824 <udp_sendto+0x10c>)
 801176a:	f003 fbbd 	bl	8014ee8 <iprintf>
 801176e:	f06f 030f 	mvn.w	r3, #15
 8011772:	e04e      	b.n	8011812 <udp_sendto+0xfa>

  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));
 8011774:	482e      	ldr	r0, [pc, #184]	@ (8011830 <udp_sendto+0x118>)
 8011776:	f003 fc27 	bl	8014fc8 <puts>

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	7a1b      	ldrb	r3, [r3, #8]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d006      	beq.n	8011790 <udp_sendto+0x78>
    netif = netif_get_by_index(pcb->netif_idx);
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	7a1b      	ldrb	r3, [r3, #8]
 8011786:	4618      	mov	r0, r3
 8011788:	f7f9 fc96 	bl	800b0b8 <netif_get_by_index>
 801178c:	6178      	str	r0, [r7, #20]
 801178e:	e003      	b.n	8011798 <udp_sendto+0x80>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8011790:	6878      	ldr	r0, [r7, #4]
 8011792:	f001 fd5f 	bl	8013254 <ip4_route>
 8011796:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8011798:	697b      	ldr	r3, [r7, #20]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d12f      	bne.n	80117fe <udp_sendto+0xe6>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
 801179e:	4825      	ldr	r0, [pc, #148]	@ (8011834 <udp_sendto+0x11c>)
 80117a0:	f003 fba2 	bl	8014ee8 <iprintf>
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d003      	beq.n	80117b2 <udp_sendto+0x9a>
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	781b      	ldrb	r3, [r3, #0]
 80117ae:	4619      	mov	r1, r3
 80117b0:	e000      	b.n	80117b4 <udp_sendto+0x9c>
 80117b2:	2100      	movs	r1, #0
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d004      	beq.n	80117c4 <udp_sendto+0xac>
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	3301      	adds	r3, #1
 80117be:	781b      	ldrb	r3, [r3, #0]
 80117c0:	461a      	mov	r2, r3
 80117c2:	e000      	b.n	80117c6 <udp_sendto+0xae>
 80117c4:	2200      	movs	r2, #0
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d004      	beq.n	80117d6 <udp_sendto+0xbe>
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	3302      	adds	r3, #2
 80117d0:	781b      	ldrb	r3, [r3, #0]
 80117d2:	4618      	mov	r0, r3
 80117d4:	e000      	b.n	80117d8 <udp_sendto+0xc0>
 80117d6:	2000      	movs	r0, #0
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d003      	beq.n	80117e6 <udp_sendto+0xce>
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	3303      	adds	r3, #3
 80117e2:	781b      	ldrb	r3, [r3, #0]
 80117e4:	e000      	b.n	80117e8 <udp_sendto+0xd0>
 80117e6:	2300      	movs	r3, #0
 80117e8:	9300      	str	r3, [sp, #0]
 80117ea:	4603      	mov	r3, r0
 80117ec:	4812      	ldr	r0, [pc, #72]	@ (8011838 <udp_sendto+0x120>)
 80117ee:	f003 fb7b 	bl	8014ee8 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
 80117f2:	200a      	movs	r0, #10
 80117f4:	f003 fb8a 	bl	8014f0c <putchar>
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80117f8:	f06f 0303 	mvn.w	r3, #3
 80117fc:	e009      	b.n	8011812 <udp_sendto+0xfa>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80117fe:	887a      	ldrh	r2, [r7, #2]
 8011800:	697b      	ldr	r3, [r7, #20]
 8011802:	9300      	str	r3, [sp, #0]
 8011804:	4613      	mov	r3, r2
 8011806:	687a      	ldr	r2, [r7, #4]
 8011808:	68b9      	ldr	r1, [r7, #8]
 801180a:	68f8      	ldr	r0, [r7, #12]
 801180c:	f000 f816 	bl	801183c <udp_sendto_if>
 8011810:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011812:	4618      	mov	r0, r3
 8011814:	3718      	adds	r7, #24
 8011816:	46bd      	mov	sp, r7
 8011818:	bd80      	pop	{r7, pc}
 801181a:	bf00      	nop
 801181c:	080181c0 	.word	0x080181c0
 8011820:	080183b8 	.word	0x080183b8
 8011824:	08018214 	.word	0x08018214
 8011828:	080183d0 	.word	0x080183d0
 801182c:	080183ec 	.word	0x080183ec
 8011830:	08018408 	.word	0x08018408
 8011834:	08018414 	.word	0x08018414
 8011838:	08018304 	.word	0x08018304

0801183c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b088      	sub	sp, #32
 8011840:	af02      	add	r7, sp, #8
 8011842:	60f8      	str	r0, [r7, #12]
 8011844:	60b9      	str	r1, [r7, #8]
 8011846:	607a      	str	r2, [r7, #4]
 8011848:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d109      	bne.n	8011864 <udp_sendto_if+0x28>
 8011850:	4b2e      	ldr	r3, [pc, #184]	@ (801190c <udp_sendto_if+0xd0>)
 8011852:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011856:	492e      	ldr	r1, [pc, #184]	@ (8011910 <udp_sendto_if+0xd4>)
 8011858:	482e      	ldr	r0, [pc, #184]	@ (8011914 <udp_sendto_if+0xd8>)
 801185a:	f003 fb45 	bl	8014ee8 <iprintf>
 801185e:	f06f 030f 	mvn.w	r3, #15
 8011862:	e04f      	b.n	8011904 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8011864:	68bb      	ldr	r3, [r7, #8]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d109      	bne.n	801187e <udp_sendto_if+0x42>
 801186a:	4b28      	ldr	r3, [pc, #160]	@ (801190c <udp_sendto_if+0xd0>)
 801186c:	f240 2281 	movw	r2, #641	@ 0x281
 8011870:	4929      	ldr	r1, [pc, #164]	@ (8011918 <udp_sendto_if+0xdc>)
 8011872:	4828      	ldr	r0, [pc, #160]	@ (8011914 <udp_sendto_if+0xd8>)
 8011874:	f003 fb38 	bl	8014ee8 <iprintf>
 8011878:	f06f 030f 	mvn.w	r3, #15
 801187c:	e042      	b.n	8011904 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d109      	bne.n	8011898 <udp_sendto_if+0x5c>
 8011884:	4b21      	ldr	r3, [pc, #132]	@ (801190c <udp_sendto_if+0xd0>)
 8011886:	f240 2282 	movw	r2, #642	@ 0x282
 801188a:	4924      	ldr	r1, [pc, #144]	@ (801191c <udp_sendto_if+0xe0>)
 801188c:	4821      	ldr	r0, [pc, #132]	@ (8011914 <udp_sendto_if+0xd8>)
 801188e:	f003 fb2b 	bl	8014ee8 <iprintf>
 8011892:	f06f 030f 	mvn.w	r3, #15
 8011896:	e035      	b.n	8011904 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8011898:	6a3b      	ldr	r3, [r7, #32]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d109      	bne.n	80118b2 <udp_sendto_if+0x76>
 801189e:	4b1b      	ldr	r3, [pc, #108]	@ (801190c <udp_sendto_if+0xd0>)
 80118a0:	f240 2283 	movw	r2, #643	@ 0x283
 80118a4:	491e      	ldr	r1, [pc, #120]	@ (8011920 <udp_sendto_if+0xe4>)
 80118a6:	481b      	ldr	r0, [pc, #108]	@ (8011914 <udp_sendto_if+0xd8>)
 80118a8:	f003 fb1e 	bl	8014ee8 <iprintf>
 80118ac:	f06f 030f 	mvn.w	r3, #15
 80118b0:	e028      	b.n	8011904 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d009      	beq.n	80118cc <udp_sendto_if+0x90>
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d005      	beq.n	80118cc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80118c8:	2be0      	cmp	r3, #224	@ 0xe0
 80118ca:	d103      	bne.n	80118d4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80118cc:	6a3b      	ldr	r3, [r7, #32]
 80118ce:	3304      	adds	r3, #4
 80118d0:	617b      	str	r3, [r7, #20]
 80118d2:	e00b      	b.n	80118ec <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	681a      	ldr	r2, [r3, #0]
 80118d8:	6a3b      	ldr	r3, [r7, #32]
 80118da:	3304      	adds	r3, #4
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	429a      	cmp	r2, r3
 80118e0:	d002      	beq.n	80118e8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80118e2:	f06f 0303 	mvn.w	r3, #3
 80118e6:	e00d      	b.n	8011904 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80118ec:	887a      	ldrh	r2, [r7, #2]
 80118ee:	697b      	ldr	r3, [r7, #20]
 80118f0:	9301      	str	r3, [sp, #4]
 80118f2:	6a3b      	ldr	r3, [r7, #32]
 80118f4:	9300      	str	r3, [sp, #0]
 80118f6:	4613      	mov	r3, r2
 80118f8:	687a      	ldr	r2, [r7, #4]
 80118fa:	68b9      	ldr	r1, [r7, #8]
 80118fc:	68f8      	ldr	r0, [r7, #12]
 80118fe:	f000 f811 	bl	8011924 <udp_sendto_if_src>
 8011902:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011904:	4618      	mov	r0, r3
 8011906:	3718      	adds	r7, #24
 8011908:	46bd      	mov	sp, r7
 801190a:	bd80      	pop	{r7, pc}
 801190c:	080181c0 	.word	0x080181c0
 8011910:	0801842c 	.word	0x0801842c
 8011914:	08018214 	.word	0x08018214
 8011918:	08018448 	.word	0x08018448
 801191c:	08018464 	.word	0x08018464
 8011920:	08018484 	.word	0x08018484

08011924 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b08c      	sub	sp, #48	@ 0x30
 8011928:	af04      	add	r7, sp, #16
 801192a:	60f8      	str	r0, [r7, #12]
 801192c:	60b9      	str	r1, [r7, #8]
 801192e:	607a      	str	r2, [r7, #4]
 8011930:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d109      	bne.n	801194c <udp_sendto_if_src+0x28>
 8011938:	4b7a      	ldr	r3, [pc, #488]	@ (8011b24 <udp_sendto_if_src+0x200>)
 801193a:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801193e:	497a      	ldr	r1, [pc, #488]	@ (8011b28 <udp_sendto_if_src+0x204>)
 8011940:	487a      	ldr	r0, [pc, #488]	@ (8011b2c <udp_sendto_if_src+0x208>)
 8011942:	f003 fad1 	bl	8014ee8 <iprintf>
 8011946:	f06f 030f 	mvn.w	r3, #15
 801194a:	e0e6      	b.n	8011b1a <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801194c:	68bb      	ldr	r3, [r7, #8]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d109      	bne.n	8011966 <udp_sendto_if_src+0x42>
 8011952:	4b74      	ldr	r3, [pc, #464]	@ (8011b24 <udp_sendto_if_src+0x200>)
 8011954:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8011958:	4975      	ldr	r1, [pc, #468]	@ (8011b30 <udp_sendto_if_src+0x20c>)
 801195a:	4874      	ldr	r0, [pc, #464]	@ (8011b2c <udp_sendto_if_src+0x208>)
 801195c:	f003 fac4 	bl	8014ee8 <iprintf>
 8011960:	f06f 030f 	mvn.w	r3, #15
 8011964:	e0d9      	b.n	8011b1a <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d109      	bne.n	8011980 <udp_sendto_if_src+0x5c>
 801196c:	4b6d      	ldr	r3, [pc, #436]	@ (8011b24 <udp_sendto_if_src+0x200>)
 801196e:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8011972:	4970      	ldr	r1, [pc, #448]	@ (8011b34 <udp_sendto_if_src+0x210>)
 8011974:	486d      	ldr	r0, [pc, #436]	@ (8011b2c <udp_sendto_if_src+0x208>)
 8011976:	f003 fab7 	bl	8014ee8 <iprintf>
 801197a:	f06f 030f 	mvn.w	r3, #15
 801197e:	e0cc      	b.n	8011b1a <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8011980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011982:	2b00      	cmp	r3, #0
 8011984:	d109      	bne.n	801199a <udp_sendto_if_src+0x76>
 8011986:	4b67      	ldr	r3, [pc, #412]	@ (8011b24 <udp_sendto_if_src+0x200>)
 8011988:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 801198c:	496a      	ldr	r1, [pc, #424]	@ (8011b38 <udp_sendto_if_src+0x214>)
 801198e:	4867      	ldr	r0, [pc, #412]	@ (8011b2c <udp_sendto_if_src+0x208>)
 8011990:	f003 faaa 	bl	8014ee8 <iprintf>
 8011994:	f06f 030f 	mvn.w	r3, #15
 8011998:	e0bf      	b.n	8011b1a <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801199a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801199c:	2b00      	cmp	r3, #0
 801199e:	d109      	bne.n	80119b4 <udp_sendto_if_src+0x90>
 80119a0:	4b60      	ldr	r3, [pc, #384]	@ (8011b24 <udp_sendto_if_src+0x200>)
 80119a2:	f240 22d5 	movw	r2, #725	@ 0x2d5
 80119a6:	4965      	ldr	r1, [pc, #404]	@ (8011b3c <udp_sendto_if_src+0x218>)
 80119a8:	4860      	ldr	r0, [pc, #384]	@ (8011b2c <udp_sendto_if_src+0x208>)
 80119aa:	f003 fa9d 	bl	8014ee8 <iprintf>
 80119ae:	f06f 030f 	mvn.w	r3, #15
 80119b2:	e0b2      	b.n	8011b1a <udp_sendto_if_src+0x1f6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	8a5b      	ldrh	r3, [r3, #18]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d115      	bne.n	80119e8 <udp_sendto_if_src+0xc4>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
 80119bc:	4860      	ldr	r0, [pc, #384]	@ (8011b40 <udp_sendto_if_src+0x21c>)
 80119be:	f003 fb03 	bl	8014fc8 <puts>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80119c2:	68f9      	ldr	r1, [r7, #12]
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	8a5b      	ldrh	r3, [r3, #18]
 80119c8:	461a      	mov	r2, r3
 80119ca:	68f8      	ldr	r0, [r7, #12]
 80119cc:	f000 f8cc 	bl	8011b68 <udp_bind>
 80119d0:	4603      	mov	r3, r0
 80119d2:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80119d4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d005      	beq.n	80119e8 <udp_sendto_if_src+0xc4>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
 80119dc:	4859      	ldr	r0, [pc, #356]	@ (8011b44 <udp_sendto_if_src+0x220>)
 80119de:	f003 faf3 	bl	8014fc8 <puts>
      return err;
 80119e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80119e6:	e098      	b.n	8011b1a <udp_sendto_if_src+0x1f6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80119e8:	68bb      	ldr	r3, [r7, #8]
 80119ea:	891b      	ldrh	r3, [r3, #8]
 80119ec:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80119f0:	4293      	cmp	r3, r2
 80119f2:	d902      	bls.n	80119fa <udp_sendto_if_src+0xd6>
    return ERR_MEM;
 80119f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80119f8:	e08f      	b.n	8011b1a <udp_sendto_if_src+0x1f6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80119fa:	2108      	movs	r1, #8
 80119fc:	68b8      	ldr	r0, [r7, #8]
 80119fe:	f7f9 fe25 	bl	800b64c <pbuf_add_header>
 8011a02:	4603      	mov	r3, r0
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d01d      	beq.n	8011a44 <udp_sendto_if_src+0x120>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8011a08:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011a0c:	2108      	movs	r1, #8
 8011a0e:	2022      	movs	r0, #34	@ 0x22
 8011a10:	f7f9 fbce 	bl	800b1b0 <pbuf_alloc>
 8011a14:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8011a16:	69fb      	ldr	r3, [r7, #28]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d105      	bne.n	8011a28 <udp_sendto_if_src+0x104>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
 8011a1c:	484a      	ldr	r0, [pc, #296]	@ (8011b48 <udp_sendto_if_src+0x224>)
 8011a1e:	f003 fad3 	bl	8014fc8 <puts>
      return ERR_MEM;
 8011a22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011a26:	e078      	b.n	8011b1a <udp_sendto_if_src+0x1f6>
    }
    if (p->tot_len != 0) {
 8011a28:	68bb      	ldr	r3, [r7, #8]
 8011a2a:	891b      	ldrh	r3, [r3, #8]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d003      	beq.n	8011a38 <udp_sendto_if_src+0x114>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8011a30:	68b9      	ldr	r1, [r7, #8]
 8011a32:	69f8      	ldr	r0, [r7, #28]
 8011a34:	f7f9 ffb8 	bl	800b9a8 <pbuf_chain>
    }
    /* first pbuf q points to header pbuf */
    LWIP_DEBUGF(UDP_DEBUG,
 8011a38:	68ba      	ldr	r2, [r7, #8]
 8011a3a:	69f9      	ldr	r1, [r7, #28]
 8011a3c:	4843      	ldr	r0, [pc, #268]	@ (8011b4c <udp_sendto_if_src+0x228>)
 8011a3e:	f003 fa53 	bl	8014ee8 <iprintf>
 8011a42:	e005      	b.n	8011a50 <udp_sendto_if_src+0x12c>
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8011a44:	68bb      	ldr	r3, [r7, #8]
 8011a46:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
 8011a48:	68b9      	ldr	r1, [r7, #8]
 8011a4a:	4841      	ldr	r0, [pc, #260]	@ (8011b50 <udp_sendto_if_src+0x22c>)
 8011a4c:	f003 fa4c 	bl	8014ee8 <iprintf>
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8011a50:	69fb      	ldr	r3, [r7, #28]
 8011a52:	895b      	ldrh	r3, [r3, #10]
 8011a54:	2b07      	cmp	r3, #7
 8011a56:	d806      	bhi.n	8011a66 <udp_sendto_if_src+0x142>
 8011a58:	4b32      	ldr	r3, [pc, #200]	@ (8011b24 <udp_sendto_if_src+0x200>)
 8011a5a:	f240 320d 	movw	r2, #781	@ 0x30d
 8011a5e:	493d      	ldr	r1, [pc, #244]	@ (8011b54 <udp_sendto_if_src+0x230>)
 8011a60:	4832      	ldr	r0, [pc, #200]	@ (8011b2c <udp_sendto_if_src+0x208>)
 8011a62:	f003 fa41 	bl	8014ee8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8011a66:	69fb      	ldr	r3, [r7, #28]
 8011a68:	685b      	ldr	r3, [r3, #4]
 8011a6a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	8a5b      	ldrh	r3, [r3, #18]
 8011a70:	4618      	mov	r0, r3
 8011a72:	f7f8 fa31 	bl	8009ed8 <lwip_htons>
 8011a76:	4603      	mov	r3, r0
 8011a78:	461a      	mov	r2, r3
 8011a7a:	697b      	ldr	r3, [r7, #20]
 8011a7c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8011a7e:	887b      	ldrh	r3, [r7, #2]
 8011a80:	4618      	mov	r0, r3
 8011a82:	f7f8 fa29 	bl	8009ed8 <lwip_htons>
 8011a86:	4603      	mov	r3, r0
 8011a88:	461a      	mov	r2, r3
 8011a8a:	697b      	ldr	r3, [r7, #20]
 8011a8c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	2200      	movs	r2, #0
 8011a92:	719a      	strb	r2, [r3, #6]
 8011a94:	2200      	movs	r2, #0
 8011a96:	71da      	strb	r2, [r3, #7]
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
    q->flags |= PBUF_FLAG_MCASTLOOP;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: sending datagram of length %"U16_F"\n", q->tot_len));
 8011a98:	69fb      	ldr	r3, [r7, #28]
 8011a9a:	891b      	ldrh	r3, [r3, #8]
 8011a9c:	4619      	mov	r1, r3
 8011a9e:	482e      	ldr	r0, [pc, #184]	@ (8011b58 <udp_sendto_if_src+0x234>)
 8011aa0:	f003 fa22 	bl	8014ee8 <iprintf>

    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
 8011aa4:	69fb      	ldr	r3, [r7, #28]
 8011aa6:	891b      	ldrh	r3, [r3, #8]
 8011aa8:	4619      	mov	r1, r3
 8011aaa:	482c      	ldr	r0, [pc, #176]	@ (8011b5c <udp_sendto_if_src+0x238>)
 8011aac:	f003 fa1c 	bl	8014ee8 <iprintf>
    udphdr->len = lwip_htons(q->tot_len);
 8011ab0:	69fb      	ldr	r3, [r7, #28]
 8011ab2:	891b      	ldrh	r3, [r3, #8]
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f7f8 fa0f 	bl	8009ed8 <lwip_htons>
 8011aba:	4603      	mov	r3, r0
 8011abc:	461a      	mov	r2, r3
 8011abe:	697b      	ldr	r3, [r7, #20]
 8011ac0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8011ac2:	2311      	movs	r3, #17
 8011ac4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	7adb      	ldrb	r3, [r3, #11]
 8011aca:	74bb      	strb	r3, [r7, #18]
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
 8011acc:	697b      	ldr	r3, [r7, #20]
 8011ace:	88db      	ldrh	r3, [r3, #6]
 8011ad0:	b29b      	uxth	r3, r3
 8011ad2:	4619      	mov	r1, r3
 8011ad4:	4822      	ldr	r0, [pc, #136]	@ (8011b60 <udp_sendto_if_src+0x23c>)
 8011ad6:	f003 fa07 	bl	8014ee8 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
 8011ada:	7cfb      	ldrb	r3, [r7, #19]
 8011adc:	4619      	mov	r1, r3
 8011ade:	4821      	ldr	r0, [pc, #132]	@ (8011b64 <udp_sendto_if_src+0x240>)
 8011ae0:	f003 fa02 	bl	8014ee8 <iprintf>
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	7a9b      	ldrb	r3, [r3, #10]
 8011ae8:	7cb9      	ldrb	r1, [r7, #18]
 8011aea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011aec:	9202      	str	r2, [sp, #8]
 8011aee:	7cfa      	ldrb	r2, [r7, #19]
 8011af0:	9201      	str	r2, [sp, #4]
 8011af2:	9300      	str	r3, [sp, #0]
 8011af4:	460b      	mov	r3, r1
 8011af6:	687a      	ldr	r2, [r7, #4]
 8011af8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011afa:	69f8      	ldr	r0, [r7, #28]
 8011afc:	f001 fd92 	bl	8013624 <ip4_output_if_src>
 8011b00:	4603      	mov	r3, r0
 8011b02:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8011b04:	69fa      	ldr	r2, [r7, #28]
 8011b06:	68bb      	ldr	r3, [r7, #8]
 8011b08:	429a      	cmp	r2, r3
 8011b0a:	d004      	beq.n	8011b16 <udp_sendto_if_src+0x1f2>
    /* free the header pbuf */
    pbuf_free(q);
 8011b0c:	69f8      	ldr	r0, [r7, #28]
 8011b0e:	f7f9 fe33 	bl	800b778 <pbuf_free>
    q = NULL;
 8011b12:	2300      	movs	r3, #0
 8011b14:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8011b16:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	3720      	adds	r7, #32
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	bd80      	pop	{r7, pc}
 8011b22:	bf00      	nop
 8011b24:	080181c0 	.word	0x080181c0
 8011b28:	080184a4 	.word	0x080184a4
 8011b2c:	08018214 	.word	0x08018214
 8011b30:	080184c4 	.word	0x080184c4
 8011b34:	080184e4 	.word	0x080184e4
 8011b38:	08018508 	.word	0x08018508
 8011b3c:	0801852c 	.word	0x0801852c
 8011b40:	08018550 	.word	0x08018550
 8011b44:	08018580 	.word	0x08018580
 8011b48:	080185a4 	.word	0x080185a4
 8011b4c:	080185c8 	.word	0x080185c8
 8011b50:	08018600 	.word	0x08018600
 8011b54:	0801862c 	.word	0x0801862c
 8011b58:	0801865c 	.word	0x0801865c
 8011b5c:	08018688 	.word	0x08018688
 8011b60:	080186ac 	.word	0x080186ac
 8011b64:	080186cc 	.word	0x080186cc

08011b68 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b088      	sub	sp, #32
 8011b6c:	af02      	add	r7, sp, #8
 8011b6e:	60f8      	str	r0, [r7, #12]
 8011b70:	60b9      	str	r1, [r7, #8]
 8011b72:	4613      	mov	r3, r2
 8011b74:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011b76:	68bb      	ldr	r3, [r7, #8]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d101      	bne.n	8011b80 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8011b7c:	4b65      	ldr	r3, [pc, #404]	@ (8011d14 <udp_bind+0x1ac>)
 8011b7e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d109      	bne.n	8011b9a <udp_bind+0x32>
 8011b86:	4b64      	ldr	r3, [pc, #400]	@ (8011d18 <udp_bind+0x1b0>)
 8011b88:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8011b8c:	4963      	ldr	r1, [pc, #396]	@ (8011d1c <udp_bind+0x1b4>)
 8011b8e:	4864      	ldr	r0, [pc, #400]	@ (8011d20 <udp_bind+0x1b8>)
 8011b90:	f003 f9aa 	bl	8014ee8 <iprintf>
 8011b94:	f06f 030f 	mvn.w	r3, #15
 8011b98:	e0b7      	b.n	8011d0a <udp_bind+0x1a2>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
 8011b9a:	4862      	ldr	r0, [pc, #392]	@ (8011d24 <udp_bind+0x1bc>)
 8011b9c:	f003 f9a4 	bl	8014ee8 <iprintf>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
 8011ba0:	68bb      	ldr	r3, [r7, #8]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d003      	beq.n	8011bae <udp_bind+0x46>
 8011ba6:	68bb      	ldr	r3, [r7, #8]
 8011ba8:	781b      	ldrb	r3, [r3, #0]
 8011baa:	4619      	mov	r1, r3
 8011bac:	e000      	b.n	8011bb0 <udp_bind+0x48>
 8011bae:	2100      	movs	r1, #0
 8011bb0:	68bb      	ldr	r3, [r7, #8]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d004      	beq.n	8011bc0 <udp_bind+0x58>
 8011bb6:	68bb      	ldr	r3, [r7, #8]
 8011bb8:	3301      	adds	r3, #1
 8011bba:	781b      	ldrb	r3, [r3, #0]
 8011bbc:	461a      	mov	r2, r3
 8011bbe:	e000      	b.n	8011bc2 <udp_bind+0x5a>
 8011bc0:	2200      	movs	r2, #0
 8011bc2:	68bb      	ldr	r3, [r7, #8]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d004      	beq.n	8011bd2 <udp_bind+0x6a>
 8011bc8:	68bb      	ldr	r3, [r7, #8]
 8011bca:	3302      	adds	r3, #2
 8011bcc:	781b      	ldrb	r3, [r3, #0]
 8011bce:	4618      	mov	r0, r3
 8011bd0:	e000      	b.n	8011bd4 <udp_bind+0x6c>
 8011bd2:	2000      	movs	r0, #0
 8011bd4:	68bb      	ldr	r3, [r7, #8]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d003      	beq.n	8011be2 <udp_bind+0x7a>
 8011bda:	68bb      	ldr	r3, [r7, #8]
 8011bdc:	3303      	adds	r3, #3
 8011bde:	781b      	ldrb	r3, [r3, #0]
 8011be0:	e000      	b.n	8011be4 <udp_bind+0x7c>
 8011be2:	2300      	movs	r3, #0
 8011be4:	9300      	str	r3, [sp, #0]
 8011be6:	4603      	mov	r3, r0
 8011be8:	484f      	ldr	r0, [pc, #316]	@ (8011d28 <udp_bind+0x1c0>)
 8011bea:	f003 f97d 	bl	8014ee8 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));
 8011bee:	88fb      	ldrh	r3, [r7, #6]
 8011bf0:	4619      	mov	r1, r3
 8011bf2:	484e      	ldr	r0, [pc, #312]	@ (8011d2c <udp_bind+0x1c4>)
 8011bf4:	f003 f978 	bl	8014ee8 <iprintf>

  rebind = 0;
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011bfc:	4b4c      	ldr	r3, [pc, #304]	@ (8011d30 <udp_bind+0x1c8>)
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	617b      	str	r3, [r7, #20]
 8011c02:	e009      	b.n	8011c18 <udp_bind+0xb0>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011c04:	68fa      	ldr	r2, [r7, #12]
 8011c06:	697b      	ldr	r3, [r7, #20]
 8011c08:	429a      	cmp	r2, r3
 8011c0a:	d102      	bne.n	8011c12 <udp_bind+0xaa>
      rebind = 1;
 8011c0c:	2301      	movs	r3, #1
 8011c0e:	74fb      	strb	r3, [r7, #19]
      break;
 8011c10:	e005      	b.n	8011c1e <udp_bind+0xb6>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011c12:	697b      	ldr	r3, [r7, #20]
 8011c14:	68db      	ldr	r3, [r3, #12]
 8011c16:	617b      	str	r3, [r7, #20]
 8011c18:	697b      	ldr	r3, [r7, #20]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d1f2      	bne.n	8011c04 <udp_bind+0x9c>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8011c1e:	88fb      	ldrh	r3, [r7, #6]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d10c      	bne.n	8011c3e <udp_bind+0xd6>
    port = udp_new_port();
 8011c24:	f7ff fb14 	bl	8011250 <udp_new_port>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011c2c:	88fb      	ldrh	r3, [r7, #6]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d134      	bne.n	8011c9c <udp_bind+0x134>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
 8011c32:	4840      	ldr	r0, [pc, #256]	@ (8011d34 <udp_bind+0x1cc>)
 8011c34:	f003 f9c8 	bl	8014fc8 <puts>
      return ERR_USE;
 8011c38:	f06f 0307 	mvn.w	r3, #7
 8011c3c:	e065      	b.n	8011d0a <udp_bind+0x1a2>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011c3e:	4b3c      	ldr	r3, [pc, #240]	@ (8011d30 <udp_bind+0x1c8>)
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	617b      	str	r3, [r7, #20]
 8011c44:	e027      	b.n	8011c96 <udp_bind+0x12e>
      if (pcb != ipcb) {
 8011c46:	68fa      	ldr	r2, [r7, #12]
 8011c48:	697b      	ldr	r3, [r7, #20]
 8011c4a:	429a      	cmp	r2, r3
 8011c4c:	d020      	beq.n	8011c90 <udp_bind+0x128>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8011c4e:	697b      	ldr	r3, [r7, #20]
 8011c50:	8a5b      	ldrh	r3, [r3, #18]
 8011c52:	88fa      	ldrh	r2, [r7, #6]
 8011c54:	429a      	cmp	r2, r3
 8011c56:	d11b      	bne.n	8011c90 <udp_bind+0x128>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011c58:	697b      	ldr	r3, [r7, #20]
 8011c5a:	681a      	ldr	r2, [r3, #0]
 8011c5c:	68bb      	ldr	r3, [r7, #8]
 8011c5e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8011c60:	429a      	cmp	r2, r3
 8011c62:	d00d      	beq.n	8011c80 <udp_bind+0x118>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011c64:	68bb      	ldr	r3, [r7, #8]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d00a      	beq.n	8011c80 <udp_bind+0x118>
 8011c6a:	68bb      	ldr	r3, [r7, #8]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d006      	beq.n	8011c80 <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 8011c72:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d003      	beq.n	8011c80 <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 8011c78:	697b      	ldr	r3, [r7, #20]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d107      	bne.n	8011c90 <udp_bind+0x128>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
 8011c80:	88fb      	ldrh	r3, [r7, #6]
 8011c82:	4619      	mov	r1, r3
 8011c84:	482c      	ldr	r0, [pc, #176]	@ (8011d38 <udp_bind+0x1d0>)
 8011c86:	f003 f92f 	bl	8014ee8 <iprintf>
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8011c8a:	f06f 0307 	mvn.w	r3, #7
 8011c8e:	e03c      	b.n	8011d0a <udp_bind+0x1a2>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	68db      	ldr	r3, [r3, #12]
 8011c94:	617b      	str	r3, [r7, #20]
 8011c96:	697b      	ldr	r3, [r7, #20]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d1d4      	bne.n	8011c46 <udp_bind+0xde>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011c9c:	68bb      	ldr	r3, [r7, #8]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d002      	beq.n	8011ca8 <udp_bind+0x140>
 8011ca2:	68bb      	ldr	r3, [r7, #8]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	e000      	b.n	8011caa <udp_bind+0x142>
 8011ca8:	2300      	movs	r3, #0
 8011caa:	68fa      	ldr	r2, [r7, #12]
 8011cac:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	88fa      	ldrh	r2, [r7, #6]
 8011cb2:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8011cb4:	7cfb      	ldrb	r3, [r7, #19]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d106      	bne.n	8011cc8 <udp_bind+0x160>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8011cba:	4b1d      	ldr	r3, [pc, #116]	@ (8011d30 <udp_bind+0x1c8>)
 8011cbc:	681a      	ldr	r2, [r3, #0]
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8011cc2:	4a1b      	ldr	r2, [pc, #108]	@ (8011d30 <udp_bind+0x1c8>)
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
 8011cc8:	481c      	ldr	r0, [pc, #112]	@ (8011d3c <udp_bind+0x1d4>)
 8011cca:	f003 f90d 	bl	8014ee8 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	b2db      	uxtb	r3, r3
 8011cd4:	4619      	mov	r1, r3
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	0a1b      	lsrs	r3, r3, #8
 8011cdc:	b2db      	uxtb	r3, r3
 8011cde:	461a      	mov	r2, r3
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	0c1b      	lsrs	r3, r3, #16
 8011ce6:	b2db      	uxtb	r3, r3
 8011ce8:	4618      	mov	r0, r3
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	0e1b      	lsrs	r3, r3, #24
 8011cf0:	b2db      	uxtb	r3, r3
 8011cf2:	9300      	str	r3, [sp, #0]
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	480c      	ldr	r0, [pc, #48]	@ (8011d28 <udp_bind+0x1c0>)
 8011cf8:	f003 f8f6 	bl	8014ee8 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	8a5b      	ldrh	r3, [r3, #18]
 8011d00:	4619      	mov	r1, r3
 8011d02:	480f      	ldr	r0, [pc, #60]	@ (8011d40 <udp_bind+0x1d8>)
 8011d04:	f003 f8f0 	bl	8014ee8 <iprintf>
  return ERR_OK;
 8011d08:	2300      	movs	r3, #0
}
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	3718      	adds	r7, #24
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	bd80      	pop	{r7, pc}
 8011d12:	bf00      	nop
 8011d14:	080194b4 	.word	0x080194b4
 8011d18:	080181c0 	.word	0x080181c0
 8011d1c:	080186f4 	.word	0x080186f4
 8011d20:	08018214 	.word	0x08018214
 8011d24:	0801870c 	.word	0x0801870c
 8011d28:	08018304 	.word	0x08018304
 8011d2c:	08018720 	.word	0x08018720
 8011d30:	200083bc 	.word	0x200083bc
 8011d34:	08018730 	.word	0x08018730
 8011d38:	08018750 	.word	0x08018750
 8011d3c:	08018788 	.word	0x08018788
 8011d40:	0801879c 	.word	0x0801879c

08011d44 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b084      	sub	sp, #16
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	60f8      	str	r0, [r7, #12]
 8011d4c:	60b9      	str	r1, [r7, #8]
 8011d4e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d107      	bne.n	8011d66 <udp_recv+0x22>
 8011d56:	4b08      	ldr	r3, [pc, #32]	@ (8011d78 <udp_recv+0x34>)
 8011d58:	f240 428a 	movw	r2, #1162	@ 0x48a
 8011d5c:	4907      	ldr	r1, [pc, #28]	@ (8011d7c <udp_recv+0x38>)
 8011d5e:	4808      	ldr	r0, [pc, #32]	@ (8011d80 <udp_recv+0x3c>)
 8011d60:	f003 f8c2 	bl	8014ee8 <iprintf>
 8011d64:	e005      	b.n	8011d72 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	68ba      	ldr	r2, [r7, #8]
 8011d6a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	687a      	ldr	r2, [r7, #4]
 8011d70:	61da      	str	r2, [r3, #28]
}
 8011d72:	3710      	adds	r7, #16
 8011d74:	46bd      	mov	sp, r7
 8011d76:	bd80      	pop	{r7, pc}
 8011d78:	080181c0 	.word	0x080181c0
 8011d7c:	0801881c 	.word	0x0801881c
 8011d80:	08018214 	.word	0x08018214

08011d84 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b084      	sub	sp, #16
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d107      	bne.n	8011da2 <udp_remove+0x1e>
 8011d92:	4b19      	ldr	r3, [pc, #100]	@ (8011df8 <udp_remove+0x74>)
 8011d94:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8011d98:	4918      	ldr	r1, [pc, #96]	@ (8011dfc <udp_remove+0x78>)
 8011d9a:	4819      	ldr	r0, [pc, #100]	@ (8011e00 <udp_remove+0x7c>)
 8011d9c:	f003 f8a4 	bl	8014ee8 <iprintf>
 8011da0:	e026      	b.n	8011df0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8011da2:	4b18      	ldr	r3, [pc, #96]	@ (8011e04 <udp_remove+0x80>)
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	687a      	ldr	r2, [r7, #4]
 8011da8:	429a      	cmp	r2, r3
 8011daa:	d105      	bne.n	8011db8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8011dac:	4b15      	ldr	r3, [pc, #84]	@ (8011e04 <udp_remove+0x80>)
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	68db      	ldr	r3, [r3, #12]
 8011db2:	4a14      	ldr	r2, [pc, #80]	@ (8011e04 <udp_remove+0x80>)
 8011db4:	6013      	str	r3, [r2, #0]
 8011db6:	e017      	b.n	8011de8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011db8:	4b12      	ldr	r3, [pc, #72]	@ (8011e04 <udp_remove+0x80>)
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	60fb      	str	r3, [r7, #12]
 8011dbe:	e010      	b.n	8011de2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	68db      	ldr	r3, [r3, #12]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d009      	beq.n	8011ddc <udp_remove+0x58>
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	68db      	ldr	r3, [r3, #12]
 8011dcc:	687a      	ldr	r2, [r7, #4]
 8011dce:	429a      	cmp	r2, r3
 8011dd0:	d104      	bne.n	8011ddc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	68da      	ldr	r2, [r3, #12]
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	60da      	str	r2, [r3, #12]
        break;
 8011dda:	e005      	b.n	8011de8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	68db      	ldr	r3, [r3, #12]
 8011de0:	60fb      	str	r3, [r7, #12]
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d1eb      	bne.n	8011dc0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8011de8:	6879      	ldr	r1, [r7, #4]
 8011dea:	2000      	movs	r0, #0
 8011dec:	f7f8 fd58 	bl	800a8a0 <memp_free>
}
 8011df0:	3710      	adds	r7, #16
 8011df2:	46bd      	mov	sp, r7
 8011df4:	bd80      	pop	{r7, pc}
 8011df6:	bf00      	nop
 8011df8:	080181c0 	.word	0x080181c0
 8011dfc:	08018834 	.word	0x08018834
 8011e00:	08018214 	.word	0x08018214
 8011e04:	200083bc 	.word	0x200083bc

08011e08 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b082      	sub	sp, #8
 8011e0c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8011e0e:	2000      	movs	r0, #0
 8011e10:	f7f8 fcd6 	bl	800a7c0 <memp_malloc>
 8011e14:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d007      	beq.n	8011e2c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8011e1c:	2220      	movs	r2, #32
 8011e1e:	2100      	movs	r1, #0
 8011e20:	6878      	ldr	r0, [r7, #4]
 8011e22:	f003 f9c1 	bl	80151a8 <memset>
    pcb->ttl = UDP_TTL;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	22ff      	movs	r2, #255	@ 0xff
 8011e2a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8011e2c:	687b      	ldr	r3, [r7, #4]
}
 8011e2e:	4618      	mov	r0, r3
 8011e30:	3708      	adds	r7, #8
 8011e32:	46bd      	mov	sp, r7
 8011e34:	bd80      	pop	{r7, pc}
	...

08011e38 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011e38:	b480      	push	{r7}
 8011e3a:	b085      	sub	sp, #20
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
 8011e40:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d01e      	beq.n	8011e86 <udp_netif_ip_addr_changed+0x4e>
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d01a      	beq.n	8011e86 <udp_netif_ip_addr_changed+0x4e>
 8011e50:	683b      	ldr	r3, [r7, #0]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d017      	beq.n	8011e86 <udp_netif_ip_addr_changed+0x4e>
 8011e56:	683b      	ldr	r3, [r7, #0]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d013      	beq.n	8011e86 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8011e94 <udp_netif_ip_addr_changed+0x5c>)
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	60fb      	str	r3, [r7, #12]
 8011e64:	e00c      	b.n	8011e80 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	681a      	ldr	r2, [r3, #0]
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	429a      	cmp	r2, r3
 8011e70:	d103      	bne.n	8011e7a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011e72:	683b      	ldr	r3, [r7, #0]
 8011e74:	681a      	ldr	r2, [r3, #0]
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	68db      	ldr	r3, [r3, #12]
 8011e7e:	60fb      	str	r3, [r7, #12]
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d1ef      	bne.n	8011e66 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011e86:	bf00      	nop
 8011e88:	3714      	adds	r7, #20
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e90:	4770      	bx	lr
 8011e92:	bf00      	nop
 8011e94:	200083bc 	.word	0x200083bc

08011e98 <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 8011e98:	b590      	push	{r4, r7, lr}
 8011e9a:	b083      	sub	sp, #12
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(UDP_DEBUG, ("UDP header:\n"));
 8011ea0:	481b      	ldr	r0, [pc, #108]	@ (8011f10 <udp_debug_print+0x78>)
 8011ea2:	f003 f891 	bl	8014fc8 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 8011ea6:	481b      	ldr	r0, [pc, #108]	@ (8011f14 <udp_debug_print+0x7c>)
 8011ea8:	f003 f88e 	bl	8014fc8 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     %5"U16_F"     | (src port, dest port)\n",
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	881b      	ldrh	r3, [r3, #0]
 8011eb0:	b29b      	uxth	r3, r3
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	f7f8 f810 	bl	8009ed8 <lwip_htons>
 8011eb8:	4603      	mov	r3, r0
 8011eba:	461c      	mov	r4, r3
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	885b      	ldrh	r3, [r3, #2]
 8011ec0:	b29b      	uxth	r3, r3
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	f7f8 f808 	bl	8009ed8 <lwip_htons>
 8011ec8:	4603      	mov	r3, r0
 8011eca:	461a      	mov	r2, r3
 8011ecc:	4621      	mov	r1, r4
 8011ece:	4812      	ldr	r0, [pc, #72]	@ (8011f18 <udp_debug_print+0x80>)
 8011ed0:	f003 f80a 	bl	8014ee8 <iprintf>
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 8011ed4:	480f      	ldr	r0, [pc, #60]	@ (8011f14 <udp_debug_print+0x7c>)
 8011ed6:	f003 f877 	bl	8014fc8 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	889b      	ldrh	r3, [r3, #4]
 8011ede:	b29b      	uxth	r3, r3
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f7f7 fff9 	bl	8009ed8 <lwip_htons>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	461c      	mov	r4, r3
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	88db      	ldrh	r3, [r3, #6]
 8011eee:	b29b      	uxth	r3, r3
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	f7f7 fff1 	bl	8009ed8 <lwip_htons>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	461a      	mov	r2, r3
 8011efa:	4621      	mov	r1, r4
 8011efc:	4807      	ldr	r0, [pc, #28]	@ (8011f1c <udp_debug_print+0x84>)
 8011efe:	f002 fff3 	bl	8014ee8 <iprintf>
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 8011f02:	4804      	ldr	r0, [pc, #16]	@ (8011f14 <udp_debug_print+0x7c>)
 8011f04:	f003 f860 	bl	8014fc8 <puts>
}
 8011f08:	bf00      	nop
 8011f0a:	370c      	adds	r7, #12
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bd90      	pop	{r4, r7, pc}
 8011f10:	0801884c 	.word	0x0801884c
 8011f14:	08018858 	.word	0x08018858
 8011f18:	0801887c 	.word	0x0801887c
 8011f1c:	080188b4 	.word	0x080188b4

08011f20 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b082      	sub	sp, #8
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011f28:	492b      	ldr	r1, [pc, #172]	@ (8011fd8 <etharp_free_entry+0xb8>)
 8011f2a:	687a      	ldr	r2, [r7, #4]
 8011f2c:	4613      	mov	r3, r2
 8011f2e:	005b      	lsls	r3, r3, #1
 8011f30:	4413      	add	r3, r2
 8011f32:	00db      	lsls	r3, r3, #3
 8011f34:	440b      	add	r3, r1
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d013      	beq.n	8011f64 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011f3c:	4926      	ldr	r1, [pc, #152]	@ (8011fd8 <etharp_free_entry+0xb8>)
 8011f3e:	687a      	ldr	r2, [r7, #4]
 8011f40:	4613      	mov	r3, r2
 8011f42:	005b      	lsls	r3, r3, #1
 8011f44:	4413      	add	r3, r2
 8011f46:	00db      	lsls	r3, r3, #3
 8011f48:	440b      	add	r3, r1
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	f7f9 fc13 	bl	800b778 <pbuf_free>
    arp_table[i].q = NULL;
 8011f52:	4921      	ldr	r1, [pc, #132]	@ (8011fd8 <etharp_free_entry+0xb8>)
 8011f54:	687a      	ldr	r2, [r7, #4]
 8011f56:	4613      	mov	r3, r2
 8011f58:	005b      	lsls	r3, r3, #1
 8011f5a:	4413      	add	r3, r2
 8011f5c:	00db      	lsls	r3, r3, #3
 8011f5e:	440b      	add	r3, r1
 8011f60:	2200      	movs	r2, #0
 8011f62:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011f64:	491c      	ldr	r1, [pc, #112]	@ (8011fd8 <etharp_free_entry+0xb8>)
 8011f66:	687a      	ldr	r2, [r7, #4]
 8011f68:	4613      	mov	r3, r2
 8011f6a:	005b      	lsls	r3, r3, #1
 8011f6c:	4413      	add	r3, r2
 8011f6e:	00db      	lsls	r3, r3, #3
 8011f70:	440b      	add	r3, r1
 8011f72:	3314      	adds	r3, #20
 8011f74:	2200      	movs	r2, #0
 8011f76:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 8011f78:	4917      	ldr	r1, [pc, #92]	@ (8011fd8 <etharp_free_entry+0xb8>)
 8011f7a:	687a      	ldr	r2, [r7, #4]
 8011f7c:	4613      	mov	r3, r2
 8011f7e:	005b      	lsls	r3, r3, #1
 8011f80:	4413      	add	r3, r2
 8011f82:	00db      	lsls	r3, r3, #3
 8011f84:	440b      	add	r3, r1
 8011f86:	3312      	adds	r3, #18
 8011f88:	2200      	movs	r2, #0
 8011f8a:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 8011f8c:	4912      	ldr	r1, [pc, #72]	@ (8011fd8 <etharp_free_entry+0xb8>)
 8011f8e:	687a      	ldr	r2, [r7, #4]
 8011f90:	4613      	mov	r3, r2
 8011f92:	005b      	lsls	r3, r3, #1
 8011f94:	4413      	add	r3, r2
 8011f96:	00db      	lsls	r3, r3, #3
 8011f98:	440b      	add	r3, r1
 8011f9a:	3308      	adds	r3, #8
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 8011fa0:	490d      	ldr	r1, [pc, #52]	@ (8011fd8 <etharp_free_entry+0xb8>)
 8011fa2:	687a      	ldr	r2, [r7, #4]
 8011fa4:	4613      	mov	r3, r2
 8011fa6:	005b      	lsls	r3, r3, #1
 8011fa8:	4413      	add	r3, r2
 8011faa:	00db      	lsls	r3, r3, #3
 8011fac:	440b      	add	r3, r1
 8011fae:	3304      	adds	r3, #4
 8011fb0:	2200      	movs	r2, #0
 8011fb2:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 8011fb4:	4908      	ldr	r1, [pc, #32]	@ (8011fd8 <etharp_free_entry+0xb8>)
 8011fb6:	687a      	ldr	r2, [r7, #4]
 8011fb8:	4613      	mov	r3, r2
 8011fba:	005b      	lsls	r3, r3, #1
 8011fbc:	4413      	add	r3, r2
 8011fbe:	00db      	lsls	r3, r3, #3
 8011fc0:	440b      	add	r3, r1
 8011fc2:	3308      	adds	r3, #8
 8011fc4:	4a05      	ldr	r2, [pc, #20]	@ (8011fdc <etharp_free_entry+0xbc>)
 8011fc6:	3304      	adds	r3, #4
 8011fc8:	6810      	ldr	r0, [r2, #0]
 8011fca:	6018      	str	r0, [r3, #0]
 8011fcc:	8892      	ldrh	r2, [r2, #4]
 8011fce:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 8011fd0:	bf00      	nop
 8011fd2:	3708      	adds	r7, #8
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	bd80      	pop	{r7, pc}
 8011fd8:	200083c0 	.word	0x200083c0
 8011fdc:	080194c0 	.word	0x080194c0

08011fe0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b082      	sub	sp, #8
 8011fe4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	607b      	str	r3, [r7, #4]
 8011fea:	e096      	b.n	801211a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011fec:	494f      	ldr	r1, [pc, #316]	@ (801212c <etharp_tmr+0x14c>)
 8011fee:	687a      	ldr	r2, [r7, #4]
 8011ff0:	4613      	mov	r3, r2
 8011ff2:	005b      	lsls	r3, r3, #1
 8011ff4:	4413      	add	r3, r2
 8011ff6:	00db      	lsls	r3, r3, #3
 8011ff8:	440b      	add	r3, r1
 8011ffa:	3314      	adds	r3, #20
 8011ffc:	781b      	ldrb	r3, [r3, #0]
 8011ffe:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012000:	78fb      	ldrb	r3, [r7, #3]
 8012002:	2b00      	cmp	r3, #0
 8012004:	f000 8086 	beq.w	8012114 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012008:	4948      	ldr	r1, [pc, #288]	@ (801212c <etharp_tmr+0x14c>)
 801200a:	687a      	ldr	r2, [r7, #4]
 801200c:	4613      	mov	r3, r2
 801200e:	005b      	lsls	r3, r3, #1
 8012010:	4413      	add	r3, r2
 8012012:	00db      	lsls	r3, r3, #3
 8012014:	440b      	add	r3, r1
 8012016:	3312      	adds	r3, #18
 8012018:	881b      	ldrh	r3, [r3, #0]
 801201a:	3301      	adds	r3, #1
 801201c:	b298      	uxth	r0, r3
 801201e:	4943      	ldr	r1, [pc, #268]	@ (801212c <etharp_tmr+0x14c>)
 8012020:	687a      	ldr	r2, [r7, #4]
 8012022:	4613      	mov	r3, r2
 8012024:	005b      	lsls	r3, r3, #1
 8012026:	4413      	add	r3, r2
 8012028:	00db      	lsls	r3, r3, #3
 801202a:	440b      	add	r3, r1
 801202c:	3312      	adds	r3, #18
 801202e:	4602      	mov	r2, r0
 8012030:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012032:	493e      	ldr	r1, [pc, #248]	@ (801212c <etharp_tmr+0x14c>)
 8012034:	687a      	ldr	r2, [r7, #4]
 8012036:	4613      	mov	r3, r2
 8012038:	005b      	lsls	r3, r3, #1
 801203a:	4413      	add	r3, r2
 801203c:	00db      	lsls	r3, r3, #3
 801203e:	440b      	add	r3, r1
 8012040:	3312      	adds	r3, #18
 8012042:	881b      	ldrh	r3, [r3, #0]
 8012044:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8012048:	d215      	bcs.n	8012076 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801204a:	4938      	ldr	r1, [pc, #224]	@ (801212c <etharp_tmr+0x14c>)
 801204c:	687a      	ldr	r2, [r7, #4]
 801204e:	4613      	mov	r3, r2
 8012050:	005b      	lsls	r3, r3, #1
 8012052:	4413      	add	r3, r2
 8012054:	00db      	lsls	r3, r3, #3
 8012056:	440b      	add	r3, r1
 8012058:	3314      	adds	r3, #20
 801205a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801205c:	2b01      	cmp	r3, #1
 801205e:	d10e      	bne.n	801207e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012060:	4932      	ldr	r1, [pc, #200]	@ (801212c <etharp_tmr+0x14c>)
 8012062:	687a      	ldr	r2, [r7, #4]
 8012064:	4613      	mov	r3, r2
 8012066:	005b      	lsls	r3, r3, #1
 8012068:	4413      	add	r3, r2
 801206a:	00db      	lsls	r3, r3, #3
 801206c:	440b      	add	r3, r1
 801206e:	3312      	adds	r3, #18
 8012070:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012072:	2b04      	cmp	r3, #4
 8012074:	d903      	bls.n	801207e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012076:	6878      	ldr	r0, [r7, #4]
 8012078:	f7ff ff52 	bl	8011f20 <etharp_free_entry>
 801207c:	e04a      	b.n	8012114 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801207e:	492b      	ldr	r1, [pc, #172]	@ (801212c <etharp_tmr+0x14c>)
 8012080:	687a      	ldr	r2, [r7, #4]
 8012082:	4613      	mov	r3, r2
 8012084:	005b      	lsls	r3, r3, #1
 8012086:	4413      	add	r3, r2
 8012088:	00db      	lsls	r3, r3, #3
 801208a:	440b      	add	r3, r1
 801208c:	3314      	adds	r3, #20
 801208e:	781b      	ldrb	r3, [r3, #0]
 8012090:	2b03      	cmp	r3, #3
 8012092:	d10a      	bne.n	80120aa <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012094:	4925      	ldr	r1, [pc, #148]	@ (801212c <etharp_tmr+0x14c>)
 8012096:	687a      	ldr	r2, [r7, #4]
 8012098:	4613      	mov	r3, r2
 801209a:	005b      	lsls	r3, r3, #1
 801209c:	4413      	add	r3, r2
 801209e:	00db      	lsls	r3, r3, #3
 80120a0:	440b      	add	r3, r1
 80120a2:	3314      	adds	r3, #20
 80120a4:	2204      	movs	r2, #4
 80120a6:	701a      	strb	r2, [r3, #0]
 80120a8:	e034      	b.n	8012114 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80120aa:	4920      	ldr	r1, [pc, #128]	@ (801212c <etharp_tmr+0x14c>)
 80120ac:	687a      	ldr	r2, [r7, #4]
 80120ae:	4613      	mov	r3, r2
 80120b0:	005b      	lsls	r3, r3, #1
 80120b2:	4413      	add	r3, r2
 80120b4:	00db      	lsls	r3, r3, #3
 80120b6:	440b      	add	r3, r1
 80120b8:	3314      	adds	r3, #20
 80120ba:	781b      	ldrb	r3, [r3, #0]
 80120bc:	2b04      	cmp	r3, #4
 80120be:	d10a      	bne.n	80120d6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80120c0:	491a      	ldr	r1, [pc, #104]	@ (801212c <etharp_tmr+0x14c>)
 80120c2:	687a      	ldr	r2, [r7, #4]
 80120c4:	4613      	mov	r3, r2
 80120c6:	005b      	lsls	r3, r3, #1
 80120c8:	4413      	add	r3, r2
 80120ca:	00db      	lsls	r3, r3, #3
 80120cc:	440b      	add	r3, r1
 80120ce:	3314      	adds	r3, #20
 80120d0:	2202      	movs	r2, #2
 80120d2:	701a      	strb	r2, [r3, #0]
 80120d4:	e01e      	b.n	8012114 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80120d6:	4915      	ldr	r1, [pc, #84]	@ (801212c <etharp_tmr+0x14c>)
 80120d8:	687a      	ldr	r2, [r7, #4]
 80120da:	4613      	mov	r3, r2
 80120dc:	005b      	lsls	r3, r3, #1
 80120de:	4413      	add	r3, r2
 80120e0:	00db      	lsls	r3, r3, #3
 80120e2:	440b      	add	r3, r1
 80120e4:	3314      	adds	r3, #20
 80120e6:	781b      	ldrb	r3, [r3, #0]
 80120e8:	2b01      	cmp	r3, #1
 80120ea:	d113      	bne.n	8012114 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80120ec:	490f      	ldr	r1, [pc, #60]	@ (801212c <etharp_tmr+0x14c>)
 80120ee:	687a      	ldr	r2, [r7, #4]
 80120f0:	4613      	mov	r3, r2
 80120f2:	005b      	lsls	r3, r3, #1
 80120f4:	4413      	add	r3, r2
 80120f6:	00db      	lsls	r3, r3, #3
 80120f8:	440b      	add	r3, r1
 80120fa:	3308      	adds	r3, #8
 80120fc:	6818      	ldr	r0, [r3, #0]
 80120fe:	687a      	ldr	r2, [r7, #4]
 8012100:	4613      	mov	r3, r2
 8012102:	005b      	lsls	r3, r3, #1
 8012104:	4413      	add	r3, r2
 8012106:	00db      	lsls	r3, r3, #3
 8012108:	4a08      	ldr	r2, [pc, #32]	@ (801212c <etharp_tmr+0x14c>)
 801210a:	4413      	add	r3, r2
 801210c:	3304      	adds	r3, #4
 801210e:	4619      	mov	r1, r3
 8012110:	f000 fe6e 	bl	8012df0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	3301      	adds	r3, #1
 8012118:	607b      	str	r3, [r7, #4]
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	2b09      	cmp	r3, #9
 801211e:	f77f af65 	ble.w	8011fec <etharp_tmr+0xc>
      }
    }
  }
}
 8012122:	bf00      	nop
 8012124:	bf00      	nop
 8012126:	3708      	adds	r7, #8
 8012128:	46bd      	mov	sp, r7
 801212a:	bd80      	pop	{r7, pc}
 801212c:	200083c0 	.word	0x200083c0

08012130 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b08a      	sub	sp, #40	@ 0x28
 8012134:	af00      	add	r7, sp, #0
 8012136:	60f8      	str	r0, [r7, #12]
 8012138:	460b      	mov	r3, r1
 801213a:	607a      	str	r2, [r7, #4]
 801213c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801213e:	230a      	movs	r3, #10
 8012140:	843b      	strh	r3, [r7, #32]
 8012142:	230a      	movs	r3, #10
 8012144:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t empty = ARP_TABLE_SIZE;
 8012146:	230a      	movs	r3, #10
 8012148:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t i = 0;
 801214a:	2300      	movs	r3, #0
 801214c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801214e:	230a      	movs	r3, #10
 8012150:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012152:	2300      	movs	r3, #0
 8012154:	83bb      	strh	r3, [r7, #28]
 8012156:	2300      	movs	r3, #0
 8012158:	837b      	strh	r3, [r7, #26]
 801215a:	2300      	movs	r3, #0
 801215c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801215e:	2300      	movs	r3, #0
 8012160:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8012162:	e0ae      	b.n	80122c2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012164:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8012168:	49a6      	ldr	r1, [pc, #664]	@ (8012404 <etharp_find_entry+0x2d4>)
 801216a:	4613      	mov	r3, r2
 801216c:	005b      	lsls	r3, r3, #1
 801216e:	4413      	add	r3, r2
 8012170:	00db      	lsls	r3, r3, #3
 8012172:	440b      	add	r3, r1
 8012174:	3314      	adds	r3, #20
 8012176:	781b      	ldrb	r3, [r3, #0]
 8012178:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801217a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801217e:	2b0a      	cmp	r3, #10
 8012180:	d105      	bne.n	801218e <etharp_find_entry+0x5e>
 8012182:	7dfb      	ldrb	r3, [r7, #23]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d102      	bne.n	801218e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012188:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801218a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801218c:	e095      	b.n	80122ba <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801218e:	7dfb      	ldrb	r3, [r7, #23]
 8012190:	2b00      	cmp	r3, #0
 8012192:	f000 8092 	beq.w	80122ba <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012196:	7dfb      	ldrb	r3, [r7, #23]
 8012198:	2b01      	cmp	r3, #1
 801219a:	d009      	beq.n	80121b0 <etharp_find_entry+0x80>
 801219c:	7dfb      	ldrb	r3, [r7, #23]
 801219e:	2b01      	cmp	r3, #1
 80121a0:	d806      	bhi.n	80121b0 <etharp_find_entry+0x80>
 80121a2:	4b99      	ldr	r3, [pc, #612]	@ (8012408 <etharp_find_entry+0x2d8>)
 80121a4:	f240 1223 	movw	r2, #291	@ 0x123
 80121a8:	4998      	ldr	r1, [pc, #608]	@ (801240c <etharp_find_entry+0x2dc>)
 80121aa:	4899      	ldr	r0, [pc, #612]	@ (8012410 <etharp_find_entry+0x2e0>)
 80121ac:	f002 fe9c 	bl	8014ee8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d020      	beq.n	80121f8 <etharp_find_entry+0xc8>
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	6819      	ldr	r1, [r3, #0]
 80121ba:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80121be:	4891      	ldr	r0, [pc, #580]	@ (8012404 <etharp_find_entry+0x2d4>)
 80121c0:	4613      	mov	r3, r2
 80121c2:	005b      	lsls	r3, r3, #1
 80121c4:	4413      	add	r3, r2
 80121c6:	00db      	lsls	r3, r3, #3
 80121c8:	4403      	add	r3, r0
 80121ca:	3304      	adds	r3, #4
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	4299      	cmp	r1, r3
 80121d0:	d112      	bne.n	80121f8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d00c      	beq.n	80121f2 <etharp_find_entry+0xc2>
 80121d8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80121dc:	4989      	ldr	r1, [pc, #548]	@ (8012404 <etharp_find_entry+0x2d4>)
 80121de:	4613      	mov	r3, r2
 80121e0:	005b      	lsls	r3, r3, #1
 80121e2:	4413      	add	r3, r2
 80121e4:	00db      	lsls	r3, r3, #3
 80121e6:	440b      	add	r3, r1
 80121e8:	3308      	adds	r3, #8
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	687a      	ldr	r2, [r7, #4]
 80121ee:	429a      	cmp	r2, r3
 80121f0:	d102      	bne.n	80121f8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80121f2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80121f6:	e100      	b.n	80123fa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80121f8:	7dfb      	ldrb	r3, [r7, #23]
 80121fa:	2b01      	cmp	r3, #1
 80121fc:	d140      	bne.n	8012280 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80121fe:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8012202:	4980      	ldr	r1, [pc, #512]	@ (8012404 <etharp_find_entry+0x2d4>)
 8012204:	4613      	mov	r3, r2
 8012206:	005b      	lsls	r3, r3, #1
 8012208:	4413      	add	r3, r2
 801220a:	00db      	lsls	r3, r3, #3
 801220c:	440b      	add	r3, r1
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d01a      	beq.n	801224a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012214:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8012218:	497a      	ldr	r1, [pc, #488]	@ (8012404 <etharp_find_entry+0x2d4>)
 801221a:	4613      	mov	r3, r2
 801221c:	005b      	lsls	r3, r3, #1
 801221e:	4413      	add	r3, r2
 8012220:	00db      	lsls	r3, r3, #3
 8012222:	440b      	add	r3, r1
 8012224:	3312      	adds	r3, #18
 8012226:	881b      	ldrh	r3, [r3, #0]
 8012228:	8bba      	ldrh	r2, [r7, #28]
 801222a:	429a      	cmp	r2, r3
 801222c:	d845      	bhi.n	80122ba <etharp_find_entry+0x18a>
            old_queue = i;
 801222e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012230:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012232:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8012236:	4973      	ldr	r1, [pc, #460]	@ (8012404 <etharp_find_entry+0x2d4>)
 8012238:	4613      	mov	r3, r2
 801223a:	005b      	lsls	r3, r3, #1
 801223c:	4413      	add	r3, r2
 801223e:	00db      	lsls	r3, r3, #3
 8012240:	440b      	add	r3, r1
 8012242:	3312      	adds	r3, #18
 8012244:	881b      	ldrh	r3, [r3, #0]
 8012246:	83bb      	strh	r3, [r7, #28]
 8012248:	e037      	b.n	80122ba <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801224a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801224e:	496d      	ldr	r1, [pc, #436]	@ (8012404 <etharp_find_entry+0x2d4>)
 8012250:	4613      	mov	r3, r2
 8012252:	005b      	lsls	r3, r3, #1
 8012254:	4413      	add	r3, r2
 8012256:	00db      	lsls	r3, r3, #3
 8012258:	440b      	add	r3, r1
 801225a:	3312      	adds	r3, #18
 801225c:	881b      	ldrh	r3, [r3, #0]
 801225e:	8b7a      	ldrh	r2, [r7, #26]
 8012260:	429a      	cmp	r2, r3
 8012262:	d82a      	bhi.n	80122ba <etharp_find_entry+0x18a>
            old_pending = i;
 8012264:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012266:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 8012268:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801226c:	4965      	ldr	r1, [pc, #404]	@ (8012404 <etharp_find_entry+0x2d4>)
 801226e:	4613      	mov	r3, r2
 8012270:	005b      	lsls	r3, r3, #1
 8012272:	4413      	add	r3, r2
 8012274:	00db      	lsls	r3, r3, #3
 8012276:	440b      	add	r3, r1
 8012278:	3312      	adds	r3, #18
 801227a:	881b      	ldrh	r3, [r3, #0]
 801227c:	837b      	strh	r3, [r7, #26]
 801227e:	e01c      	b.n	80122ba <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012280:	7dfb      	ldrb	r3, [r7, #23]
 8012282:	2b01      	cmp	r3, #1
 8012284:	d919      	bls.n	80122ba <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012286:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801228a:	495e      	ldr	r1, [pc, #376]	@ (8012404 <etharp_find_entry+0x2d4>)
 801228c:	4613      	mov	r3, r2
 801228e:	005b      	lsls	r3, r3, #1
 8012290:	4413      	add	r3, r2
 8012292:	00db      	lsls	r3, r3, #3
 8012294:	440b      	add	r3, r1
 8012296:	3312      	adds	r3, #18
 8012298:	881b      	ldrh	r3, [r3, #0]
 801229a:	8b3a      	ldrh	r2, [r7, #24]
 801229c:	429a      	cmp	r2, r3
 801229e:	d80c      	bhi.n	80122ba <etharp_find_entry+0x18a>
            old_stable = i;
 80122a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80122a2:	847b      	strh	r3, [r7, #34]	@ 0x22
            age_stable = arp_table[i].ctime;
 80122a4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80122a8:	4956      	ldr	r1, [pc, #344]	@ (8012404 <etharp_find_entry+0x2d4>)
 80122aa:	4613      	mov	r3, r2
 80122ac:	005b      	lsls	r3, r3, #1
 80122ae:	4413      	add	r3, r2
 80122b0:	00db      	lsls	r3, r3, #3
 80122b2:	440b      	add	r3, r1
 80122b4:	3312      	adds	r3, #18
 80122b6:	881b      	ldrh	r3, [r3, #0]
 80122b8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80122ba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80122bc:	3301      	adds	r3, #1
 80122be:	b29b      	uxth	r3, r3
 80122c0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80122c2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80122c6:	2b09      	cmp	r3, #9
 80122c8:	f77f af4c 	ble.w	8012164 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80122cc:	7afb      	ldrb	r3, [r7, #11]
 80122ce:	f003 0302 	and.w	r3, r3, #2
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d108      	bne.n	80122e8 <etharp_find_entry+0x1b8>
 80122d6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80122da:	2b0a      	cmp	r3, #10
 80122dc:	d107      	bne.n	80122ee <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80122de:	7afb      	ldrb	r3, [r7, #11]
 80122e0:	f003 0301 	and.w	r3, r3, #1
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d102      	bne.n	80122ee <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80122e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80122ec:	e085      	b.n	80123fa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80122ee:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80122f2:	2b09      	cmp	r3, #9
 80122f4:	dc02      	bgt.n	80122fc <etharp_find_entry+0x1cc>
    i = empty;
 80122f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80122f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80122fa:	e039      	b.n	8012370 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80122fc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012300:	2b09      	cmp	r3, #9
 8012302:	dc14      	bgt.n	801232e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012304:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012306:	84fb      	strh	r3, [r7, #38]	@ 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012308:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801230c:	493d      	ldr	r1, [pc, #244]	@ (8012404 <etharp_find_entry+0x2d4>)
 801230e:	4613      	mov	r3, r2
 8012310:	005b      	lsls	r3, r3, #1
 8012312:	4413      	add	r3, r2
 8012314:	00db      	lsls	r3, r3, #3
 8012316:	440b      	add	r3, r1
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d018      	beq.n	8012350 <etharp_find_entry+0x220>
 801231e:	4b3a      	ldr	r3, [pc, #232]	@ (8012408 <etharp_find_entry+0x2d8>)
 8012320:	f240 126d 	movw	r2, #365	@ 0x16d
 8012324:	493b      	ldr	r1, [pc, #236]	@ (8012414 <etharp_find_entry+0x2e4>)
 8012326:	483a      	ldr	r0, [pc, #232]	@ (8012410 <etharp_find_entry+0x2e0>)
 8012328:	f002 fdde 	bl	8014ee8 <iprintf>
 801232c:	e010      	b.n	8012350 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801232e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012332:	2b09      	cmp	r3, #9
 8012334:	dc02      	bgt.n	801233c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012336:	8c3b      	ldrh	r3, [r7, #32]
 8012338:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801233a:	e009      	b.n	8012350 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801233c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012340:	2b09      	cmp	r3, #9
 8012342:	dc02      	bgt.n	801234a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012344:	8bfb      	ldrh	r3, [r7, #30]
 8012346:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8012348:	e002      	b.n	8012350 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801234a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801234e:	e054      	b.n	80123fa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012350:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8012354:	2b09      	cmp	r3, #9
 8012356:	dd06      	ble.n	8012366 <etharp_find_entry+0x236>
 8012358:	4b2b      	ldr	r3, [pc, #172]	@ (8012408 <etharp_find_entry+0x2d8>)
 801235a:	f240 127f 	movw	r2, #383	@ 0x17f
 801235e:	492e      	ldr	r1, [pc, #184]	@ (8012418 <etharp_find_entry+0x2e8>)
 8012360:	482b      	ldr	r0, [pc, #172]	@ (8012410 <etharp_find_entry+0x2e0>)
 8012362:	f002 fdc1 	bl	8014ee8 <iprintf>
    etharp_free_entry(i);
 8012366:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801236a:	4618      	mov	r0, r3
 801236c:	f7ff fdd8 	bl	8011f20 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012370:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8012374:	2b09      	cmp	r3, #9
 8012376:	dd06      	ble.n	8012386 <etharp_find_entry+0x256>
 8012378:	4b23      	ldr	r3, [pc, #140]	@ (8012408 <etharp_find_entry+0x2d8>)
 801237a:	f240 1283 	movw	r2, #387	@ 0x183
 801237e:	4926      	ldr	r1, [pc, #152]	@ (8012418 <etharp_find_entry+0x2e8>)
 8012380:	4823      	ldr	r0, [pc, #140]	@ (8012410 <etharp_find_entry+0x2e0>)
 8012382:	f002 fdb1 	bl	8014ee8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012386:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801238a:	491e      	ldr	r1, [pc, #120]	@ (8012404 <etharp_find_entry+0x2d4>)
 801238c:	4613      	mov	r3, r2
 801238e:	005b      	lsls	r3, r3, #1
 8012390:	4413      	add	r3, r2
 8012392:	00db      	lsls	r3, r3, #3
 8012394:	440b      	add	r3, r1
 8012396:	3314      	adds	r3, #20
 8012398:	781b      	ldrb	r3, [r3, #0]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d006      	beq.n	80123ac <etharp_find_entry+0x27c>
 801239e:	4b1a      	ldr	r3, [pc, #104]	@ (8012408 <etharp_find_entry+0x2d8>)
 80123a0:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80123a4:	491d      	ldr	r1, [pc, #116]	@ (801241c <etharp_find_entry+0x2ec>)
 80123a6:	481a      	ldr	r0, [pc, #104]	@ (8012410 <etharp_find_entry+0x2e0>)
 80123a8:	f002 fd9e 	bl	8014ee8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d00b      	beq.n	80123ca <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80123b2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	6819      	ldr	r1, [r3, #0]
 80123ba:	4812      	ldr	r0, [pc, #72]	@ (8012404 <etharp_find_entry+0x2d4>)
 80123bc:	4613      	mov	r3, r2
 80123be:	005b      	lsls	r3, r3, #1
 80123c0:	4413      	add	r3, r2
 80123c2:	00db      	lsls	r3, r3, #3
 80123c4:	4403      	add	r3, r0
 80123c6:	3304      	adds	r3, #4
 80123c8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80123ca:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80123ce:	490d      	ldr	r1, [pc, #52]	@ (8012404 <etharp_find_entry+0x2d4>)
 80123d0:	4613      	mov	r3, r2
 80123d2:	005b      	lsls	r3, r3, #1
 80123d4:	4413      	add	r3, r2
 80123d6:	00db      	lsls	r3, r3, #3
 80123d8:	440b      	add	r3, r1
 80123da:	3312      	adds	r3, #18
 80123dc:	2200      	movs	r2, #0
 80123de:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80123e0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80123e4:	4907      	ldr	r1, [pc, #28]	@ (8012404 <etharp_find_entry+0x2d4>)
 80123e6:	4613      	mov	r3, r2
 80123e8:	005b      	lsls	r3, r3, #1
 80123ea:	4413      	add	r3, r2
 80123ec:	00db      	lsls	r3, r3, #3
 80123ee:	440b      	add	r3, r1
 80123f0:	3308      	adds	r3, #8
 80123f2:	687a      	ldr	r2, [r7, #4]
 80123f4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80123f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 80123fa:	4618      	mov	r0, r3
 80123fc:	3728      	adds	r7, #40	@ 0x28
 80123fe:	46bd      	mov	sp, r7
 8012400:	bd80      	pop	{r7, pc}
 8012402:	bf00      	nop
 8012404:	200083c0 	.word	0x200083c0
 8012408:	080188e8 	.word	0x080188e8
 801240c:	08018920 	.word	0x08018920
 8012410:	08018960 	.word	0x08018960
 8012414:	08018988 	.word	0x08018988
 8012418:	080189a0 	.word	0x080189a0
 801241c:	080189b4 	.word	0x080189b4

08012420 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012420:	b580      	push	{r7, lr}
 8012422:	b088      	sub	sp, #32
 8012424:	af02      	add	r7, sp, #8
 8012426:	60f8      	str	r0, [r7, #12]
 8012428:	60b9      	str	r1, [r7, #8]
 801242a:	607a      	str	r2, [r7, #4]
 801242c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8012434:	2b06      	cmp	r3, #6
 8012436:	d006      	beq.n	8012446 <etharp_update_arp_entry+0x26>
 8012438:	4b48      	ldr	r3, [pc, #288]	@ (801255c <etharp_update_arp_entry+0x13c>)
 801243a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801243e:	4948      	ldr	r1, [pc, #288]	@ (8012560 <etharp_update_arp_entry+0x140>)
 8012440:	4848      	ldr	r0, [pc, #288]	@ (8012564 <etharp_update_arp_entry+0x144>)
 8012442:	f002 fd51 	bl	8014ee8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012446:	68bb      	ldr	r3, [r7, #8]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d012      	beq.n	8012472 <etharp_update_arp_entry+0x52>
 801244c:	68bb      	ldr	r3, [r7, #8]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d00e      	beq.n	8012472 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012454:	68bb      	ldr	r3, [r7, #8]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	68f9      	ldr	r1, [r7, #12]
 801245a:	4618      	mov	r0, r3
 801245c:	f001 f990 	bl	8013780 <ip4_addr_isbroadcast_u32>
 8012460:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012462:	2b00      	cmp	r3, #0
 8012464:	d105      	bne.n	8012472 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012466:	68bb      	ldr	r3, [r7, #8]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801246e:	2be0      	cmp	r3, #224	@ 0xe0
 8012470:	d102      	bne.n	8012478 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012472:	f06f 030f 	mvn.w	r3, #15
 8012476:	e06c      	b.n	8012552 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012478:	78fb      	ldrb	r3, [r7, #3]
 801247a:	68fa      	ldr	r2, [r7, #12]
 801247c:	4619      	mov	r1, r3
 801247e:	68b8      	ldr	r0, [r7, #8]
 8012480:	f7ff fe56 	bl	8012130 <etharp_find_entry>
 8012484:	4603      	mov	r3, r0
 8012486:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012488:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801248c:	2b00      	cmp	r3, #0
 801248e:	da02      	bge.n	8012496 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012490:	8afb      	ldrh	r3, [r7, #22]
 8012492:	b25b      	sxtb	r3, r3
 8012494:	e05d      	b.n	8012552 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012496:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801249a:	4933      	ldr	r1, [pc, #204]	@ (8012568 <etharp_update_arp_entry+0x148>)
 801249c:	4613      	mov	r3, r2
 801249e:	005b      	lsls	r3, r3, #1
 80124a0:	4413      	add	r3, r2
 80124a2:	00db      	lsls	r3, r3, #3
 80124a4:	440b      	add	r3, r1
 80124a6:	3314      	adds	r3, #20
 80124a8:	2202      	movs	r2, #2
 80124aa:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80124ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80124b0:	492d      	ldr	r1, [pc, #180]	@ (8012568 <etharp_update_arp_entry+0x148>)
 80124b2:	4613      	mov	r3, r2
 80124b4:	005b      	lsls	r3, r3, #1
 80124b6:	4413      	add	r3, r2
 80124b8:	00db      	lsls	r3, r3, #3
 80124ba:	440b      	add	r3, r1
 80124bc:	3308      	adds	r3, #8
 80124be:	68fa      	ldr	r2, [r7, #12]
 80124c0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80124c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80124c6:	4613      	mov	r3, r2
 80124c8:	005b      	lsls	r3, r3, #1
 80124ca:	4413      	add	r3, r2
 80124cc:	00db      	lsls	r3, r3, #3
 80124ce:	3308      	adds	r3, #8
 80124d0:	4a25      	ldr	r2, [pc, #148]	@ (8012568 <etharp_update_arp_entry+0x148>)
 80124d2:	4413      	add	r3, r2
 80124d4:	3304      	adds	r3, #4
 80124d6:	2206      	movs	r2, #6
 80124d8:	6879      	ldr	r1, [r7, #4]
 80124da:	4618      	mov	r0, r3
 80124dc:	f002 fed9 	bl	8015292 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80124e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80124e4:	4920      	ldr	r1, [pc, #128]	@ (8012568 <etharp_update_arp_entry+0x148>)
 80124e6:	4613      	mov	r3, r2
 80124e8:	005b      	lsls	r3, r3, #1
 80124ea:	4413      	add	r3, r2
 80124ec:	00db      	lsls	r3, r3, #3
 80124ee:	440b      	add	r3, r1
 80124f0:	3312      	adds	r3, #18
 80124f2:	2200      	movs	r2, #0
 80124f4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80124f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80124fa:	491b      	ldr	r1, [pc, #108]	@ (8012568 <etharp_update_arp_entry+0x148>)
 80124fc:	4613      	mov	r3, r2
 80124fe:	005b      	lsls	r3, r3, #1
 8012500:	4413      	add	r3, r2
 8012502:	00db      	lsls	r3, r3, #3
 8012504:	440b      	add	r3, r1
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d021      	beq.n	8012550 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801250c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012510:	4915      	ldr	r1, [pc, #84]	@ (8012568 <etharp_update_arp_entry+0x148>)
 8012512:	4613      	mov	r3, r2
 8012514:	005b      	lsls	r3, r3, #1
 8012516:	4413      	add	r3, r2
 8012518:	00db      	lsls	r3, r3, #3
 801251a:	440b      	add	r3, r1
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012520:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012524:	4910      	ldr	r1, [pc, #64]	@ (8012568 <etharp_update_arp_entry+0x148>)
 8012526:	4613      	mov	r3, r2
 8012528:	005b      	lsls	r3, r3, #1
 801252a:	4413      	add	r3, r2
 801252c:	00db      	lsls	r3, r3, #3
 801252e:	440b      	add	r3, r1
 8012530:	2200      	movs	r2, #0
 8012532:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801253a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801253e:	9300      	str	r3, [sp, #0]
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	6939      	ldr	r1, [r7, #16]
 8012544:	68f8      	ldr	r0, [r7, #12]
 8012546:	f002 f829 	bl	801459c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801254a:	6938      	ldr	r0, [r7, #16]
 801254c:	f7f9 f914 	bl	800b778 <pbuf_free>
  }
  return ERR_OK;
 8012550:	2300      	movs	r3, #0
}
 8012552:	4618      	mov	r0, r3
 8012554:	3718      	adds	r7, #24
 8012556:	46bd      	mov	sp, r7
 8012558:	bd80      	pop	{r7, pc}
 801255a:	bf00      	nop
 801255c:	080188e8 	.word	0x080188e8
 8012560:	080189e0 	.word	0x080189e0
 8012564:	08018960 	.word	0x08018960
 8012568:	200083c0 	.word	0x200083c0

0801256c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b084      	sub	sp, #16
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012574:	2300      	movs	r3, #0
 8012576:	60fb      	str	r3, [r7, #12]
 8012578:	e01e      	b.n	80125b8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801257a:	4913      	ldr	r1, [pc, #76]	@ (80125c8 <etharp_cleanup_netif+0x5c>)
 801257c:	68fa      	ldr	r2, [r7, #12]
 801257e:	4613      	mov	r3, r2
 8012580:	005b      	lsls	r3, r3, #1
 8012582:	4413      	add	r3, r2
 8012584:	00db      	lsls	r3, r3, #3
 8012586:	440b      	add	r3, r1
 8012588:	3314      	adds	r3, #20
 801258a:	781b      	ldrb	r3, [r3, #0]
 801258c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801258e:	7afb      	ldrb	r3, [r7, #11]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d00e      	beq.n	80125b2 <etharp_cleanup_netif+0x46>
 8012594:	490c      	ldr	r1, [pc, #48]	@ (80125c8 <etharp_cleanup_netif+0x5c>)
 8012596:	68fa      	ldr	r2, [r7, #12]
 8012598:	4613      	mov	r3, r2
 801259a:	005b      	lsls	r3, r3, #1
 801259c:	4413      	add	r3, r2
 801259e:	00db      	lsls	r3, r3, #3
 80125a0:	440b      	add	r3, r1
 80125a2:	3308      	adds	r3, #8
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	687a      	ldr	r2, [r7, #4]
 80125a8:	429a      	cmp	r2, r3
 80125aa:	d102      	bne.n	80125b2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80125ac:	68f8      	ldr	r0, [r7, #12]
 80125ae:	f7ff fcb7 	bl	8011f20 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	3301      	adds	r3, #1
 80125b6:	60fb      	str	r3, [r7, #12]
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	2b09      	cmp	r3, #9
 80125bc:	dddd      	ble.n	801257a <etharp_cleanup_netif+0xe>
    }
  }
}
 80125be:	bf00      	nop
 80125c0:	bf00      	nop
 80125c2:	3710      	adds	r7, #16
 80125c4:	46bd      	mov	sp, r7
 80125c6:	bd80      	pop	{r7, pc}
 80125c8:	200083c0 	.word	0x200083c0

080125cc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80125cc:	b5b0      	push	{r4, r5, r7, lr}
 80125ce:	b08a      	sub	sp, #40	@ 0x28
 80125d0:	af04      	add	r7, sp, #16
 80125d2:	6078      	str	r0, [r7, #4]
 80125d4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80125d6:	683b      	ldr	r3, [r7, #0]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d107      	bne.n	80125ec <etharp_input+0x20>
 80125dc:	4b3d      	ldr	r3, [pc, #244]	@ (80126d4 <etharp_input+0x108>)
 80125de:	f240 228a 	movw	r2, #650	@ 0x28a
 80125e2:	493d      	ldr	r1, [pc, #244]	@ (80126d8 <etharp_input+0x10c>)
 80125e4:	483d      	ldr	r0, [pc, #244]	@ (80126dc <etharp_input+0x110>)
 80125e6:	f002 fc7f 	bl	8014ee8 <iprintf>
 80125ea:	e06f      	b.n	80126cc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	685b      	ldr	r3, [r3, #4]
 80125f0:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80125f2:	697b      	ldr	r3, [r7, #20]
 80125f4:	881b      	ldrh	r3, [r3, #0]
 80125f6:	b29b      	uxth	r3, r3
 80125f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80125fc:	d10c      	bne.n	8012618 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80125fe:	697b      	ldr	r3, [r7, #20]
 8012600:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012602:	2b06      	cmp	r3, #6
 8012604:	d108      	bne.n	8012618 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012606:	697b      	ldr	r3, [r7, #20]
 8012608:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801260a:	2b04      	cmp	r3, #4
 801260c:	d104      	bne.n	8012618 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801260e:	697b      	ldr	r3, [r7, #20]
 8012610:	885b      	ldrh	r3, [r3, #2]
 8012612:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012614:	2b08      	cmp	r3, #8
 8012616:	d003      	beq.n	8012620 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012618:	6878      	ldr	r0, [r7, #4]
 801261a:	f7f9 f8ad 	bl	800b778 <pbuf_free>
    return;
 801261e:	e055      	b.n	80126cc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012620:	697b      	ldr	r3, [r7, #20]
 8012622:	330e      	adds	r3, #14
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012628:	697b      	ldr	r3, [r7, #20]
 801262a:	3318      	adds	r3, #24
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012630:	683b      	ldr	r3, [r7, #0]
 8012632:	3304      	adds	r3, #4
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d102      	bne.n	8012640 <etharp_input+0x74>
    for_us = 0;
 801263a:	2300      	movs	r3, #0
 801263c:	74fb      	strb	r3, [r7, #19]
 801263e:	e009      	b.n	8012654 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012640:	68ba      	ldr	r2, [r7, #8]
 8012642:	683b      	ldr	r3, [r7, #0]
 8012644:	3304      	adds	r3, #4
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	429a      	cmp	r2, r3
 801264a:	bf0c      	ite	eq
 801264c:	2301      	moveq	r3, #1
 801264e:	2300      	movne	r3, #0
 8012650:	b2db      	uxtb	r3, r3
 8012652:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012654:	697b      	ldr	r3, [r7, #20]
 8012656:	f103 0208 	add.w	r2, r3, #8
 801265a:	7cfb      	ldrb	r3, [r7, #19]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d001      	beq.n	8012664 <etharp_input+0x98>
 8012660:	2301      	movs	r3, #1
 8012662:	e000      	b.n	8012666 <etharp_input+0x9a>
 8012664:	2302      	movs	r3, #2
 8012666:	f107 010c 	add.w	r1, r7, #12
 801266a:	6838      	ldr	r0, [r7, #0]
 801266c:	f7ff fed8 	bl	8012420 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012670:	697b      	ldr	r3, [r7, #20]
 8012672:	88db      	ldrh	r3, [r3, #6]
 8012674:	b29b      	uxth	r3, r3
 8012676:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801267a:	d003      	beq.n	8012684 <etharp_input+0xb8>
 801267c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012680:	d01e      	beq.n	80126c0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012682:	e020      	b.n	80126c6 <etharp_input+0xfa>
      if (for_us) {
 8012684:	7cfb      	ldrb	r3, [r7, #19]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d01c      	beq.n	80126c4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801268a:	683b      	ldr	r3, [r7, #0]
 801268c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8012690:	697b      	ldr	r3, [r7, #20]
 8012692:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012696:	683b      	ldr	r3, [r7, #0]
 8012698:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801269c:	683b      	ldr	r3, [r7, #0]
 801269e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80126a0:	697a      	ldr	r2, [r7, #20]
 80126a2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80126a4:	2102      	movs	r1, #2
 80126a6:	9103      	str	r1, [sp, #12]
 80126a8:	f107 010c 	add.w	r1, r7, #12
 80126ac:	9102      	str	r1, [sp, #8]
 80126ae:	9201      	str	r2, [sp, #4]
 80126b0:	9300      	str	r3, [sp, #0]
 80126b2:	462b      	mov	r3, r5
 80126b4:	4622      	mov	r2, r4
 80126b6:	4601      	mov	r1, r0
 80126b8:	6838      	ldr	r0, [r7, #0]
 80126ba:	f000 faeb 	bl	8012c94 <etharp_raw>
      break;
 80126be:	e001      	b.n	80126c4 <etharp_input+0xf8>
      break;
 80126c0:	bf00      	nop
 80126c2:	e000      	b.n	80126c6 <etharp_input+0xfa>
      break;
 80126c4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80126c6:	6878      	ldr	r0, [r7, #4]
 80126c8:	f7f9 f856 	bl	800b778 <pbuf_free>
}
 80126cc:	3718      	adds	r7, #24
 80126ce:	46bd      	mov	sp, r7
 80126d0:	bdb0      	pop	{r4, r5, r7, pc}
 80126d2:	bf00      	nop
 80126d4:	080188e8 	.word	0x080188e8
 80126d8:	08018a38 	.word	0x08018a38
 80126dc:	08018960 	.word	0x08018960

080126e0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b086      	sub	sp, #24
 80126e4:	af02      	add	r7, sp, #8
 80126e6:	60f8      	str	r0, [r7, #12]
 80126e8:	60b9      	str	r1, [r7, #8]
 80126ea:	4613      	mov	r3, r2
 80126ec:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80126ee:	79fa      	ldrb	r2, [r7, #7]
 80126f0:	4944      	ldr	r1, [pc, #272]	@ (8012804 <etharp_output_to_arp_index+0x124>)
 80126f2:	4613      	mov	r3, r2
 80126f4:	005b      	lsls	r3, r3, #1
 80126f6:	4413      	add	r3, r2
 80126f8:	00db      	lsls	r3, r3, #3
 80126fa:	440b      	add	r3, r1
 80126fc:	3314      	adds	r3, #20
 80126fe:	781b      	ldrb	r3, [r3, #0]
 8012700:	2b01      	cmp	r3, #1
 8012702:	d806      	bhi.n	8012712 <etharp_output_to_arp_index+0x32>
 8012704:	4b40      	ldr	r3, [pc, #256]	@ (8012808 <etharp_output_to_arp_index+0x128>)
 8012706:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801270a:	4940      	ldr	r1, [pc, #256]	@ (801280c <etharp_output_to_arp_index+0x12c>)
 801270c:	4840      	ldr	r0, [pc, #256]	@ (8012810 <etharp_output_to_arp_index+0x130>)
 801270e:	f002 fbeb 	bl	8014ee8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012712:	79fa      	ldrb	r2, [r7, #7]
 8012714:	493b      	ldr	r1, [pc, #236]	@ (8012804 <etharp_output_to_arp_index+0x124>)
 8012716:	4613      	mov	r3, r2
 8012718:	005b      	lsls	r3, r3, #1
 801271a:	4413      	add	r3, r2
 801271c:	00db      	lsls	r3, r3, #3
 801271e:	440b      	add	r3, r1
 8012720:	3314      	adds	r3, #20
 8012722:	781b      	ldrb	r3, [r3, #0]
 8012724:	2b02      	cmp	r3, #2
 8012726:	d153      	bne.n	80127d0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012728:	79fa      	ldrb	r2, [r7, #7]
 801272a:	4936      	ldr	r1, [pc, #216]	@ (8012804 <etharp_output_to_arp_index+0x124>)
 801272c:	4613      	mov	r3, r2
 801272e:	005b      	lsls	r3, r3, #1
 8012730:	4413      	add	r3, r2
 8012732:	00db      	lsls	r3, r3, #3
 8012734:	440b      	add	r3, r1
 8012736:	3312      	adds	r3, #18
 8012738:	881b      	ldrh	r3, [r3, #0]
 801273a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801273e:	d919      	bls.n	8012774 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012740:	79fa      	ldrb	r2, [r7, #7]
 8012742:	4613      	mov	r3, r2
 8012744:	005b      	lsls	r3, r3, #1
 8012746:	4413      	add	r3, r2
 8012748:	00db      	lsls	r3, r3, #3
 801274a:	4a2e      	ldr	r2, [pc, #184]	@ (8012804 <etharp_output_to_arp_index+0x124>)
 801274c:	4413      	add	r3, r2
 801274e:	3304      	adds	r3, #4
 8012750:	4619      	mov	r1, r3
 8012752:	68f8      	ldr	r0, [r7, #12]
 8012754:	f000 fb4c 	bl	8012df0 <etharp_request>
 8012758:	4603      	mov	r3, r0
 801275a:	2b00      	cmp	r3, #0
 801275c:	d138      	bne.n	80127d0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801275e:	79fa      	ldrb	r2, [r7, #7]
 8012760:	4928      	ldr	r1, [pc, #160]	@ (8012804 <etharp_output_to_arp_index+0x124>)
 8012762:	4613      	mov	r3, r2
 8012764:	005b      	lsls	r3, r3, #1
 8012766:	4413      	add	r3, r2
 8012768:	00db      	lsls	r3, r3, #3
 801276a:	440b      	add	r3, r1
 801276c:	3314      	adds	r3, #20
 801276e:	2203      	movs	r2, #3
 8012770:	701a      	strb	r2, [r3, #0]
 8012772:	e02d      	b.n	80127d0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012774:	79fa      	ldrb	r2, [r7, #7]
 8012776:	4923      	ldr	r1, [pc, #140]	@ (8012804 <etharp_output_to_arp_index+0x124>)
 8012778:	4613      	mov	r3, r2
 801277a:	005b      	lsls	r3, r3, #1
 801277c:	4413      	add	r3, r2
 801277e:	00db      	lsls	r3, r3, #3
 8012780:	440b      	add	r3, r1
 8012782:	3312      	adds	r3, #18
 8012784:	881b      	ldrh	r3, [r3, #0]
 8012786:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801278a:	d321      	bcc.n	80127d0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801278c:	79fa      	ldrb	r2, [r7, #7]
 801278e:	4613      	mov	r3, r2
 8012790:	005b      	lsls	r3, r3, #1
 8012792:	4413      	add	r3, r2
 8012794:	00db      	lsls	r3, r3, #3
 8012796:	4a1b      	ldr	r2, [pc, #108]	@ (8012804 <etharp_output_to_arp_index+0x124>)
 8012798:	4413      	add	r3, r2
 801279a:	1d19      	adds	r1, r3, #4
 801279c:	79fa      	ldrb	r2, [r7, #7]
 801279e:	4613      	mov	r3, r2
 80127a0:	005b      	lsls	r3, r3, #1
 80127a2:	4413      	add	r3, r2
 80127a4:	00db      	lsls	r3, r3, #3
 80127a6:	3308      	adds	r3, #8
 80127a8:	4a16      	ldr	r2, [pc, #88]	@ (8012804 <etharp_output_to_arp_index+0x124>)
 80127aa:	4413      	add	r3, r2
 80127ac:	3304      	adds	r3, #4
 80127ae:	461a      	mov	r2, r3
 80127b0:	68f8      	ldr	r0, [r7, #12]
 80127b2:	f000 fafb 	bl	8012dac <etharp_request_dst>
 80127b6:	4603      	mov	r3, r0
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d109      	bne.n	80127d0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80127bc:	79fa      	ldrb	r2, [r7, #7]
 80127be:	4911      	ldr	r1, [pc, #68]	@ (8012804 <etharp_output_to_arp_index+0x124>)
 80127c0:	4613      	mov	r3, r2
 80127c2:	005b      	lsls	r3, r3, #1
 80127c4:	4413      	add	r3, r2
 80127c6:	00db      	lsls	r3, r3, #3
 80127c8:	440b      	add	r3, r1
 80127ca:	3314      	adds	r3, #20
 80127cc:	2203      	movs	r2, #3
 80127ce:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 80127d6:	79fa      	ldrb	r2, [r7, #7]
 80127d8:	4613      	mov	r3, r2
 80127da:	005b      	lsls	r3, r3, #1
 80127dc:	4413      	add	r3, r2
 80127de:	00db      	lsls	r3, r3, #3
 80127e0:	3308      	adds	r3, #8
 80127e2:	4a08      	ldr	r2, [pc, #32]	@ (8012804 <etharp_output_to_arp_index+0x124>)
 80127e4:	4413      	add	r3, r2
 80127e6:	3304      	adds	r3, #4
 80127e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80127ec:	9200      	str	r2, [sp, #0]
 80127ee:	460a      	mov	r2, r1
 80127f0:	68b9      	ldr	r1, [r7, #8]
 80127f2:	68f8      	ldr	r0, [r7, #12]
 80127f4:	f001 fed2 	bl	801459c <ethernet_output>
 80127f8:	4603      	mov	r3, r0
}
 80127fa:	4618      	mov	r0, r3
 80127fc:	3710      	adds	r7, #16
 80127fe:	46bd      	mov	sp, r7
 8012800:	bd80      	pop	{r7, pc}
 8012802:	bf00      	nop
 8012804:	200083c0 	.word	0x200083c0
 8012808:	080188e8 	.word	0x080188e8
 801280c:	08018a58 	.word	0x08018a58
 8012810:	08018960 	.word	0x08018960

08012814 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012814:	b580      	push	{r7, lr}
 8012816:	b08a      	sub	sp, #40	@ 0x28
 8012818:	af02      	add	r7, sp, #8
 801281a:	60f8      	str	r0, [r7, #12]
 801281c:	60b9      	str	r1, [r7, #8]
 801281e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d106      	bne.n	8012838 <etharp_output+0x24>
 801282a:	4b73      	ldr	r3, [pc, #460]	@ (80129f8 <etharp_output+0x1e4>)
 801282c:	f240 321e 	movw	r2, #798	@ 0x31e
 8012830:	4972      	ldr	r1, [pc, #456]	@ (80129fc <etharp_output+0x1e8>)
 8012832:	4873      	ldr	r0, [pc, #460]	@ (8012a00 <etharp_output+0x1ec>)
 8012834:	f002 fb58 	bl	8014ee8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012838:	68bb      	ldr	r3, [r7, #8]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d106      	bne.n	801284c <etharp_output+0x38>
 801283e:	4b6e      	ldr	r3, [pc, #440]	@ (80129f8 <etharp_output+0x1e4>)
 8012840:	f240 321f 	movw	r2, #799	@ 0x31f
 8012844:	496f      	ldr	r1, [pc, #444]	@ (8012a04 <etharp_output+0x1f0>)
 8012846:	486e      	ldr	r0, [pc, #440]	@ (8012a00 <etharp_output+0x1ec>)
 8012848:	f002 fb4e 	bl	8014ee8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d106      	bne.n	8012860 <etharp_output+0x4c>
 8012852:	4b69      	ldr	r3, [pc, #420]	@ (80129f8 <etharp_output+0x1e4>)
 8012854:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8012858:	496b      	ldr	r1, [pc, #428]	@ (8012a08 <etharp_output+0x1f4>)
 801285a:	4869      	ldr	r0, [pc, #420]	@ (8012a00 <etharp_output+0x1ec>)
 801285c:	f002 fb44 	bl	8014ee8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	68f9      	ldr	r1, [r7, #12]
 8012866:	4618      	mov	r0, r3
 8012868:	f000 ff8a 	bl	8013780 <ip4_addr_isbroadcast_u32>
 801286c:	4603      	mov	r3, r0
 801286e:	2b00      	cmp	r3, #0
 8012870:	d002      	beq.n	8012878 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8012872:	4b66      	ldr	r3, [pc, #408]	@ (8012a0c <etharp_output+0x1f8>)
 8012874:	61fb      	str	r3, [r7, #28]
 8012876:	e0af      	b.n	80129d8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012880:	2be0      	cmp	r3, #224	@ 0xe0
 8012882:	d118      	bne.n	80128b6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012884:	2301      	movs	r3, #1
 8012886:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012888:	2300      	movs	r3, #0
 801288a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801288c:	235e      	movs	r3, #94	@ 0x5e
 801288e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	3301      	adds	r3, #1
 8012894:	781b      	ldrb	r3, [r3, #0]
 8012896:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801289a:	b2db      	uxtb	r3, r3
 801289c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	3302      	adds	r3, #2
 80128a2:	781b      	ldrb	r3, [r3, #0]
 80128a4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	3303      	adds	r3, #3
 80128aa:	781b      	ldrb	r3, [r3, #0]
 80128ac:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80128ae:	f107 0310 	add.w	r3, r7, #16
 80128b2:	61fb      	str	r3, [r7, #28]
 80128b4:	e090      	b.n	80129d8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	681a      	ldr	r2, [r3, #0]
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	3304      	adds	r3, #4
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	405a      	eors	r2, r3
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	3308      	adds	r3, #8
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	4013      	ands	r3, r2
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d012      	beq.n	80128f4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80128d4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80128d8:	4293      	cmp	r3, r2
 80128da:	d00b      	beq.n	80128f4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	330c      	adds	r3, #12
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d003      	beq.n	80128ee <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	330c      	adds	r3, #12
 80128ea:	61bb      	str	r3, [r7, #24]
 80128ec:	e002      	b.n	80128f4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80128ee:	f06f 0303 	mvn.w	r3, #3
 80128f2:	e07d      	b.n	80129f0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80128f4:	4b46      	ldr	r3, [pc, #280]	@ (8012a10 <etharp_output+0x1fc>)
 80128f6:	781b      	ldrb	r3, [r3, #0]
 80128f8:	4619      	mov	r1, r3
 80128fa:	4a46      	ldr	r2, [pc, #280]	@ (8012a14 <etharp_output+0x200>)
 80128fc:	460b      	mov	r3, r1
 80128fe:	005b      	lsls	r3, r3, #1
 8012900:	440b      	add	r3, r1
 8012902:	00db      	lsls	r3, r3, #3
 8012904:	4413      	add	r3, r2
 8012906:	3314      	adds	r3, #20
 8012908:	781b      	ldrb	r3, [r3, #0]
 801290a:	2b01      	cmp	r3, #1
 801290c:	d925      	bls.n	801295a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801290e:	4b40      	ldr	r3, [pc, #256]	@ (8012a10 <etharp_output+0x1fc>)
 8012910:	781b      	ldrb	r3, [r3, #0]
 8012912:	4619      	mov	r1, r3
 8012914:	4a3f      	ldr	r2, [pc, #252]	@ (8012a14 <etharp_output+0x200>)
 8012916:	460b      	mov	r3, r1
 8012918:	005b      	lsls	r3, r3, #1
 801291a:	440b      	add	r3, r1
 801291c:	00db      	lsls	r3, r3, #3
 801291e:	4413      	add	r3, r2
 8012920:	3308      	adds	r3, #8
 8012922:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012924:	68fa      	ldr	r2, [r7, #12]
 8012926:	429a      	cmp	r2, r3
 8012928:	d117      	bne.n	801295a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801292a:	69bb      	ldr	r3, [r7, #24]
 801292c:	681a      	ldr	r2, [r3, #0]
 801292e:	4b38      	ldr	r3, [pc, #224]	@ (8012a10 <etharp_output+0x1fc>)
 8012930:	781b      	ldrb	r3, [r3, #0]
 8012932:	4618      	mov	r0, r3
 8012934:	4937      	ldr	r1, [pc, #220]	@ (8012a14 <etharp_output+0x200>)
 8012936:	4603      	mov	r3, r0
 8012938:	005b      	lsls	r3, r3, #1
 801293a:	4403      	add	r3, r0
 801293c:	00db      	lsls	r3, r3, #3
 801293e:	440b      	add	r3, r1
 8012940:	3304      	adds	r3, #4
 8012942:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012944:	429a      	cmp	r2, r3
 8012946:	d108      	bne.n	801295a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012948:	4b31      	ldr	r3, [pc, #196]	@ (8012a10 <etharp_output+0x1fc>)
 801294a:	781b      	ldrb	r3, [r3, #0]
 801294c:	461a      	mov	r2, r3
 801294e:	68b9      	ldr	r1, [r7, #8]
 8012950:	68f8      	ldr	r0, [r7, #12]
 8012952:	f7ff fec5 	bl	80126e0 <etharp_output_to_arp_index>
 8012956:	4603      	mov	r3, r0
 8012958:	e04a      	b.n	80129f0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801295a:	2300      	movs	r3, #0
 801295c:	75fb      	strb	r3, [r7, #23]
 801295e:	e031      	b.n	80129c4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012960:	7dfa      	ldrb	r2, [r7, #23]
 8012962:	492c      	ldr	r1, [pc, #176]	@ (8012a14 <etharp_output+0x200>)
 8012964:	4613      	mov	r3, r2
 8012966:	005b      	lsls	r3, r3, #1
 8012968:	4413      	add	r3, r2
 801296a:	00db      	lsls	r3, r3, #3
 801296c:	440b      	add	r3, r1
 801296e:	3314      	adds	r3, #20
 8012970:	781b      	ldrb	r3, [r3, #0]
 8012972:	2b01      	cmp	r3, #1
 8012974:	d923      	bls.n	80129be <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012976:	7dfa      	ldrb	r2, [r7, #23]
 8012978:	4926      	ldr	r1, [pc, #152]	@ (8012a14 <etharp_output+0x200>)
 801297a:	4613      	mov	r3, r2
 801297c:	005b      	lsls	r3, r3, #1
 801297e:	4413      	add	r3, r2
 8012980:	00db      	lsls	r3, r3, #3
 8012982:	440b      	add	r3, r1
 8012984:	3308      	adds	r3, #8
 8012986:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012988:	68fa      	ldr	r2, [r7, #12]
 801298a:	429a      	cmp	r2, r3
 801298c:	d117      	bne.n	80129be <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801298e:	69bb      	ldr	r3, [r7, #24]
 8012990:	6819      	ldr	r1, [r3, #0]
 8012992:	7dfa      	ldrb	r2, [r7, #23]
 8012994:	481f      	ldr	r0, [pc, #124]	@ (8012a14 <etharp_output+0x200>)
 8012996:	4613      	mov	r3, r2
 8012998:	005b      	lsls	r3, r3, #1
 801299a:	4413      	add	r3, r2
 801299c:	00db      	lsls	r3, r3, #3
 801299e:	4403      	add	r3, r0
 80129a0:	3304      	adds	r3, #4
 80129a2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80129a4:	4299      	cmp	r1, r3
 80129a6:	d10a      	bne.n	80129be <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80129a8:	4a19      	ldr	r2, [pc, #100]	@ (8012a10 <etharp_output+0x1fc>)
 80129aa:	7dfb      	ldrb	r3, [r7, #23]
 80129ac:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80129ae:	7dfb      	ldrb	r3, [r7, #23]
 80129b0:	461a      	mov	r2, r3
 80129b2:	68b9      	ldr	r1, [r7, #8]
 80129b4:	68f8      	ldr	r0, [r7, #12]
 80129b6:	f7ff fe93 	bl	80126e0 <etharp_output_to_arp_index>
 80129ba:	4603      	mov	r3, r0
 80129bc:	e018      	b.n	80129f0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80129be:	7dfb      	ldrb	r3, [r7, #23]
 80129c0:	3301      	adds	r3, #1
 80129c2:	75fb      	strb	r3, [r7, #23]
 80129c4:	7dfb      	ldrb	r3, [r7, #23]
 80129c6:	2b09      	cmp	r3, #9
 80129c8:	d9ca      	bls.n	8012960 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80129ca:	68ba      	ldr	r2, [r7, #8]
 80129cc:	69b9      	ldr	r1, [r7, #24]
 80129ce:	68f8      	ldr	r0, [r7, #12]
 80129d0:	f000 f822 	bl	8012a18 <etharp_query>
 80129d4:	4603      	mov	r3, r0
 80129d6:	e00b      	b.n	80129f0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80129de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80129e2:	9300      	str	r3, [sp, #0]
 80129e4:	69fb      	ldr	r3, [r7, #28]
 80129e6:	68b9      	ldr	r1, [r7, #8]
 80129e8:	68f8      	ldr	r0, [r7, #12]
 80129ea:	f001 fdd7 	bl	801459c <ethernet_output>
 80129ee:	4603      	mov	r3, r0
}
 80129f0:	4618      	mov	r0, r3
 80129f2:	3720      	adds	r7, #32
 80129f4:	46bd      	mov	sp, r7
 80129f6:	bd80      	pop	{r7, pc}
 80129f8:	080188e8 	.word	0x080188e8
 80129fc:	08018a38 	.word	0x08018a38
 8012a00:	08018960 	.word	0x08018960
 8012a04:	08018a88 	.word	0x08018a88
 8012a08:	08018a28 	.word	0x08018a28
 8012a0c:	080194b8 	.word	0x080194b8
 8012a10:	200084b0 	.word	0x200084b0
 8012a14:	200083c0 	.word	0x200083c0

08012a18 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	b08c      	sub	sp, #48	@ 0x30
 8012a1c:	af02      	add	r7, sp, #8
 8012a1e:	60f8      	str	r0, [r7, #12]
 8012a20:	60b9      	str	r1, [r7, #8]
 8012a22:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	3326      	adds	r3, #38	@ 0x26
 8012a28:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012a2a:	23ff      	movs	r3, #255	@ 0xff
 8012a2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8012a30:	2300      	movs	r3, #0
 8012a32:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012a34:	68bb      	ldr	r3, [r7, #8]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	68f9      	ldr	r1, [r7, #12]
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f000 fea0 	bl	8013780 <ip4_addr_isbroadcast_u32>
 8012a40:	4603      	mov	r3, r0
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d10c      	bne.n	8012a60 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012a46:	68bb      	ldr	r3, [r7, #8]
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012a4e:	2be0      	cmp	r3, #224	@ 0xe0
 8012a50:	d006      	beq.n	8012a60 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012a52:	68bb      	ldr	r3, [r7, #8]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d003      	beq.n	8012a60 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012a58:	68bb      	ldr	r3, [r7, #8]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d102      	bne.n	8012a66 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012a60:	f06f 030f 	mvn.w	r3, #15
 8012a64:	e101      	b.n	8012c6a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012a66:	68fa      	ldr	r2, [r7, #12]
 8012a68:	2101      	movs	r1, #1
 8012a6a:	68b8      	ldr	r0, [r7, #8]
 8012a6c:	f7ff fb60 	bl	8012130 <etharp_find_entry>
 8012a70:	4603      	mov	r3, r0
 8012a72:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012a74:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	da02      	bge.n	8012a82 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012a7c:	8a7b      	ldrh	r3, [r7, #18]
 8012a7e:	b25b      	sxtb	r3, r3
 8012a80:	e0f3      	b.n	8012c6a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012a82:	8a7b      	ldrh	r3, [r7, #18]
 8012a84:	2b7e      	cmp	r3, #126	@ 0x7e
 8012a86:	d906      	bls.n	8012a96 <etharp_query+0x7e>
 8012a88:	4b7a      	ldr	r3, [pc, #488]	@ (8012c74 <etharp_query+0x25c>)
 8012a8a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8012a8e:	497a      	ldr	r1, [pc, #488]	@ (8012c78 <etharp_query+0x260>)
 8012a90:	487a      	ldr	r0, [pc, #488]	@ (8012c7c <etharp_query+0x264>)
 8012a92:	f002 fa29 	bl	8014ee8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012a96:	8a7b      	ldrh	r3, [r7, #18]
 8012a98:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012a9a:	7c7a      	ldrb	r2, [r7, #17]
 8012a9c:	4978      	ldr	r1, [pc, #480]	@ (8012c80 <etharp_query+0x268>)
 8012a9e:	4613      	mov	r3, r2
 8012aa0:	005b      	lsls	r3, r3, #1
 8012aa2:	4413      	add	r3, r2
 8012aa4:	00db      	lsls	r3, r3, #3
 8012aa6:	440b      	add	r3, r1
 8012aa8:	3314      	adds	r3, #20
 8012aaa:	781b      	ldrb	r3, [r3, #0]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d115      	bne.n	8012adc <etharp_query+0xc4>
    is_new_entry = 1;
 8012ab0:	2301      	movs	r3, #1
 8012ab2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012ab4:	7c7a      	ldrb	r2, [r7, #17]
 8012ab6:	4972      	ldr	r1, [pc, #456]	@ (8012c80 <etharp_query+0x268>)
 8012ab8:	4613      	mov	r3, r2
 8012aba:	005b      	lsls	r3, r3, #1
 8012abc:	4413      	add	r3, r2
 8012abe:	00db      	lsls	r3, r3, #3
 8012ac0:	440b      	add	r3, r1
 8012ac2:	3314      	adds	r3, #20
 8012ac4:	2201      	movs	r2, #1
 8012ac6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012ac8:	7c7a      	ldrb	r2, [r7, #17]
 8012aca:	496d      	ldr	r1, [pc, #436]	@ (8012c80 <etharp_query+0x268>)
 8012acc:	4613      	mov	r3, r2
 8012ace:	005b      	lsls	r3, r3, #1
 8012ad0:	4413      	add	r3, r2
 8012ad2:	00db      	lsls	r3, r3, #3
 8012ad4:	440b      	add	r3, r1
 8012ad6:	3308      	adds	r3, #8
 8012ad8:	68fa      	ldr	r2, [r7, #12]
 8012ada:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012adc:	7c7a      	ldrb	r2, [r7, #17]
 8012ade:	4968      	ldr	r1, [pc, #416]	@ (8012c80 <etharp_query+0x268>)
 8012ae0:	4613      	mov	r3, r2
 8012ae2:	005b      	lsls	r3, r3, #1
 8012ae4:	4413      	add	r3, r2
 8012ae6:	00db      	lsls	r3, r3, #3
 8012ae8:	440b      	add	r3, r1
 8012aea:	3314      	adds	r3, #20
 8012aec:	781b      	ldrb	r3, [r3, #0]
 8012aee:	2b01      	cmp	r3, #1
 8012af0:	d011      	beq.n	8012b16 <etharp_query+0xfe>
 8012af2:	7c7a      	ldrb	r2, [r7, #17]
 8012af4:	4962      	ldr	r1, [pc, #392]	@ (8012c80 <etharp_query+0x268>)
 8012af6:	4613      	mov	r3, r2
 8012af8:	005b      	lsls	r3, r3, #1
 8012afa:	4413      	add	r3, r2
 8012afc:	00db      	lsls	r3, r3, #3
 8012afe:	440b      	add	r3, r1
 8012b00:	3314      	adds	r3, #20
 8012b02:	781b      	ldrb	r3, [r3, #0]
 8012b04:	2b01      	cmp	r3, #1
 8012b06:	d806      	bhi.n	8012b16 <etharp_query+0xfe>
 8012b08:	4b5a      	ldr	r3, [pc, #360]	@ (8012c74 <etharp_query+0x25c>)
 8012b0a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8012b0e:	495d      	ldr	r1, [pc, #372]	@ (8012c84 <etharp_query+0x26c>)
 8012b10:	485a      	ldr	r0, [pc, #360]	@ (8012c7c <etharp_query+0x264>)
 8012b12:	f002 f9e9 	bl	8014ee8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012b16:	6a3b      	ldr	r3, [r7, #32]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d102      	bne.n	8012b22 <etharp_query+0x10a>
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d10c      	bne.n	8012b3c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012b22:	68b9      	ldr	r1, [r7, #8]
 8012b24:	68f8      	ldr	r0, [r7, #12]
 8012b26:	f000 f963 	bl	8012df0 <etharp_request>
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d102      	bne.n	8012b3c <etharp_query+0x124>
      return result;
 8012b36:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012b3a:	e096      	b.n	8012c6a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d106      	bne.n	8012b50 <etharp_query+0x138>
 8012b42:	4b4c      	ldr	r3, [pc, #304]	@ (8012c74 <etharp_query+0x25c>)
 8012b44:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8012b48:	494f      	ldr	r1, [pc, #316]	@ (8012c88 <etharp_query+0x270>)
 8012b4a:	484c      	ldr	r0, [pc, #304]	@ (8012c7c <etharp_query+0x264>)
 8012b4c:	f002 f9cc 	bl	8014ee8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012b50:	7c7a      	ldrb	r2, [r7, #17]
 8012b52:	494b      	ldr	r1, [pc, #300]	@ (8012c80 <etharp_query+0x268>)
 8012b54:	4613      	mov	r3, r2
 8012b56:	005b      	lsls	r3, r3, #1
 8012b58:	4413      	add	r3, r2
 8012b5a:	00db      	lsls	r3, r3, #3
 8012b5c:	440b      	add	r3, r1
 8012b5e:	3314      	adds	r3, #20
 8012b60:	781b      	ldrb	r3, [r3, #0]
 8012b62:	2b01      	cmp	r3, #1
 8012b64:	d917      	bls.n	8012b96 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012b66:	4a49      	ldr	r2, [pc, #292]	@ (8012c8c <etharp_query+0x274>)
 8012b68:	7c7b      	ldrb	r3, [r7, #17]
 8012b6a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012b6c:	7c7a      	ldrb	r2, [r7, #17]
 8012b6e:	4613      	mov	r3, r2
 8012b70:	005b      	lsls	r3, r3, #1
 8012b72:	4413      	add	r3, r2
 8012b74:	00db      	lsls	r3, r3, #3
 8012b76:	3308      	adds	r3, #8
 8012b78:	4a41      	ldr	r2, [pc, #260]	@ (8012c80 <etharp_query+0x268>)
 8012b7a:	4413      	add	r3, r2
 8012b7c:	3304      	adds	r3, #4
 8012b7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012b82:	9200      	str	r2, [sp, #0]
 8012b84:	697a      	ldr	r2, [r7, #20]
 8012b86:	6879      	ldr	r1, [r7, #4]
 8012b88:	68f8      	ldr	r0, [r7, #12]
 8012b8a:	f001 fd07 	bl	801459c <ethernet_output>
 8012b8e:	4603      	mov	r3, r0
 8012b90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012b94:	e067      	b.n	8012c66 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012b96:	7c7a      	ldrb	r2, [r7, #17]
 8012b98:	4939      	ldr	r1, [pc, #228]	@ (8012c80 <etharp_query+0x268>)
 8012b9a:	4613      	mov	r3, r2
 8012b9c:	005b      	lsls	r3, r3, #1
 8012b9e:	4413      	add	r3, r2
 8012ba0:	00db      	lsls	r3, r3, #3
 8012ba2:	440b      	add	r3, r1
 8012ba4:	3314      	adds	r3, #20
 8012ba6:	781b      	ldrb	r3, [r3, #0]
 8012ba8:	2b01      	cmp	r3, #1
 8012baa:	d15c      	bne.n	8012c66 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012bac:	2300      	movs	r3, #0
 8012bae:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012bb4:	e01c      	b.n	8012bf0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012bb6:	69fb      	ldr	r3, [r7, #28]
 8012bb8:	895a      	ldrh	r2, [r3, #10]
 8012bba:	69fb      	ldr	r3, [r7, #28]
 8012bbc:	891b      	ldrh	r3, [r3, #8]
 8012bbe:	429a      	cmp	r2, r3
 8012bc0:	d10a      	bne.n	8012bd8 <etharp_query+0x1c0>
 8012bc2:	69fb      	ldr	r3, [r7, #28]
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d006      	beq.n	8012bd8 <etharp_query+0x1c0>
 8012bca:	4b2a      	ldr	r3, [pc, #168]	@ (8012c74 <etharp_query+0x25c>)
 8012bcc:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8012bd0:	492f      	ldr	r1, [pc, #188]	@ (8012c90 <etharp_query+0x278>)
 8012bd2:	482a      	ldr	r0, [pc, #168]	@ (8012c7c <etharp_query+0x264>)
 8012bd4:	f002 f988 	bl	8014ee8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012bd8:	69fb      	ldr	r3, [r7, #28]
 8012bda:	7b1b      	ldrb	r3, [r3, #12]
 8012bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d002      	beq.n	8012bea <etharp_query+0x1d2>
        copy_needed = 1;
 8012be4:	2301      	movs	r3, #1
 8012be6:	61bb      	str	r3, [r7, #24]
        break;
 8012be8:	e005      	b.n	8012bf6 <etharp_query+0x1de>
      }
      p = p->next;
 8012bea:	69fb      	ldr	r3, [r7, #28]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012bf0:	69fb      	ldr	r3, [r7, #28]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d1df      	bne.n	8012bb6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8012bf6:	69bb      	ldr	r3, [r7, #24]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d007      	beq.n	8012c0c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012bfc:	687a      	ldr	r2, [r7, #4]
 8012bfe:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8012c02:	200e      	movs	r0, #14
 8012c04:	f7f9 f824 	bl	800bc50 <pbuf_clone>
 8012c08:	61f8      	str	r0, [r7, #28]
 8012c0a:	e004      	b.n	8012c16 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012c10:	69f8      	ldr	r0, [r7, #28]
 8012c12:	f7f8 fe51 	bl	800b8b8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012c16:	69fb      	ldr	r3, [r7, #28]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d021      	beq.n	8012c60 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012c1c:	7c7a      	ldrb	r2, [r7, #17]
 8012c1e:	4918      	ldr	r1, [pc, #96]	@ (8012c80 <etharp_query+0x268>)
 8012c20:	4613      	mov	r3, r2
 8012c22:	005b      	lsls	r3, r3, #1
 8012c24:	4413      	add	r3, r2
 8012c26:	00db      	lsls	r3, r3, #3
 8012c28:	440b      	add	r3, r1
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d00a      	beq.n	8012c46 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012c30:	7c7a      	ldrb	r2, [r7, #17]
 8012c32:	4913      	ldr	r1, [pc, #76]	@ (8012c80 <etharp_query+0x268>)
 8012c34:	4613      	mov	r3, r2
 8012c36:	005b      	lsls	r3, r3, #1
 8012c38:	4413      	add	r3, r2
 8012c3a:	00db      	lsls	r3, r3, #3
 8012c3c:	440b      	add	r3, r1
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	4618      	mov	r0, r3
 8012c42:	f7f8 fd99 	bl	800b778 <pbuf_free>
      }
      arp_table[i].q = p;
 8012c46:	7c7a      	ldrb	r2, [r7, #17]
 8012c48:	490d      	ldr	r1, [pc, #52]	@ (8012c80 <etharp_query+0x268>)
 8012c4a:	4613      	mov	r3, r2
 8012c4c:	005b      	lsls	r3, r3, #1
 8012c4e:	4413      	add	r3, r2
 8012c50:	00db      	lsls	r3, r3, #3
 8012c52:	440b      	add	r3, r1
 8012c54:	69fa      	ldr	r2, [r7, #28]
 8012c56:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012c58:	2300      	movs	r3, #0
 8012c5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012c5e:	e002      	b.n	8012c66 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012c60:	23ff      	movs	r3, #255	@ 0xff
 8012c62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8012c66:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	3728      	adds	r7, #40	@ 0x28
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	bd80      	pop	{r7, pc}
 8012c72:	bf00      	nop
 8012c74:	080188e8 	.word	0x080188e8
 8012c78:	08018a94 	.word	0x08018a94
 8012c7c:	08018960 	.word	0x08018960
 8012c80:	200083c0 	.word	0x200083c0
 8012c84:	08018aa4 	.word	0x08018aa4
 8012c88:	08018a88 	.word	0x08018a88
 8012c8c:	200084b0 	.word	0x200084b0
 8012c90:	08018acc 	.word	0x08018acc

08012c94 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b08a      	sub	sp, #40	@ 0x28
 8012c98:	af02      	add	r7, sp, #8
 8012c9a:	60f8      	str	r0, [r7, #12]
 8012c9c:	60b9      	str	r1, [r7, #8]
 8012c9e:	607a      	str	r2, [r7, #4]
 8012ca0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d106      	bne.n	8012cba <etharp_raw+0x26>
 8012cac:	4b3a      	ldr	r3, [pc, #232]	@ (8012d98 <etharp_raw+0x104>)
 8012cae:	f240 4257 	movw	r2, #1111	@ 0x457
 8012cb2:	493a      	ldr	r1, [pc, #232]	@ (8012d9c <etharp_raw+0x108>)
 8012cb4:	483a      	ldr	r0, [pc, #232]	@ (8012da0 <etharp_raw+0x10c>)
 8012cb6:	f002 f917 	bl	8014ee8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012cba:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012cbe:	211c      	movs	r1, #28
 8012cc0:	200e      	movs	r0, #14
 8012cc2:	f7f8 fa75 	bl	800b1b0 <pbuf_alloc>
 8012cc6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012cc8:	69bb      	ldr	r3, [r7, #24]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d102      	bne.n	8012cd4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012cce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012cd2:	e05d      	b.n	8012d90 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012cd4:	69bb      	ldr	r3, [r7, #24]
 8012cd6:	895b      	ldrh	r3, [r3, #10]
 8012cd8:	2b1b      	cmp	r3, #27
 8012cda:	d806      	bhi.n	8012cea <etharp_raw+0x56>
 8012cdc:	4b2e      	ldr	r3, [pc, #184]	@ (8012d98 <etharp_raw+0x104>)
 8012cde:	f240 4262 	movw	r2, #1122	@ 0x462
 8012ce2:	4930      	ldr	r1, [pc, #192]	@ (8012da4 <etharp_raw+0x110>)
 8012ce4:	482e      	ldr	r0, [pc, #184]	@ (8012da0 <etharp_raw+0x10c>)
 8012ce6:	f002 f8ff 	bl	8014ee8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012cea:	69bb      	ldr	r3, [r7, #24]
 8012cec:	685b      	ldr	r3, [r3, #4]
 8012cee:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012cf0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	f7f7 f8f0 	bl	8009ed8 <lwip_htons>
 8012cf8:	4603      	mov	r3, r0
 8012cfa:	461a      	mov	r2, r3
 8012cfc:	697b      	ldr	r3, [r7, #20]
 8012cfe:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8012d06:	2b06      	cmp	r3, #6
 8012d08:	d006      	beq.n	8012d18 <etharp_raw+0x84>
 8012d0a:	4b23      	ldr	r3, [pc, #140]	@ (8012d98 <etharp_raw+0x104>)
 8012d0c:	f240 4269 	movw	r2, #1129	@ 0x469
 8012d10:	4925      	ldr	r1, [pc, #148]	@ (8012da8 <etharp_raw+0x114>)
 8012d12:	4823      	ldr	r0, [pc, #140]	@ (8012da0 <etharp_raw+0x10c>)
 8012d14:	f002 f8e8 	bl	8014ee8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012d18:	697b      	ldr	r3, [r7, #20]
 8012d1a:	3308      	adds	r3, #8
 8012d1c:	2206      	movs	r2, #6
 8012d1e:	6839      	ldr	r1, [r7, #0]
 8012d20:	4618      	mov	r0, r3
 8012d22:	f002 fab6 	bl	8015292 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012d26:	697b      	ldr	r3, [r7, #20]
 8012d28:	3312      	adds	r3, #18
 8012d2a:	2206      	movs	r2, #6
 8012d2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012d2e:	4618      	mov	r0, r3
 8012d30:	f002 faaf 	bl	8015292 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012d34:	697b      	ldr	r3, [r7, #20]
 8012d36:	330e      	adds	r3, #14
 8012d38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012d3a:	6812      	ldr	r2, [r2, #0]
 8012d3c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012d3e:	697b      	ldr	r3, [r7, #20]
 8012d40:	3318      	adds	r3, #24
 8012d42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012d44:	6812      	ldr	r2, [r2, #0]
 8012d46:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012d48:	697b      	ldr	r3, [r7, #20]
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	701a      	strb	r2, [r3, #0]
 8012d4e:	2200      	movs	r2, #0
 8012d50:	f042 0201 	orr.w	r2, r2, #1
 8012d54:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012d56:	697b      	ldr	r3, [r7, #20]
 8012d58:	2200      	movs	r2, #0
 8012d5a:	f042 0208 	orr.w	r2, r2, #8
 8012d5e:	709a      	strb	r2, [r3, #2]
 8012d60:	2200      	movs	r2, #0
 8012d62:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012d64:	697b      	ldr	r3, [r7, #20]
 8012d66:	2206      	movs	r2, #6
 8012d68:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012d6a:	697b      	ldr	r3, [r7, #20]
 8012d6c:	2204      	movs	r2, #4
 8012d6e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012d70:	f640 0306 	movw	r3, #2054	@ 0x806
 8012d74:	9300      	str	r3, [sp, #0]
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	68ba      	ldr	r2, [r7, #8]
 8012d7a:	69b9      	ldr	r1, [r7, #24]
 8012d7c:	68f8      	ldr	r0, [r7, #12]
 8012d7e:	f001 fc0d 	bl	801459c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012d82:	69b8      	ldr	r0, [r7, #24]
 8012d84:	f7f8 fcf8 	bl	800b778 <pbuf_free>
  p = NULL;
 8012d88:	2300      	movs	r3, #0
 8012d8a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012d8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012d90:	4618      	mov	r0, r3
 8012d92:	3720      	adds	r7, #32
 8012d94:	46bd      	mov	sp, r7
 8012d96:	bd80      	pop	{r7, pc}
 8012d98:	080188e8 	.word	0x080188e8
 8012d9c:	08018a38 	.word	0x08018a38
 8012da0:	08018960 	.word	0x08018960
 8012da4:	08018ae8 	.word	0x08018ae8
 8012da8:	08018b1c 	.word	0x08018b1c

08012dac <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b088      	sub	sp, #32
 8012db0:	af04      	add	r7, sp, #16
 8012db2:	60f8      	str	r0, [r7, #12]
 8012db4:	60b9      	str	r1, [r7, #8]
 8012db6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012dc8:	2201      	movs	r2, #1
 8012dca:	9203      	str	r2, [sp, #12]
 8012dcc:	68ba      	ldr	r2, [r7, #8]
 8012dce:	9202      	str	r2, [sp, #8]
 8012dd0:	4a06      	ldr	r2, [pc, #24]	@ (8012dec <etharp_request_dst+0x40>)
 8012dd2:	9201      	str	r2, [sp, #4]
 8012dd4:	9300      	str	r3, [sp, #0]
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	687a      	ldr	r2, [r7, #4]
 8012dda:	68f8      	ldr	r0, [r7, #12]
 8012ddc:	f7ff ff5a 	bl	8012c94 <etharp_raw>
 8012de0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012de2:	4618      	mov	r0, r3
 8012de4:	3710      	adds	r7, #16
 8012de6:	46bd      	mov	sp, r7
 8012de8:	bd80      	pop	{r7, pc}
 8012dea:	bf00      	nop
 8012dec:	080194c0 	.word	0x080194c0

08012df0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b082      	sub	sp, #8
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
 8012df8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012dfa:	4a05      	ldr	r2, [pc, #20]	@ (8012e10 <etharp_request+0x20>)
 8012dfc:	6839      	ldr	r1, [r7, #0]
 8012dfe:	6878      	ldr	r0, [r7, #4]
 8012e00:	f7ff ffd4 	bl	8012dac <etharp_request_dst>
 8012e04:	4603      	mov	r3, r0
}
 8012e06:	4618      	mov	r0, r3
 8012e08:	3708      	adds	r7, #8
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	bd80      	pop	{r7, pc}
 8012e0e:	bf00      	nop
 8012e10:	080194b8 	.word	0x080194b8

08012e14 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012e14:	b580      	push	{r7, lr}
 8012e16:	b08e      	sub	sp, #56	@ 0x38
 8012e18:	af04      	add	r7, sp, #16
 8012e1a:	6078      	str	r0, [r7, #4]
 8012e1c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012e1e:	4b95      	ldr	r3, [pc, #596]	@ (8013074 <icmp_input+0x260>)
 8012e20:	689b      	ldr	r3, [r3, #8]
 8012e22:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e26:	781b      	ldrb	r3, [r3, #0]
 8012e28:	f003 030f 	and.w	r3, r3, #15
 8012e2c:	b2db      	uxtb	r3, r3
 8012e2e:	009b      	lsls	r3, r3, #2
 8012e30:	b2db      	uxtb	r3, r3
 8012e32:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8012e34:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012e36:	2b13      	cmp	r3, #19
 8012e38:	d805      	bhi.n	8012e46 <icmp_input+0x32>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
 8012e3a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012e3c:	4619      	mov	r1, r3
 8012e3e:	488e      	ldr	r0, [pc, #568]	@ (8013078 <icmp_input+0x264>)
 8012e40:	f002 f852 	bl	8014ee8 <iprintf>
    goto lenerr;
 8012e44:	e10a      	b.n	801305c <icmp_input+0x248>
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	895b      	ldrh	r3, [r3, #10]
 8012e4a:	2b03      	cmp	r3, #3
 8012e4c:	d806      	bhi.n	8012e5c <icmp_input+0x48>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	891b      	ldrh	r3, [r3, #8]
 8012e52:	4619      	mov	r1, r3
 8012e54:	4889      	ldr	r0, [pc, #548]	@ (801307c <icmp_input+0x268>)
 8012e56:	f002 f847 	bl	8014ee8 <iprintf>
    goto lenerr;
 8012e5a:	e0ff      	b.n	801305c <icmp_input+0x248>
  }

  type = *((u8_t *)p->payload);
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	685b      	ldr	r3, [r3, #4]
 8012e60:	781b      	ldrb	r3, [r3, #0]
 8012e62:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	685b      	ldr	r3, [r3, #4]
 8012e6a:	785b      	ldrb	r3, [r3, #1]
 8012e6c:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012e70:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	f000 80ea 	beq.w	801304e <icmp_input+0x23a>
 8012e7a:	2b08      	cmp	r3, #8
 8012e7c:	f040 80de 	bne.w	801303c <icmp_input+0x228>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012e80:	4b7f      	ldr	r3, [pc, #508]	@ (8013080 <icmp_input+0x26c>)
 8012e82:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012e84:	4b7b      	ldr	r3, [pc, #492]	@ (8013074 <icmp_input+0x260>)
 8012e86:	695b      	ldr	r3, [r3, #20]
 8012e88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012e8c:	2be0      	cmp	r3, #224	@ 0xe0
 8012e8e:	d103      	bne.n	8012e98 <icmp_input+0x84>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_MULTICAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
 8012e90:	487c      	ldr	r0, [pc, #496]	@ (8013084 <icmp_input+0x270>)
 8012e92:	f002 f899 	bl	8014fc8 <puts>
        goto icmperr;
 8012e96:	e0e5      	b.n	8013064 <icmp_input+0x250>
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012e98:	4b76      	ldr	r3, [pc, #472]	@ (8013074 <icmp_input+0x260>)
 8012e9a:	695b      	ldr	r3, [r3, #20]
 8012e9c:	4a75      	ldr	r2, [pc, #468]	@ (8013074 <icmp_input+0x260>)
 8012e9e:	6812      	ldr	r2, [r2, #0]
 8012ea0:	4611      	mov	r1, r2
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	f000 fc6c 	bl	8013780 <ip4_addr_isbroadcast_u32>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d003      	beq.n	8012eb6 <icmp_input+0xa2>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_BROADCAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
 8012eae:	4876      	ldr	r0, [pc, #472]	@ (8013088 <icmp_input+0x274>)
 8012eb0:	f002 f88a 	bl	8014fc8 <puts>
        goto icmperr;
 8012eb4:	e0d6      	b.n	8013064 <icmp_input+0x250>
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
 8012eb6:	4875      	ldr	r0, [pc, #468]	@ (801308c <icmp_input+0x278>)
 8012eb8:	f002 f886 	bl	8014fc8 <puts>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	891b      	ldrh	r3, [r3, #8]
 8012ec0:	2b07      	cmp	r3, #7
 8012ec2:	d803      	bhi.n	8012ecc <icmp_input+0xb8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
 8012ec4:	4872      	ldr	r0, [pc, #456]	@ (8013090 <icmp_input+0x27c>)
 8012ec6:	f002 f87f 	bl	8014fc8 <puts>
        goto lenerr;
 8012eca:	e0c7      	b.n	801305c <icmp_input+0x248>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012ecc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012ece:	330e      	adds	r3, #14
 8012ed0:	4619      	mov	r1, r3
 8012ed2:	6878      	ldr	r0, [r7, #4]
 8012ed4:	f7f8 fbba 	bl	800b64c <pbuf_add_header>
 8012ed8:	4603      	mov	r3, r0
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d057      	beq.n	8012f8e <icmp_input+0x17a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	891a      	ldrh	r2, [r3, #8]
 8012ee2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012ee4:	4413      	add	r3, r2
 8012ee6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	891b      	ldrh	r3, [r3, #8]
 8012eec:	8b7a      	ldrh	r2, [r7, #26]
 8012eee:	429a      	cmp	r2, r3
 8012ef0:	d203      	bcs.n	8012efa <icmp_input+0xe6>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
 8012ef2:	4868      	ldr	r0, [pc, #416]	@ (8013094 <icmp_input+0x280>)
 8012ef4:	f002 f868 	bl	8014fc8 <puts>
          goto icmperr;
 8012ef8:	e0b4      	b.n	8013064 <icmp_input+0x250>
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012efa:	8b7b      	ldrh	r3, [r7, #26]
 8012efc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012f00:	4619      	mov	r1, r3
 8012f02:	200e      	movs	r0, #14
 8012f04:	f7f8 f954 	bl	800b1b0 <pbuf_alloc>
 8012f08:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012f0a:	697b      	ldr	r3, [r7, #20]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d103      	bne.n	8012f18 <icmp_input+0x104>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
 8012f10:	4861      	ldr	r0, [pc, #388]	@ (8013098 <icmp_input+0x284>)
 8012f12:	f002 f859 	bl	8014fc8 <puts>
          goto icmperr;
 8012f16:	e0a5      	b.n	8013064 <icmp_input+0x250>
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012f18:	697b      	ldr	r3, [r7, #20]
 8012f1a:	895b      	ldrh	r3, [r3, #10]
 8012f1c:	461a      	mov	r2, r3
 8012f1e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012f20:	3308      	adds	r3, #8
 8012f22:	429a      	cmp	r2, r3
 8012f24:	d206      	bcs.n	8012f34 <icmp_input+0x120>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
 8012f26:	485d      	ldr	r0, [pc, #372]	@ (801309c <icmp_input+0x288>)
 8012f28:	f001 ffde 	bl	8014ee8 <iprintf>
          pbuf_free(r);
 8012f2c:	6978      	ldr	r0, [r7, #20]
 8012f2e:	f7f8 fc23 	bl	800b778 <pbuf_free>
          goto icmperr;
 8012f32:	e097      	b.n	8013064 <icmp_input+0x250>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012f34:	697b      	ldr	r3, [r7, #20]
 8012f36:	685b      	ldr	r3, [r3, #4]
 8012f38:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012f3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	f002 f9a8 	bl	8015292 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012f42:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012f44:	4619      	mov	r1, r3
 8012f46:	6978      	ldr	r0, [r7, #20]
 8012f48:	f7f8 fb90 	bl	800b66c <pbuf_remove_header>
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d009      	beq.n	8012f66 <icmp_input+0x152>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012f52:	4b53      	ldr	r3, [pc, #332]	@ (80130a0 <icmp_input+0x28c>)
 8012f54:	22b6      	movs	r2, #182	@ 0xb6
 8012f56:	4953      	ldr	r1, [pc, #332]	@ (80130a4 <icmp_input+0x290>)
 8012f58:	4853      	ldr	r0, [pc, #332]	@ (80130a8 <icmp_input+0x294>)
 8012f5a:	f001 ffc5 	bl	8014ee8 <iprintf>
          pbuf_free(r);
 8012f5e:	6978      	ldr	r0, [r7, #20]
 8012f60:	f7f8 fc0a 	bl	800b778 <pbuf_free>
          goto icmperr;
 8012f64:	e07e      	b.n	8013064 <icmp_input+0x250>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012f66:	6879      	ldr	r1, [r7, #4]
 8012f68:	6978      	ldr	r0, [r7, #20]
 8012f6a:	f7f8 fd2d 	bl	800b9c8 <pbuf_copy>
 8012f6e:	4603      	mov	r3, r0
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d006      	beq.n	8012f82 <icmp_input+0x16e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
 8012f74:	484d      	ldr	r0, [pc, #308]	@ (80130ac <icmp_input+0x298>)
 8012f76:	f001 ffb7 	bl	8014ee8 <iprintf>
          pbuf_free(r);
 8012f7a:	6978      	ldr	r0, [r7, #20]
 8012f7c:	f7f8 fbfc 	bl	800b778 <pbuf_free>
          goto icmperr;
 8012f80:	e070      	b.n	8013064 <icmp_input+0x250>
        }
        /* free the original p */
        pbuf_free(p);
 8012f82:	6878      	ldr	r0, [r7, #4]
 8012f84:	f7f8 fbf8 	bl	800b778 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012f88:	697b      	ldr	r3, [r7, #20]
 8012f8a:	607b      	str	r3, [r7, #4]
 8012f8c:	e00f      	b.n	8012fae <icmp_input+0x19a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012f8e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012f90:	330e      	adds	r3, #14
 8012f92:	4619      	mov	r1, r3
 8012f94:	6878      	ldr	r0, [r7, #4]
 8012f96:	f7f8 fb69 	bl	800b66c <pbuf_remove_header>
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d006      	beq.n	8012fae <icmp_input+0x19a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012fa0:	4b3f      	ldr	r3, [pc, #252]	@ (80130a0 <icmp_input+0x28c>)
 8012fa2:	22c7      	movs	r2, #199	@ 0xc7
 8012fa4:	4942      	ldr	r1, [pc, #264]	@ (80130b0 <icmp_input+0x29c>)
 8012fa6:	4840      	ldr	r0, [pc, #256]	@ (80130a8 <icmp_input+0x294>)
 8012fa8:	f001 ff9e 	bl	8014ee8 <iprintf>
          goto icmperr;
 8012fac:	e05a      	b.n	8013064 <icmp_input+0x250>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	685b      	ldr	r3, [r3, #4]
 8012fb2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012fb4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012fb6:	4619      	mov	r1, r3
 8012fb8:	6878      	ldr	r0, [r7, #4]
 8012fba:	f7f8 fb47 	bl	800b64c <pbuf_add_header>
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d003      	beq.n	8012fcc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
 8012fc4:	483b      	ldr	r0, [pc, #236]	@ (80130b4 <icmp_input+0x2a0>)
 8012fc6:	f001 ff8f 	bl	8014ee8 <iprintf>
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8012fca:	e042      	b.n	8013052 <icmp_input+0x23e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	685b      	ldr	r3, [r3, #4]
 8012fd0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012fd2:	69fb      	ldr	r3, [r7, #28]
 8012fd4:	681a      	ldr	r2, [r3, #0]
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012fda:	4b26      	ldr	r3, [pc, #152]	@ (8013074 <icmp_input+0x260>)
 8012fdc:	691a      	ldr	r2, [r3, #16]
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012fe2:	693b      	ldr	r3, [r7, #16]
 8012fe4:	2200      	movs	r2, #0
 8012fe6:	701a      	strb	r2, [r3, #0]
        iecho->chksum = 0;
 8012fe8:	693b      	ldr	r3, [r7, #16]
 8012fea:	2200      	movs	r2, #0
 8012fec:	709a      	strb	r2, [r3, #2]
 8012fee:	2200      	movs	r2, #0
 8012ff0:	70da      	strb	r2, [r3, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	22ff      	movs	r2, #255	@ 0xff
 8012ff6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	2200      	movs	r2, #0
 8012ffc:	729a      	strb	r2, [r3, #10]
 8012ffe:	2200      	movs	r2, #0
 8013000:	72da      	strb	r2, [r3, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013002:	683b      	ldr	r3, [r7, #0]
 8013004:	9302      	str	r3, [sp, #8]
 8013006:	2301      	movs	r3, #1
 8013008:	9301      	str	r3, [sp, #4]
 801300a:	2300      	movs	r3, #0
 801300c:	9300      	str	r3, [sp, #0]
 801300e:	23ff      	movs	r3, #255	@ 0xff
 8013010:	2200      	movs	r2, #0
 8013012:	69f9      	ldr	r1, [r7, #28]
 8013014:	6878      	ldr	r0, [r7, #4]
 8013016:	f000 fadb 	bl	80135d0 <ip4_output_if>
 801301a:	4603      	mov	r3, r0
 801301c:	72fb      	strb	r3, [r7, #11]
        if (ret != ERR_OK) {
 801301e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d015      	beq.n	8013052 <icmp_input+0x23e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
 8013026:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801302a:	4618      	mov	r0, r3
 801302c:	f7f6 ff34 	bl	8009e98 <lwip_strerr>
 8013030:	4603      	mov	r3, r0
 8013032:	4619      	mov	r1, r3
 8013034:	4820      	ldr	r0, [pc, #128]	@ (80130b8 <icmp_input+0x2a4>)
 8013036:	f001 ff57 	bl	8014ee8 <iprintf>
      break;
 801303a:	e00a      	b.n	8013052 <icmp_input+0x23e>
      } else if (type == ICMP_AM) {
        MIB2_STATS_INC(mib2.icmpinaddrmasks);
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
 801303c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8013040:	f897 2020 	ldrb.w	r2, [r7, #32]
 8013044:	4619      	mov	r1, r3
 8013046:	481d      	ldr	r0, [pc, #116]	@ (80130bc <icmp_input+0x2a8>)
 8013048:	f001 ff4e 	bl	8014ee8 <iprintf>
 801304c:	e002      	b.n	8013054 <icmp_input+0x240>
      break;
 801304e:	bf00      	nop
 8013050:	e000      	b.n	8013054 <icmp_input+0x240>
      break;
 8013052:	bf00      	nop
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013054:	6878      	ldr	r0, [r7, #4]
 8013056:	f7f8 fb8f 	bl	800b778 <pbuf_free>
  return;
 801305a:	e007      	b.n	801306c <icmp_input+0x258>
lenerr:
  pbuf_free(p);
 801305c:	6878      	ldr	r0, [r7, #4]
 801305e:	f7f8 fb8b 	bl	800b778 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013062:	e003      	b.n	801306c <icmp_input+0x258>
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8013064:	6878      	ldr	r0, [r7, #4]
 8013066:	f7f8 fb87 	bl	800b778 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801306a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801306c:	3728      	adds	r7, #40	@ 0x28
 801306e:	46bd      	mov	sp, r7
 8013070:	bd80      	pop	{r7, pc}
 8013072:	bf00      	nop
 8013074:	20005400 	.word	0x20005400
 8013078:	08018b60 	.word	0x08018b60
 801307c:	08018b94 	.word	0x08018b94
 8013080:	20005414 	.word	0x20005414
 8013084:	08018bc4 	.word	0x08018bc4
 8013088:	08018bf0 	.word	0x08018bf0
 801308c:	08018c1c 	.word	0x08018c1c
 8013090:	08018c30 	.word	0x08018c30
 8013094:	08018c54 	.word	0x08018c54
 8013098:	08018c90 	.word	0x08018c90
 801309c:	08018cb8 	.word	0x08018cb8
 80130a0:	08018ce0 	.word	0x08018ce0
 80130a4:	08018d18 	.word	0x08018d18
 80130a8:	08018d50 	.word	0x08018d50
 80130ac:	08018d78 	.word	0x08018d78
 80130b0:	08018da0 	.word	0x08018da0
 80130b4:	08018dd4 	.word	0x08018dd4
 80130b8:	08018df8 	.word	0x08018df8
 80130bc:	08018e28 	.word	0x08018e28

080130c0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b082      	sub	sp, #8
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
 80130c8:	460b      	mov	r3, r1
 80130ca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80130cc:	78fb      	ldrb	r3, [r7, #3]
 80130ce:	461a      	mov	r2, r3
 80130d0:	2103      	movs	r1, #3
 80130d2:	6878      	ldr	r0, [r7, #4]
 80130d4:	f000 f814 	bl	8013100 <icmp_send_response>
}
 80130d8:	bf00      	nop
 80130da:	3708      	adds	r7, #8
 80130dc:	46bd      	mov	sp, r7
 80130de:	bd80      	pop	{r7, pc}

080130e0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80130e0:	b580      	push	{r7, lr}
 80130e2:	b082      	sub	sp, #8
 80130e4:	af00      	add	r7, sp, #0
 80130e6:	6078      	str	r0, [r7, #4]
 80130e8:	460b      	mov	r3, r1
 80130ea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80130ec:	78fb      	ldrb	r3, [r7, #3]
 80130ee:	461a      	mov	r2, r3
 80130f0:	210b      	movs	r1, #11
 80130f2:	6878      	ldr	r0, [r7, #4]
 80130f4:	f000 f804 	bl	8013100 <icmp_send_response>
}
 80130f8:	bf00      	nop
 80130fa:	3708      	adds	r7, #8
 80130fc:	46bd      	mov	sp, r7
 80130fe:	bd80      	pop	{r7, pc}

08013100 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013100:	b580      	push	{r7, lr}
 8013102:	b08c      	sub	sp, #48	@ 0x30
 8013104:	af04      	add	r7, sp, #16
 8013106:	6078      	str	r0, [r7, #4]
 8013108:	460b      	mov	r3, r1
 801310a:	70fb      	strb	r3, [r7, #3]
 801310c:	4613      	mov	r3, r2
 801310e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013110:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013114:	2124      	movs	r1, #36	@ 0x24
 8013116:	2022      	movs	r0, #34	@ 0x22
 8013118:	f7f8 f84a 	bl	800b1b0 <pbuf_alloc>
 801311c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801311e:	69fb      	ldr	r3, [r7, #28]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d103      	bne.n	801312c <icmp_send_response+0x2c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
 8013124:	4844      	ldr	r0, [pc, #272]	@ (8013238 <icmp_send_response+0x138>)
 8013126:	f001 ff4f 	bl	8014fc8 <puts>
 801312a:	e082      	b.n	8013232 <icmp_send_response+0x132>
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801312c:	69fb      	ldr	r3, [r7, #28]
 801312e:	895b      	ldrh	r3, [r3, #10]
 8013130:	2b23      	cmp	r3, #35	@ 0x23
 8013132:	d806      	bhi.n	8013142 <icmp_send_response+0x42>
 8013134:	4b41      	ldr	r3, [pc, #260]	@ (801323c <icmp_send_response+0x13c>)
 8013136:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801313a:	4941      	ldr	r1, [pc, #260]	@ (8013240 <icmp_send_response+0x140>)
 801313c:	4841      	ldr	r0, [pc, #260]	@ (8013244 <icmp_send_response+0x144>)
 801313e:	f001 fed3 	bl	8014ee8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	685b      	ldr	r3, [r3, #4]
 8013146:	61bb      	str	r3, [r7, #24]
  LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded from "));
 8013148:	483f      	ldr	r0, [pc, #252]	@ (8013248 <icmp_send_response+0x148>)
 801314a:	f001 fecd 	bl	8014ee8 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
 801314e:	69bb      	ldr	r3, [r7, #24]
 8013150:	68db      	ldr	r3, [r3, #12]
 8013152:	b2db      	uxtb	r3, r3
 8013154:	4619      	mov	r1, r3
 8013156:	69bb      	ldr	r3, [r7, #24]
 8013158:	68db      	ldr	r3, [r3, #12]
 801315a:	0a1b      	lsrs	r3, r3, #8
 801315c:	b2db      	uxtb	r3, r3
 801315e:	461a      	mov	r2, r3
 8013160:	69bb      	ldr	r3, [r7, #24]
 8013162:	68db      	ldr	r3, [r3, #12]
 8013164:	0c1b      	lsrs	r3, r3, #16
 8013166:	b2db      	uxtb	r3, r3
 8013168:	4618      	mov	r0, r3
 801316a:	69bb      	ldr	r3, [r7, #24]
 801316c:	68db      	ldr	r3, [r3, #12]
 801316e:	0e1b      	lsrs	r3, r3, #24
 8013170:	b2db      	uxtb	r3, r3
 8013172:	9300      	str	r3, [sp, #0]
 8013174:	4603      	mov	r3, r0
 8013176:	4835      	ldr	r0, [pc, #212]	@ (801324c <icmp_send_response+0x14c>)
 8013178:	f001 feb6 	bl	8014ee8 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
 801317c:	4834      	ldr	r0, [pc, #208]	@ (8013250 <icmp_send_response+0x150>)
 801317e:	f001 feb3 	bl	8014ee8 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
 8013182:	69bb      	ldr	r3, [r7, #24]
 8013184:	691b      	ldr	r3, [r3, #16]
 8013186:	b2db      	uxtb	r3, r3
 8013188:	4619      	mov	r1, r3
 801318a:	69bb      	ldr	r3, [r7, #24]
 801318c:	691b      	ldr	r3, [r3, #16]
 801318e:	0a1b      	lsrs	r3, r3, #8
 8013190:	b2db      	uxtb	r3, r3
 8013192:	461a      	mov	r2, r3
 8013194:	69bb      	ldr	r3, [r7, #24]
 8013196:	691b      	ldr	r3, [r3, #16]
 8013198:	0c1b      	lsrs	r3, r3, #16
 801319a:	b2db      	uxtb	r3, r3
 801319c:	4618      	mov	r0, r3
 801319e:	69bb      	ldr	r3, [r7, #24]
 80131a0:	691b      	ldr	r3, [r3, #16]
 80131a2:	0e1b      	lsrs	r3, r3, #24
 80131a4:	b2db      	uxtb	r3, r3
 80131a6:	9300      	str	r3, [sp, #0]
 80131a8:	4603      	mov	r3, r0
 80131aa:	4828      	ldr	r0, [pc, #160]	@ (801324c <icmp_send_response+0x14c>)
 80131ac:	f001 fe9c 	bl	8014ee8 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));
 80131b0:	200a      	movs	r0, #10
 80131b2:	f001 feab 	bl	8014f0c <putchar>

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80131b6:	69fb      	ldr	r3, [r7, #28]
 80131b8:	685b      	ldr	r3, [r3, #4]
 80131ba:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80131bc:	697b      	ldr	r3, [r7, #20]
 80131be:	78fa      	ldrb	r2, [r7, #3]
 80131c0:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80131c2:	697b      	ldr	r3, [r7, #20]
 80131c4:	78ba      	ldrb	r2, [r7, #2]
 80131c6:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80131c8:	697b      	ldr	r3, [r7, #20]
 80131ca:	2200      	movs	r2, #0
 80131cc:	711a      	strb	r2, [r3, #4]
 80131ce:	2200      	movs	r2, #0
 80131d0:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80131d2:	697b      	ldr	r3, [r7, #20]
 80131d4:	2200      	movs	r2, #0
 80131d6:	719a      	strb	r2, [r3, #6]
 80131d8:	2200      	movs	r2, #0
 80131da:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80131dc:	69fb      	ldr	r3, [r7, #28]
 80131de:	685b      	ldr	r3, [r3, #4]
 80131e0:	f103 0008 	add.w	r0, r3, #8
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	685b      	ldr	r3, [r3, #4]
 80131e8:	221c      	movs	r2, #28
 80131ea:	4619      	mov	r1, r3
 80131ec:	f002 f851 	bl	8015292 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80131f0:	69bb      	ldr	r3, [r7, #24]
 80131f2:	68db      	ldr	r3, [r3, #12]
 80131f4:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80131f6:	f107 030c 	add.w	r3, r7, #12
 80131fa:	4618      	mov	r0, r3
 80131fc:	f000 f82a 	bl	8013254 <ip4_route>
 8013200:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013202:	693b      	ldr	r3, [r7, #16]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d011      	beq.n	801322c <icmp_send_response+0x12c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013208:	697b      	ldr	r3, [r7, #20]
 801320a:	2200      	movs	r2, #0
 801320c:	709a      	strb	r2, [r3, #2]
 801320e:	2200      	movs	r2, #0
 8013210:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013212:	f107 020c 	add.w	r2, r7, #12
 8013216:	693b      	ldr	r3, [r7, #16]
 8013218:	9302      	str	r3, [sp, #8]
 801321a:	2301      	movs	r3, #1
 801321c:	9301      	str	r3, [sp, #4]
 801321e:	2300      	movs	r3, #0
 8013220:	9300      	str	r3, [sp, #0]
 8013222:	23ff      	movs	r3, #255	@ 0xff
 8013224:	2100      	movs	r1, #0
 8013226:	69f8      	ldr	r0, [r7, #28]
 8013228:	f000 f9d2 	bl	80135d0 <ip4_output_if>
  }
  pbuf_free(q);
 801322c:	69f8      	ldr	r0, [r7, #28]
 801322e:	f7f8 faa3 	bl	800b778 <pbuf_free>
}
 8013232:	3720      	adds	r7, #32
 8013234:	46bd      	mov	sp, r7
 8013236:	bd80      	pop	{r7, pc}
 8013238:	08018e5c 	.word	0x08018e5c
 801323c:	08018ce0 	.word	0x08018ce0
 8013240:	08018e9c 	.word	0x08018e9c
 8013244:	08018d50 	.word	0x08018d50
 8013248:	08018ec8 	.word	0x08018ec8
 801324c:	08018ee4 	.word	0x08018ee4
 8013250:	08018ef4 	.word	0x08018ef4

08013254 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013254:	b480      	push	{r7}
 8013256:	b085      	sub	sp, #20
 8013258:	af00      	add	r7, sp, #0
 801325a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801325c:	4b33      	ldr	r3, [pc, #204]	@ (801332c <ip4_route+0xd8>)
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	60fb      	str	r3, [r7, #12]
 8013262:	e036      	b.n	80132d2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801326a:	f003 0301 	and.w	r3, r3, #1
 801326e:	b2db      	uxtb	r3, r3
 8013270:	2b00      	cmp	r3, #0
 8013272:	d02b      	beq.n	80132cc <ip4_route+0x78>
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801327a:	089b      	lsrs	r3, r3, #2
 801327c:	f003 0301 	and.w	r3, r3, #1
 8013280:	b2db      	uxtb	r3, r3
 8013282:	2b00      	cmp	r3, #0
 8013284:	d022      	beq.n	80132cc <ip4_route+0x78>
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	3304      	adds	r3, #4
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d01d      	beq.n	80132cc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	681a      	ldr	r2, [r3, #0]
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	3304      	adds	r3, #4
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	405a      	eors	r2, r3
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	3308      	adds	r3, #8
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	4013      	ands	r3, r2
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d101      	bne.n	80132ac <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	e038      	b.n	801331e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80132b2:	f003 0302 	and.w	r3, r3, #2
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d108      	bne.n	80132cc <ip4_route+0x78>
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	681a      	ldr	r2, [r3, #0]
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	330c      	adds	r3, #12
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	429a      	cmp	r2, r3
 80132c6:	d101      	bne.n	80132cc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	e028      	b.n	801331e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	60fb      	str	r3, [r7, #12]
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d1c5      	bne.n	8013264 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80132d8:	4b15      	ldr	r3, [pc, #84]	@ (8013330 <ip4_route+0xdc>)
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d01a      	beq.n	8013316 <ip4_route+0xc2>
 80132e0:	4b13      	ldr	r3, [pc, #76]	@ (8013330 <ip4_route+0xdc>)
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80132e8:	f003 0301 	and.w	r3, r3, #1
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d012      	beq.n	8013316 <ip4_route+0xc2>
 80132f0:	4b0f      	ldr	r3, [pc, #60]	@ (8013330 <ip4_route+0xdc>)
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80132f8:	f003 0304 	and.w	r3, r3, #4
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d00a      	beq.n	8013316 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013300:	4b0b      	ldr	r3, [pc, #44]	@ (8013330 <ip4_route+0xdc>)
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	3304      	adds	r3, #4
 8013306:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013308:	2b00      	cmp	r3, #0
 801330a:	d004      	beq.n	8013316 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	b2db      	uxtb	r3, r3
 8013312:	2b7f      	cmp	r3, #127	@ 0x7f
 8013314:	d101      	bne.n	801331a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013316:	2300      	movs	r3, #0
 8013318:	e001      	b.n	801331e <ip4_route+0xca>
  }

  return netif_default;
 801331a:	4b05      	ldr	r3, [pc, #20]	@ (8013330 <ip4_route+0xdc>)
 801331c:	681b      	ldr	r3, [r3, #0]
}
 801331e:	4618      	mov	r0, r3
 8013320:	3714      	adds	r7, #20
 8013322:	46bd      	mov	sp, r7
 8013324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013328:	4770      	bx	lr
 801332a:	bf00      	nop
 801332c:	20008350 	.word	0x20008350
 8013330:	20008354 	.word	0x20008354

08013334 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013334:	b580      	push	{r7, lr}
 8013336:	b082      	sub	sp, #8
 8013338:	af00      	add	r7, sp, #0
 801333a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013342:	f003 0301 	and.w	r3, r3, #1
 8013346:	b2db      	uxtb	r3, r3
 8013348:	2b00      	cmp	r3, #0
 801334a:	d016      	beq.n	801337a <ip4_input_accept+0x46>
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	3304      	adds	r3, #4
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d011      	beq.n	801337a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013356:	4b0b      	ldr	r3, [pc, #44]	@ (8013384 <ip4_input_accept+0x50>)
 8013358:	695a      	ldr	r2, [r3, #20]
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	3304      	adds	r3, #4
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	429a      	cmp	r2, r3
 8013362:	d008      	beq.n	8013376 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013364:	4b07      	ldr	r3, [pc, #28]	@ (8013384 <ip4_input_accept+0x50>)
 8013366:	695b      	ldr	r3, [r3, #20]
 8013368:	6879      	ldr	r1, [r7, #4]
 801336a:	4618      	mov	r0, r3
 801336c:	f000 fa08 	bl	8013780 <ip4_addr_isbroadcast_u32>
 8013370:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013372:	2b00      	cmp	r3, #0
 8013374:	d001      	beq.n	801337a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8013376:	2301      	movs	r3, #1
 8013378:	e000      	b.n	801337c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801337a:	2300      	movs	r3, #0
}
 801337c:	4618      	mov	r0, r3
 801337e:	3708      	adds	r7, #8
 8013380:	46bd      	mov	sp, r7
 8013382:	bd80      	pop	{r7, pc}
 8013384:	20005400 	.word	0x20005400

08013388 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013388:	b580      	push	{r7, lr}
 801338a:	b086      	sub	sp, #24
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
 8013390:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	685b      	ldr	r3, [r3, #4]
 8013396:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 8013398:	693b      	ldr	r3, [r7, #16]
 801339a:	781b      	ldrb	r3, [r3, #0]
 801339c:	091b      	lsrs	r3, r3, #4
 801339e:	b2db      	uxtb	r3, r3
 80133a0:	2b04      	cmp	r3, #4
 80133a2:	d004      	beq.n	80133ae <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80133a4:	6878      	ldr	r0, [r7, #4]
 80133a6:	f7f8 f9e7 	bl	800b778 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80133aa:	2300      	movs	r3, #0
 80133ac:	e107      	b.n	80135be <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80133ae:	693b      	ldr	r3, [r7, #16]
 80133b0:	781b      	ldrb	r3, [r3, #0]
 80133b2:	f003 030f 	and.w	r3, r3, #15
 80133b6:	b2db      	uxtb	r3, r3
 80133b8:	009b      	lsls	r3, r3, #2
 80133ba:	b2db      	uxtb	r3, r3
 80133bc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80133be:	693b      	ldr	r3, [r7, #16]
 80133c0:	885b      	ldrh	r3, [r3, #2]
 80133c2:	b29b      	uxth	r3, r3
 80133c4:	4618      	mov	r0, r3
 80133c6:	f7f6 fd87 	bl	8009ed8 <lwip_htons>
 80133ca:	4603      	mov	r3, r0
 80133cc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	891b      	ldrh	r3, [r3, #8]
 80133d2:	89ba      	ldrh	r2, [r7, #12]
 80133d4:	429a      	cmp	r2, r3
 80133d6:	d204      	bcs.n	80133e2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80133d8:	89bb      	ldrh	r3, [r7, #12]
 80133da:	4619      	mov	r1, r3
 80133dc:	6878      	ldr	r0, [r7, #4]
 80133de:	f7f8 f845 	bl	800b46c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	895b      	ldrh	r3, [r3, #10]
 80133e6:	89fa      	ldrh	r2, [r7, #14]
 80133e8:	429a      	cmp	r2, r3
 80133ea:	d807      	bhi.n	80133fc <ip4_input+0x74>
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	891b      	ldrh	r3, [r3, #8]
 80133f0:	89ba      	ldrh	r2, [r7, #12]
 80133f2:	429a      	cmp	r2, r3
 80133f4:	d802      	bhi.n	80133fc <ip4_input+0x74>
 80133f6:	89fb      	ldrh	r3, [r7, #14]
 80133f8:	2b13      	cmp	r3, #19
 80133fa:	d804      	bhi.n	8013406 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80133fc:	6878      	ldr	r0, [r7, #4]
 80133fe:	f7f8 f9bb 	bl	800b778 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013402:	2300      	movs	r3, #0
 8013404:	e0db      	b.n	80135be <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013406:	693b      	ldr	r3, [r7, #16]
 8013408:	691b      	ldr	r3, [r3, #16]
 801340a:	4a6f      	ldr	r2, [pc, #444]	@ (80135c8 <ip4_input+0x240>)
 801340c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801340e:	693b      	ldr	r3, [r7, #16]
 8013410:	68db      	ldr	r3, [r3, #12]
 8013412:	4a6d      	ldr	r2, [pc, #436]	@ (80135c8 <ip4_input+0x240>)
 8013414:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013416:	4b6c      	ldr	r3, [pc, #432]	@ (80135c8 <ip4_input+0x240>)
 8013418:	695b      	ldr	r3, [r3, #20]
 801341a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801341e:	2be0      	cmp	r3, #224	@ 0xe0
 8013420:	d112      	bne.n	8013448 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013422:	683b      	ldr	r3, [r7, #0]
 8013424:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013428:	f003 0301 	and.w	r3, r3, #1
 801342c:	b2db      	uxtb	r3, r3
 801342e:	2b00      	cmp	r3, #0
 8013430:	d007      	beq.n	8013442 <ip4_input+0xba>
 8013432:	683b      	ldr	r3, [r7, #0]
 8013434:	3304      	adds	r3, #4
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	2b00      	cmp	r3, #0
 801343a:	d002      	beq.n	8013442 <ip4_input+0xba>
      netif = inp;
 801343c:	683b      	ldr	r3, [r7, #0]
 801343e:	617b      	str	r3, [r7, #20]
 8013440:	e02a      	b.n	8013498 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013442:	2300      	movs	r3, #0
 8013444:	617b      	str	r3, [r7, #20]
 8013446:	e027      	b.n	8013498 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013448:	6838      	ldr	r0, [r7, #0]
 801344a:	f7ff ff73 	bl	8013334 <ip4_input_accept>
 801344e:	4603      	mov	r3, r0
 8013450:	2b00      	cmp	r3, #0
 8013452:	d002      	beq.n	801345a <ip4_input+0xd2>
      netif = inp;
 8013454:	683b      	ldr	r3, [r7, #0]
 8013456:	617b      	str	r3, [r7, #20]
 8013458:	e01e      	b.n	8013498 <ip4_input+0x110>
    } else {
      netif = NULL;
 801345a:	2300      	movs	r3, #0
 801345c:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801345e:	4b5a      	ldr	r3, [pc, #360]	@ (80135c8 <ip4_input+0x240>)
 8013460:	695b      	ldr	r3, [r3, #20]
 8013462:	b2db      	uxtb	r3, r3
 8013464:	2b7f      	cmp	r3, #127	@ 0x7f
 8013466:	d017      	beq.n	8013498 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013468:	4b58      	ldr	r3, [pc, #352]	@ (80135cc <ip4_input+0x244>)
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	617b      	str	r3, [r7, #20]
 801346e:	e00e      	b.n	801348e <ip4_input+0x106>
          if (netif == inp) {
 8013470:	697a      	ldr	r2, [r7, #20]
 8013472:	683b      	ldr	r3, [r7, #0]
 8013474:	429a      	cmp	r2, r3
 8013476:	d006      	beq.n	8013486 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013478:	6978      	ldr	r0, [r7, #20]
 801347a:	f7ff ff5b 	bl	8013334 <ip4_input_accept>
 801347e:	4603      	mov	r3, r0
 8013480:	2b00      	cmp	r3, #0
 8013482:	d108      	bne.n	8013496 <ip4_input+0x10e>
 8013484:	e000      	b.n	8013488 <ip4_input+0x100>
            continue;
 8013486:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013488:	697b      	ldr	r3, [r7, #20]
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	617b      	str	r3, [r7, #20]
 801348e:	697b      	ldr	r3, [r7, #20]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d1ed      	bne.n	8013470 <ip4_input+0xe8>
 8013494:	e000      	b.n	8013498 <ip4_input+0x110>
            break;
 8013496:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013498:	4b4b      	ldr	r3, [pc, #300]	@ (80135c8 <ip4_input+0x240>)
 801349a:	691b      	ldr	r3, [r3, #16]
 801349c:	6839      	ldr	r1, [r7, #0]
 801349e:	4618      	mov	r0, r3
 80134a0:	f000 f96e 	bl	8013780 <ip4_addr_isbroadcast_u32>
 80134a4:	4603      	mov	r3, r0
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d105      	bne.n	80134b6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80134aa:	4b47      	ldr	r3, [pc, #284]	@ (80135c8 <ip4_input+0x240>)
 80134ac:	691b      	ldr	r3, [r3, #16]
 80134ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80134b2:	2be0      	cmp	r3, #224	@ 0xe0
 80134b4:	d104      	bne.n	80134c0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80134b6:	6878      	ldr	r0, [r7, #4]
 80134b8:	f7f8 f95e 	bl	800b778 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80134bc:	2300      	movs	r3, #0
 80134be:	e07e      	b.n	80135be <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80134c0:	697b      	ldr	r3, [r7, #20]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d104      	bne.n	80134d0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80134c6:	6878      	ldr	r0, [r7, #4]
 80134c8:	f7f8 f956 	bl	800b778 <pbuf_free>
    return ERR_OK;
 80134cc:	2300      	movs	r3, #0
 80134ce:	e076      	b.n	80135be <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80134d0:	693b      	ldr	r3, [r7, #16]
 80134d2:	88db      	ldrh	r3, [r3, #6]
 80134d4:	b29b      	uxth	r3, r3
 80134d6:	461a      	mov	r2, r3
 80134d8:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80134dc:	4013      	ands	r3, r2
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d00b      	beq.n	80134fa <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80134e2:	6878      	ldr	r0, [r7, #4]
 80134e4:	f000 fc92 	bl	8013e0c <ip4_reass>
 80134e8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d101      	bne.n	80134f4 <ip4_input+0x16c>
      return ERR_OK;
 80134f0:	2300      	movs	r3, #0
 80134f2:	e064      	b.n	80135be <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	685b      	ldr	r3, [r3, #4]
 80134f8:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80134fa:	4a33      	ldr	r2, [pc, #204]	@ (80135c8 <ip4_input+0x240>)
 80134fc:	697b      	ldr	r3, [r7, #20]
 80134fe:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013500:	4a31      	ldr	r2, [pc, #196]	@ (80135c8 <ip4_input+0x240>)
 8013502:	683b      	ldr	r3, [r7, #0]
 8013504:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013506:	4a30      	ldr	r2, [pc, #192]	@ (80135c8 <ip4_input+0x240>)
 8013508:	693b      	ldr	r3, [r7, #16]
 801350a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801350c:	693b      	ldr	r3, [r7, #16]
 801350e:	781b      	ldrb	r3, [r3, #0]
 8013510:	f003 030f 	and.w	r3, r3, #15
 8013514:	b2db      	uxtb	r3, r3
 8013516:	009b      	lsls	r3, r3, #2
 8013518:	b2db      	uxtb	r3, r3
 801351a:	461a      	mov	r2, r3
 801351c:	4b2a      	ldr	r3, [pc, #168]	@ (80135c8 <ip4_input+0x240>)
 801351e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013520:	89fb      	ldrh	r3, [r7, #14]
 8013522:	4619      	mov	r1, r3
 8013524:	6878      	ldr	r0, [r7, #4]
 8013526:	f7f8 f8a1 	bl	800b66c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801352a:	693b      	ldr	r3, [r7, #16]
 801352c:	7a5b      	ldrb	r3, [r3, #9]
 801352e:	2b11      	cmp	r3, #17
 8013530:	d006      	beq.n	8013540 <ip4_input+0x1b8>
 8013532:	2b11      	cmp	r3, #17
 8013534:	dc13      	bgt.n	801355e <ip4_input+0x1d6>
 8013536:	2b01      	cmp	r3, #1
 8013538:	d00c      	beq.n	8013554 <ip4_input+0x1cc>
 801353a:	2b06      	cmp	r3, #6
 801353c:	d005      	beq.n	801354a <ip4_input+0x1c2>
 801353e:	e00e      	b.n	801355e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013540:	6839      	ldr	r1, [r7, #0]
 8013542:	6878      	ldr	r0, [r7, #4]
 8013544:	f7fd ff20 	bl	8011388 <udp_input>
        break;
 8013548:	e026      	b.n	8013598 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801354a:	6839      	ldr	r1, [r7, #0]
 801354c:	6878      	ldr	r0, [r7, #4]
 801354e:	f7f9 ff53 	bl	800d3f8 <tcp_input>
        break;
 8013552:	e021      	b.n	8013598 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013554:	6839      	ldr	r1, [r7, #0]
 8013556:	6878      	ldr	r0, [r7, #4]
 8013558:	f7ff fc5c 	bl	8012e14 <icmp_input>
        break;
 801355c:	e01c      	b.n	8013598 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801355e:	4b1a      	ldr	r3, [pc, #104]	@ (80135c8 <ip4_input+0x240>)
 8013560:	695b      	ldr	r3, [r3, #20]
 8013562:	6979      	ldr	r1, [r7, #20]
 8013564:	4618      	mov	r0, r3
 8013566:	f000 f90b 	bl	8013780 <ip4_addr_isbroadcast_u32>
 801356a:	4603      	mov	r3, r0
 801356c:	2b00      	cmp	r3, #0
 801356e:	d10f      	bne.n	8013590 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013570:	4b15      	ldr	r3, [pc, #84]	@ (80135c8 <ip4_input+0x240>)
 8013572:	695b      	ldr	r3, [r3, #20]
 8013574:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013578:	2be0      	cmp	r3, #224	@ 0xe0
 801357a:	d009      	beq.n	8013590 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801357c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013580:	4619      	mov	r1, r3
 8013582:	6878      	ldr	r0, [r7, #4]
 8013584:	f7f8 f8e5 	bl	800b752 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013588:	2102      	movs	r1, #2
 801358a:	6878      	ldr	r0, [r7, #4]
 801358c:	f7ff fd98 	bl	80130c0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013590:	6878      	ldr	r0, [r7, #4]
 8013592:	f7f8 f8f1 	bl	800b778 <pbuf_free>
        break;
 8013596:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013598:	4b0b      	ldr	r3, [pc, #44]	@ (80135c8 <ip4_input+0x240>)
 801359a:	2200      	movs	r2, #0
 801359c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801359e:	4b0a      	ldr	r3, [pc, #40]	@ (80135c8 <ip4_input+0x240>)
 80135a0:	2200      	movs	r2, #0
 80135a2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80135a4:	4b08      	ldr	r3, [pc, #32]	@ (80135c8 <ip4_input+0x240>)
 80135a6:	2200      	movs	r2, #0
 80135a8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80135aa:	4b07      	ldr	r3, [pc, #28]	@ (80135c8 <ip4_input+0x240>)
 80135ac:	2200      	movs	r2, #0
 80135ae:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80135b0:	4b05      	ldr	r3, [pc, #20]	@ (80135c8 <ip4_input+0x240>)
 80135b2:	2200      	movs	r2, #0
 80135b4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80135b6:	4b04      	ldr	r3, [pc, #16]	@ (80135c8 <ip4_input+0x240>)
 80135b8:	2200      	movs	r2, #0
 80135ba:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80135bc:	2300      	movs	r3, #0
}
 80135be:	4618      	mov	r0, r3
 80135c0:	3718      	adds	r7, #24
 80135c2:	46bd      	mov	sp, r7
 80135c4:	bd80      	pop	{r7, pc}
 80135c6:	bf00      	nop
 80135c8:	20005400 	.word	0x20005400
 80135cc:	20008350 	.word	0x20008350

080135d0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80135d0:	b580      	push	{r7, lr}
 80135d2:	b08a      	sub	sp, #40	@ 0x28
 80135d4:	af04      	add	r7, sp, #16
 80135d6:	60f8      	str	r0, [r7, #12]
 80135d8:	60b9      	str	r1, [r7, #8]
 80135da:	607a      	str	r2, [r7, #4]
 80135dc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80135de:	68bb      	ldr	r3, [r7, #8]
 80135e0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d009      	beq.n	80135fc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80135e8:	68bb      	ldr	r3, [r7, #8]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d003      	beq.n	80135f6 <ip4_output_if+0x26>
 80135ee:	68bb      	ldr	r3, [r7, #8]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d102      	bne.n	80135fc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80135f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135f8:	3304      	adds	r3, #4
 80135fa:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80135fc:	78fa      	ldrb	r2, [r7, #3]
 80135fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013600:	9302      	str	r3, [sp, #8]
 8013602:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013606:	9301      	str	r3, [sp, #4]
 8013608:	f897 3020 	ldrb.w	r3, [r7, #32]
 801360c:	9300      	str	r3, [sp, #0]
 801360e:	4613      	mov	r3, r2
 8013610:	687a      	ldr	r2, [r7, #4]
 8013612:	6979      	ldr	r1, [r7, #20]
 8013614:	68f8      	ldr	r0, [r7, #12]
 8013616:	f000 f805 	bl	8013624 <ip4_output_if_src>
 801361a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801361c:	4618      	mov	r0, r3
 801361e:	3718      	adds	r7, #24
 8013620:	46bd      	mov	sp, r7
 8013622:	bd80      	pop	{r7, pc}

08013624 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013624:	b580      	push	{r7, lr}
 8013626:	b088      	sub	sp, #32
 8013628:	af00      	add	r7, sp, #0
 801362a:	60f8      	str	r0, [r7, #12]
 801362c:	60b9      	str	r1, [r7, #8]
 801362e:	607a      	str	r2, [r7, #4]
 8013630:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	7b9b      	ldrb	r3, [r3, #14]
 8013636:	2b01      	cmp	r3, #1
 8013638:	d006      	beq.n	8013648 <ip4_output_if_src+0x24>
 801363a:	4b4b      	ldr	r3, [pc, #300]	@ (8013768 <ip4_output_if_src+0x144>)
 801363c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8013640:	494a      	ldr	r1, [pc, #296]	@ (801376c <ip4_output_if_src+0x148>)
 8013642:	484b      	ldr	r0, [pc, #300]	@ (8013770 <ip4_output_if_src+0x14c>)
 8013644:	f001 fc50 	bl	8014ee8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d060      	beq.n	8013710 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801364e:	2314      	movs	r3, #20
 8013650:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013652:	2114      	movs	r1, #20
 8013654:	68f8      	ldr	r0, [r7, #12]
 8013656:	f7f7 fff9 	bl	800b64c <pbuf_add_header>
 801365a:	4603      	mov	r3, r0
 801365c:	2b00      	cmp	r3, #0
 801365e:	d002      	beq.n	8013666 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013660:	f06f 0301 	mvn.w	r3, #1
 8013664:	e07c      	b.n	8013760 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	685b      	ldr	r3, [r3, #4]
 801366a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	895b      	ldrh	r3, [r3, #10]
 8013670:	2b13      	cmp	r3, #19
 8013672:	d806      	bhi.n	8013682 <ip4_output_if_src+0x5e>
 8013674:	4b3c      	ldr	r3, [pc, #240]	@ (8013768 <ip4_output_if_src+0x144>)
 8013676:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801367a:	493e      	ldr	r1, [pc, #248]	@ (8013774 <ip4_output_if_src+0x150>)
 801367c:	483c      	ldr	r0, [pc, #240]	@ (8013770 <ip4_output_if_src+0x14c>)
 801367e:	f001 fc33 	bl	8014ee8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013682:	69fb      	ldr	r3, [r7, #28]
 8013684:	78fa      	ldrb	r2, [r7, #3]
 8013686:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013688:	69fb      	ldr	r3, [r7, #28]
 801368a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801368e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	681a      	ldr	r2, [r3, #0]
 8013694:	69fb      	ldr	r3, [r7, #28]
 8013696:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013698:	8b7b      	ldrh	r3, [r7, #26]
 801369a:	089b      	lsrs	r3, r3, #2
 801369c:	b29b      	uxth	r3, r3
 801369e:	b2db      	uxtb	r3, r3
 80136a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80136a4:	b2da      	uxtb	r2, r3
 80136a6:	69fb      	ldr	r3, [r7, #28]
 80136a8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80136aa:	69fb      	ldr	r3, [r7, #28]
 80136ac:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80136b0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	891b      	ldrh	r3, [r3, #8]
 80136b6:	4618      	mov	r0, r3
 80136b8:	f7f6 fc0e 	bl	8009ed8 <lwip_htons>
 80136bc:	4603      	mov	r3, r0
 80136be:	461a      	mov	r2, r3
 80136c0:	69fb      	ldr	r3, [r7, #28]
 80136c2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80136c4:	69fb      	ldr	r3, [r7, #28]
 80136c6:	2200      	movs	r2, #0
 80136c8:	719a      	strb	r2, [r3, #6]
 80136ca:	2200      	movs	r2, #0
 80136cc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80136ce:	4b2a      	ldr	r3, [pc, #168]	@ (8013778 <ip4_output_if_src+0x154>)
 80136d0:	881b      	ldrh	r3, [r3, #0]
 80136d2:	4618      	mov	r0, r3
 80136d4:	f7f6 fc00 	bl	8009ed8 <lwip_htons>
 80136d8:	4603      	mov	r3, r0
 80136da:	461a      	mov	r2, r3
 80136dc:	69fb      	ldr	r3, [r7, #28]
 80136de:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80136e0:	4b25      	ldr	r3, [pc, #148]	@ (8013778 <ip4_output_if_src+0x154>)
 80136e2:	881b      	ldrh	r3, [r3, #0]
 80136e4:	3301      	adds	r3, #1
 80136e6:	b29a      	uxth	r2, r3
 80136e8:	4b23      	ldr	r3, [pc, #140]	@ (8013778 <ip4_output_if_src+0x154>)
 80136ea:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80136ec:	68bb      	ldr	r3, [r7, #8]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d104      	bne.n	80136fc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80136f2:	4b22      	ldr	r3, [pc, #136]	@ (801377c <ip4_output_if_src+0x158>)
 80136f4:	681a      	ldr	r2, [r3, #0]
 80136f6:	69fb      	ldr	r3, [r7, #28]
 80136f8:	60da      	str	r2, [r3, #12]
 80136fa:	e003      	b.n	8013704 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80136fc:	68bb      	ldr	r3, [r7, #8]
 80136fe:	681a      	ldr	r2, [r3, #0]
 8013700:	69fb      	ldr	r3, [r7, #28]
 8013702:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013704:	69fb      	ldr	r3, [r7, #28]
 8013706:	2200      	movs	r2, #0
 8013708:	729a      	strb	r2, [r3, #10]
 801370a:	2200      	movs	r2, #0
 801370c:	72da      	strb	r2, [r3, #11]
 801370e:	e00f      	b.n	8013730 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	895b      	ldrh	r3, [r3, #10]
 8013714:	2b13      	cmp	r3, #19
 8013716:	d802      	bhi.n	801371e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013718:	f06f 0301 	mvn.w	r3, #1
 801371c:	e020      	b.n	8013760 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	685b      	ldr	r3, [r3, #4]
 8013722:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013724:	69fb      	ldr	r3, [r7, #28]
 8013726:	691b      	ldr	r3, [r3, #16]
 8013728:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801372a:	f107 0314 	add.w	r3, r7, #20
 801372e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013732:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013734:	2b00      	cmp	r3, #0
 8013736:	d00c      	beq.n	8013752 <ip4_output_if_src+0x12e>
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	891a      	ldrh	r2, [r3, #8]
 801373c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801373e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013740:	429a      	cmp	r2, r3
 8013742:	d906      	bls.n	8013752 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013744:	687a      	ldr	r2, [r7, #4]
 8013746:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013748:	68f8      	ldr	r0, [r7, #12]
 801374a:	f000 fd53 	bl	80141f4 <ip4_frag>
 801374e:	4603      	mov	r3, r0
 8013750:	e006      	b.n	8013760 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013754:	695b      	ldr	r3, [r3, #20]
 8013756:	687a      	ldr	r2, [r7, #4]
 8013758:	68f9      	ldr	r1, [r7, #12]
 801375a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801375c:	4798      	blx	r3
 801375e:	4603      	mov	r3, r0
}
 8013760:	4618      	mov	r0, r3
 8013762:	3720      	adds	r7, #32
 8013764:	46bd      	mov	sp, r7
 8013766:	bd80      	pop	{r7, pc}
 8013768:	08018efc 	.word	0x08018efc
 801376c:	08018f30 	.word	0x08018f30
 8013770:	08018f3c 	.word	0x08018f3c
 8013774:	08018f64 	.word	0x08018f64
 8013778:	200084b2 	.word	0x200084b2
 801377c:	080194b4 	.word	0x080194b4

08013780 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013780:	b480      	push	{r7}
 8013782:	b085      	sub	sp, #20
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
 8013788:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013794:	d002      	beq.n	801379c <ip4_addr_isbroadcast_u32+0x1c>
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d101      	bne.n	80137a0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801379c:	2301      	movs	r3, #1
 801379e:	e02a      	b.n	80137f6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80137a0:	683b      	ldr	r3, [r7, #0]
 80137a2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80137a6:	f003 0302 	and.w	r3, r3, #2
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d101      	bne.n	80137b2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80137ae:	2300      	movs	r3, #0
 80137b0:	e021      	b.n	80137f6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80137b2:	683b      	ldr	r3, [r7, #0]
 80137b4:	3304      	adds	r3, #4
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	687a      	ldr	r2, [r7, #4]
 80137ba:	429a      	cmp	r2, r3
 80137bc:	d101      	bne.n	80137c2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80137be:	2300      	movs	r3, #0
 80137c0:	e019      	b.n	80137f6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80137c2:	68fa      	ldr	r2, [r7, #12]
 80137c4:	683b      	ldr	r3, [r7, #0]
 80137c6:	3304      	adds	r3, #4
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	405a      	eors	r2, r3
 80137cc:	683b      	ldr	r3, [r7, #0]
 80137ce:	3308      	adds	r3, #8
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	4013      	ands	r3, r2
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d10d      	bne.n	80137f4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80137d8:	683b      	ldr	r3, [r7, #0]
 80137da:	3308      	adds	r3, #8
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	43da      	mvns	r2, r3
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80137e4:	683b      	ldr	r3, [r7, #0]
 80137e6:	3308      	adds	r3, #8
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80137ec:	429a      	cmp	r2, r3
 80137ee:	d101      	bne.n	80137f4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80137f0:	2301      	movs	r3, #1
 80137f2:	e000      	b.n	80137f6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80137f4:	2300      	movs	r3, #0
  }
}
 80137f6:	4618      	mov	r0, r3
 80137f8:	3714      	adds	r7, #20
 80137fa:	46bd      	mov	sp, r7
 80137fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013800:	4770      	bx	lr
	...

08013804 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013804:	b580      	push	{r7, lr}
 8013806:	b084      	sub	sp, #16
 8013808:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801380a:	2300      	movs	r3, #0
 801380c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801380e:	4b12      	ldr	r3, [pc, #72]	@ (8013858 <ip_reass_tmr+0x54>)
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013814:	e018      	b.n	8013848 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	7fdb      	ldrb	r3, [r3, #31]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d00b      	beq.n	8013836 <ip_reass_tmr+0x32>
      r->timer--;
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	7fdb      	ldrb	r3, [r3, #31]
 8013822:	3b01      	subs	r3, #1
 8013824:	b2da      	uxtb	r2, r3
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	60fb      	str	r3, [r7, #12]
 8013834:	e008      	b.n	8013848 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013840:	68b9      	ldr	r1, [r7, #8]
 8013842:	6878      	ldr	r0, [r7, #4]
 8013844:	f000 f80a 	bl	801385c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d1e3      	bne.n	8013816 <ip_reass_tmr+0x12>
    }
  }
}
 801384e:	bf00      	nop
 8013850:	bf00      	nop
 8013852:	3710      	adds	r7, #16
 8013854:	46bd      	mov	sp, r7
 8013856:	bd80      	pop	{r7, pc}
 8013858:	200084b4 	.word	0x200084b4

0801385c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801385c:	b580      	push	{r7, lr}
 801385e:	b088      	sub	sp, #32
 8013860:	af00      	add	r7, sp, #0
 8013862:	6078      	str	r0, [r7, #4]
 8013864:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013866:	2300      	movs	r3, #0
 8013868:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801386a:	683a      	ldr	r2, [r7, #0]
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	429a      	cmp	r2, r3
 8013870:	d105      	bne.n	801387e <ip_reass_free_complete_datagram+0x22>
 8013872:	4b45      	ldr	r3, [pc, #276]	@ (8013988 <ip_reass_free_complete_datagram+0x12c>)
 8013874:	22ab      	movs	r2, #171	@ 0xab
 8013876:	4945      	ldr	r1, [pc, #276]	@ (801398c <ip_reass_free_complete_datagram+0x130>)
 8013878:	4845      	ldr	r0, [pc, #276]	@ (8013990 <ip_reass_free_complete_datagram+0x134>)
 801387a:	f001 fb35 	bl	8014ee8 <iprintf>
  if (prev != NULL) {
 801387e:	683b      	ldr	r3, [r7, #0]
 8013880:	2b00      	cmp	r3, #0
 8013882:	d00a      	beq.n	801389a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013884:	683b      	ldr	r3, [r7, #0]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	687a      	ldr	r2, [r7, #4]
 801388a:	429a      	cmp	r2, r3
 801388c:	d005      	beq.n	801389a <ip_reass_free_complete_datagram+0x3e>
 801388e:	4b3e      	ldr	r3, [pc, #248]	@ (8013988 <ip_reass_free_complete_datagram+0x12c>)
 8013890:	22ad      	movs	r2, #173	@ 0xad
 8013892:	4940      	ldr	r1, [pc, #256]	@ (8013994 <ip_reass_free_complete_datagram+0x138>)
 8013894:	483e      	ldr	r0, [pc, #248]	@ (8013990 <ip_reass_free_complete_datagram+0x134>)
 8013896:	f001 fb27 	bl	8014ee8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	685b      	ldr	r3, [r3, #4]
 801389e:	685b      	ldr	r3, [r3, #4]
 80138a0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80138a2:	697b      	ldr	r3, [r7, #20]
 80138a4:	889b      	ldrh	r3, [r3, #4]
 80138a6:	b29b      	uxth	r3, r3
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d12a      	bne.n	8013902 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	685b      	ldr	r3, [r3, #4]
 80138b0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80138b2:	697b      	ldr	r3, [r7, #20]
 80138b4:	681a      	ldr	r2, [r3, #0]
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80138ba:	69bb      	ldr	r3, [r7, #24]
 80138bc:	6858      	ldr	r0, [r3, #4]
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	3308      	adds	r3, #8
 80138c2:	2214      	movs	r2, #20
 80138c4:	4619      	mov	r1, r3
 80138c6:	f001 fce4 	bl	8015292 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80138ca:	2101      	movs	r1, #1
 80138cc:	69b8      	ldr	r0, [r7, #24]
 80138ce:	f7ff fc07 	bl	80130e0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80138d2:	69b8      	ldr	r0, [r7, #24]
 80138d4:	f7f7 ffd8 	bl	800b888 <pbuf_clen>
 80138d8:	4603      	mov	r3, r0
 80138da:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80138dc:	8bfa      	ldrh	r2, [r7, #30]
 80138de:	8a7b      	ldrh	r3, [r7, #18]
 80138e0:	4413      	add	r3, r2
 80138e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80138e6:	db05      	blt.n	80138f4 <ip_reass_free_complete_datagram+0x98>
 80138e8:	4b27      	ldr	r3, [pc, #156]	@ (8013988 <ip_reass_free_complete_datagram+0x12c>)
 80138ea:	22bc      	movs	r2, #188	@ 0xbc
 80138ec:	492a      	ldr	r1, [pc, #168]	@ (8013998 <ip_reass_free_complete_datagram+0x13c>)
 80138ee:	4828      	ldr	r0, [pc, #160]	@ (8013990 <ip_reass_free_complete_datagram+0x134>)
 80138f0:	f001 fafa 	bl	8014ee8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80138f4:	8bfa      	ldrh	r2, [r7, #30]
 80138f6:	8a7b      	ldrh	r3, [r7, #18]
 80138f8:	4413      	add	r3, r2
 80138fa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80138fc:	69b8      	ldr	r0, [r7, #24]
 80138fe:	f7f7 ff3b 	bl	800b778 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	685b      	ldr	r3, [r3, #4]
 8013906:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013908:	e01f      	b.n	801394a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801390a:	69bb      	ldr	r3, [r7, #24]
 801390c:	685b      	ldr	r3, [r3, #4]
 801390e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013910:	69bb      	ldr	r3, [r7, #24]
 8013912:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013914:	697b      	ldr	r3, [r7, #20]
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801391a:	68f8      	ldr	r0, [r7, #12]
 801391c:	f7f7 ffb4 	bl	800b888 <pbuf_clen>
 8013920:	4603      	mov	r3, r0
 8013922:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013924:	8bfa      	ldrh	r2, [r7, #30]
 8013926:	8a7b      	ldrh	r3, [r7, #18]
 8013928:	4413      	add	r3, r2
 801392a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801392e:	db05      	blt.n	801393c <ip_reass_free_complete_datagram+0xe0>
 8013930:	4b15      	ldr	r3, [pc, #84]	@ (8013988 <ip_reass_free_complete_datagram+0x12c>)
 8013932:	22cc      	movs	r2, #204	@ 0xcc
 8013934:	4918      	ldr	r1, [pc, #96]	@ (8013998 <ip_reass_free_complete_datagram+0x13c>)
 8013936:	4816      	ldr	r0, [pc, #88]	@ (8013990 <ip_reass_free_complete_datagram+0x134>)
 8013938:	f001 fad6 	bl	8014ee8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801393c:	8bfa      	ldrh	r2, [r7, #30]
 801393e:	8a7b      	ldrh	r3, [r7, #18]
 8013940:	4413      	add	r3, r2
 8013942:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013944:	68f8      	ldr	r0, [r7, #12]
 8013946:	f7f7 ff17 	bl	800b778 <pbuf_free>
  while (p != NULL) {
 801394a:	69bb      	ldr	r3, [r7, #24]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d1dc      	bne.n	801390a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013950:	6839      	ldr	r1, [r7, #0]
 8013952:	6878      	ldr	r0, [r7, #4]
 8013954:	f000 f8c2 	bl	8013adc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013958:	4b10      	ldr	r3, [pc, #64]	@ (801399c <ip_reass_free_complete_datagram+0x140>)
 801395a:	881b      	ldrh	r3, [r3, #0]
 801395c:	8bfa      	ldrh	r2, [r7, #30]
 801395e:	429a      	cmp	r2, r3
 8013960:	d905      	bls.n	801396e <ip_reass_free_complete_datagram+0x112>
 8013962:	4b09      	ldr	r3, [pc, #36]	@ (8013988 <ip_reass_free_complete_datagram+0x12c>)
 8013964:	22d2      	movs	r2, #210	@ 0xd2
 8013966:	490e      	ldr	r1, [pc, #56]	@ (80139a0 <ip_reass_free_complete_datagram+0x144>)
 8013968:	4809      	ldr	r0, [pc, #36]	@ (8013990 <ip_reass_free_complete_datagram+0x134>)
 801396a:	f001 fabd 	bl	8014ee8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801396e:	4b0b      	ldr	r3, [pc, #44]	@ (801399c <ip_reass_free_complete_datagram+0x140>)
 8013970:	881a      	ldrh	r2, [r3, #0]
 8013972:	8bfb      	ldrh	r3, [r7, #30]
 8013974:	1ad3      	subs	r3, r2, r3
 8013976:	b29a      	uxth	r2, r3
 8013978:	4b08      	ldr	r3, [pc, #32]	@ (801399c <ip_reass_free_complete_datagram+0x140>)
 801397a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801397c:	8bfb      	ldrh	r3, [r7, #30]
}
 801397e:	4618      	mov	r0, r3
 8013980:	3720      	adds	r7, #32
 8013982:	46bd      	mov	sp, r7
 8013984:	bd80      	pop	{r7, pc}
 8013986:	bf00      	nop
 8013988:	08018f94 	.word	0x08018f94
 801398c:	08018fd0 	.word	0x08018fd0
 8013990:	08018fdc 	.word	0x08018fdc
 8013994:	08019004 	.word	0x08019004
 8013998:	08019018 	.word	0x08019018
 801399c:	200084b8 	.word	0x200084b8
 80139a0:	08019038 	.word	0x08019038

080139a4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80139a4:	b580      	push	{r7, lr}
 80139a6:	b08a      	sub	sp, #40	@ 0x28
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	6078      	str	r0, [r7, #4]
 80139ac:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80139ae:	2300      	movs	r3, #0
 80139b0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80139b2:	2300      	movs	r3, #0
 80139b4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80139b6:	2300      	movs	r3, #0
 80139b8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80139ba:	2300      	movs	r3, #0
 80139bc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80139be:	2300      	movs	r3, #0
 80139c0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80139c2:	4b28      	ldr	r3, [pc, #160]	@ (8013a64 <ip_reass_remove_oldest_datagram+0xc0>)
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80139c8:	e030      	b.n	8013a2c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80139ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139cc:	695a      	ldr	r2, [r3, #20]
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	68db      	ldr	r3, [r3, #12]
 80139d2:	429a      	cmp	r2, r3
 80139d4:	d10c      	bne.n	80139f0 <ip_reass_remove_oldest_datagram+0x4c>
 80139d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139d8:	699a      	ldr	r2, [r3, #24]
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	691b      	ldr	r3, [r3, #16]
 80139de:	429a      	cmp	r2, r3
 80139e0:	d106      	bne.n	80139f0 <ip_reass_remove_oldest_datagram+0x4c>
 80139e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139e4:	899a      	ldrh	r2, [r3, #12]
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	889b      	ldrh	r3, [r3, #4]
 80139ea:	b29b      	uxth	r3, r3
 80139ec:	429a      	cmp	r2, r3
 80139ee:	d014      	beq.n	8013a1a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80139f0:	693b      	ldr	r3, [r7, #16]
 80139f2:	3301      	adds	r3, #1
 80139f4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80139f6:	6a3b      	ldr	r3, [r7, #32]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d104      	bne.n	8013a06 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80139fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139fe:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013a00:	69fb      	ldr	r3, [r7, #28]
 8013a02:	61bb      	str	r3, [r7, #24]
 8013a04:	e009      	b.n	8013a1a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a08:	7fda      	ldrb	r2, [r3, #31]
 8013a0a:	6a3b      	ldr	r3, [r7, #32]
 8013a0c:	7fdb      	ldrb	r3, [r3, #31]
 8013a0e:	429a      	cmp	r2, r3
 8013a10:	d803      	bhi.n	8013a1a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a14:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013a16:	69fb      	ldr	r3, [r7, #28]
 8013a18:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d001      	beq.n	8013a26 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a24:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8013a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d1cb      	bne.n	80139ca <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013a32:	6a3b      	ldr	r3, [r7, #32]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d008      	beq.n	8013a4a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013a38:	69b9      	ldr	r1, [r7, #24]
 8013a3a:	6a38      	ldr	r0, [r7, #32]
 8013a3c:	f7ff ff0e 	bl	801385c <ip_reass_free_complete_datagram>
 8013a40:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013a42:	697a      	ldr	r2, [r7, #20]
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	4413      	add	r3, r2
 8013a48:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013a4a:	697a      	ldr	r2, [r7, #20]
 8013a4c:	683b      	ldr	r3, [r7, #0]
 8013a4e:	429a      	cmp	r2, r3
 8013a50:	da02      	bge.n	8013a58 <ip_reass_remove_oldest_datagram+0xb4>
 8013a52:	693b      	ldr	r3, [r7, #16]
 8013a54:	2b01      	cmp	r3, #1
 8013a56:	dcac      	bgt.n	80139b2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013a58:	697b      	ldr	r3, [r7, #20]
}
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	3728      	adds	r7, #40	@ 0x28
 8013a5e:	46bd      	mov	sp, r7
 8013a60:	bd80      	pop	{r7, pc}
 8013a62:	bf00      	nop
 8013a64:	200084b4 	.word	0x200084b4

08013a68 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b084      	sub	sp, #16
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]
 8013a70:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013a72:	2004      	movs	r0, #4
 8013a74:	f7f6 fea4 	bl	800a7c0 <memp_malloc>
 8013a78:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d110      	bne.n	8013aa2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013a80:	6839      	ldr	r1, [r7, #0]
 8013a82:	6878      	ldr	r0, [r7, #4]
 8013a84:	f7ff ff8e 	bl	80139a4 <ip_reass_remove_oldest_datagram>
 8013a88:	4602      	mov	r2, r0
 8013a8a:	683b      	ldr	r3, [r7, #0]
 8013a8c:	4293      	cmp	r3, r2
 8013a8e:	dc03      	bgt.n	8013a98 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013a90:	2004      	movs	r0, #4
 8013a92:	f7f6 fe95 	bl	800a7c0 <memp_malloc>
 8013a96:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d101      	bne.n	8013aa2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	e016      	b.n	8013ad0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013aa2:	2220      	movs	r2, #32
 8013aa4:	2100      	movs	r1, #0
 8013aa6:	68f8      	ldr	r0, [r7, #12]
 8013aa8:	f001 fb7e 	bl	80151a8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	220f      	movs	r2, #15
 8013ab0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013ab2:	4b09      	ldr	r3, [pc, #36]	@ (8013ad8 <ip_reass_enqueue_new_datagram+0x70>)
 8013ab4:	681a      	ldr	r2, [r3, #0]
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013aba:	4a07      	ldr	r2, [pc, #28]	@ (8013ad8 <ip_reass_enqueue_new_datagram+0x70>)
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	3308      	adds	r3, #8
 8013ac4:	2214      	movs	r2, #20
 8013ac6:	6879      	ldr	r1, [r7, #4]
 8013ac8:	4618      	mov	r0, r3
 8013aca:	f001 fbe2 	bl	8015292 <memcpy>
  return ipr;
 8013ace:	68fb      	ldr	r3, [r7, #12]
}
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	3710      	adds	r7, #16
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	bd80      	pop	{r7, pc}
 8013ad8:	200084b4 	.word	0x200084b4

08013adc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b082      	sub	sp, #8
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
 8013ae4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013ae6:	4b10      	ldr	r3, [pc, #64]	@ (8013b28 <ip_reass_dequeue_datagram+0x4c>)
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	687a      	ldr	r2, [r7, #4]
 8013aec:	429a      	cmp	r2, r3
 8013aee:	d104      	bne.n	8013afa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	4a0c      	ldr	r2, [pc, #48]	@ (8013b28 <ip_reass_dequeue_datagram+0x4c>)
 8013af6:	6013      	str	r3, [r2, #0]
 8013af8:	e00d      	b.n	8013b16 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013afa:	683b      	ldr	r3, [r7, #0]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d106      	bne.n	8013b0e <ip_reass_dequeue_datagram+0x32>
 8013b00:	4b0a      	ldr	r3, [pc, #40]	@ (8013b2c <ip_reass_dequeue_datagram+0x50>)
 8013b02:	f240 1245 	movw	r2, #325	@ 0x145
 8013b06:	490a      	ldr	r1, [pc, #40]	@ (8013b30 <ip_reass_dequeue_datagram+0x54>)
 8013b08:	480a      	ldr	r0, [pc, #40]	@ (8013b34 <ip_reass_dequeue_datagram+0x58>)
 8013b0a:	f001 f9ed 	bl	8014ee8 <iprintf>
    prev->next = ipr->next;
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	681a      	ldr	r2, [r3, #0]
 8013b12:	683b      	ldr	r3, [r7, #0]
 8013b14:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013b16:	6879      	ldr	r1, [r7, #4]
 8013b18:	2004      	movs	r0, #4
 8013b1a:	f7f6 fec1 	bl	800a8a0 <memp_free>
}
 8013b1e:	bf00      	nop
 8013b20:	3708      	adds	r7, #8
 8013b22:	46bd      	mov	sp, r7
 8013b24:	bd80      	pop	{r7, pc}
 8013b26:	bf00      	nop
 8013b28:	200084b4 	.word	0x200084b4
 8013b2c:	08018f94 	.word	0x08018f94
 8013b30:	0801905c 	.word	0x0801905c
 8013b34:	08018fdc 	.word	0x08018fdc

08013b38 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013b38:	b580      	push	{r7, lr}
 8013b3a:	b08c      	sub	sp, #48	@ 0x30
 8013b3c:	af00      	add	r7, sp, #0
 8013b3e:	60f8      	str	r0, [r7, #12]
 8013b40:	60b9      	str	r1, [r7, #8]
 8013b42:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013b44:	2300      	movs	r3, #0
 8013b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013b48:	2301      	movs	r3, #1
 8013b4a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013b4c:	68bb      	ldr	r3, [r7, #8]
 8013b4e:	685b      	ldr	r3, [r3, #4]
 8013b50:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013b52:	69fb      	ldr	r3, [r7, #28]
 8013b54:	885b      	ldrh	r3, [r3, #2]
 8013b56:	b29b      	uxth	r3, r3
 8013b58:	4618      	mov	r0, r3
 8013b5a:	f7f6 f9bd 	bl	8009ed8 <lwip_htons>
 8013b5e:	4603      	mov	r3, r0
 8013b60:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013b62:	69fb      	ldr	r3, [r7, #28]
 8013b64:	781b      	ldrb	r3, [r3, #0]
 8013b66:	f003 030f 	and.w	r3, r3, #15
 8013b6a:	b2db      	uxtb	r3, r3
 8013b6c:	009b      	lsls	r3, r3, #2
 8013b6e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013b70:	7e7b      	ldrb	r3, [r7, #25]
 8013b72:	b29b      	uxth	r3, r3
 8013b74:	8b7a      	ldrh	r2, [r7, #26]
 8013b76:	429a      	cmp	r2, r3
 8013b78:	d202      	bcs.n	8013b80 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013b7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013b7e:	e135      	b.n	8013dec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013b80:	7e7b      	ldrb	r3, [r7, #25]
 8013b82:	b29b      	uxth	r3, r3
 8013b84:	8b7a      	ldrh	r2, [r7, #26]
 8013b86:	1ad3      	subs	r3, r2, r3
 8013b88:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013b8a:	69fb      	ldr	r3, [r7, #28]
 8013b8c:	88db      	ldrh	r3, [r3, #6]
 8013b8e:	b29b      	uxth	r3, r3
 8013b90:	4618      	mov	r0, r3
 8013b92:	f7f6 f9a1 	bl	8009ed8 <lwip_htons>
 8013b96:	4603      	mov	r3, r0
 8013b98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013b9c:	b29b      	uxth	r3, r3
 8013b9e:	00db      	lsls	r3, r3, #3
 8013ba0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013ba2:	68bb      	ldr	r3, [r7, #8]
 8013ba4:	685b      	ldr	r3, [r3, #4]
 8013ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8013ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013baa:	2200      	movs	r2, #0
 8013bac:	701a      	strb	r2, [r3, #0]
 8013bae:	2200      	movs	r2, #0
 8013bb0:	705a      	strb	r2, [r3, #1]
 8013bb2:	2200      	movs	r2, #0
 8013bb4:	709a      	strb	r2, [r3, #2]
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013bbc:	8afa      	ldrh	r2, [r7, #22]
 8013bbe:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013bc0:	8afa      	ldrh	r2, [r7, #22]
 8013bc2:	8b7b      	ldrh	r3, [r7, #26]
 8013bc4:	4413      	add	r3, r2
 8013bc6:	b29a      	uxth	r2, r3
 8013bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013bca:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013bce:	88db      	ldrh	r3, [r3, #6]
 8013bd0:	b29b      	uxth	r3, r3
 8013bd2:	8afa      	ldrh	r2, [r7, #22]
 8013bd4:	429a      	cmp	r2, r3
 8013bd6:	d902      	bls.n	8013bde <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013bd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013bdc:	e106      	b.n	8013dec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	685b      	ldr	r3, [r3, #4]
 8013be2:	627b      	str	r3, [r7, #36]	@ 0x24
 8013be4:	e068      	b.n	8013cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013be8:	685b      	ldr	r3, [r3, #4]
 8013bea:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013bee:	889b      	ldrh	r3, [r3, #4]
 8013bf0:	b29a      	uxth	r2, r3
 8013bf2:	693b      	ldr	r3, [r7, #16]
 8013bf4:	889b      	ldrh	r3, [r3, #4]
 8013bf6:	b29b      	uxth	r3, r3
 8013bf8:	429a      	cmp	r2, r3
 8013bfa:	d235      	bcs.n	8013c68 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013c00:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d020      	beq.n	8013c4a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c0a:	889b      	ldrh	r3, [r3, #4]
 8013c0c:	b29a      	uxth	r2, r3
 8013c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c10:	88db      	ldrh	r3, [r3, #6]
 8013c12:	b29b      	uxth	r3, r3
 8013c14:	429a      	cmp	r2, r3
 8013c16:	d307      	bcc.n	8013c28 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c1a:	88db      	ldrh	r3, [r3, #6]
 8013c1c:	b29a      	uxth	r2, r3
 8013c1e:	693b      	ldr	r3, [r7, #16]
 8013c20:	889b      	ldrh	r3, [r3, #4]
 8013c22:	b29b      	uxth	r3, r3
 8013c24:	429a      	cmp	r2, r3
 8013c26:	d902      	bls.n	8013c2e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013c28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013c2c:	e0de      	b.n	8013dec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c30:	68ba      	ldr	r2, [r7, #8]
 8013c32:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c36:	88db      	ldrh	r3, [r3, #6]
 8013c38:	b29a      	uxth	r2, r3
 8013c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c3c:	889b      	ldrh	r3, [r3, #4]
 8013c3e:	b29b      	uxth	r3, r3
 8013c40:	429a      	cmp	r2, r3
 8013c42:	d03d      	beq.n	8013cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013c44:	2300      	movs	r3, #0
 8013c46:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013c48:	e03a      	b.n	8013cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c4c:	88db      	ldrh	r3, [r3, #6]
 8013c4e:	b29a      	uxth	r2, r3
 8013c50:	693b      	ldr	r3, [r7, #16]
 8013c52:	889b      	ldrh	r3, [r3, #4]
 8013c54:	b29b      	uxth	r3, r3
 8013c56:	429a      	cmp	r2, r3
 8013c58:	d902      	bls.n	8013c60 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013c5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013c5e:	e0c5      	b.n	8013dec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	68ba      	ldr	r2, [r7, #8]
 8013c64:	605a      	str	r2, [r3, #4]
      break;
 8013c66:	e02b      	b.n	8013cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c6a:	889b      	ldrh	r3, [r3, #4]
 8013c6c:	b29a      	uxth	r2, r3
 8013c6e:	693b      	ldr	r3, [r7, #16]
 8013c70:	889b      	ldrh	r3, [r3, #4]
 8013c72:	b29b      	uxth	r3, r3
 8013c74:	429a      	cmp	r2, r3
 8013c76:	d102      	bne.n	8013c7e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013c78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013c7c:	e0b6      	b.n	8013dec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c80:	889b      	ldrh	r3, [r3, #4]
 8013c82:	b29a      	uxth	r2, r3
 8013c84:	693b      	ldr	r3, [r7, #16]
 8013c86:	88db      	ldrh	r3, [r3, #6]
 8013c88:	b29b      	uxth	r3, r3
 8013c8a:	429a      	cmp	r2, r3
 8013c8c:	d202      	bcs.n	8013c94 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013c8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013c92:	e0ab      	b.n	8013dec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d009      	beq.n	8013cae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c9c:	88db      	ldrh	r3, [r3, #6]
 8013c9e:	b29a      	uxth	r2, r3
 8013ca0:	693b      	ldr	r3, [r7, #16]
 8013ca2:	889b      	ldrh	r3, [r3, #4]
 8013ca4:	b29b      	uxth	r3, r3
 8013ca6:	429a      	cmp	r2, r3
 8013ca8:	d001      	beq.n	8013cae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013caa:	2300      	movs	r3, #0
 8013cac:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013cae:	693b      	ldr	r3, [r7, #16]
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8013cb4:	693b      	ldr	r3, [r7, #16]
 8013cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8013cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d193      	bne.n	8013be6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013cbe:	e000      	b.n	8013cc2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013cc0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d12d      	bne.n	8013d24 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d01c      	beq.n	8013d08 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cd0:	88db      	ldrh	r3, [r3, #6]
 8013cd2:	b29a      	uxth	r2, r3
 8013cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cd6:	889b      	ldrh	r3, [r3, #4]
 8013cd8:	b29b      	uxth	r3, r3
 8013cda:	429a      	cmp	r2, r3
 8013cdc:	d906      	bls.n	8013cec <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013cde:	4b45      	ldr	r3, [pc, #276]	@ (8013df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013ce0:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8013ce4:	4944      	ldr	r1, [pc, #272]	@ (8013df8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013ce6:	4845      	ldr	r0, [pc, #276]	@ (8013dfc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013ce8:	f001 f8fe 	bl	8014ee8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cee:	68ba      	ldr	r2, [r7, #8]
 8013cf0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cf4:	88db      	ldrh	r3, [r3, #6]
 8013cf6:	b29a      	uxth	r2, r3
 8013cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cfa:	889b      	ldrh	r3, [r3, #4]
 8013cfc:	b29b      	uxth	r3, r3
 8013cfe:	429a      	cmp	r2, r3
 8013d00:	d010      	beq.n	8013d24 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013d02:	2300      	movs	r3, #0
 8013d04:	623b      	str	r3, [r7, #32]
 8013d06:	e00d      	b.n	8013d24 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	685b      	ldr	r3, [r3, #4]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d006      	beq.n	8013d1e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013d10:	4b38      	ldr	r3, [pc, #224]	@ (8013df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013d12:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8013d16:	493a      	ldr	r1, [pc, #232]	@ (8013e00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013d18:	4838      	ldr	r0, [pc, #224]	@ (8013dfc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013d1a:	f001 f8e5 	bl	8014ee8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	68ba      	ldr	r2, [r7, #8]
 8013d22:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d105      	bne.n	8013d36 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	7f9b      	ldrb	r3, [r3, #30]
 8013d2e:	f003 0301 	and.w	r3, r3, #1
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d059      	beq.n	8013dea <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8013d36:	6a3b      	ldr	r3, [r7, #32]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d04f      	beq.n	8013ddc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	685b      	ldr	r3, [r3, #4]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d006      	beq.n	8013d52 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	685b      	ldr	r3, [r3, #4]
 8013d48:	685b      	ldr	r3, [r3, #4]
 8013d4a:	889b      	ldrh	r3, [r3, #4]
 8013d4c:	b29b      	uxth	r3, r3
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d002      	beq.n	8013d58 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8013d52:	2300      	movs	r3, #0
 8013d54:	623b      	str	r3, [r7, #32]
 8013d56:	e041      	b.n	8013ddc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8013d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8013d62:	e012      	b.n	8013d8a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d66:	685b      	ldr	r3, [r3, #4]
 8013d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8013d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d6c:	88db      	ldrh	r3, [r3, #6]
 8013d6e:	b29a      	uxth	r2, r3
 8013d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d72:	889b      	ldrh	r3, [r3, #4]
 8013d74:	b29b      	uxth	r3, r3
 8013d76:	429a      	cmp	r2, r3
 8013d78:	d002      	beq.n	8013d80 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	623b      	str	r3, [r7, #32]
            break;
 8013d7e:	e007      	b.n	8013d90 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d82:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8013d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8013d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d1e9      	bne.n	8013d64 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013d90:	6a3b      	ldr	r3, [r7, #32]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d022      	beq.n	8013ddc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	685b      	ldr	r3, [r3, #4]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d106      	bne.n	8013dac <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8013d9e:	4b15      	ldr	r3, [pc, #84]	@ (8013df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013da0:	f240 12df 	movw	r2, #479	@ 0x1df
 8013da4:	4917      	ldr	r1, [pc, #92]	@ (8013e04 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013da6:	4815      	ldr	r0, [pc, #84]	@ (8013dfc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013da8:	f001 f89e 	bl	8014ee8 <iprintf>
          LWIP_ASSERT("sanity check",
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	685b      	ldr	r3, [r3, #4]
 8013db0:	685b      	ldr	r3, [r3, #4]
 8013db2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013db4:	429a      	cmp	r2, r3
 8013db6:	d106      	bne.n	8013dc6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013db8:	4b0e      	ldr	r3, [pc, #56]	@ (8013df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013dba:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8013dbe:	4911      	ldr	r1, [pc, #68]	@ (8013e04 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013dc0:	480e      	ldr	r0, [pc, #56]	@ (8013dfc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013dc2:	f001 f891 	bl	8014ee8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d006      	beq.n	8013ddc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013dce:	4b09      	ldr	r3, [pc, #36]	@ (8013df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013dd0:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8013dd4:	490c      	ldr	r1, [pc, #48]	@ (8013e08 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013dd6:	4809      	ldr	r0, [pc, #36]	@ (8013dfc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013dd8:	f001 f886 	bl	8014ee8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013ddc:	6a3b      	ldr	r3, [r7, #32]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	bf14      	ite	ne
 8013de2:	2301      	movne	r3, #1
 8013de4:	2300      	moveq	r3, #0
 8013de6:	b2db      	uxtb	r3, r3
 8013de8:	e000      	b.n	8013dec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013dea:	2300      	movs	r3, #0
}
 8013dec:	4618      	mov	r0, r3
 8013dee:	3730      	adds	r7, #48	@ 0x30
 8013df0:	46bd      	mov	sp, r7
 8013df2:	bd80      	pop	{r7, pc}
 8013df4:	08018f94 	.word	0x08018f94
 8013df8:	08019078 	.word	0x08019078
 8013dfc:	08018fdc 	.word	0x08018fdc
 8013e00:	08019098 	.word	0x08019098
 8013e04:	080190d0 	.word	0x080190d0
 8013e08:	080190e0 	.word	0x080190e0

08013e0c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013e0c:	b580      	push	{r7, lr}
 8013e0e:	b08e      	sub	sp, #56	@ 0x38
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	685b      	ldr	r3, [r3, #4]
 8013e18:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e1c:	781b      	ldrb	r3, [r3, #0]
 8013e1e:	f003 030f 	and.w	r3, r3, #15
 8013e22:	b2db      	uxtb	r3, r3
 8013e24:	009b      	lsls	r3, r3, #2
 8013e26:	b2db      	uxtb	r3, r3
 8013e28:	2b14      	cmp	r3, #20
 8013e2a:	f040 8171 	bne.w	8014110 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8013e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e30:	88db      	ldrh	r3, [r3, #6]
 8013e32:	b29b      	uxth	r3, r3
 8013e34:	4618      	mov	r0, r3
 8013e36:	f7f6 f84f 	bl	8009ed8 <lwip_htons>
 8013e3a:	4603      	mov	r3, r0
 8013e3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013e40:	b29b      	uxth	r3, r3
 8013e42:	00db      	lsls	r3, r3, #3
 8013e44:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e48:	885b      	ldrh	r3, [r3, #2]
 8013e4a:	b29b      	uxth	r3, r3
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	f7f6 f843 	bl	8009ed8 <lwip_htons>
 8013e52:	4603      	mov	r3, r0
 8013e54:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8013e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e58:	781b      	ldrb	r3, [r3, #0]
 8013e5a:	f003 030f 	and.w	r3, r3, #15
 8013e5e:	b2db      	uxtb	r3, r3
 8013e60:	009b      	lsls	r3, r3, #2
 8013e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8013e66:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013e6a:	b29b      	uxth	r3, r3
 8013e6c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013e6e:	429a      	cmp	r2, r3
 8013e70:	f0c0 8150 	bcc.w	8014114 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013e74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013e78:	b29b      	uxth	r3, r3
 8013e7a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013e7c:	1ad3      	subs	r3, r2, r3
 8013e7e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013e80:	6878      	ldr	r0, [r7, #4]
 8013e82:	f7f7 fd01 	bl	800b888 <pbuf_clen>
 8013e86:	4603      	mov	r3, r0
 8013e88:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013e8a:	4b8c      	ldr	r3, [pc, #560]	@ (80140bc <ip4_reass+0x2b0>)
 8013e8c:	881b      	ldrh	r3, [r3, #0]
 8013e8e:	461a      	mov	r2, r3
 8013e90:	8c3b      	ldrh	r3, [r7, #32]
 8013e92:	4413      	add	r3, r2
 8013e94:	2b0a      	cmp	r3, #10
 8013e96:	dd10      	ble.n	8013eba <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013e98:	8c3b      	ldrh	r3, [r7, #32]
 8013e9a:	4619      	mov	r1, r3
 8013e9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013e9e:	f7ff fd81 	bl	80139a4 <ip_reass_remove_oldest_datagram>
 8013ea2:	4603      	mov	r3, r0
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	f000 8137 	beq.w	8014118 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013eaa:	4b84      	ldr	r3, [pc, #528]	@ (80140bc <ip4_reass+0x2b0>)
 8013eac:	881b      	ldrh	r3, [r3, #0]
 8013eae:	461a      	mov	r2, r3
 8013eb0:	8c3b      	ldrh	r3, [r7, #32]
 8013eb2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013eb4:	2b0a      	cmp	r3, #10
 8013eb6:	f300 812f 	bgt.w	8014118 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013eba:	4b81      	ldr	r3, [pc, #516]	@ (80140c0 <ip4_reass+0x2b4>)
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	633b      	str	r3, [r7, #48]	@ 0x30
 8013ec0:	e015      	b.n	8013eee <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ec4:	695a      	ldr	r2, [r3, #20]
 8013ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ec8:	68db      	ldr	r3, [r3, #12]
 8013eca:	429a      	cmp	r2, r3
 8013ecc:	d10c      	bne.n	8013ee8 <ip4_reass+0xdc>
 8013ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ed0:	699a      	ldr	r2, [r3, #24]
 8013ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ed4:	691b      	ldr	r3, [r3, #16]
 8013ed6:	429a      	cmp	r2, r3
 8013ed8:	d106      	bne.n	8013ee8 <ip4_reass+0xdc>
 8013eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013edc:	899a      	ldrh	r2, [r3, #12]
 8013ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ee0:	889b      	ldrh	r3, [r3, #4]
 8013ee2:	b29b      	uxth	r3, r3
 8013ee4:	429a      	cmp	r2, r3
 8013ee6:	d006      	beq.n	8013ef6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	633b      	str	r3, [r7, #48]	@ 0x30
 8013eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d1e6      	bne.n	8013ec2 <ip4_reass+0xb6>
 8013ef4:	e000      	b.n	8013ef8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013ef6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d109      	bne.n	8013f12 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013efe:	8c3b      	ldrh	r3, [r7, #32]
 8013f00:	4619      	mov	r1, r3
 8013f02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013f04:	f7ff fdb0 	bl	8013a68 <ip_reass_enqueue_new_datagram>
 8013f08:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d11c      	bne.n	8013f4a <ip4_reass+0x13e>
      goto nullreturn;
 8013f10:	e105      	b.n	801411e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f14:	88db      	ldrh	r3, [r3, #6]
 8013f16:	b29b      	uxth	r3, r3
 8013f18:	4618      	mov	r0, r3
 8013f1a:	f7f5 ffdd 	bl	8009ed8 <lwip_htons>
 8013f1e:	4603      	mov	r3, r0
 8013f20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d110      	bne.n	8013f4a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f2a:	89db      	ldrh	r3, [r3, #14]
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f7f5 ffd3 	bl	8009ed8 <lwip_htons>
 8013f32:	4603      	mov	r3, r0
 8013f34:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d006      	beq.n	8013f4a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f3e:	3308      	adds	r3, #8
 8013f40:	2214      	movs	r2, #20
 8013f42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013f44:	4618      	mov	r0, r3
 8013f46:	f001 f9a4 	bl	8015292 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8013f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f4c:	88db      	ldrh	r3, [r3, #6]
 8013f4e:	b29b      	uxth	r3, r3
 8013f50:	f003 0320 	and.w	r3, r3, #32
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	bf0c      	ite	eq
 8013f58:	2301      	moveq	r3, #1
 8013f5a:	2300      	movne	r3, #0
 8013f5c:	b2db      	uxtb	r3, r3
 8013f5e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013f60:	69fb      	ldr	r3, [r7, #28]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d00e      	beq.n	8013f84 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013f66:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8013f68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013f6a:	4413      	add	r3, r2
 8013f6c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013f6e:	8b7a      	ldrh	r2, [r7, #26]
 8013f70:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013f72:	429a      	cmp	r2, r3
 8013f74:	f0c0 80a0 	bcc.w	80140b8 <ip4_reass+0x2ac>
 8013f78:	8b7b      	ldrh	r3, [r7, #26]
 8013f7a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8013f7e:	4293      	cmp	r3, r2
 8013f80:	f200 809a 	bhi.w	80140b8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013f84:	69fa      	ldr	r2, [r7, #28]
 8013f86:	6879      	ldr	r1, [r7, #4]
 8013f88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013f8a:	f7ff fdd5 	bl	8013b38 <ip_reass_chain_frag_into_datagram_and_validate>
 8013f8e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013f90:	697b      	ldr	r3, [r7, #20]
 8013f92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013f96:	f000 809b 	beq.w	80140d0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013f9a:	4b48      	ldr	r3, [pc, #288]	@ (80140bc <ip4_reass+0x2b0>)
 8013f9c:	881a      	ldrh	r2, [r3, #0]
 8013f9e:	8c3b      	ldrh	r3, [r7, #32]
 8013fa0:	4413      	add	r3, r2
 8013fa2:	b29a      	uxth	r2, r3
 8013fa4:	4b45      	ldr	r3, [pc, #276]	@ (80140bc <ip4_reass+0x2b0>)
 8013fa6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013fa8:	69fb      	ldr	r3, [r7, #28]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d00d      	beq.n	8013fca <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013fae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8013fb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013fb2:	4413      	add	r3, r2
 8013fb4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fb8:	8a7a      	ldrh	r2, [r7, #18]
 8013fba:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fbe:	7f9b      	ldrb	r3, [r3, #30]
 8013fc0:	f043 0301 	orr.w	r3, r3, #1
 8013fc4:	b2da      	uxtb	r2, r3
 8013fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fc8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013fca:	697b      	ldr	r3, [r7, #20]
 8013fcc:	2b01      	cmp	r3, #1
 8013fce:	d171      	bne.n	80140b4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fd2:	8b9b      	ldrh	r3, [r3, #28]
 8013fd4:	3314      	adds	r3, #20
 8013fd6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fda:	685b      	ldr	r3, [r3, #4]
 8013fdc:	685b      	ldr	r3, [r3, #4]
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fe4:	685b      	ldr	r3, [r3, #4]
 8013fe6:	685b      	ldr	r3, [r3, #4]
 8013fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fec:	3308      	adds	r3, #8
 8013fee:	2214      	movs	r2, #20
 8013ff0:	4619      	mov	r1, r3
 8013ff2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013ff4:	f001 f94d 	bl	8015292 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013ff8:	8a3b      	ldrh	r3, [r7, #16]
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	f7f5 ff6c 	bl	8009ed8 <lwip_htons>
 8014000:	4603      	mov	r3, r0
 8014002:	461a      	mov	r2, r3
 8014004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014006:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801400a:	2200      	movs	r2, #0
 801400c:	719a      	strb	r2, [r3, #6]
 801400e:	2200      	movs	r2, #0
 8014010:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014014:	2200      	movs	r2, #0
 8014016:	729a      	strb	r2, [r3, #10]
 8014018:	2200      	movs	r2, #0
 801401a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801401c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801401e:	685b      	ldr	r3, [r3, #4]
 8014020:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8014022:	e00d      	b.n	8014040 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014026:	685b      	ldr	r3, [r3, #4]
 8014028:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801402a:	2114      	movs	r1, #20
 801402c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801402e:	f7f7 fb1d 	bl	800b66c <pbuf_remove_header>
      pbuf_cat(p, r);
 8014032:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014034:	6878      	ldr	r0, [r7, #4]
 8014036:	f7f7 fc61 	bl	800b8fc <pbuf_cat>
      r = iprh->next_pbuf;
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 8014040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014042:	2b00      	cmp	r3, #0
 8014044:	d1ee      	bne.n	8014024 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8014046:	4b1e      	ldr	r3, [pc, #120]	@ (80140c0 <ip4_reass+0x2b4>)
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801404c:	429a      	cmp	r2, r3
 801404e:	d102      	bne.n	8014056 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014050:	2300      	movs	r3, #0
 8014052:	637b      	str	r3, [r7, #52]	@ 0x34
 8014054:	e010      	b.n	8014078 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014056:	4b1a      	ldr	r3, [pc, #104]	@ (80140c0 <ip4_reass+0x2b4>)
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	637b      	str	r3, [r7, #52]	@ 0x34
 801405c:	e007      	b.n	801406e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801405e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014064:	429a      	cmp	r2, r3
 8014066:	d006      	beq.n	8014076 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	637b      	str	r3, [r7, #52]	@ 0x34
 801406e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014070:	2b00      	cmp	r3, #0
 8014072:	d1f4      	bne.n	801405e <ip4_reass+0x252>
 8014074:	e000      	b.n	8014078 <ip4_reass+0x26c>
          break;
 8014076:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014078:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801407a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801407c:	f7ff fd2e 	bl	8013adc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014080:	6878      	ldr	r0, [r7, #4]
 8014082:	f7f7 fc01 	bl	800b888 <pbuf_clen>
 8014086:	4603      	mov	r3, r0
 8014088:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801408a:	4b0c      	ldr	r3, [pc, #48]	@ (80140bc <ip4_reass+0x2b0>)
 801408c:	881b      	ldrh	r3, [r3, #0]
 801408e:	8c3a      	ldrh	r2, [r7, #32]
 8014090:	429a      	cmp	r2, r3
 8014092:	d906      	bls.n	80140a2 <ip4_reass+0x296>
 8014094:	4b0b      	ldr	r3, [pc, #44]	@ (80140c4 <ip4_reass+0x2b8>)
 8014096:	f240 229b 	movw	r2, #667	@ 0x29b
 801409a:	490b      	ldr	r1, [pc, #44]	@ (80140c8 <ip4_reass+0x2bc>)
 801409c:	480b      	ldr	r0, [pc, #44]	@ (80140cc <ip4_reass+0x2c0>)
 801409e:	f000 ff23 	bl	8014ee8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80140a2:	4b06      	ldr	r3, [pc, #24]	@ (80140bc <ip4_reass+0x2b0>)
 80140a4:	881a      	ldrh	r2, [r3, #0]
 80140a6:	8c3b      	ldrh	r3, [r7, #32]
 80140a8:	1ad3      	subs	r3, r2, r3
 80140aa:	b29a      	uxth	r2, r3
 80140ac:	4b03      	ldr	r3, [pc, #12]	@ (80140bc <ip4_reass+0x2b0>)
 80140ae:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	e038      	b.n	8014126 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80140b4:	2300      	movs	r3, #0
 80140b6:	e036      	b.n	8014126 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80140b8:	bf00      	nop
 80140ba:	e00a      	b.n	80140d2 <ip4_reass+0x2c6>
 80140bc:	200084b8 	.word	0x200084b8
 80140c0:	200084b4 	.word	0x200084b4
 80140c4:	08018f94 	.word	0x08018f94
 80140c8:	08019104 	.word	0x08019104
 80140cc:	08018fdc 	.word	0x08018fdc
    goto nullreturn_ipr;
 80140d0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80140d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d106      	bne.n	80140e6 <ip4_reass+0x2da>
 80140d8:	4b15      	ldr	r3, [pc, #84]	@ (8014130 <ip4_reass+0x324>)
 80140da:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80140de:	4915      	ldr	r1, [pc, #84]	@ (8014134 <ip4_reass+0x328>)
 80140e0:	4815      	ldr	r0, [pc, #84]	@ (8014138 <ip4_reass+0x32c>)
 80140e2:	f000 ff01 	bl	8014ee8 <iprintf>
  if (ipr->p == NULL) {
 80140e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140e8:	685b      	ldr	r3, [r3, #4]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d116      	bne.n	801411c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80140ee:	4b13      	ldr	r3, [pc, #76]	@ (801413c <ip4_reass+0x330>)
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80140f4:	429a      	cmp	r2, r3
 80140f6:	d006      	beq.n	8014106 <ip4_reass+0x2fa>
 80140f8:	4b0d      	ldr	r3, [pc, #52]	@ (8014130 <ip4_reass+0x324>)
 80140fa:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80140fe:	4910      	ldr	r1, [pc, #64]	@ (8014140 <ip4_reass+0x334>)
 8014100:	480d      	ldr	r0, [pc, #52]	@ (8014138 <ip4_reass+0x32c>)
 8014102:	f000 fef1 	bl	8014ee8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8014106:	2100      	movs	r1, #0
 8014108:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801410a:	f7ff fce7 	bl	8013adc <ip_reass_dequeue_datagram>
 801410e:	e006      	b.n	801411e <ip4_reass+0x312>
    goto nullreturn;
 8014110:	bf00      	nop
 8014112:	e004      	b.n	801411e <ip4_reass+0x312>
    goto nullreturn;
 8014114:	bf00      	nop
 8014116:	e002      	b.n	801411e <ip4_reass+0x312>
      goto nullreturn;
 8014118:	bf00      	nop
 801411a:	e000      	b.n	801411e <ip4_reass+0x312>
  }

nullreturn:
 801411c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801411e:	6878      	ldr	r0, [r7, #4]
 8014120:	f7f7 fb2a 	bl	800b778 <pbuf_free>
  return NULL;
 8014124:	2300      	movs	r3, #0
}
 8014126:	4618      	mov	r0, r3
 8014128:	3738      	adds	r7, #56	@ 0x38
 801412a:	46bd      	mov	sp, r7
 801412c:	bd80      	pop	{r7, pc}
 801412e:	bf00      	nop
 8014130:	08018f94 	.word	0x08018f94
 8014134:	08019120 	.word	0x08019120
 8014138:	08018fdc 	.word	0x08018fdc
 801413c:	200084b4 	.word	0x200084b4
 8014140:	0801912c 	.word	0x0801912c

08014144 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014144:	b580      	push	{r7, lr}
 8014146:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014148:	2005      	movs	r0, #5
 801414a:	f7f6 fb39 	bl	800a7c0 <memp_malloc>
 801414e:	4603      	mov	r3, r0
}
 8014150:	4618      	mov	r0, r3
 8014152:	bd80      	pop	{r7, pc}

08014154 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014154:	b580      	push	{r7, lr}
 8014156:	b082      	sub	sp, #8
 8014158:	af00      	add	r7, sp, #0
 801415a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d106      	bne.n	8014170 <ip_frag_free_pbuf_custom_ref+0x1c>
 8014162:	4b07      	ldr	r3, [pc, #28]	@ (8014180 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014164:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8014168:	4906      	ldr	r1, [pc, #24]	@ (8014184 <ip_frag_free_pbuf_custom_ref+0x30>)
 801416a:	4807      	ldr	r0, [pc, #28]	@ (8014188 <ip_frag_free_pbuf_custom_ref+0x34>)
 801416c:	f000 febc 	bl	8014ee8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014170:	6879      	ldr	r1, [r7, #4]
 8014172:	2005      	movs	r0, #5
 8014174:	f7f6 fb94 	bl	800a8a0 <memp_free>
}
 8014178:	bf00      	nop
 801417a:	3708      	adds	r7, #8
 801417c:	46bd      	mov	sp, r7
 801417e:	bd80      	pop	{r7, pc}
 8014180:	08018f94 	.word	0x08018f94
 8014184:	0801914c 	.word	0x0801914c
 8014188:	08018fdc 	.word	0x08018fdc

0801418c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801418c:	b580      	push	{r7, lr}
 801418e:	b084      	sub	sp, #16
 8014190:	af00      	add	r7, sp, #0
 8014192:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d106      	bne.n	80141ac <ipfrag_free_pbuf_custom+0x20>
 801419e:	4b11      	ldr	r3, [pc, #68]	@ (80141e4 <ipfrag_free_pbuf_custom+0x58>)
 80141a0:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80141a4:	4910      	ldr	r1, [pc, #64]	@ (80141e8 <ipfrag_free_pbuf_custom+0x5c>)
 80141a6:	4811      	ldr	r0, [pc, #68]	@ (80141ec <ipfrag_free_pbuf_custom+0x60>)
 80141a8:	f000 fe9e 	bl	8014ee8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80141ac:	68fa      	ldr	r2, [r7, #12]
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	429a      	cmp	r2, r3
 80141b2:	d006      	beq.n	80141c2 <ipfrag_free_pbuf_custom+0x36>
 80141b4:	4b0b      	ldr	r3, [pc, #44]	@ (80141e4 <ipfrag_free_pbuf_custom+0x58>)
 80141b6:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80141ba:	490d      	ldr	r1, [pc, #52]	@ (80141f0 <ipfrag_free_pbuf_custom+0x64>)
 80141bc:	480b      	ldr	r0, [pc, #44]	@ (80141ec <ipfrag_free_pbuf_custom+0x60>)
 80141be:	f000 fe93 	bl	8014ee8 <iprintf>
  if (pcr->original != NULL) {
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	695b      	ldr	r3, [r3, #20]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d004      	beq.n	80141d4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	695b      	ldr	r3, [r3, #20]
 80141ce:	4618      	mov	r0, r3
 80141d0:	f7f7 fad2 	bl	800b778 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80141d4:	68f8      	ldr	r0, [r7, #12]
 80141d6:	f7ff ffbd 	bl	8014154 <ip_frag_free_pbuf_custom_ref>
}
 80141da:	bf00      	nop
 80141dc:	3710      	adds	r7, #16
 80141de:	46bd      	mov	sp, r7
 80141e0:	bd80      	pop	{r7, pc}
 80141e2:	bf00      	nop
 80141e4:	08018f94 	.word	0x08018f94
 80141e8:	08019158 	.word	0x08019158
 80141ec:	08018fdc 	.word	0x08018fdc
 80141f0:	08019164 	.word	0x08019164

080141f4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b094      	sub	sp, #80	@ 0x50
 80141f8:	af02      	add	r7, sp, #8
 80141fa:	60f8      	str	r0, [r7, #12]
 80141fc:	60b9      	str	r1, [r7, #8]
 80141fe:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014200:	2300      	movs	r3, #0
 8014202:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014206:	68bb      	ldr	r3, [r7, #8]
 8014208:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801420a:	3b14      	subs	r3, #20
 801420c:	2b00      	cmp	r3, #0
 801420e:	da00      	bge.n	8014212 <ip4_frag+0x1e>
 8014210:	3307      	adds	r3, #7
 8014212:	10db      	asrs	r3, r3, #3
 8014214:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8014216:	2314      	movs	r3, #20
 8014218:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	685b      	ldr	r3, [r3, #4]
 801421e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8014220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014222:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014226:	781b      	ldrb	r3, [r3, #0]
 8014228:	f003 030f 	and.w	r3, r3, #15
 801422c:	b2db      	uxtb	r3, r3
 801422e:	009b      	lsls	r3, r3, #2
 8014230:	b2db      	uxtb	r3, r3
 8014232:	2b14      	cmp	r3, #20
 8014234:	d002      	beq.n	801423c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014236:	f06f 0305 	mvn.w	r3, #5
 801423a:	e110      	b.n	801445e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	895b      	ldrh	r3, [r3, #10]
 8014240:	2b13      	cmp	r3, #19
 8014242:	d809      	bhi.n	8014258 <ip4_frag+0x64>
 8014244:	4b88      	ldr	r3, [pc, #544]	@ (8014468 <ip4_frag+0x274>)
 8014246:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801424a:	4988      	ldr	r1, [pc, #544]	@ (801446c <ip4_frag+0x278>)
 801424c:	4888      	ldr	r0, [pc, #544]	@ (8014470 <ip4_frag+0x27c>)
 801424e:	f000 fe4b 	bl	8014ee8 <iprintf>
 8014252:	f06f 0305 	mvn.w	r3, #5
 8014256:	e102      	b.n	801445e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801425a:	88db      	ldrh	r3, [r3, #6]
 801425c:	b29b      	uxth	r3, r3
 801425e:	4618      	mov	r0, r3
 8014260:	f7f5 fe3a 	bl	8009ed8 <lwip_htons>
 8014264:	4603      	mov	r3, r0
 8014266:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8014268:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801426a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801426e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8014272:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014274:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014278:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	891b      	ldrh	r3, [r3, #8]
 801427e:	3b14      	subs	r3, #20
 8014280:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8014284:	e0e1      	b.n	801444a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014286:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014288:	00db      	lsls	r3, r3, #3
 801428a:	b29b      	uxth	r3, r3
 801428c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014290:	4293      	cmp	r3, r2
 8014292:	bf28      	it	cs
 8014294:	4613      	movcs	r3, r2
 8014296:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014298:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801429c:	2114      	movs	r1, #20
 801429e:	200e      	movs	r0, #14
 80142a0:	f7f6 ff86 	bl	800b1b0 <pbuf_alloc>
 80142a4:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80142a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	f000 80d5 	beq.w	8014458 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80142ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142b0:	895b      	ldrh	r3, [r3, #10]
 80142b2:	2b13      	cmp	r3, #19
 80142b4:	d806      	bhi.n	80142c4 <ip4_frag+0xd0>
 80142b6:	4b6c      	ldr	r3, [pc, #432]	@ (8014468 <ip4_frag+0x274>)
 80142b8:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80142bc:	496d      	ldr	r1, [pc, #436]	@ (8014474 <ip4_frag+0x280>)
 80142be:	486c      	ldr	r0, [pc, #432]	@ (8014470 <ip4_frag+0x27c>)
 80142c0:	f000 fe12 	bl	8014ee8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80142c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142c6:	685b      	ldr	r3, [r3, #4]
 80142c8:	2214      	movs	r2, #20
 80142ca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80142cc:	4618      	mov	r0, r3
 80142ce:	f000 ffe0 	bl	8015292 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80142d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142d4:	685b      	ldr	r3, [r3, #4]
 80142d6:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80142d8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80142da:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80142de:	e064      	b.n	80143aa <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	895a      	ldrh	r2, [r3, #10]
 80142e4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80142e6:	1ad3      	subs	r3, r2, r3
 80142e8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	895b      	ldrh	r3, [r3, #10]
 80142ee:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80142f0:	429a      	cmp	r2, r3
 80142f2:	d906      	bls.n	8014302 <ip4_frag+0x10e>
 80142f4:	4b5c      	ldr	r3, [pc, #368]	@ (8014468 <ip4_frag+0x274>)
 80142f6:	f240 322d 	movw	r2, #813	@ 0x32d
 80142fa:	495f      	ldr	r1, [pc, #380]	@ (8014478 <ip4_frag+0x284>)
 80142fc:	485c      	ldr	r0, [pc, #368]	@ (8014470 <ip4_frag+0x27c>)
 80142fe:	f000 fdf3 	bl	8014ee8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014302:	8bfa      	ldrh	r2, [r7, #30]
 8014304:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014308:	4293      	cmp	r3, r2
 801430a:	bf28      	it	cs
 801430c:	4613      	movcs	r3, r2
 801430e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014312:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014316:	2b00      	cmp	r3, #0
 8014318:	d105      	bne.n	8014326 <ip4_frag+0x132>
        poff = 0;
 801431a:	2300      	movs	r3, #0
 801431c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	60fb      	str	r3, [r7, #12]
        continue;
 8014324:	e041      	b.n	80143aa <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014326:	f7ff ff0d 	bl	8014144 <ip_frag_alloc_pbuf_custom_ref>
 801432a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801432c:	69bb      	ldr	r3, [r7, #24]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d103      	bne.n	801433a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014332:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014334:	f7f7 fa20 	bl	800b778 <pbuf_free>
        goto memerr;
 8014338:	e08f      	b.n	801445a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801433a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014340:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014342:	4413      	add	r3, r2
 8014344:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8014348:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801434c:	9201      	str	r2, [sp, #4]
 801434e:	9300      	str	r3, [sp, #0]
 8014350:	4603      	mov	r3, r0
 8014352:	2241      	movs	r2, #65	@ 0x41
 8014354:	2000      	movs	r0, #0
 8014356:	f7f7 f855 	bl	800b404 <pbuf_alloced_custom>
 801435a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801435c:	697b      	ldr	r3, [r7, #20]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d106      	bne.n	8014370 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8014362:	69b8      	ldr	r0, [r7, #24]
 8014364:	f7ff fef6 	bl	8014154 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014368:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801436a:	f7f7 fa05 	bl	800b778 <pbuf_free>
        goto memerr;
 801436e:	e074      	b.n	801445a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8014370:	68f8      	ldr	r0, [r7, #12]
 8014372:	f7f7 faa1 	bl	800b8b8 <pbuf_ref>
      pcr->original = p;
 8014376:	69bb      	ldr	r3, [r7, #24]
 8014378:	68fa      	ldr	r2, [r7, #12]
 801437a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801437c:	69bb      	ldr	r3, [r7, #24]
 801437e:	4a3f      	ldr	r2, [pc, #252]	@ (801447c <ip4_frag+0x288>)
 8014380:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8014382:	6979      	ldr	r1, [r7, #20]
 8014384:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014386:	f7f7 fab9 	bl	800b8fc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801438a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801438e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014392:	1ad3      	subs	r3, r2, r3
 8014394:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8014398:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801439c:	2b00      	cmp	r3, #0
 801439e:	d004      	beq.n	80143aa <ip4_frag+0x1b6>
        poff = 0;
 80143a0:	2300      	movs	r3, #0
 80143a2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80143aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d196      	bne.n	80142e0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80143b2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80143b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80143b8:	4413      	add	r3, r2
 80143ba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80143bc:	68bb      	ldr	r3, [r7, #8]
 80143be:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80143c0:	f1a3 0213 	sub.w	r2, r3, #19
 80143c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80143c8:	429a      	cmp	r2, r3
 80143ca:	bfcc      	ite	gt
 80143cc:	2301      	movgt	r3, #1
 80143ce:	2300      	movle	r3, #0
 80143d0:	b2db      	uxtb	r3, r3
 80143d2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80143d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80143d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80143dc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80143de:	6a3b      	ldr	r3, [r7, #32]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d002      	beq.n	80143ea <ip4_frag+0x1f6>
 80143e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d003      	beq.n	80143f2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80143ea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80143ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80143f0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80143f2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80143f4:	4618      	mov	r0, r3
 80143f6:	f7f5 fd6f 	bl	8009ed8 <lwip_htons>
 80143fa:	4603      	mov	r3, r0
 80143fc:	461a      	mov	r2, r3
 80143fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014400:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014402:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014404:	3314      	adds	r3, #20
 8014406:	b29b      	uxth	r3, r3
 8014408:	4618      	mov	r0, r3
 801440a:	f7f5 fd65 	bl	8009ed8 <lwip_htons>
 801440e:	4603      	mov	r3, r0
 8014410:	461a      	mov	r2, r3
 8014412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014414:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014418:	2200      	movs	r2, #0
 801441a:	729a      	strb	r2, [r3, #10]
 801441c:	2200      	movs	r2, #0
 801441e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014420:	68bb      	ldr	r3, [r7, #8]
 8014422:	695b      	ldr	r3, [r3, #20]
 8014424:	687a      	ldr	r2, [r7, #4]
 8014426:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014428:	68b8      	ldr	r0, [r7, #8]
 801442a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801442c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801442e:	f7f7 f9a3 	bl	800b778 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014432:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014436:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014438:	1ad3      	subs	r3, r2, r3
 801443a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801443e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8014442:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014444:	4413      	add	r3, r2
 8014446:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801444a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801444e:	2b00      	cmp	r3, #0
 8014450:	f47f af19 	bne.w	8014286 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014454:	2300      	movs	r3, #0
 8014456:	e002      	b.n	801445e <ip4_frag+0x26a>
      goto memerr;
 8014458:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801445a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801445e:	4618      	mov	r0, r3
 8014460:	3748      	adds	r7, #72	@ 0x48
 8014462:	46bd      	mov	sp, r7
 8014464:	bd80      	pop	{r7, pc}
 8014466:	bf00      	nop
 8014468:	08018f94 	.word	0x08018f94
 801446c:	08019170 	.word	0x08019170
 8014470:	08018fdc 	.word	0x08018fdc
 8014474:	0801918c 	.word	0x0801918c
 8014478:	080191ac 	.word	0x080191ac
 801447c:	0801418d 	.word	0x0801418d

08014480 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014480:	b580      	push	{r7, lr}
 8014482:	b086      	sub	sp, #24
 8014484:	af00      	add	r7, sp, #0
 8014486:	6078      	str	r0, [r7, #4]
 8014488:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801448a:	230e      	movs	r3, #14
 801448c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	895b      	ldrh	r3, [r3, #10]
 8014492:	2b0e      	cmp	r3, #14
 8014494:	d96e      	bls.n	8014574 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	7bdb      	ldrb	r3, [r3, #15]
 801449a:	2b00      	cmp	r3, #0
 801449c:	d106      	bne.n	80144ac <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801449e:	683b      	ldr	r3, [r7, #0]
 80144a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80144a4:	3301      	adds	r3, #1
 80144a6:	b2da      	uxtb	r2, r3
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	685b      	ldr	r3, [r3, #4]
 80144b0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80144b2:	693b      	ldr	r3, [r7, #16]
 80144b4:	7b1a      	ldrb	r2, [r3, #12]
 80144b6:	7b5b      	ldrb	r3, [r3, #13]
 80144b8:	021b      	lsls	r3, r3, #8
 80144ba:	4313      	orrs	r3, r2
 80144bc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80144be:	693b      	ldr	r3, [r7, #16]
 80144c0:	781b      	ldrb	r3, [r3, #0]
 80144c2:	f003 0301 	and.w	r3, r3, #1
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d023      	beq.n	8014512 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80144ca:	693b      	ldr	r3, [r7, #16]
 80144cc:	781b      	ldrb	r3, [r3, #0]
 80144ce:	2b01      	cmp	r3, #1
 80144d0:	d10f      	bne.n	80144f2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80144d2:	693b      	ldr	r3, [r7, #16]
 80144d4:	785b      	ldrb	r3, [r3, #1]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d11b      	bne.n	8014512 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80144da:	693b      	ldr	r3, [r7, #16]
 80144dc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80144de:	2b5e      	cmp	r3, #94	@ 0x5e
 80144e0:	d117      	bne.n	8014512 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	7b5b      	ldrb	r3, [r3, #13]
 80144e6:	f043 0310 	orr.w	r3, r3, #16
 80144ea:	b2da      	uxtb	r2, r3
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	735a      	strb	r2, [r3, #13]
 80144f0:	e00f      	b.n	8014512 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80144f2:	693b      	ldr	r3, [r7, #16]
 80144f4:	2206      	movs	r2, #6
 80144f6:	4928      	ldr	r1, [pc, #160]	@ (8014598 <ethernet_input+0x118>)
 80144f8:	4618      	mov	r0, r3
 80144fa:	f000 fe45 	bl	8015188 <memcmp>
 80144fe:	4603      	mov	r3, r0
 8014500:	2b00      	cmp	r3, #0
 8014502:	d106      	bne.n	8014512 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	7b5b      	ldrb	r3, [r3, #13]
 8014508:	f043 0308 	orr.w	r3, r3, #8
 801450c:	b2da      	uxtb	r2, r3
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014512:	89fb      	ldrh	r3, [r7, #14]
 8014514:	2b08      	cmp	r3, #8
 8014516:	d003      	beq.n	8014520 <ethernet_input+0xa0>
 8014518:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801451c:	d014      	beq.n	8014548 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801451e:	e032      	b.n	8014586 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014520:	683b      	ldr	r3, [r7, #0]
 8014522:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014526:	f003 0308 	and.w	r3, r3, #8
 801452a:	2b00      	cmp	r3, #0
 801452c:	d024      	beq.n	8014578 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801452e:	8afb      	ldrh	r3, [r7, #22]
 8014530:	4619      	mov	r1, r3
 8014532:	6878      	ldr	r0, [r7, #4]
 8014534:	f7f7 f89a 	bl	800b66c <pbuf_remove_header>
 8014538:	4603      	mov	r3, r0
 801453a:	2b00      	cmp	r3, #0
 801453c:	d11e      	bne.n	801457c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801453e:	6839      	ldr	r1, [r7, #0]
 8014540:	6878      	ldr	r0, [r7, #4]
 8014542:	f7fe ff21 	bl	8013388 <ip4_input>
      break;
 8014546:	e013      	b.n	8014570 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014548:	683b      	ldr	r3, [r7, #0]
 801454a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801454e:	f003 0308 	and.w	r3, r3, #8
 8014552:	2b00      	cmp	r3, #0
 8014554:	d014      	beq.n	8014580 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014556:	8afb      	ldrh	r3, [r7, #22]
 8014558:	4619      	mov	r1, r3
 801455a:	6878      	ldr	r0, [r7, #4]
 801455c:	f7f7 f886 	bl	800b66c <pbuf_remove_header>
 8014560:	4603      	mov	r3, r0
 8014562:	2b00      	cmp	r3, #0
 8014564:	d10e      	bne.n	8014584 <ethernet_input+0x104>
        etharp_input(p, netif);
 8014566:	6839      	ldr	r1, [r7, #0]
 8014568:	6878      	ldr	r0, [r7, #4]
 801456a:	f7fe f82f 	bl	80125cc <etharp_input>
      break;
 801456e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014570:	2300      	movs	r3, #0
 8014572:	e00c      	b.n	801458e <ethernet_input+0x10e>
    goto free_and_return;
 8014574:	bf00      	nop
 8014576:	e006      	b.n	8014586 <ethernet_input+0x106>
        goto free_and_return;
 8014578:	bf00      	nop
 801457a:	e004      	b.n	8014586 <ethernet_input+0x106>
        goto free_and_return;
 801457c:	bf00      	nop
 801457e:	e002      	b.n	8014586 <ethernet_input+0x106>
        goto free_and_return;
 8014580:	bf00      	nop
 8014582:	e000      	b.n	8014586 <ethernet_input+0x106>
        goto free_and_return;
 8014584:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014586:	6878      	ldr	r0, [r7, #4]
 8014588:	f7f7 f8f6 	bl	800b778 <pbuf_free>
  return ERR_OK;
 801458c:	2300      	movs	r3, #0
}
 801458e:	4618      	mov	r0, r3
 8014590:	3718      	adds	r7, #24
 8014592:	46bd      	mov	sp, r7
 8014594:	bd80      	pop	{r7, pc}
 8014596:	bf00      	nop
 8014598:	080194b8 	.word	0x080194b8

0801459c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801459c:	b580      	push	{r7, lr}
 801459e:	b086      	sub	sp, #24
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	60f8      	str	r0, [r7, #12]
 80145a4:	60b9      	str	r1, [r7, #8]
 80145a6:	607a      	str	r2, [r7, #4]
 80145a8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80145aa:	8c3b      	ldrh	r3, [r7, #32]
 80145ac:	4618      	mov	r0, r3
 80145ae:	f7f5 fc93 	bl	8009ed8 <lwip_htons>
 80145b2:	4603      	mov	r3, r0
 80145b4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80145b6:	210e      	movs	r1, #14
 80145b8:	68b8      	ldr	r0, [r7, #8]
 80145ba:	f7f7 f847 	bl	800b64c <pbuf_add_header>
 80145be:	4603      	mov	r3, r0
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d125      	bne.n	8014610 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80145c4:	68bb      	ldr	r3, [r7, #8]
 80145c6:	685b      	ldr	r3, [r3, #4]
 80145c8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80145ca:	693b      	ldr	r3, [r7, #16]
 80145cc:	8afa      	ldrh	r2, [r7, #22]
 80145ce:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80145d0:	693b      	ldr	r3, [r7, #16]
 80145d2:	2206      	movs	r2, #6
 80145d4:	6839      	ldr	r1, [r7, #0]
 80145d6:	4618      	mov	r0, r3
 80145d8:	f000 fe5b 	bl	8015292 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80145dc:	693b      	ldr	r3, [r7, #16]
 80145de:	3306      	adds	r3, #6
 80145e0:	2206      	movs	r2, #6
 80145e2:	6879      	ldr	r1, [r7, #4]
 80145e4:	4618      	mov	r0, r3
 80145e6:	f000 fe54 	bl	8015292 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80145f0:	2b06      	cmp	r3, #6
 80145f2:	d006      	beq.n	8014602 <ethernet_output+0x66>
 80145f4:	4b0a      	ldr	r3, [pc, #40]	@ (8014620 <ethernet_output+0x84>)
 80145f6:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80145fa:	490a      	ldr	r1, [pc, #40]	@ (8014624 <ethernet_output+0x88>)
 80145fc:	480a      	ldr	r0, [pc, #40]	@ (8014628 <ethernet_output+0x8c>)
 80145fe:	f000 fc73 	bl	8014ee8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	699b      	ldr	r3, [r3, #24]
 8014606:	68b9      	ldr	r1, [r7, #8]
 8014608:	68f8      	ldr	r0, [r7, #12]
 801460a:	4798      	blx	r3
 801460c:	4603      	mov	r3, r0
 801460e:	e002      	b.n	8014616 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014610:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014612:	f06f 0301 	mvn.w	r3, #1
}
 8014616:	4618      	mov	r0, r3
 8014618:	3718      	adds	r7, #24
 801461a:	46bd      	mov	sp, r7
 801461c:	bd80      	pop	{r7, pc}
 801461e:	bf00      	nop
 8014620:	080191bc 	.word	0x080191bc
 8014624:	080191f4 	.word	0x080191f4
 8014628:	08019228 	.word	0x08019228

0801462c <HW_Verification_Proccess>:
 *      Author: leah
 */
#include "hw_verif.h"

void HW_Verification_Proccess(void)
{
 801462c:	b580      	push	{r7, lr}
 801462e:	af00      	add	r7, sp, #0
	UDP_Server_Init();
 8014630:	f000 f82a 	bl	8014688 <UDP_Server_Init>
	while(1)
	{
		MX_LWIP_Process();
 8014634:	f7f5 f82c 	bl	8009690 <MX_LWIP_Process>
 8014638:	e7fc      	b.n	8014634 <HW_Verification_Proccess+0x8>
	...

0801463c <Match_CRC>:
 */
#include "crc.h"
#include "hw_verif_crc.h"

int Match_CRC(uint8_t *buf1, uint8_t buf1_len, uint8_t *buf2, uint8_t buf2_len)
{
 801463c:	b580      	push	{r7, lr}
 801463e:	b086      	sub	sp, #24
 8014640:	af00      	add	r7, sp, #0
 8014642:	60f8      	str	r0, [r7, #12]
 8014644:	607a      	str	r2, [r7, #4]
 8014646:	461a      	mov	r2, r3
 8014648:	460b      	mov	r3, r1
 801464a:	72fb      	strb	r3, [r7, #11]
 801464c:	4613      	mov	r3, r2
 801464e:	72bb      	strb	r3, [r7, #10]
	uint32_t buf1_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf1, (uint32_t) buf1_len);
 8014650:	7afb      	ldrb	r3, [r7, #11]
 8014652:	461a      	mov	r2, r3
 8014654:	68f9      	ldr	r1, [r7, #12]
 8014656:	480b      	ldr	r0, [pc, #44]	@ (8014684 <Match_CRC+0x48>)
 8014658:	f7ed fc9c 	bl	8001f94 <HAL_CRC_Calculate>
 801465c:	6178      	str	r0, [r7, #20]
	uint32_t buf2_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf2, (uint32_t) buf2_len);
 801465e:	7abb      	ldrb	r3, [r7, #10]
 8014660:	461a      	mov	r2, r3
 8014662:	6879      	ldr	r1, [r7, #4]
 8014664:	4807      	ldr	r0, [pc, #28]	@ (8014684 <Match_CRC+0x48>)
 8014666:	f7ed fc95 	bl	8001f94 <HAL_CRC_Calculate>
 801466a:	6138      	str	r0, [r7, #16]

	if(buf1_crc == buf2_crc)
 801466c:	697a      	ldr	r2, [r7, #20]
 801466e:	693b      	ldr	r3, [r7, #16]
 8014670:	429a      	cmp	r2, r3
 8014672:	d101      	bne.n	8014678 <Match_CRC+0x3c>
		return CRC_MATCH_OK;
 8014674:	2301      	movs	r3, #1
 8014676:	e000      	b.n	801467a <Match_CRC+0x3e>

	return CRC_MATCH_FAIL;
 8014678:	2300      	movs	r3, #0
}
 801467a:	4618      	mov	r0, r3
 801467c:	3718      	adds	r7, #24
 801467e:	46bd      	mov	sp, r7
 8014680:	bd80      	pop	{r7, pc}
 8014682:	bf00      	nop
 8014684:	20000228 	.word	0x20000228

08014688 <UDP_Server_Init>:

uint8_t perform_test();
void send_result(uint8_t result);

void UDP_Server_Init(void)
{
 8014688:	b580      	push	{r7, lr}
 801468a:	b082      	sub	sp, #8
 801468c:	af00      	add	r7, sp, #0
	err_t err;

	// Create a new UDP control block
	upcb = udp_new();
 801468e:	f7fd fbbb 	bl	8011e08 <udp_new>
 8014692:	4603      	mov	r3, r0
 8014694:	4a12      	ldr	r2, [pc, #72]	@ (80146e0 <UDP_Server_Init+0x58>)
 8014696:	6013      	str	r3, [r2, #0]

	if (upcb)
 8014698:	4b11      	ldr	r3, [pc, #68]	@ (80146e0 <UDP_Server_Init+0x58>)
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	2b00      	cmp	r3, #0
 801469e:	d01a      	beq.n	80146d6 <UDP_Server_Init+0x4e>
	{
		// Bind the upcb to the UDP_PORT port
		// Using IP_ADDR_ANY allow the upcb to be used by any local interface
		err = udp_bind(upcb, IP_ADDR_ANY, SERVER_PORT);
 80146a0:	4b0f      	ldr	r3, [pc, #60]	@ (80146e0 <UDP_Server_Init+0x58>)
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	f24d 4231 	movw	r2, #54321	@ 0xd431
 80146a8:	490e      	ldr	r1, [pc, #56]	@ (80146e4 <UDP_Server_Init+0x5c>)
 80146aa:	4618      	mov	r0, r3
 80146ac:	f7fd fa5c 	bl	8011b68 <udp_bind>
 80146b0:	4603      	mov	r3, r0
 80146b2:	71fb      	strb	r3, [r7, #7]

		if(err == ERR_OK)
 80146b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d107      	bne.n	80146cc <UDP_Server_Init+0x44>
		{
			// Set a receive callback for the upcb
			udp_recv(upcb, UDP_Recv_Callback, NULL);
 80146bc:	4b08      	ldr	r3, [pc, #32]	@ (80146e0 <UDP_Server_Init+0x58>)
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	2200      	movs	r2, #0
 80146c2:	4909      	ldr	r1, [pc, #36]	@ (80146e8 <UDP_Server_Init+0x60>)
 80146c4:	4618      	mov	r0, r3
 80146c6:	f7fd fb3d 	bl	8011d44 <udp_recv>
		else
		{
			udp_remove(upcb);
		}
   }
}
 80146ca:	e004      	b.n	80146d6 <UDP_Server_Init+0x4e>
			udp_remove(upcb);
 80146cc:	4b04      	ldr	r3, [pc, #16]	@ (80146e0 <UDP_Server_Init+0x58>)
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	4618      	mov	r0, r3
 80146d2:	f7fd fb57 	bl	8011d84 <udp_remove>
}
 80146d6:	bf00      	nop
 80146d8:	3708      	adds	r7, #8
 80146da:	46bd      	mov	sp, r7
 80146dc:	bd80      	pop	{r7, pc}
 80146de:	bf00      	nop
 80146e0:	200084bc 	.word	0x200084bc
 80146e4:	080194b4 	.word	0x080194b4
 80146e8:	080146ed 	.word	0x080146ed

080146ec <UDP_Recv_Callback>:

void UDP_Recv_Callback(void* arg, struct udp_pcb* upcb, struct pbuf* p,
		               const ip_addr_t* addr, u16_t port)
{
 80146ec:	b580      	push	{r7, lr}
 80146ee:	b086      	sub	sp, #24
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	60f8      	str	r0, [r7, #12]
 80146f4:	60b9      	str	r1, [r7, #8]
 80146f6:	607a      	str	r2, [r7, #4]
 80146f8:	603b      	str	r3, [r7, #0]
	// Load data to in_msg
	in_msg.upcb = upcb;
 80146fa:	4a24      	ldr	r2, [pc, #144]	@ (801478c <UDP_Recv_Callback+0xa0>)
 80146fc:	68bb      	ldr	r3, [r7, #8]
 80146fe:	6013      	str	r3, [r2, #0]
	in_msg.addr = addr;
 8014700:	4a22      	ldr	r2, [pc, #136]	@ (801478c <UDP_Recv_Callback+0xa0>)
 8014702:	683b      	ldr	r3, [r7, #0]
 8014704:	6053      	str	r3, [r2, #4]
	in_msg.port = port;
 8014706:	4a21      	ldr	r2, [pc, #132]	@ (801478c <UDP_Recv_Callback+0xa0>)
 8014708:	8c3b      	ldrh	r3, [r7, #32]
 801470a:	8113      	strh	r3, [r2, #8]

	int n_read = 0;
 801470c:	2300      	movs	r3, #0
 801470e:	617b      	str	r3, [r7, #20]
	memcpy(&in_msg.test_id, p->payload, sizeof(in_msg.test_id));
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	685b      	ldr	r3, [r3, #4]
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	461a      	mov	r2, r3
 8014718:	4b1c      	ldr	r3, [pc, #112]	@ (801478c <UDP_Recv_Callback+0xa0>)
 801471a:	60da      	str	r2, [r3, #12]
	n_read += sizeof(in_msg.test_id);
 801471c:	697b      	ldr	r3, [r7, #20]
 801471e:	3304      	adds	r3, #4
 8014720:	617b      	str	r3, [r7, #20]

	memcpy(&in_msg.peripheral, &((uint8_t *)p->payload)[n_read++], 1);
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	685a      	ldr	r2, [r3, #4]
 8014726:	697b      	ldr	r3, [r7, #20]
 8014728:	1c59      	adds	r1, r3, #1
 801472a:	6179      	str	r1, [r7, #20]
 801472c:	4413      	add	r3, r2
 801472e:	781a      	ldrb	r2, [r3, #0]
 8014730:	4b16      	ldr	r3, [pc, #88]	@ (801478c <UDP_Recv_Callback+0xa0>)
 8014732:	741a      	strb	r2, [r3, #16]
	memcpy(&in_msg.n_iter, &((uint8_t *)p->payload)[n_read++], 1);
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	685a      	ldr	r2, [r3, #4]
 8014738:	697b      	ldr	r3, [r7, #20]
 801473a:	1c59      	adds	r1, r3, #1
 801473c:	6179      	str	r1, [r7, #20]
 801473e:	4413      	add	r3, r2
 8014740:	781a      	ldrb	r2, [r3, #0]
 8014742:	4b12      	ldr	r3, [pc, #72]	@ (801478c <UDP_Recv_Callback+0xa0>)
 8014744:	745a      	strb	r2, [r3, #17]
	memcpy(&in_msg.p_len, &((uint8_t *)p->payload)[n_read++], 1);
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	685a      	ldr	r2, [r3, #4]
 801474a:	697b      	ldr	r3, [r7, #20]
 801474c:	1c59      	adds	r1, r3, #1
 801474e:	6179      	str	r1, [r7, #20]
 8014750:	4413      	add	r3, r2
 8014752:	781a      	ldrb	r2, [r3, #0]
 8014754:	4b0d      	ldr	r3, [pc, #52]	@ (801478c <UDP_Recv_Callback+0xa0>)
 8014756:	749a      	strb	r2, [r3, #18]
	memcpy(&in_msg.payload, &((char *)p->payload)[n_read], in_msg.p_len);
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	685a      	ldr	r2, [r3, #4]
 801475c:	697b      	ldr	r3, [r7, #20]
 801475e:	4413      	add	r3, r2
 8014760:	4a0a      	ldr	r2, [pc, #40]	@ (801478c <UDP_Recv_Callback+0xa0>)
 8014762:	7c92      	ldrb	r2, [r2, #18]
 8014764:	4619      	mov	r1, r3
 8014766:	480a      	ldr	r0, [pc, #40]	@ (8014790 <UDP_Recv_Callback+0xa4>)
 8014768:	f000 fd93 	bl	8015292 <memcpy>

	uint8_t result = perform_test();
 801476c:	f000 f812 	bl	8014794 <perform_test>
 8014770:	4603      	mov	r3, r0
 8014772:	74fb      	strb	r3, [r7, #19]
	send_result(result);
 8014774:	7cfb      	ldrb	r3, [r7, #19]
 8014776:	4618      	mov	r0, r3
 8014778:	f000 f868 	bl	801484c <send_result>

	// Free the p buffer
	pbuf_free(p);
 801477c:	6878      	ldr	r0, [r7, #4]
 801477e:	f7f6 fffb 	bl	800b778 <pbuf_free>
}
 8014782:	bf00      	nop
 8014784:	3718      	adds	r7, #24
 8014786:	46bd      	mov	sp, r7
 8014788:	bd80      	pop	{r7, pc}
 801478a:	bf00      	nop
 801478c:	200084c0 	.word	0x200084c0
 8014790:	200084d3 	.word	0x200084d3

08014794 <perform_test>:

uint8_t perform_test()
{
 8014794:	b580      	push	{r7, lr}
 8014796:	b082      	sub	sp, #8
 8014798:	af02      	add	r7, sp, #8
	switch (in_msg.peripheral) {
 801479a:	4b26      	ldr	r3, [pc, #152]	@ (8014834 <perform_test+0xa0>)
 801479c:	7c1b      	ldrb	r3, [r3, #16]
 801479e:	3b01      	subs	r3, #1
 80147a0:	2b0f      	cmp	r3, #15
 80147a2:	d843      	bhi.n	801482c <perform_test+0x98>
 80147a4:	a201      	add	r2, pc, #4	@ (adr r2, 80147ac <perform_test+0x18>)
 80147a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147aa:	bf00      	nop
 80147ac:	080147ed 	.word	0x080147ed
 80147b0:	080147f1 	.word	0x080147f1
 80147b4:	0801482d 	.word	0x0801482d
 80147b8:	0801480b 	.word	0x0801480b
 80147bc:	0801482d 	.word	0x0801482d
 80147c0:	0801482d 	.word	0x0801482d
 80147c4:	0801482d 	.word	0x0801482d
 80147c8:	0801480f 	.word	0x0801480f
 80147cc:	0801482d 	.word	0x0801482d
 80147d0:	0801482d 	.word	0x0801482d
 80147d4:	0801482d 	.word	0x0801482d
 80147d8:	0801482d 	.word	0x0801482d
 80147dc:	0801482d 	.word	0x0801482d
 80147e0:	0801482d 	.word	0x0801482d
 80147e4:	0801482d 	.word	0x0801482d
 80147e8:	08014829 	.word	0x08014829
		case TEST_TIM:
			return TEST_SUCCESS;
 80147ec:	2301      	movs	r3, #1
 80147ee:	e01e      	b.n	801482e <perform_test+0x9a>
			break;
		case TEST_UART:
			return Test_N_Perform_Msg("UART", UART_Test_Perform, (uint8_t *)in_msg.payload, in_msg.p_len, in_msg.n_iter);
 80147f0:	4b10      	ldr	r3, [pc, #64]	@ (8014834 <perform_test+0xa0>)
 80147f2:	7c9a      	ldrb	r2, [r3, #18]
 80147f4:	4b0f      	ldr	r3, [pc, #60]	@ (8014834 <perform_test+0xa0>)
 80147f6:	7c5b      	ldrb	r3, [r3, #17]
 80147f8:	9300      	str	r3, [sp, #0]
 80147fa:	4613      	mov	r3, r2
 80147fc:	4a0e      	ldr	r2, [pc, #56]	@ (8014838 <perform_test+0xa4>)
 80147fe:	490f      	ldr	r1, [pc, #60]	@ (801483c <perform_test+0xa8>)
 8014800:	480f      	ldr	r0, [pc, #60]	@ (8014840 <perform_test+0xac>)
 8014802:	f000 f973 	bl	8014aec <Test_N_Perform_Msg>
 8014806:	4603      	mov	r3, r0
 8014808:	e011      	b.n	801482e <perform_test+0x9a>
			break;
		case TEST_SPI:
			return TEST_SUCCESS;
 801480a:	2301      	movs	r3, #1
 801480c:	e00f      	b.n	801482e <perform_test+0x9a>
			break;
		case TEST_I2C:
			return Test_N_Perform_Msg("I2C", I2C_Test_Perform, (uint8_t *)in_msg.payload, in_msg.p_len, in_msg.n_iter);
 801480e:	4b09      	ldr	r3, [pc, #36]	@ (8014834 <perform_test+0xa0>)
 8014810:	7c9a      	ldrb	r2, [r3, #18]
 8014812:	4b08      	ldr	r3, [pc, #32]	@ (8014834 <perform_test+0xa0>)
 8014814:	7c5b      	ldrb	r3, [r3, #17]
 8014816:	9300      	str	r3, [sp, #0]
 8014818:	4613      	mov	r3, r2
 801481a:	4a07      	ldr	r2, [pc, #28]	@ (8014838 <perform_test+0xa4>)
 801481c:	4909      	ldr	r1, [pc, #36]	@ (8014844 <perform_test+0xb0>)
 801481e:	480a      	ldr	r0, [pc, #40]	@ (8014848 <perform_test+0xb4>)
 8014820:	f000 f964 	bl	8014aec <Test_N_Perform_Msg>
 8014824:	4603      	mov	r3, r0
 8014826:	e002      	b.n	801482e <perform_test+0x9a>
			break;
		case TEST_ADC:
			return TEST_SUCCESS;
 8014828:	2301      	movs	r3, #1
 801482a:	e000      	b.n	801482e <perform_test+0x9a>
			break;
		default:
			return TEST_FAILED;
 801482c:	23ff      	movs	r3, #255	@ 0xff
			break;
	}

	return TEST_FAILED;
}
 801482e:	4618      	mov	r0, r3
 8014830:	46bd      	mov	sp, r7
 8014832:	bd80      	pop	{r7, pc}
 8014834:	200084c0 	.word	0x200084c0
 8014838:	200084d3 	.word	0x200084d3
 801483c:	08014b55 	.word	0x08014b55
 8014840:	08019250 	.word	0x08019250
 8014844:	080148ad 	.word	0x080148ad
 8014848:	08019258 	.word	0x08019258

0801484c <send_result>:

void send_result(uint8_t result)
{
 801484c:	b580      	push	{r7, lr}
 801484e:	b086      	sub	sp, #24
 8014850:	af00      	add	r7, sp, #0
 8014852:	4603      	mov	r3, r0
 8014854:	71fb      	strb	r3, [r7, #7]
	uint8_t response[RESPONSE_SIZE];
	memcpy(response, &in_msg.test_id, sizeof(in_msg.test_id));
 8014856:	4b14      	ldr	r3, [pc, #80]	@ (80148a8 <send_result+0x5c>)
 8014858:	68db      	ldr	r3, [r3, #12]
 801485a:	60fb      	str	r3, [r7, #12]
	response[sizeof(in_msg.test_id)] = result;
 801485c:	79fb      	ldrb	r3, [r7, #7]
 801485e:	743b      	strb	r3, [r7, #16]

	struct pbuf *resp_buf = pbuf_alloc(PBUF_TRANSPORT, sizeof(response), PBUF_RAM);
 8014860:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014864:	2105      	movs	r1, #5
 8014866:	2036      	movs	r0, #54	@ 0x36
 8014868:	f7f6 fca2 	bl	800b1b0 <pbuf_alloc>
 801486c:	6178      	str	r0, [r7, #20]
	if (resp_buf != NULL)
 801486e:	697b      	ldr	r3, [r7, #20]
 8014870:	2b00      	cmp	r3, #0
 8014872:	d014      	beq.n	801489e <send_result+0x52>
	{
		memcpy(resp_buf->payload, response, sizeof(response));
 8014874:	697b      	ldr	r3, [r7, #20]
 8014876:	685b      	ldr	r3, [r3, #4]
 8014878:	461a      	mov	r2, r3
 801487a:	f107 030c 	add.w	r3, r7, #12
 801487e:	6818      	ldr	r0, [r3, #0]
 8014880:	6010      	str	r0, [r2, #0]
 8014882:	791b      	ldrb	r3, [r3, #4]
 8014884:	7113      	strb	r3, [r2, #4]
		udp_sendto(in_msg.upcb, resp_buf, in_msg.addr, in_msg.port);
 8014886:	4b08      	ldr	r3, [pc, #32]	@ (80148a8 <send_result+0x5c>)
 8014888:	6818      	ldr	r0, [r3, #0]
 801488a:	4b07      	ldr	r3, [pc, #28]	@ (80148a8 <send_result+0x5c>)
 801488c:	685a      	ldr	r2, [r3, #4]
 801488e:	4b06      	ldr	r3, [pc, #24]	@ (80148a8 <send_result+0x5c>)
 8014890:	891b      	ldrh	r3, [r3, #8]
 8014892:	6979      	ldr	r1, [r7, #20]
 8014894:	f7fc ff40 	bl	8011718 <udp_sendto>
	    pbuf_free(resp_buf);
 8014898:	6978      	ldr	r0, [r7, #20]
 801489a:	f7f6 ff6d 	bl	800b778 <pbuf_free>
	}
}
 801489e:	bf00      	nop
 80148a0:	3718      	adds	r7, #24
 80148a2:	46bd      	mov	sp, r7
 80148a4:	bd80      	pop	{r7, pc}
 80148a6:	bf00      	nop
 80148a8:	200084c0 	.word	0x200084c0

080148ac <I2C_Test_Perform>:
volatile uint8_t i2c1_rx_done;
volatile uint8_t i2c2_tx_done;
volatile uint8_t i2c2_rx_done;

uint8_t I2C_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 80148ac:	b590      	push	{r4, r7, lr}
 80148ae:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 80148b2:	af00      	add	r7, sp, #0
 80148b4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80148b8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80148bc:	6018      	str	r0, [r3, #0]
 80148be:	460a      	mov	r2, r1
 80148c0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80148c4:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80148c8:	701a      	strb	r2, [r3, #0]
	printf("Performing i2c test\n");
 80148ca:	4851      	ldr	r0, [pc, #324]	@ (8014a10 <I2C_Test_Perform+0x164>)
 80148cc:	f000 fb7c 	bl	8014fc8 <puts>

	HAL_StatusTypeDef status;

	i2c1_tx_done = 0;
 80148d0:	4b50      	ldr	r3, [pc, #320]	@ (8014a14 <I2C_Test_Perform+0x168>)
 80148d2:	2200      	movs	r2, #0
 80148d4:	701a      	strb	r2, [r3, #0]
	i2c1_rx_done = 0;
 80148d6:	4b50      	ldr	r3, [pc, #320]	@ (8014a18 <I2C_Test_Perform+0x16c>)
 80148d8:	2200      	movs	r2, #0
 80148da:	701a      	strb	r2, [r3, #0]
	i2c2_tx_done = 0;
 80148dc:	4b4f      	ldr	r3, [pc, #316]	@ (8014a1c <I2C_Test_Perform+0x170>)
 80148de:	2200      	movs	r2, #0
 80148e0:	701a      	strb	r2, [r3, #0]
	i2c2_rx_done = 0;
 80148e2:	4b4f      	ldr	r3, [pc, #316]	@ (8014a20 <I2C_Test_Perform+0x174>)
 80148e4:	2200      	movs	r2, #0
 80148e6:	701a      	strb	r2, [r3, #0]

	uint8_t i2c1_rx[MAX_BUF];
	uint8_t i2c2_rx[MAX_BUF];

	// Send msg i2c1 -> i2c2
	status = HAL_I2C_Slave_Receive_DMA(&hi2c2, i2c2_rx, msg_len);
 80148e8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80148ec:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80148f0:	781b      	ldrb	r3, [r3, #0]
 80148f2:	b29a      	uxth	r2, r3
 80148f4:	f107 0308 	add.w	r3, r7, #8
 80148f8:	4619      	mov	r1, r3
 80148fa:	484a      	ldr	r0, [pc, #296]	@ (8014a24 <I2C_Test_Perform+0x178>)
 80148fc:	f7f0 f89a 	bl	8004a34 <HAL_I2C_Slave_Receive_DMA>
 8014900:	4603      	mov	r3, r0
 8014902:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8014906:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801490a:	2b00      	cmp	r3, #0
 801490c:	d004      	beq.n	8014918 <I2C_Test_Perform+0x6c>
	{
		printf("i2c1 -> i2c2 RX failed\n");
 801490e:	4846      	ldr	r0, [pc, #280]	@ (8014a28 <I2C_Test_Perform+0x17c>)
 8014910:	f000 fb5a 	bl	8014fc8 <puts>
		return TEST_FAILED;
 8014914:	23ff      	movs	r3, #255	@ 0xff
 8014916:	e075      	b.n	8014a04 <I2C_Test_Perform+0x158>
	}

	status = HAL_I2C_Master_Transmit_DMA(&hi2c1, 10<<1, msg, msg_len);
 8014918:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801491c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8014920:	781b      	ldrb	r3, [r3, #0]
 8014922:	b29b      	uxth	r3, r3
 8014924:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 8014928:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 801492c:	6812      	ldr	r2, [r2, #0]
 801492e:	2114      	movs	r1, #20
 8014930:	483e      	ldr	r0, [pc, #248]	@ (8014a2c <I2C_Test_Perform+0x180>)
 8014932:	f7ef fd8f 	bl	8004454 <HAL_I2C_Master_Transmit_DMA>
 8014936:	4603      	mov	r3, r0
 8014938:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801493c:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8014940:	2b00      	cmp	r3, #0
 8014942:	d004      	beq.n	801494e <I2C_Test_Perform+0xa2>
	{
		printf("i2c1 -> i2c2 TX failed\n");
 8014944:	483a      	ldr	r0, [pc, #232]	@ (8014a30 <I2C_Test_Perform+0x184>)
 8014946:	f000 fb3f 	bl	8014fc8 <puts>
		return TEST_FAILED;
 801494a:	23ff      	movs	r3, #255	@ 0xff
 801494c:	e05a      	b.n	8014a04 <I2C_Test_Perform+0x158>
	}
	while (!i2c2_rx_done || !i2c1_tx_done);
 801494e:	bf00      	nop
 8014950:	4b33      	ldr	r3, [pc, #204]	@ (8014a20 <I2C_Test_Perform+0x174>)
 8014952:	781b      	ldrb	r3, [r3, #0]
 8014954:	b2db      	uxtb	r3, r3
 8014956:	2b00      	cmp	r3, #0
 8014958:	d0fa      	beq.n	8014950 <I2C_Test_Perform+0xa4>
 801495a:	4b2e      	ldr	r3, [pc, #184]	@ (8014a14 <I2C_Test_Perform+0x168>)
 801495c:	781b      	ldrb	r3, [r3, #0]
 801495e:	b2db      	uxtb	r3, r3
 8014960:	2b00      	cmp	r3, #0
 8014962:	d0f5      	beq.n	8014950 <I2C_Test_Perform+0xa4>

	// Send msg i2c2 -> i2c1
	status = HAL_I2C_Master_Receive_DMA(&hi2c1, 10<<1, i2c1_rx, msg_len);
 8014964:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8014968:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801496c:	781b      	ldrb	r3, [r3, #0]
 801496e:	b29b      	uxth	r3, r3
 8014970:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8014974:	2114      	movs	r1, #20
 8014976:	482d      	ldr	r0, [pc, #180]	@ (8014a2c <I2C_Test_Perform+0x180>)
 8014978:	f7ef fe80 	bl	800467c <HAL_I2C_Master_Receive_DMA>
 801497c:	4603      	mov	r3, r0
 801497e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8014982:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8014986:	2b00      	cmp	r3, #0
 8014988:	d004      	beq.n	8014994 <I2C_Test_Perform+0xe8>
	{
		printf("i2c2 -> i2c1 RX failed\n");
 801498a:	482a      	ldr	r0, [pc, #168]	@ (8014a34 <I2C_Test_Perform+0x188>)
 801498c:	f000 fb1c 	bl	8014fc8 <puts>
		return TEST_FAILED;
 8014990:	23ff      	movs	r3, #255	@ 0xff
 8014992:	e037      	b.n	8014a04 <I2C_Test_Perform+0x158>
	}

	status = HAL_I2C_Slave_Transmit_DMA(&hi2c2, i2c2_rx, msg_len);
 8014994:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8014998:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801499c:	781b      	ldrb	r3, [r3, #0]
 801499e:	b29a      	uxth	r2, r3
 80149a0:	f107 0308 	add.w	r3, r7, #8
 80149a4:	4619      	mov	r1, r3
 80149a6:	481f      	ldr	r0, [pc, #124]	@ (8014a24 <I2C_Test_Perform+0x178>)
 80149a8:	f7ef ff58 	bl	800485c <HAL_I2C_Slave_Transmit_DMA>
 80149ac:	4603      	mov	r3, r0
 80149ae:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 80149b2:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d004      	beq.n	80149c4 <I2C_Test_Perform+0x118>
	{
		printf("i2c2 -> i2c1 TX failed\n");
 80149ba:	481f      	ldr	r0, [pc, #124]	@ (8014a38 <I2C_Test_Perform+0x18c>)
 80149bc:	f000 fb04 	bl	8014fc8 <puts>
		return TEST_FAILED;
 80149c0:	23ff      	movs	r3, #255	@ 0xff
 80149c2:	e01f      	b.n	8014a04 <I2C_Test_Perform+0x158>
	}
	HAL_Delay(10);
 80149c4:	200a      	movs	r0, #10
 80149c6:	f7ed f94b 	bl	8001c60 <HAL_Delay>
	//while (!i2c1_rx_done);

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, i2c1_rx, msg_len);
 80149ca:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80149ce:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80149d2:	781c      	ldrb	r4, [r3, #0]
 80149d4:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80149d8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80149dc:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80149e0:	7819      	ldrb	r1, [r3, #0]
 80149e2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80149e6:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 80149ea:	4623      	mov	r3, r4
 80149ec:	6800      	ldr	r0, [r0, #0]
 80149ee:	f7ff fe25 	bl	801463c <Match_CRC>
 80149f2:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208

	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 80149f6:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80149fa:	2b01      	cmp	r3, #1
 80149fc:	d101      	bne.n	8014a02 <I2C_Test_Perform+0x156>
 80149fe:	2301      	movs	r3, #1
 8014a00:	e000      	b.n	8014a04 <I2C_Test_Perform+0x158>

	return TEST_FAILED;
 8014a02:	23ff      	movs	r3, #255	@ 0xff
}
 8014a04:	4618      	mov	r0, r3
 8014a06:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 8014a0a:	46bd      	mov	sp, r7
 8014a0c:	bd90      	pop	{r4, r7, pc}
 8014a0e:	bf00      	nop
 8014a10:	0801925c 	.word	0x0801925c
 8014a14:	200085d4 	.word	0x200085d4
 8014a18:	200085d5 	.word	0x200085d5
 8014a1c:	200085d6 	.word	0x200085d6
 8014a20:	200085d7 	.word	0x200085d7
 8014a24:	200002a0 	.word	0x200002a0
 8014a28:	08019270 	.word	0x08019270
 8014a2c:	2000024c 	.word	0x2000024c
 8014a30:	08019288 	.word	0x08019288
 8014a34:	080192a0 	.word	0x080192a0
 8014a38:	080192b8 	.word	0x080192b8

08014a3c <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014a3c:	b480      	push	{r7}
 8014a3e:	b083      	sub	sp, #12
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) i2c1_tx_done = 1;
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	4a06      	ldr	r2, [pc, #24]	@ (8014a60 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8014a48:	4293      	cmp	r3, r2
 8014a4a:	d102      	bne.n	8014a52 <HAL_I2C_MasterTxCpltCallback+0x16>
 8014a4c:	4b05      	ldr	r3, [pc, #20]	@ (8014a64 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8014a4e:	2201      	movs	r2, #1
 8014a50:	701a      	strb	r2, [r3, #0]
}
 8014a52:	bf00      	nop
 8014a54:	370c      	adds	r7, #12
 8014a56:	46bd      	mov	sp, r7
 8014a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a5c:	4770      	bx	lr
 8014a5e:	bf00      	nop
 8014a60:	2000024c 	.word	0x2000024c
 8014a64:	200085d4 	.word	0x200085d4

08014a68 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014a68:	b480      	push	{r7}
 8014a6a:	b083      	sub	sp, #12
 8014a6c:	af00      	add	r7, sp, #0
 8014a6e:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) i2c1_rx_done = 1;
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	4a06      	ldr	r2, [pc, #24]	@ (8014a8c <HAL_I2C_MasterRxCpltCallback+0x24>)
 8014a74:	4293      	cmp	r3, r2
 8014a76:	d102      	bne.n	8014a7e <HAL_I2C_MasterRxCpltCallback+0x16>
 8014a78:	4b05      	ldr	r3, [pc, #20]	@ (8014a90 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8014a7a:	2201      	movs	r2, #1
 8014a7c:	701a      	strb	r2, [r3, #0]
}
 8014a7e:	bf00      	nop
 8014a80:	370c      	adds	r7, #12
 8014a82:	46bd      	mov	sp, r7
 8014a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a88:	4770      	bx	lr
 8014a8a:	bf00      	nop
 8014a8c:	2000024c 	.word	0x2000024c
 8014a90:	200085d5 	.word	0x200085d5

08014a94 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014a94:	b480      	push	{r7}
 8014a96:	b083      	sub	sp, #12
 8014a98:	af00      	add	r7, sp, #0
 8014a9a:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) i2c2_tx_done = 1;
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	4a06      	ldr	r2, [pc, #24]	@ (8014ab8 <HAL_I2C_SlaveTxCpltCallback+0x24>)
 8014aa0:	4293      	cmp	r3, r2
 8014aa2:	d102      	bne.n	8014aaa <HAL_I2C_SlaveTxCpltCallback+0x16>
 8014aa4:	4b05      	ldr	r3, [pc, #20]	@ (8014abc <HAL_I2C_SlaveTxCpltCallback+0x28>)
 8014aa6:	2201      	movs	r2, #1
 8014aa8:	701a      	strb	r2, [r3, #0]
}
 8014aaa:	bf00      	nop
 8014aac:	370c      	adds	r7, #12
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab4:	4770      	bx	lr
 8014ab6:	bf00      	nop
 8014ab8:	200002a0 	.word	0x200002a0
 8014abc:	200085d6 	.word	0x200085d6

08014ac0 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014ac0:	b480      	push	{r7}
 8014ac2:	b083      	sub	sp, #12
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) i2c2_rx_done = 1;
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	4a06      	ldr	r2, [pc, #24]	@ (8014ae4 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 8014acc:	4293      	cmp	r3, r2
 8014ace:	d102      	bne.n	8014ad6 <HAL_I2C_SlaveRxCpltCallback+0x16>
 8014ad0:	4b05      	ldr	r3, [pc, #20]	@ (8014ae8 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 8014ad2:	2201      	movs	r2, #1
 8014ad4:	701a      	strb	r2, [r3, #0]
}
 8014ad6:	bf00      	nop
 8014ad8:	370c      	adds	r7, #12
 8014ada:	46bd      	mov	sp, r7
 8014adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae0:	4770      	bx	lr
 8014ae2:	bf00      	nop
 8014ae4:	200002a0 	.word	0x200002a0
 8014ae8:	200085d7 	.word	0x200085d7

08014aec <Test_N_Perform_Msg>:

	return TEST_SUCCESS;
}

uint8_t Test_N_Perform_Msg(const char *test_name, MsgTestFunction test_func, uint8_t *msg, uint8_t msg_len, uint8_t n)
{
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b086      	sub	sp, #24
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	60f8      	str	r0, [r7, #12]
 8014af4:	60b9      	str	r1, [r7, #8]
 8014af6:	607a      	str	r2, [r7, #4]
 8014af8:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < n; i++)
 8014afa:	2300      	movs	r3, #0
 8014afc:	617b      	str	r3, [r7, #20]
 8014afe:	e01a      	b.n	8014b36 <Test_N_Perform_Msg+0x4a>
	{
		if (test_func(msg, msg_len) == TEST_FAILED)
 8014b00:	78fa      	ldrb	r2, [r7, #3]
 8014b02:	68bb      	ldr	r3, [r7, #8]
 8014b04:	4611      	mov	r1, r2
 8014b06:	6878      	ldr	r0, [r7, #4]
 8014b08:	4798      	blx	r3
 8014b0a:	4603      	mov	r3, r0
 8014b0c:	2bff      	cmp	r3, #255	@ 0xff
 8014b0e:	d108      	bne.n	8014b22 <Test_N_Perform_Msg+0x36>
		{
			printf("TEST %d: %s test failed\n", i + 1, test_name);
 8014b10:	697b      	ldr	r3, [r7, #20]
 8014b12:	3301      	adds	r3, #1
 8014b14:	68fa      	ldr	r2, [r7, #12]
 8014b16:	4619      	mov	r1, r3
 8014b18:	480c      	ldr	r0, [pc, #48]	@ (8014b4c <Test_N_Perform_Msg+0x60>)
 8014b1a:	f000 f9e5 	bl	8014ee8 <iprintf>
			return TEST_FAILED;
 8014b1e:	23ff      	movs	r3, #255	@ 0xff
 8014b20:	e00f      	b.n	8014b42 <Test_N_Perform_Msg+0x56>
		}
		else
		{
			printf("TEST %d: %s test success\n", i + 1, test_name);
 8014b22:	697b      	ldr	r3, [r7, #20]
 8014b24:	3301      	adds	r3, #1
 8014b26:	68fa      	ldr	r2, [r7, #12]
 8014b28:	4619      	mov	r1, r3
 8014b2a:	4809      	ldr	r0, [pc, #36]	@ (8014b50 <Test_N_Perform_Msg+0x64>)
 8014b2c:	f000 f9dc 	bl	8014ee8 <iprintf>
	for (int i = 0; i < n; i++)
 8014b30:	697b      	ldr	r3, [r7, #20]
 8014b32:	3301      	adds	r3, #1
 8014b34:	617b      	str	r3, [r7, #20]
 8014b36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014b3a:	697a      	ldr	r2, [r7, #20]
 8014b3c:	429a      	cmp	r2, r3
 8014b3e:	dbdf      	blt.n	8014b00 <Test_N_Perform_Msg+0x14>
		}
	}

	return TEST_SUCCESS;
 8014b40:	2301      	movs	r3, #1
}
 8014b42:	4618      	mov	r0, r3
 8014b44:	3718      	adds	r7, #24
 8014b46:	46bd      	mov	sp, r7
 8014b48:	bd80      	pop	{r7, pc}
 8014b4a:	bf00      	nop
 8014b4c:	080192d0 	.word	0x080192d0
 8014b50:	080192ec 	.word	0x080192ec

08014b54 <UART_Test_Perform>:
// DMA synchronization
volatile uint8_t uart4_rx_done;
volatile uint8_t uart5_rx_done;

uint8_t UART_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 8014b54:	b590      	push	{r4, r7, lr}
 8014b56:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 8014b5a:	af00      	add	r7, sp, #0
 8014b5c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8014b60:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8014b64:	6018      	str	r0, [r3, #0]
 8014b66:	460a      	mov	r2, r1
 8014b68:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8014b6c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8014b70:	701a      	strb	r2, [r3, #0]
	printf("Performing uart test\n");
 8014b72:	4844      	ldr	r0, [pc, #272]	@ (8014c84 <UART_Test_Perform+0x130>)
 8014b74:	f000 fa28 	bl	8014fc8 <puts>

	uart4_rx_done = 0;
 8014b78:	4b43      	ldr	r3, [pc, #268]	@ (8014c88 <UART_Test_Perform+0x134>)
 8014b7a:	2200      	movs	r2, #0
 8014b7c:	701a      	strb	r2, [r3, #0]
	uart5_rx_done = 0;
 8014b7e:	4b43      	ldr	r3, [pc, #268]	@ (8014c8c <UART_Test_Perform+0x138>)
 8014b80:	2200      	movs	r2, #0
 8014b82:	701a      	strb	r2, [r3, #0]

	uint8_t uart4_rx[MAX_BUF];
	uint8_t uart5_rx[MAX_BUF];

	// Send msg uart4 -> uart5
	if (HAL_UART_Receive_DMA(&huart5, uart5_rx, msg_len) != HAL_OK)
 8014b84:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8014b88:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8014b8c:	781b      	ldrb	r3, [r3, #0]
 8014b8e:	b29a      	uxth	r2, r3
 8014b90:	f107 030c 	add.w	r3, r7, #12
 8014b94:	4619      	mov	r1, r3
 8014b96:	483e      	ldr	r0, [pc, #248]	@ (8014c90 <UART_Test_Perform+0x13c>)
 8014b98:	f7f3 f9ce 	bl	8007f38 <HAL_UART_Receive_DMA>
 8014b9c:	4603      	mov	r3, r0
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d004      	beq.n	8014bac <UART_Test_Perform+0x58>
	{
		printf("uart4 -> uart5 RX1 failed\n");
 8014ba2:	483c      	ldr	r0, [pc, #240]	@ (8014c94 <UART_Test_Perform+0x140>)
 8014ba4:	f000 fa10 	bl	8014fc8 <puts>
		return TEST_FAILED;
 8014ba8:	23ff      	movs	r3, #255	@ 0xff
 8014baa:	e066      	b.n	8014c7a <UART_Test_Perform+0x126>
	}
	if (HAL_UART_Transmit_IT(&huart4, msg, msg_len) != HAL_OK)
 8014bac:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8014bb0:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8014bb4:	781b      	ldrb	r3, [r3, #0]
 8014bb6:	b29a      	uxth	r2, r3
 8014bb8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8014bbc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8014bc0:	6819      	ldr	r1, [r3, #0]
 8014bc2:	4835      	ldr	r0, [pc, #212]	@ (8014c98 <UART_Test_Perform+0x144>)
 8014bc4:	f7f3 f95a 	bl	8007e7c <HAL_UART_Transmit_IT>
 8014bc8:	4603      	mov	r3, r0
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d004      	beq.n	8014bd8 <UART_Test_Perform+0x84>
	{
		printf("uart4 -> uart5 TX failed\n");
 8014bce:	4833      	ldr	r0, [pc, #204]	@ (8014c9c <UART_Test_Perform+0x148>)
 8014bd0:	f000 f9fa 	bl	8014fc8 <puts>
		return TEST_FAILED;
 8014bd4:	23ff      	movs	r3, #255	@ 0xff
 8014bd6:	e050      	b.n	8014c7a <UART_Test_Perform+0x126>
	}
	while (!uart5_rx_done);
 8014bd8:	bf00      	nop
 8014bda:	4b2c      	ldr	r3, [pc, #176]	@ (8014c8c <UART_Test_Perform+0x138>)
 8014bdc:	781b      	ldrb	r3, [r3, #0]
 8014bde:	b2db      	uxtb	r3, r3
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d0fa      	beq.n	8014bda <UART_Test_Perform+0x86>

	// Send msg uart5 -> uart4
	if (HAL_UART_Receive_DMA(&huart4, uart4_rx, msg_len) != HAL_OK)
 8014be4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8014be8:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8014bec:	781b      	ldrb	r3, [r3, #0]
 8014bee:	b29a      	uxth	r2, r3
 8014bf0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8014bf4:	4619      	mov	r1, r3
 8014bf6:	4828      	ldr	r0, [pc, #160]	@ (8014c98 <UART_Test_Perform+0x144>)
 8014bf8:	f7f3 f99e 	bl	8007f38 <HAL_UART_Receive_DMA>
 8014bfc:	4603      	mov	r3, r0
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d004      	beq.n	8014c0c <UART_Test_Perform+0xb8>
	{
		printf("uart5 -> uart4 RX failed\n");
 8014c02:	4827      	ldr	r0, [pc, #156]	@ (8014ca0 <UART_Test_Perform+0x14c>)
 8014c04:	f000 f9e0 	bl	8014fc8 <puts>
		return TEST_FAILED;
 8014c08:	23ff      	movs	r3, #255	@ 0xff
 8014c0a:	e036      	b.n	8014c7a <UART_Test_Perform+0x126>
	}
	if (HAL_UART_Transmit_IT(&huart5, uart5_rx, msg_len) != HAL_OK)
 8014c0c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8014c10:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8014c14:	781b      	ldrb	r3, [r3, #0]
 8014c16:	b29a      	uxth	r2, r3
 8014c18:	f107 030c 	add.w	r3, r7, #12
 8014c1c:	4619      	mov	r1, r3
 8014c1e:	481c      	ldr	r0, [pc, #112]	@ (8014c90 <UART_Test_Perform+0x13c>)
 8014c20:	f7f3 f92c 	bl	8007e7c <HAL_UART_Transmit_IT>
 8014c24:	4603      	mov	r3, r0
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d004      	beq.n	8014c34 <UART_Test_Perform+0xe0>
	{
		printf("uart5 -> uart4 TX failed\n");
 8014c2a:	481e      	ldr	r0, [pc, #120]	@ (8014ca4 <UART_Test_Perform+0x150>)
 8014c2c:	f000 f9cc 	bl	8014fc8 <puts>
		return TEST_FAILED;
 8014c30:	23ff      	movs	r3, #255	@ 0xff
 8014c32:	e022      	b.n	8014c7a <UART_Test_Perform+0x126>
	}
	while (!uart4_rx_done);
 8014c34:	bf00      	nop
 8014c36:	4b14      	ldr	r3, [pc, #80]	@ (8014c88 <UART_Test_Perform+0x134>)
 8014c38:	781b      	ldrb	r3, [r3, #0]
 8014c3a:	b2db      	uxtb	r3, r3
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d0fa      	beq.n	8014c36 <UART_Test_Perform+0xe2>

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, uart4_rx, msg_len);
 8014c40:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8014c44:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8014c48:	781c      	ldrb	r4, [r3, #0]
 8014c4a:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8014c4e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8014c52:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8014c56:	7819      	ldrb	r1, [r3, #0]
 8014c58:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8014c5c:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 8014c60:	4623      	mov	r3, r4
 8014c62:	6800      	ldr	r0, [r0, #0]
 8014c64:	f7ff fcea 	bl	801463c <Match_CRC>
 8014c68:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c

	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 8014c6c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8014c70:	2b01      	cmp	r3, #1
 8014c72:	d101      	bne.n	8014c78 <UART_Test_Perform+0x124>
 8014c74:	2301      	movs	r3, #1
 8014c76:	e000      	b.n	8014c7a <UART_Test_Perform+0x126>

	return TEST_FAILED;
 8014c78:	23ff      	movs	r3, #255	@ 0xff
}
 8014c7a:	4618      	mov	r0, r3
 8014c7c:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 8014c80:	46bd      	mov	sp, r7
 8014c82:	bd90      	pop	{r4, r7, pc}
 8014c84:	08019308 	.word	0x08019308
 8014c88:	200085d8 	.word	0x200085d8
 8014c8c:	200085d9 	.word	0x200085d9
 8014c90:	20000748 	.word	0x20000748
 8014c94:	08019320 	.word	0x08019320
 8014c98:	200006c0 	.word	0x200006c0
 8014c9c:	0801933c 	.word	0x0801933c
 8014ca0:	08019358 	.word	0x08019358
 8014ca4:	08019374 	.word	0x08019374

08014ca8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8014ca8:	b480      	push	{r7}
 8014caa:	b083      	sub	sp, #12
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	6078      	str	r0, [r7, #4]
    if (huart == &huart4) uart4_rx_done = 1;
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	4a09      	ldr	r2, [pc, #36]	@ (8014cd8 <HAL_UART_RxCpltCallback+0x30>)
 8014cb4:	4293      	cmp	r3, r2
 8014cb6:	d102      	bne.n	8014cbe <HAL_UART_RxCpltCallback+0x16>
 8014cb8:	4b08      	ldr	r3, [pc, #32]	@ (8014cdc <HAL_UART_RxCpltCallback+0x34>)
 8014cba:	2201      	movs	r2, #1
 8014cbc:	701a      	strb	r2, [r3, #0]
    if (huart == &huart5) uart5_rx_done = 1;
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	4a07      	ldr	r2, [pc, #28]	@ (8014ce0 <HAL_UART_RxCpltCallback+0x38>)
 8014cc2:	4293      	cmp	r3, r2
 8014cc4:	d102      	bne.n	8014ccc <HAL_UART_RxCpltCallback+0x24>
 8014cc6:	4b07      	ldr	r3, [pc, #28]	@ (8014ce4 <HAL_UART_RxCpltCallback+0x3c>)
 8014cc8:	2201      	movs	r2, #1
 8014cca:	701a      	strb	r2, [r3, #0]
}
 8014ccc:	bf00      	nop
 8014cce:	370c      	adds	r7, #12
 8014cd0:	46bd      	mov	sp, r7
 8014cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd6:	4770      	bx	lr
 8014cd8:	200006c0 	.word	0x200006c0
 8014cdc:	200085d8 	.word	0x200085d8
 8014ce0:	20000748 	.word	0x20000748
 8014ce4:	200085d9 	.word	0x200085d9

08014ce8 <rand>:
 8014ce8:	4b16      	ldr	r3, [pc, #88]	@ (8014d44 <rand+0x5c>)
 8014cea:	b510      	push	{r4, lr}
 8014cec:	681c      	ldr	r4, [r3, #0]
 8014cee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014cf0:	b9b3      	cbnz	r3, 8014d20 <rand+0x38>
 8014cf2:	2018      	movs	r0, #24
 8014cf4:	f000 fb44 	bl	8015380 <malloc>
 8014cf8:	4602      	mov	r2, r0
 8014cfa:	6320      	str	r0, [r4, #48]	@ 0x30
 8014cfc:	b920      	cbnz	r0, 8014d08 <rand+0x20>
 8014cfe:	4b12      	ldr	r3, [pc, #72]	@ (8014d48 <rand+0x60>)
 8014d00:	4812      	ldr	r0, [pc, #72]	@ (8014d4c <rand+0x64>)
 8014d02:	2152      	movs	r1, #82	@ 0x52
 8014d04:	f000 fad4 	bl	80152b0 <__assert_func>
 8014d08:	4911      	ldr	r1, [pc, #68]	@ (8014d50 <rand+0x68>)
 8014d0a:	4b12      	ldr	r3, [pc, #72]	@ (8014d54 <rand+0x6c>)
 8014d0c:	e9c0 1300 	strd	r1, r3, [r0]
 8014d10:	4b11      	ldr	r3, [pc, #68]	@ (8014d58 <rand+0x70>)
 8014d12:	6083      	str	r3, [r0, #8]
 8014d14:	230b      	movs	r3, #11
 8014d16:	8183      	strh	r3, [r0, #12]
 8014d18:	2100      	movs	r1, #0
 8014d1a:	2001      	movs	r0, #1
 8014d1c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014d20:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014d22:	480e      	ldr	r0, [pc, #56]	@ (8014d5c <rand+0x74>)
 8014d24:	690b      	ldr	r3, [r1, #16]
 8014d26:	694c      	ldr	r4, [r1, #20]
 8014d28:	4a0d      	ldr	r2, [pc, #52]	@ (8014d60 <rand+0x78>)
 8014d2a:	4358      	muls	r0, r3
 8014d2c:	fb02 0004 	mla	r0, r2, r4, r0
 8014d30:	fba3 3202 	umull	r3, r2, r3, r2
 8014d34:	3301      	adds	r3, #1
 8014d36:	eb40 0002 	adc.w	r0, r0, r2
 8014d3a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8014d3e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8014d42:	bd10      	pop	{r4, pc}
 8014d44:	2000007c 	.word	0x2000007c
 8014d48:	080194c6 	.word	0x080194c6
 8014d4c:	080194dd 	.word	0x080194dd
 8014d50:	abcd330e 	.word	0xabcd330e
 8014d54:	e66d1234 	.word	0xe66d1234
 8014d58:	0005deec 	.word	0x0005deec
 8014d5c:	5851f42d 	.word	0x5851f42d
 8014d60:	4c957f2d 	.word	0x4c957f2d

08014d64 <std>:
 8014d64:	2300      	movs	r3, #0
 8014d66:	b510      	push	{r4, lr}
 8014d68:	4604      	mov	r4, r0
 8014d6a:	e9c0 3300 	strd	r3, r3, [r0]
 8014d6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014d72:	6083      	str	r3, [r0, #8]
 8014d74:	8181      	strh	r1, [r0, #12]
 8014d76:	6643      	str	r3, [r0, #100]	@ 0x64
 8014d78:	81c2      	strh	r2, [r0, #14]
 8014d7a:	6183      	str	r3, [r0, #24]
 8014d7c:	4619      	mov	r1, r3
 8014d7e:	2208      	movs	r2, #8
 8014d80:	305c      	adds	r0, #92	@ 0x5c
 8014d82:	f000 fa11 	bl	80151a8 <memset>
 8014d86:	4b0d      	ldr	r3, [pc, #52]	@ (8014dbc <std+0x58>)
 8014d88:	6263      	str	r3, [r4, #36]	@ 0x24
 8014d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8014dc0 <std+0x5c>)
 8014d8c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8014dc4 <std+0x60>)
 8014d90:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014d92:	4b0d      	ldr	r3, [pc, #52]	@ (8014dc8 <std+0x64>)
 8014d94:	6323      	str	r3, [r4, #48]	@ 0x30
 8014d96:	4b0d      	ldr	r3, [pc, #52]	@ (8014dcc <std+0x68>)
 8014d98:	6224      	str	r4, [r4, #32]
 8014d9a:	429c      	cmp	r4, r3
 8014d9c:	d006      	beq.n	8014dac <std+0x48>
 8014d9e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014da2:	4294      	cmp	r4, r2
 8014da4:	d002      	beq.n	8014dac <std+0x48>
 8014da6:	33d0      	adds	r3, #208	@ 0xd0
 8014da8:	429c      	cmp	r4, r3
 8014daa:	d105      	bne.n	8014db8 <std+0x54>
 8014dac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014db4:	f000 ba6a 	b.w	801528c <__retarget_lock_init_recursive>
 8014db8:	bd10      	pop	{r4, pc}
 8014dba:	bf00      	nop
 8014dbc:	08014fd9 	.word	0x08014fd9
 8014dc0:	08014ffb 	.word	0x08014ffb
 8014dc4:	08015033 	.word	0x08015033
 8014dc8:	08015057 	.word	0x08015057
 8014dcc:	200085dc 	.word	0x200085dc

08014dd0 <stdio_exit_handler>:
 8014dd0:	4a02      	ldr	r2, [pc, #8]	@ (8014ddc <stdio_exit_handler+0xc>)
 8014dd2:	4903      	ldr	r1, [pc, #12]	@ (8014de0 <stdio_exit_handler+0x10>)
 8014dd4:	4803      	ldr	r0, [pc, #12]	@ (8014de4 <stdio_exit_handler+0x14>)
 8014dd6:	f000 b869 	b.w	8014eac <_fwalk_sglue>
 8014dda:	bf00      	nop
 8014ddc:	20000070 	.word	0x20000070
 8014de0:	08015b91 	.word	0x08015b91
 8014de4:	20000080 	.word	0x20000080

08014de8 <cleanup_stdio>:
 8014de8:	6841      	ldr	r1, [r0, #4]
 8014dea:	4b0c      	ldr	r3, [pc, #48]	@ (8014e1c <cleanup_stdio+0x34>)
 8014dec:	4299      	cmp	r1, r3
 8014dee:	b510      	push	{r4, lr}
 8014df0:	4604      	mov	r4, r0
 8014df2:	d001      	beq.n	8014df8 <cleanup_stdio+0x10>
 8014df4:	f000 fecc 	bl	8015b90 <_fflush_r>
 8014df8:	68a1      	ldr	r1, [r4, #8]
 8014dfa:	4b09      	ldr	r3, [pc, #36]	@ (8014e20 <cleanup_stdio+0x38>)
 8014dfc:	4299      	cmp	r1, r3
 8014dfe:	d002      	beq.n	8014e06 <cleanup_stdio+0x1e>
 8014e00:	4620      	mov	r0, r4
 8014e02:	f000 fec5 	bl	8015b90 <_fflush_r>
 8014e06:	68e1      	ldr	r1, [r4, #12]
 8014e08:	4b06      	ldr	r3, [pc, #24]	@ (8014e24 <cleanup_stdio+0x3c>)
 8014e0a:	4299      	cmp	r1, r3
 8014e0c:	d004      	beq.n	8014e18 <cleanup_stdio+0x30>
 8014e0e:	4620      	mov	r0, r4
 8014e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e14:	f000 bebc 	b.w	8015b90 <_fflush_r>
 8014e18:	bd10      	pop	{r4, pc}
 8014e1a:	bf00      	nop
 8014e1c:	200085dc 	.word	0x200085dc
 8014e20:	20008644 	.word	0x20008644
 8014e24:	200086ac 	.word	0x200086ac

08014e28 <global_stdio_init.part.0>:
 8014e28:	b510      	push	{r4, lr}
 8014e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8014e58 <global_stdio_init.part.0+0x30>)
 8014e2c:	4c0b      	ldr	r4, [pc, #44]	@ (8014e5c <global_stdio_init.part.0+0x34>)
 8014e2e:	4a0c      	ldr	r2, [pc, #48]	@ (8014e60 <global_stdio_init.part.0+0x38>)
 8014e30:	601a      	str	r2, [r3, #0]
 8014e32:	4620      	mov	r0, r4
 8014e34:	2200      	movs	r2, #0
 8014e36:	2104      	movs	r1, #4
 8014e38:	f7ff ff94 	bl	8014d64 <std>
 8014e3c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014e40:	2201      	movs	r2, #1
 8014e42:	2109      	movs	r1, #9
 8014e44:	f7ff ff8e 	bl	8014d64 <std>
 8014e48:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014e4c:	2202      	movs	r2, #2
 8014e4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e52:	2112      	movs	r1, #18
 8014e54:	f7ff bf86 	b.w	8014d64 <std>
 8014e58:	20008714 	.word	0x20008714
 8014e5c:	200085dc 	.word	0x200085dc
 8014e60:	08014dd1 	.word	0x08014dd1

08014e64 <__sfp_lock_acquire>:
 8014e64:	4801      	ldr	r0, [pc, #4]	@ (8014e6c <__sfp_lock_acquire+0x8>)
 8014e66:	f000 ba12 	b.w	801528e <__retarget_lock_acquire_recursive>
 8014e6a:	bf00      	nop
 8014e6c:	2000871d 	.word	0x2000871d

08014e70 <__sfp_lock_release>:
 8014e70:	4801      	ldr	r0, [pc, #4]	@ (8014e78 <__sfp_lock_release+0x8>)
 8014e72:	f000 ba0d 	b.w	8015290 <__retarget_lock_release_recursive>
 8014e76:	bf00      	nop
 8014e78:	2000871d 	.word	0x2000871d

08014e7c <__sinit>:
 8014e7c:	b510      	push	{r4, lr}
 8014e7e:	4604      	mov	r4, r0
 8014e80:	f7ff fff0 	bl	8014e64 <__sfp_lock_acquire>
 8014e84:	6a23      	ldr	r3, [r4, #32]
 8014e86:	b11b      	cbz	r3, 8014e90 <__sinit+0x14>
 8014e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e8c:	f7ff bff0 	b.w	8014e70 <__sfp_lock_release>
 8014e90:	4b04      	ldr	r3, [pc, #16]	@ (8014ea4 <__sinit+0x28>)
 8014e92:	6223      	str	r3, [r4, #32]
 8014e94:	4b04      	ldr	r3, [pc, #16]	@ (8014ea8 <__sinit+0x2c>)
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d1f5      	bne.n	8014e88 <__sinit+0xc>
 8014e9c:	f7ff ffc4 	bl	8014e28 <global_stdio_init.part.0>
 8014ea0:	e7f2      	b.n	8014e88 <__sinit+0xc>
 8014ea2:	bf00      	nop
 8014ea4:	08014de9 	.word	0x08014de9
 8014ea8:	20008714 	.word	0x20008714

08014eac <_fwalk_sglue>:
 8014eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014eb0:	4607      	mov	r7, r0
 8014eb2:	4688      	mov	r8, r1
 8014eb4:	4614      	mov	r4, r2
 8014eb6:	2600      	movs	r6, #0
 8014eb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014ebc:	f1b9 0901 	subs.w	r9, r9, #1
 8014ec0:	d505      	bpl.n	8014ece <_fwalk_sglue+0x22>
 8014ec2:	6824      	ldr	r4, [r4, #0]
 8014ec4:	2c00      	cmp	r4, #0
 8014ec6:	d1f7      	bne.n	8014eb8 <_fwalk_sglue+0xc>
 8014ec8:	4630      	mov	r0, r6
 8014eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014ece:	89ab      	ldrh	r3, [r5, #12]
 8014ed0:	2b01      	cmp	r3, #1
 8014ed2:	d907      	bls.n	8014ee4 <_fwalk_sglue+0x38>
 8014ed4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014ed8:	3301      	adds	r3, #1
 8014eda:	d003      	beq.n	8014ee4 <_fwalk_sglue+0x38>
 8014edc:	4629      	mov	r1, r5
 8014ede:	4638      	mov	r0, r7
 8014ee0:	47c0      	blx	r8
 8014ee2:	4306      	orrs	r6, r0
 8014ee4:	3568      	adds	r5, #104	@ 0x68
 8014ee6:	e7e9      	b.n	8014ebc <_fwalk_sglue+0x10>

08014ee8 <iprintf>:
 8014ee8:	b40f      	push	{r0, r1, r2, r3}
 8014eea:	b507      	push	{r0, r1, r2, lr}
 8014eec:	4906      	ldr	r1, [pc, #24]	@ (8014f08 <iprintf+0x20>)
 8014eee:	ab04      	add	r3, sp, #16
 8014ef0:	6808      	ldr	r0, [r1, #0]
 8014ef2:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ef6:	6881      	ldr	r1, [r0, #8]
 8014ef8:	9301      	str	r3, [sp, #4]
 8014efa:	f000 fb21 	bl	8015540 <_vfiprintf_r>
 8014efe:	b003      	add	sp, #12
 8014f00:	f85d eb04 	ldr.w	lr, [sp], #4
 8014f04:	b004      	add	sp, #16
 8014f06:	4770      	bx	lr
 8014f08:	2000007c 	.word	0x2000007c

08014f0c <putchar>:
 8014f0c:	4b02      	ldr	r3, [pc, #8]	@ (8014f18 <putchar+0xc>)
 8014f0e:	4601      	mov	r1, r0
 8014f10:	6818      	ldr	r0, [r3, #0]
 8014f12:	6882      	ldr	r2, [r0, #8]
 8014f14:	f000 bed8 	b.w	8015cc8 <_putc_r>
 8014f18:	2000007c 	.word	0x2000007c

08014f1c <_puts_r>:
 8014f1c:	6a03      	ldr	r3, [r0, #32]
 8014f1e:	b570      	push	{r4, r5, r6, lr}
 8014f20:	6884      	ldr	r4, [r0, #8]
 8014f22:	4605      	mov	r5, r0
 8014f24:	460e      	mov	r6, r1
 8014f26:	b90b      	cbnz	r3, 8014f2c <_puts_r+0x10>
 8014f28:	f7ff ffa8 	bl	8014e7c <__sinit>
 8014f2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014f2e:	07db      	lsls	r3, r3, #31
 8014f30:	d405      	bmi.n	8014f3e <_puts_r+0x22>
 8014f32:	89a3      	ldrh	r3, [r4, #12]
 8014f34:	0598      	lsls	r0, r3, #22
 8014f36:	d402      	bmi.n	8014f3e <_puts_r+0x22>
 8014f38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014f3a:	f000 f9a8 	bl	801528e <__retarget_lock_acquire_recursive>
 8014f3e:	89a3      	ldrh	r3, [r4, #12]
 8014f40:	0719      	lsls	r1, r3, #28
 8014f42:	d502      	bpl.n	8014f4a <_puts_r+0x2e>
 8014f44:	6923      	ldr	r3, [r4, #16]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d135      	bne.n	8014fb6 <_puts_r+0x9a>
 8014f4a:	4621      	mov	r1, r4
 8014f4c:	4628      	mov	r0, r5
 8014f4e:	f000 f8c5 	bl	80150dc <__swsetup_r>
 8014f52:	b380      	cbz	r0, 8014fb6 <_puts_r+0x9a>
 8014f54:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8014f58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014f5a:	07da      	lsls	r2, r3, #31
 8014f5c:	d405      	bmi.n	8014f6a <_puts_r+0x4e>
 8014f5e:	89a3      	ldrh	r3, [r4, #12]
 8014f60:	059b      	lsls	r3, r3, #22
 8014f62:	d402      	bmi.n	8014f6a <_puts_r+0x4e>
 8014f64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014f66:	f000 f993 	bl	8015290 <__retarget_lock_release_recursive>
 8014f6a:	4628      	mov	r0, r5
 8014f6c:	bd70      	pop	{r4, r5, r6, pc}
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	da04      	bge.n	8014f7c <_puts_r+0x60>
 8014f72:	69a2      	ldr	r2, [r4, #24]
 8014f74:	429a      	cmp	r2, r3
 8014f76:	dc17      	bgt.n	8014fa8 <_puts_r+0x8c>
 8014f78:	290a      	cmp	r1, #10
 8014f7a:	d015      	beq.n	8014fa8 <_puts_r+0x8c>
 8014f7c:	6823      	ldr	r3, [r4, #0]
 8014f7e:	1c5a      	adds	r2, r3, #1
 8014f80:	6022      	str	r2, [r4, #0]
 8014f82:	7019      	strb	r1, [r3, #0]
 8014f84:	68a3      	ldr	r3, [r4, #8]
 8014f86:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014f8a:	3b01      	subs	r3, #1
 8014f8c:	60a3      	str	r3, [r4, #8]
 8014f8e:	2900      	cmp	r1, #0
 8014f90:	d1ed      	bne.n	8014f6e <_puts_r+0x52>
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	da11      	bge.n	8014fba <_puts_r+0x9e>
 8014f96:	4622      	mov	r2, r4
 8014f98:	210a      	movs	r1, #10
 8014f9a:	4628      	mov	r0, r5
 8014f9c:	f000 f85f 	bl	801505e <__swbuf_r>
 8014fa0:	3001      	adds	r0, #1
 8014fa2:	d0d7      	beq.n	8014f54 <_puts_r+0x38>
 8014fa4:	250a      	movs	r5, #10
 8014fa6:	e7d7      	b.n	8014f58 <_puts_r+0x3c>
 8014fa8:	4622      	mov	r2, r4
 8014faa:	4628      	mov	r0, r5
 8014fac:	f000 f857 	bl	801505e <__swbuf_r>
 8014fb0:	3001      	adds	r0, #1
 8014fb2:	d1e7      	bne.n	8014f84 <_puts_r+0x68>
 8014fb4:	e7ce      	b.n	8014f54 <_puts_r+0x38>
 8014fb6:	3e01      	subs	r6, #1
 8014fb8:	e7e4      	b.n	8014f84 <_puts_r+0x68>
 8014fba:	6823      	ldr	r3, [r4, #0]
 8014fbc:	1c5a      	adds	r2, r3, #1
 8014fbe:	6022      	str	r2, [r4, #0]
 8014fc0:	220a      	movs	r2, #10
 8014fc2:	701a      	strb	r2, [r3, #0]
 8014fc4:	e7ee      	b.n	8014fa4 <_puts_r+0x88>
	...

08014fc8 <puts>:
 8014fc8:	4b02      	ldr	r3, [pc, #8]	@ (8014fd4 <puts+0xc>)
 8014fca:	4601      	mov	r1, r0
 8014fcc:	6818      	ldr	r0, [r3, #0]
 8014fce:	f7ff bfa5 	b.w	8014f1c <_puts_r>
 8014fd2:	bf00      	nop
 8014fd4:	2000007c 	.word	0x2000007c

08014fd8 <__sread>:
 8014fd8:	b510      	push	{r4, lr}
 8014fda:	460c      	mov	r4, r1
 8014fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014fe0:	f000 f90c 	bl	80151fc <_read_r>
 8014fe4:	2800      	cmp	r0, #0
 8014fe6:	bfab      	itete	ge
 8014fe8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014fea:	89a3      	ldrhlt	r3, [r4, #12]
 8014fec:	181b      	addge	r3, r3, r0
 8014fee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014ff2:	bfac      	ite	ge
 8014ff4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014ff6:	81a3      	strhlt	r3, [r4, #12]
 8014ff8:	bd10      	pop	{r4, pc}

08014ffa <__swrite>:
 8014ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ffe:	461f      	mov	r7, r3
 8015000:	898b      	ldrh	r3, [r1, #12]
 8015002:	05db      	lsls	r3, r3, #23
 8015004:	4605      	mov	r5, r0
 8015006:	460c      	mov	r4, r1
 8015008:	4616      	mov	r6, r2
 801500a:	d505      	bpl.n	8015018 <__swrite+0x1e>
 801500c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015010:	2302      	movs	r3, #2
 8015012:	2200      	movs	r2, #0
 8015014:	f000 f8e0 	bl	80151d8 <_lseek_r>
 8015018:	89a3      	ldrh	r3, [r4, #12]
 801501a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801501e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015022:	81a3      	strh	r3, [r4, #12]
 8015024:	4632      	mov	r2, r6
 8015026:	463b      	mov	r3, r7
 8015028:	4628      	mov	r0, r5
 801502a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801502e:	f000 b8f7 	b.w	8015220 <_write_r>

08015032 <__sseek>:
 8015032:	b510      	push	{r4, lr}
 8015034:	460c      	mov	r4, r1
 8015036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801503a:	f000 f8cd 	bl	80151d8 <_lseek_r>
 801503e:	1c43      	adds	r3, r0, #1
 8015040:	89a3      	ldrh	r3, [r4, #12]
 8015042:	bf15      	itete	ne
 8015044:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015046:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801504a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801504e:	81a3      	strheq	r3, [r4, #12]
 8015050:	bf18      	it	ne
 8015052:	81a3      	strhne	r3, [r4, #12]
 8015054:	bd10      	pop	{r4, pc}

08015056 <__sclose>:
 8015056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801505a:	f000 b8ad 	b.w	80151b8 <_close_r>

0801505e <__swbuf_r>:
 801505e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015060:	460e      	mov	r6, r1
 8015062:	4614      	mov	r4, r2
 8015064:	4605      	mov	r5, r0
 8015066:	b118      	cbz	r0, 8015070 <__swbuf_r+0x12>
 8015068:	6a03      	ldr	r3, [r0, #32]
 801506a:	b90b      	cbnz	r3, 8015070 <__swbuf_r+0x12>
 801506c:	f7ff ff06 	bl	8014e7c <__sinit>
 8015070:	69a3      	ldr	r3, [r4, #24]
 8015072:	60a3      	str	r3, [r4, #8]
 8015074:	89a3      	ldrh	r3, [r4, #12]
 8015076:	071a      	lsls	r2, r3, #28
 8015078:	d501      	bpl.n	801507e <__swbuf_r+0x20>
 801507a:	6923      	ldr	r3, [r4, #16]
 801507c:	b943      	cbnz	r3, 8015090 <__swbuf_r+0x32>
 801507e:	4621      	mov	r1, r4
 8015080:	4628      	mov	r0, r5
 8015082:	f000 f82b 	bl	80150dc <__swsetup_r>
 8015086:	b118      	cbz	r0, 8015090 <__swbuf_r+0x32>
 8015088:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801508c:	4638      	mov	r0, r7
 801508e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015090:	6823      	ldr	r3, [r4, #0]
 8015092:	6922      	ldr	r2, [r4, #16]
 8015094:	1a98      	subs	r0, r3, r2
 8015096:	6963      	ldr	r3, [r4, #20]
 8015098:	b2f6      	uxtb	r6, r6
 801509a:	4283      	cmp	r3, r0
 801509c:	4637      	mov	r7, r6
 801509e:	dc05      	bgt.n	80150ac <__swbuf_r+0x4e>
 80150a0:	4621      	mov	r1, r4
 80150a2:	4628      	mov	r0, r5
 80150a4:	f000 fd74 	bl	8015b90 <_fflush_r>
 80150a8:	2800      	cmp	r0, #0
 80150aa:	d1ed      	bne.n	8015088 <__swbuf_r+0x2a>
 80150ac:	68a3      	ldr	r3, [r4, #8]
 80150ae:	3b01      	subs	r3, #1
 80150b0:	60a3      	str	r3, [r4, #8]
 80150b2:	6823      	ldr	r3, [r4, #0]
 80150b4:	1c5a      	adds	r2, r3, #1
 80150b6:	6022      	str	r2, [r4, #0]
 80150b8:	701e      	strb	r6, [r3, #0]
 80150ba:	6962      	ldr	r2, [r4, #20]
 80150bc:	1c43      	adds	r3, r0, #1
 80150be:	429a      	cmp	r2, r3
 80150c0:	d004      	beq.n	80150cc <__swbuf_r+0x6e>
 80150c2:	89a3      	ldrh	r3, [r4, #12]
 80150c4:	07db      	lsls	r3, r3, #31
 80150c6:	d5e1      	bpl.n	801508c <__swbuf_r+0x2e>
 80150c8:	2e0a      	cmp	r6, #10
 80150ca:	d1df      	bne.n	801508c <__swbuf_r+0x2e>
 80150cc:	4621      	mov	r1, r4
 80150ce:	4628      	mov	r0, r5
 80150d0:	f000 fd5e 	bl	8015b90 <_fflush_r>
 80150d4:	2800      	cmp	r0, #0
 80150d6:	d0d9      	beq.n	801508c <__swbuf_r+0x2e>
 80150d8:	e7d6      	b.n	8015088 <__swbuf_r+0x2a>
	...

080150dc <__swsetup_r>:
 80150dc:	b538      	push	{r3, r4, r5, lr}
 80150de:	4b29      	ldr	r3, [pc, #164]	@ (8015184 <__swsetup_r+0xa8>)
 80150e0:	4605      	mov	r5, r0
 80150e2:	6818      	ldr	r0, [r3, #0]
 80150e4:	460c      	mov	r4, r1
 80150e6:	b118      	cbz	r0, 80150f0 <__swsetup_r+0x14>
 80150e8:	6a03      	ldr	r3, [r0, #32]
 80150ea:	b90b      	cbnz	r3, 80150f0 <__swsetup_r+0x14>
 80150ec:	f7ff fec6 	bl	8014e7c <__sinit>
 80150f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80150f4:	0719      	lsls	r1, r3, #28
 80150f6:	d422      	bmi.n	801513e <__swsetup_r+0x62>
 80150f8:	06da      	lsls	r2, r3, #27
 80150fa:	d407      	bmi.n	801510c <__swsetup_r+0x30>
 80150fc:	2209      	movs	r2, #9
 80150fe:	602a      	str	r2, [r5, #0]
 8015100:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015104:	81a3      	strh	r3, [r4, #12]
 8015106:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801510a:	e033      	b.n	8015174 <__swsetup_r+0x98>
 801510c:	0758      	lsls	r0, r3, #29
 801510e:	d512      	bpl.n	8015136 <__swsetup_r+0x5a>
 8015110:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015112:	b141      	cbz	r1, 8015126 <__swsetup_r+0x4a>
 8015114:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015118:	4299      	cmp	r1, r3
 801511a:	d002      	beq.n	8015122 <__swsetup_r+0x46>
 801511c:	4628      	mov	r0, r5
 801511e:	f000 f8e5 	bl	80152ec <_free_r>
 8015122:	2300      	movs	r3, #0
 8015124:	6363      	str	r3, [r4, #52]	@ 0x34
 8015126:	89a3      	ldrh	r3, [r4, #12]
 8015128:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801512c:	81a3      	strh	r3, [r4, #12]
 801512e:	2300      	movs	r3, #0
 8015130:	6063      	str	r3, [r4, #4]
 8015132:	6923      	ldr	r3, [r4, #16]
 8015134:	6023      	str	r3, [r4, #0]
 8015136:	89a3      	ldrh	r3, [r4, #12]
 8015138:	f043 0308 	orr.w	r3, r3, #8
 801513c:	81a3      	strh	r3, [r4, #12]
 801513e:	6923      	ldr	r3, [r4, #16]
 8015140:	b94b      	cbnz	r3, 8015156 <__swsetup_r+0x7a>
 8015142:	89a3      	ldrh	r3, [r4, #12]
 8015144:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015148:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801514c:	d003      	beq.n	8015156 <__swsetup_r+0x7a>
 801514e:	4621      	mov	r1, r4
 8015150:	4628      	mov	r0, r5
 8015152:	f000 fd7d 	bl	8015c50 <__smakebuf_r>
 8015156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801515a:	f013 0201 	ands.w	r2, r3, #1
 801515e:	d00a      	beq.n	8015176 <__swsetup_r+0x9a>
 8015160:	2200      	movs	r2, #0
 8015162:	60a2      	str	r2, [r4, #8]
 8015164:	6962      	ldr	r2, [r4, #20]
 8015166:	4252      	negs	r2, r2
 8015168:	61a2      	str	r2, [r4, #24]
 801516a:	6922      	ldr	r2, [r4, #16]
 801516c:	b942      	cbnz	r2, 8015180 <__swsetup_r+0xa4>
 801516e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015172:	d1c5      	bne.n	8015100 <__swsetup_r+0x24>
 8015174:	bd38      	pop	{r3, r4, r5, pc}
 8015176:	0799      	lsls	r1, r3, #30
 8015178:	bf58      	it	pl
 801517a:	6962      	ldrpl	r2, [r4, #20]
 801517c:	60a2      	str	r2, [r4, #8]
 801517e:	e7f4      	b.n	801516a <__swsetup_r+0x8e>
 8015180:	2000      	movs	r0, #0
 8015182:	e7f7      	b.n	8015174 <__swsetup_r+0x98>
 8015184:	2000007c 	.word	0x2000007c

08015188 <memcmp>:
 8015188:	b510      	push	{r4, lr}
 801518a:	3901      	subs	r1, #1
 801518c:	4402      	add	r2, r0
 801518e:	4290      	cmp	r0, r2
 8015190:	d101      	bne.n	8015196 <memcmp+0xe>
 8015192:	2000      	movs	r0, #0
 8015194:	e005      	b.n	80151a2 <memcmp+0x1a>
 8015196:	7803      	ldrb	r3, [r0, #0]
 8015198:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801519c:	42a3      	cmp	r3, r4
 801519e:	d001      	beq.n	80151a4 <memcmp+0x1c>
 80151a0:	1b18      	subs	r0, r3, r4
 80151a2:	bd10      	pop	{r4, pc}
 80151a4:	3001      	adds	r0, #1
 80151a6:	e7f2      	b.n	801518e <memcmp+0x6>

080151a8 <memset>:
 80151a8:	4402      	add	r2, r0
 80151aa:	4603      	mov	r3, r0
 80151ac:	4293      	cmp	r3, r2
 80151ae:	d100      	bne.n	80151b2 <memset+0xa>
 80151b0:	4770      	bx	lr
 80151b2:	f803 1b01 	strb.w	r1, [r3], #1
 80151b6:	e7f9      	b.n	80151ac <memset+0x4>

080151b8 <_close_r>:
 80151b8:	b538      	push	{r3, r4, r5, lr}
 80151ba:	4d06      	ldr	r5, [pc, #24]	@ (80151d4 <_close_r+0x1c>)
 80151bc:	2300      	movs	r3, #0
 80151be:	4604      	mov	r4, r0
 80151c0:	4608      	mov	r0, r1
 80151c2:	602b      	str	r3, [r5, #0]
 80151c4:	f7ec f928 	bl	8001418 <_close>
 80151c8:	1c43      	adds	r3, r0, #1
 80151ca:	d102      	bne.n	80151d2 <_close_r+0x1a>
 80151cc:	682b      	ldr	r3, [r5, #0]
 80151ce:	b103      	cbz	r3, 80151d2 <_close_r+0x1a>
 80151d0:	6023      	str	r3, [r4, #0]
 80151d2:	bd38      	pop	{r3, r4, r5, pc}
 80151d4:	20008718 	.word	0x20008718

080151d8 <_lseek_r>:
 80151d8:	b538      	push	{r3, r4, r5, lr}
 80151da:	4d07      	ldr	r5, [pc, #28]	@ (80151f8 <_lseek_r+0x20>)
 80151dc:	4604      	mov	r4, r0
 80151de:	4608      	mov	r0, r1
 80151e0:	4611      	mov	r1, r2
 80151e2:	2200      	movs	r2, #0
 80151e4:	602a      	str	r2, [r5, #0]
 80151e6:	461a      	mov	r2, r3
 80151e8:	f7ec f93d 	bl	8001466 <_lseek>
 80151ec:	1c43      	adds	r3, r0, #1
 80151ee:	d102      	bne.n	80151f6 <_lseek_r+0x1e>
 80151f0:	682b      	ldr	r3, [r5, #0]
 80151f2:	b103      	cbz	r3, 80151f6 <_lseek_r+0x1e>
 80151f4:	6023      	str	r3, [r4, #0]
 80151f6:	bd38      	pop	{r3, r4, r5, pc}
 80151f8:	20008718 	.word	0x20008718

080151fc <_read_r>:
 80151fc:	b538      	push	{r3, r4, r5, lr}
 80151fe:	4d07      	ldr	r5, [pc, #28]	@ (801521c <_read_r+0x20>)
 8015200:	4604      	mov	r4, r0
 8015202:	4608      	mov	r0, r1
 8015204:	4611      	mov	r1, r2
 8015206:	2200      	movs	r2, #0
 8015208:	602a      	str	r2, [r5, #0]
 801520a:	461a      	mov	r2, r3
 801520c:	f7ec f8e7 	bl	80013de <_read>
 8015210:	1c43      	adds	r3, r0, #1
 8015212:	d102      	bne.n	801521a <_read_r+0x1e>
 8015214:	682b      	ldr	r3, [r5, #0]
 8015216:	b103      	cbz	r3, 801521a <_read_r+0x1e>
 8015218:	6023      	str	r3, [r4, #0]
 801521a:	bd38      	pop	{r3, r4, r5, pc}
 801521c:	20008718 	.word	0x20008718

08015220 <_write_r>:
 8015220:	b538      	push	{r3, r4, r5, lr}
 8015222:	4d07      	ldr	r5, [pc, #28]	@ (8015240 <_write_r+0x20>)
 8015224:	4604      	mov	r4, r0
 8015226:	4608      	mov	r0, r1
 8015228:	4611      	mov	r1, r2
 801522a:	2200      	movs	r2, #0
 801522c:	602a      	str	r2, [r5, #0]
 801522e:	461a      	mov	r2, r3
 8015230:	f7eb fcf0 	bl	8000c14 <_write>
 8015234:	1c43      	adds	r3, r0, #1
 8015236:	d102      	bne.n	801523e <_write_r+0x1e>
 8015238:	682b      	ldr	r3, [r5, #0]
 801523a:	b103      	cbz	r3, 801523e <_write_r+0x1e>
 801523c:	6023      	str	r3, [r4, #0]
 801523e:	bd38      	pop	{r3, r4, r5, pc}
 8015240:	20008718 	.word	0x20008718

08015244 <__libc_init_array>:
 8015244:	b570      	push	{r4, r5, r6, lr}
 8015246:	4d0d      	ldr	r5, [pc, #52]	@ (801527c <__libc_init_array+0x38>)
 8015248:	4c0d      	ldr	r4, [pc, #52]	@ (8015280 <__libc_init_array+0x3c>)
 801524a:	1b64      	subs	r4, r4, r5
 801524c:	10a4      	asrs	r4, r4, #2
 801524e:	2600      	movs	r6, #0
 8015250:	42a6      	cmp	r6, r4
 8015252:	d109      	bne.n	8015268 <__libc_init_array+0x24>
 8015254:	4d0b      	ldr	r5, [pc, #44]	@ (8015284 <__libc_init_array+0x40>)
 8015256:	4c0c      	ldr	r4, [pc, #48]	@ (8015288 <__libc_init_array+0x44>)
 8015258:	f000 fde8 	bl	8015e2c <_init>
 801525c:	1b64      	subs	r4, r4, r5
 801525e:	10a4      	asrs	r4, r4, #2
 8015260:	2600      	movs	r6, #0
 8015262:	42a6      	cmp	r6, r4
 8015264:	d105      	bne.n	8015272 <__libc_init_array+0x2e>
 8015266:	bd70      	pop	{r4, r5, r6, pc}
 8015268:	f855 3b04 	ldr.w	r3, [r5], #4
 801526c:	4798      	blx	r3
 801526e:	3601      	adds	r6, #1
 8015270:	e7ee      	b.n	8015250 <__libc_init_array+0xc>
 8015272:	f855 3b04 	ldr.w	r3, [r5], #4
 8015276:	4798      	blx	r3
 8015278:	3601      	adds	r6, #1
 801527a:	e7f2      	b.n	8015262 <__libc_init_array+0x1e>
 801527c:	080195ac 	.word	0x080195ac
 8015280:	080195ac 	.word	0x080195ac
 8015284:	080195ac 	.word	0x080195ac
 8015288:	080195b0 	.word	0x080195b0

0801528c <__retarget_lock_init_recursive>:
 801528c:	4770      	bx	lr

0801528e <__retarget_lock_acquire_recursive>:
 801528e:	4770      	bx	lr

08015290 <__retarget_lock_release_recursive>:
 8015290:	4770      	bx	lr

08015292 <memcpy>:
 8015292:	440a      	add	r2, r1
 8015294:	4291      	cmp	r1, r2
 8015296:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801529a:	d100      	bne.n	801529e <memcpy+0xc>
 801529c:	4770      	bx	lr
 801529e:	b510      	push	{r4, lr}
 80152a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80152a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80152a8:	4291      	cmp	r1, r2
 80152aa:	d1f9      	bne.n	80152a0 <memcpy+0xe>
 80152ac:	bd10      	pop	{r4, pc}
	...

080152b0 <__assert_func>:
 80152b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80152b2:	4614      	mov	r4, r2
 80152b4:	461a      	mov	r2, r3
 80152b6:	4b09      	ldr	r3, [pc, #36]	@ (80152dc <__assert_func+0x2c>)
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	4605      	mov	r5, r0
 80152bc:	68d8      	ldr	r0, [r3, #12]
 80152be:	b14c      	cbz	r4, 80152d4 <__assert_func+0x24>
 80152c0:	4b07      	ldr	r3, [pc, #28]	@ (80152e0 <__assert_func+0x30>)
 80152c2:	9100      	str	r1, [sp, #0]
 80152c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80152c8:	4906      	ldr	r1, [pc, #24]	@ (80152e4 <__assert_func+0x34>)
 80152ca:	462b      	mov	r3, r5
 80152cc:	f000 fc88 	bl	8015be0 <fiprintf>
 80152d0:	f000 fd60 	bl	8015d94 <abort>
 80152d4:	4b04      	ldr	r3, [pc, #16]	@ (80152e8 <__assert_func+0x38>)
 80152d6:	461c      	mov	r4, r3
 80152d8:	e7f3      	b.n	80152c2 <__assert_func+0x12>
 80152da:	bf00      	nop
 80152dc:	2000007c 	.word	0x2000007c
 80152e0:	08019535 	.word	0x08019535
 80152e4:	08019542 	.word	0x08019542
 80152e8:	08019570 	.word	0x08019570

080152ec <_free_r>:
 80152ec:	b538      	push	{r3, r4, r5, lr}
 80152ee:	4605      	mov	r5, r0
 80152f0:	2900      	cmp	r1, #0
 80152f2:	d041      	beq.n	8015378 <_free_r+0x8c>
 80152f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80152f8:	1f0c      	subs	r4, r1, #4
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	bfb8      	it	lt
 80152fe:	18e4      	addlt	r4, r4, r3
 8015300:	f000 f8e8 	bl	80154d4 <__malloc_lock>
 8015304:	4a1d      	ldr	r2, [pc, #116]	@ (801537c <_free_r+0x90>)
 8015306:	6813      	ldr	r3, [r2, #0]
 8015308:	b933      	cbnz	r3, 8015318 <_free_r+0x2c>
 801530a:	6063      	str	r3, [r4, #4]
 801530c:	6014      	str	r4, [r2, #0]
 801530e:	4628      	mov	r0, r5
 8015310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015314:	f000 b8e4 	b.w	80154e0 <__malloc_unlock>
 8015318:	42a3      	cmp	r3, r4
 801531a:	d908      	bls.n	801532e <_free_r+0x42>
 801531c:	6820      	ldr	r0, [r4, #0]
 801531e:	1821      	adds	r1, r4, r0
 8015320:	428b      	cmp	r3, r1
 8015322:	bf01      	itttt	eq
 8015324:	6819      	ldreq	r1, [r3, #0]
 8015326:	685b      	ldreq	r3, [r3, #4]
 8015328:	1809      	addeq	r1, r1, r0
 801532a:	6021      	streq	r1, [r4, #0]
 801532c:	e7ed      	b.n	801530a <_free_r+0x1e>
 801532e:	461a      	mov	r2, r3
 8015330:	685b      	ldr	r3, [r3, #4]
 8015332:	b10b      	cbz	r3, 8015338 <_free_r+0x4c>
 8015334:	42a3      	cmp	r3, r4
 8015336:	d9fa      	bls.n	801532e <_free_r+0x42>
 8015338:	6811      	ldr	r1, [r2, #0]
 801533a:	1850      	adds	r0, r2, r1
 801533c:	42a0      	cmp	r0, r4
 801533e:	d10b      	bne.n	8015358 <_free_r+0x6c>
 8015340:	6820      	ldr	r0, [r4, #0]
 8015342:	4401      	add	r1, r0
 8015344:	1850      	adds	r0, r2, r1
 8015346:	4283      	cmp	r3, r0
 8015348:	6011      	str	r1, [r2, #0]
 801534a:	d1e0      	bne.n	801530e <_free_r+0x22>
 801534c:	6818      	ldr	r0, [r3, #0]
 801534e:	685b      	ldr	r3, [r3, #4]
 8015350:	6053      	str	r3, [r2, #4]
 8015352:	4408      	add	r0, r1
 8015354:	6010      	str	r0, [r2, #0]
 8015356:	e7da      	b.n	801530e <_free_r+0x22>
 8015358:	d902      	bls.n	8015360 <_free_r+0x74>
 801535a:	230c      	movs	r3, #12
 801535c:	602b      	str	r3, [r5, #0]
 801535e:	e7d6      	b.n	801530e <_free_r+0x22>
 8015360:	6820      	ldr	r0, [r4, #0]
 8015362:	1821      	adds	r1, r4, r0
 8015364:	428b      	cmp	r3, r1
 8015366:	bf04      	itt	eq
 8015368:	6819      	ldreq	r1, [r3, #0]
 801536a:	685b      	ldreq	r3, [r3, #4]
 801536c:	6063      	str	r3, [r4, #4]
 801536e:	bf04      	itt	eq
 8015370:	1809      	addeq	r1, r1, r0
 8015372:	6021      	streq	r1, [r4, #0]
 8015374:	6054      	str	r4, [r2, #4]
 8015376:	e7ca      	b.n	801530e <_free_r+0x22>
 8015378:	bd38      	pop	{r3, r4, r5, pc}
 801537a:	bf00      	nop
 801537c:	20008724 	.word	0x20008724

08015380 <malloc>:
 8015380:	4b02      	ldr	r3, [pc, #8]	@ (801538c <malloc+0xc>)
 8015382:	4601      	mov	r1, r0
 8015384:	6818      	ldr	r0, [r3, #0]
 8015386:	f000 b825 	b.w	80153d4 <_malloc_r>
 801538a:	bf00      	nop
 801538c:	2000007c 	.word	0x2000007c

08015390 <sbrk_aligned>:
 8015390:	b570      	push	{r4, r5, r6, lr}
 8015392:	4e0f      	ldr	r6, [pc, #60]	@ (80153d0 <sbrk_aligned+0x40>)
 8015394:	460c      	mov	r4, r1
 8015396:	6831      	ldr	r1, [r6, #0]
 8015398:	4605      	mov	r5, r0
 801539a:	b911      	cbnz	r1, 80153a2 <sbrk_aligned+0x12>
 801539c:	f000 fcea 	bl	8015d74 <_sbrk_r>
 80153a0:	6030      	str	r0, [r6, #0]
 80153a2:	4621      	mov	r1, r4
 80153a4:	4628      	mov	r0, r5
 80153a6:	f000 fce5 	bl	8015d74 <_sbrk_r>
 80153aa:	1c43      	adds	r3, r0, #1
 80153ac:	d103      	bne.n	80153b6 <sbrk_aligned+0x26>
 80153ae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80153b2:	4620      	mov	r0, r4
 80153b4:	bd70      	pop	{r4, r5, r6, pc}
 80153b6:	1cc4      	adds	r4, r0, #3
 80153b8:	f024 0403 	bic.w	r4, r4, #3
 80153bc:	42a0      	cmp	r0, r4
 80153be:	d0f8      	beq.n	80153b2 <sbrk_aligned+0x22>
 80153c0:	1a21      	subs	r1, r4, r0
 80153c2:	4628      	mov	r0, r5
 80153c4:	f000 fcd6 	bl	8015d74 <_sbrk_r>
 80153c8:	3001      	adds	r0, #1
 80153ca:	d1f2      	bne.n	80153b2 <sbrk_aligned+0x22>
 80153cc:	e7ef      	b.n	80153ae <sbrk_aligned+0x1e>
 80153ce:	bf00      	nop
 80153d0:	20008720 	.word	0x20008720

080153d4 <_malloc_r>:
 80153d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80153d8:	1ccd      	adds	r5, r1, #3
 80153da:	f025 0503 	bic.w	r5, r5, #3
 80153de:	3508      	adds	r5, #8
 80153e0:	2d0c      	cmp	r5, #12
 80153e2:	bf38      	it	cc
 80153e4:	250c      	movcc	r5, #12
 80153e6:	2d00      	cmp	r5, #0
 80153e8:	4606      	mov	r6, r0
 80153ea:	db01      	blt.n	80153f0 <_malloc_r+0x1c>
 80153ec:	42a9      	cmp	r1, r5
 80153ee:	d904      	bls.n	80153fa <_malloc_r+0x26>
 80153f0:	230c      	movs	r3, #12
 80153f2:	6033      	str	r3, [r6, #0]
 80153f4:	2000      	movs	r0, #0
 80153f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80153fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80154d0 <_malloc_r+0xfc>
 80153fe:	f000 f869 	bl	80154d4 <__malloc_lock>
 8015402:	f8d8 3000 	ldr.w	r3, [r8]
 8015406:	461c      	mov	r4, r3
 8015408:	bb44      	cbnz	r4, 801545c <_malloc_r+0x88>
 801540a:	4629      	mov	r1, r5
 801540c:	4630      	mov	r0, r6
 801540e:	f7ff ffbf 	bl	8015390 <sbrk_aligned>
 8015412:	1c43      	adds	r3, r0, #1
 8015414:	4604      	mov	r4, r0
 8015416:	d158      	bne.n	80154ca <_malloc_r+0xf6>
 8015418:	f8d8 4000 	ldr.w	r4, [r8]
 801541c:	4627      	mov	r7, r4
 801541e:	2f00      	cmp	r7, #0
 8015420:	d143      	bne.n	80154aa <_malloc_r+0xd6>
 8015422:	2c00      	cmp	r4, #0
 8015424:	d04b      	beq.n	80154be <_malloc_r+0xea>
 8015426:	6823      	ldr	r3, [r4, #0]
 8015428:	4639      	mov	r1, r7
 801542a:	4630      	mov	r0, r6
 801542c:	eb04 0903 	add.w	r9, r4, r3
 8015430:	f000 fca0 	bl	8015d74 <_sbrk_r>
 8015434:	4581      	cmp	r9, r0
 8015436:	d142      	bne.n	80154be <_malloc_r+0xea>
 8015438:	6821      	ldr	r1, [r4, #0]
 801543a:	1a6d      	subs	r5, r5, r1
 801543c:	4629      	mov	r1, r5
 801543e:	4630      	mov	r0, r6
 8015440:	f7ff ffa6 	bl	8015390 <sbrk_aligned>
 8015444:	3001      	adds	r0, #1
 8015446:	d03a      	beq.n	80154be <_malloc_r+0xea>
 8015448:	6823      	ldr	r3, [r4, #0]
 801544a:	442b      	add	r3, r5
 801544c:	6023      	str	r3, [r4, #0]
 801544e:	f8d8 3000 	ldr.w	r3, [r8]
 8015452:	685a      	ldr	r2, [r3, #4]
 8015454:	bb62      	cbnz	r2, 80154b0 <_malloc_r+0xdc>
 8015456:	f8c8 7000 	str.w	r7, [r8]
 801545a:	e00f      	b.n	801547c <_malloc_r+0xa8>
 801545c:	6822      	ldr	r2, [r4, #0]
 801545e:	1b52      	subs	r2, r2, r5
 8015460:	d420      	bmi.n	80154a4 <_malloc_r+0xd0>
 8015462:	2a0b      	cmp	r2, #11
 8015464:	d917      	bls.n	8015496 <_malloc_r+0xc2>
 8015466:	1961      	adds	r1, r4, r5
 8015468:	42a3      	cmp	r3, r4
 801546a:	6025      	str	r5, [r4, #0]
 801546c:	bf18      	it	ne
 801546e:	6059      	strne	r1, [r3, #4]
 8015470:	6863      	ldr	r3, [r4, #4]
 8015472:	bf08      	it	eq
 8015474:	f8c8 1000 	streq.w	r1, [r8]
 8015478:	5162      	str	r2, [r4, r5]
 801547a:	604b      	str	r3, [r1, #4]
 801547c:	4630      	mov	r0, r6
 801547e:	f000 f82f 	bl	80154e0 <__malloc_unlock>
 8015482:	f104 000b 	add.w	r0, r4, #11
 8015486:	1d23      	adds	r3, r4, #4
 8015488:	f020 0007 	bic.w	r0, r0, #7
 801548c:	1ac2      	subs	r2, r0, r3
 801548e:	bf1c      	itt	ne
 8015490:	1a1b      	subne	r3, r3, r0
 8015492:	50a3      	strne	r3, [r4, r2]
 8015494:	e7af      	b.n	80153f6 <_malloc_r+0x22>
 8015496:	6862      	ldr	r2, [r4, #4]
 8015498:	42a3      	cmp	r3, r4
 801549a:	bf0c      	ite	eq
 801549c:	f8c8 2000 	streq.w	r2, [r8]
 80154a0:	605a      	strne	r2, [r3, #4]
 80154a2:	e7eb      	b.n	801547c <_malloc_r+0xa8>
 80154a4:	4623      	mov	r3, r4
 80154a6:	6864      	ldr	r4, [r4, #4]
 80154a8:	e7ae      	b.n	8015408 <_malloc_r+0x34>
 80154aa:	463c      	mov	r4, r7
 80154ac:	687f      	ldr	r7, [r7, #4]
 80154ae:	e7b6      	b.n	801541e <_malloc_r+0x4a>
 80154b0:	461a      	mov	r2, r3
 80154b2:	685b      	ldr	r3, [r3, #4]
 80154b4:	42a3      	cmp	r3, r4
 80154b6:	d1fb      	bne.n	80154b0 <_malloc_r+0xdc>
 80154b8:	2300      	movs	r3, #0
 80154ba:	6053      	str	r3, [r2, #4]
 80154bc:	e7de      	b.n	801547c <_malloc_r+0xa8>
 80154be:	230c      	movs	r3, #12
 80154c0:	6033      	str	r3, [r6, #0]
 80154c2:	4630      	mov	r0, r6
 80154c4:	f000 f80c 	bl	80154e0 <__malloc_unlock>
 80154c8:	e794      	b.n	80153f4 <_malloc_r+0x20>
 80154ca:	6005      	str	r5, [r0, #0]
 80154cc:	e7d6      	b.n	801547c <_malloc_r+0xa8>
 80154ce:	bf00      	nop
 80154d0:	20008724 	.word	0x20008724

080154d4 <__malloc_lock>:
 80154d4:	4801      	ldr	r0, [pc, #4]	@ (80154dc <__malloc_lock+0x8>)
 80154d6:	f7ff beda 	b.w	801528e <__retarget_lock_acquire_recursive>
 80154da:	bf00      	nop
 80154dc:	2000871c 	.word	0x2000871c

080154e0 <__malloc_unlock>:
 80154e0:	4801      	ldr	r0, [pc, #4]	@ (80154e8 <__malloc_unlock+0x8>)
 80154e2:	f7ff bed5 	b.w	8015290 <__retarget_lock_release_recursive>
 80154e6:	bf00      	nop
 80154e8:	2000871c 	.word	0x2000871c

080154ec <__sfputc_r>:
 80154ec:	6893      	ldr	r3, [r2, #8]
 80154ee:	3b01      	subs	r3, #1
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	b410      	push	{r4}
 80154f4:	6093      	str	r3, [r2, #8]
 80154f6:	da08      	bge.n	801550a <__sfputc_r+0x1e>
 80154f8:	6994      	ldr	r4, [r2, #24]
 80154fa:	42a3      	cmp	r3, r4
 80154fc:	db01      	blt.n	8015502 <__sfputc_r+0x16>
 80154fe:	290a      	cmp	r1, #10
 8015500:	d103      	bne.n	801550a <__sfputc_r+0x1e>
 8015502:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015506:	f7ff bdaa 	b.w	801505e <__swbuf_r>
 801550a:	6813      	ldr	r3, [r2, #0]
 801550c:	1c58      	adds	r0, r3, #1
 801550e:	6010      	str	r0, [r2, #0]
 8015510:	7019      	strb	r1, [r3, #0]
 8015512:	4608      	mov	r0, r1
 8015514:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015518:	4770      	bx	lr

0801551a <__sfputs_r>:
 801551a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801551c:	4606      	mov	r6, r0
 801551e:	460f      	mov	r7, r1
 8015520:	4614      	mov	r4, r2
 8015522:	18d5      	adds	r5, r2, r3
 8015524:	42ac      	cmp	r4, r5
 8015526:	d101      	bne.n	801552c <__sfputs_r+0x12>
 8015528:	2000      	movs	r0, #0
 801552a:	e007      	b.n	801553c <__sfputs_r+0x22>
 801552c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015530:	463a      	mov	r2, r7
 8015532:	4630      	mov	r0, r6
 8015534:	f7ff ffda 	bl	80154ec <__sfputc_r>
 8015538:	1c43      	adds	r3, r0, #1
 801553a:	d1f3      	bne.n	8015524 <__sfputs_r+0xa>
 801553c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015540 <_vfiprintf_r>:
 8015540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015544:	460d      	mov	r5, r1
 8015546:	b09d      	sub	sp, #116	@ 0x74
 8015548:	4614      	mov	r4, r2
 801554a:	4698      	mov	r8, r3
 801554c:	4606      	mov	r6, r0
 801554e:	b118      	cbz	r0, 8015558 <_vfiprintf_r+0x18>
 8015550:	6a03      	ldr	r3, [r0, #32]
 8015552:	b90b      	cbnz	r3, 8015558 <_vfiprintf_r+0x18>
 8015554:	f7ff fc92 	bl	8014e7c <__sinit>
 8015558:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801555a:	07d9      	lsls	r1, r3, #31
 801555c:	d405      	bmi.n	801556a <_vfiprintf_r+0x2a>
 801555e:	89ab      	ldrh	r3, [r5, #12]
 8015560:	059a      	lsls	r2, r3, #22
 8015562:	d402      	bmi.n	801556a <_vfiprintf_r+0x2a>
 8015564:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015566:	f7ff fe92 	bl	801528e <__retarget_lock_acquire_recursive>
 801556a:	89ab      	ldrh	r3, [r5, #12]
 801556c:	071b      	lsls	r3, r3, #28
 801556e:	d501      	bpl.n	8015574 <_vfiprintf_r+0x34>
 8015570:	692b      	ldr	r3, [r5, #16]
 8015572:	b99b      	cbnz	r3, 801559c <_vfiprintf_r+0x5c>
 8015574:	4629      	mov	r1, r5
 8015576:	4630      	mov	r0, r6
 8015578:	f7ff fdb0 	bl	80150dc <__swsetup_r>
 801557c:	b170      	cbz	r0, 801559c <_vfiprintf_r+0x5c>
 801557e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015580:	07dc      	lsls	r4, r3, #31
 8015582:	d504      	bpl.n	801558e <_vfiprintf_r+0x4e>
 8015584:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015588:	b01d      	add	sp, #116	@ 0x74
 801558a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801558e:	89ab      	ldrh	r3, [r5, #12]
 8015590:	0598      	lsls	r0, r3, #22
 8015592:	d4f7      	bmi.n	8015584 <_vfiprintf_r+0x44>
 8015594:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015596:	f7ff fe7b 	bl	8015290 <__retarget_lock_release_recursive>
 801559a:	e7f3      	b.n	8015584 <_vfiprintf_r+0x44>
 801559c:	2300      	movs	r3, #0
 801559e:	9309      	str	r3, [sp, #36]	@ 0x24
 80155a0:	2320      	movs	r3, #32
 80155a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80155a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80155aa:	2330      	movs	r3, #48	@ 0x30
 80155ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801575c <_vfiprintf_r+0x21c>
 80155b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80155b4:	f04f 0901 	mov.w	r9, #1
 80155b8:	4623      	mov	r3, r4
 80155ba:	469a      	mov	sl, r3
 80155bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80155c0:	b10a      	cbz	r2, 80155c6 <_vfiprintf_r+0x86>
 80155c2:	2a25      	cmp	r2, #37	@ 0x25
 80155c4:	d1f9      	bne.n	80155ba <_vfiprintf_r+0x7a>
 80155c6:	ebba 0b04 	subs.w	fp, sl, r4
 80155ca:	d00b      	beq.n	80155e4 <_vfiprintf_r+0xa4>
 80155cc:	465b      	mov	r3, fp
 80155ce:	4622      	mov	r2, r4
 80155d0:	4629      	mov	r1, r5
 80155d2:	4630      	mov	r0, r6
 80155d4:	f7ff ffa1 	bl	801551a <__sfputs_r>
 80155d8:	3001      	adds	r0, #1
 80155da:	f000 80a7 	beq.w	801572c <_vfiprintf_r+0x1ec>
 80155de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80155e0:	445a      	add	r2, fp
 80155e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80155e4:	f89a 3000 	ldrb.w	r3, [sl]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	f000 809f 	beq.w	801572c <_vfiprintf_r+0x1ec>
 80155ee:	2300      	movs	r3, #0
 80155f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80155f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80155f8:	f10a 0a01 	add.w	sl, sl, #1
 80155fc:	9304      	str	r3, [sp, #16]
 80155fe:	9307      	str	r3, [sp, #28]
 8015600:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015604:	931a      	str	r3, [sp, #104]	@ 0x68
 8015606:	4654      	mov	r4, sl
 8015608:	2205      	movs	r2, #5
 801560a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801560e:	4853      	ldr	r0, [pc, #332]	@ (801575c <_vfiprintf_r+0x21c>)
 8015610:	f7ea fdfe 	bl	8000210 <memchr>
 8015614:	9a04      	ldr	r2, [sp, #16]
 8015616:	b9d8      	cbnz	r0, 8015650 <_vfiprintf_r+0x110>
 8015618:	06d1      	lsls	r1, r2, #27
 801561a:	bf44      	itt	mi
 801561c:	2320      	movmi	r3, #32
 801561e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015622:	0713      	lsls	r3, r2, #28
 8015624:	bf44      	itt	mi
 8015626:	232b      	movmi	r3, #43	@ 0x2b
 8015628:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801562c:	f89a 3000 	ldrb.w	r3, [sl]
 8015630:	2b2a      	cmp	r3, #42	@ 0x2a
 8015632:	d015      	beq.n	8015660 <_vfiprintf_r+0x120>
 8015634:	9a07      	ldr	r2, [sp, #28]
 8015636:	4654      	mov	r4, sl
 8015638:	2000      	movs	r0, #0
 801563a:	f04f 0c0a 	mov.w	ip, #10
 801563e:	4621      	mov	r1, r4
 8015640:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015644:	3b30      	subs	r3, #48	@ 0x30
 8015646:	2b09      	cmp	r3, #9
 8015648:	d94b      	bls.n	80156e2 <_vfiprintf_r+0x1a2>
 801564a:	b1b0      	cbz	r0, 801567a <_vfiprintf_r+0x13a>
 801564c:	9207      	str	r2, [sp, #28]
 801564e:	e014      	b.n	801567a <_vfiprintf_r+0x13a>
 8015650:	eba0 0308 	sub.w	r3, r0, r8
 8015654:	fa09 f303 	lsl.w	r3, r9, r3
 8015658:	4313      	orrs	r3, r2
 801565a:	9304      	str	r3, [sp, #16]
 801565c:	46a2      	mov	sl, r4
 801565e:	e7d2      	b.n	8015606 <_vfiprintf_r+0xc6>
 8015660:	9b03      	ldr	r3, [sp, #12]
 8015662:	1d19      	adds	r1, r3, #4
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	9103      	str	r1, [sp, #12]
 8015668:	2b00      	cmp	r3, #0
 801566a:	bfbb      	ittet	lt
 801566c:	425b      	neglt	r3, r3
 801566e:	f042 0202 	orrlt.w	r2, r2, #2
 8015672:	9307      	strge	r3, [sp, #28]
 8015674:	9307      	strlt	r3, [sp, #28]
 8015676:	bfb8      	it	lt
 8015678:	9204      	strlt	r2, [sp, #16]
 801567a:	7823      	ldrb	r3, [r4, #0]
 801567c:	2b2e      	cmp	r3, #46	@ 0x2e
 801567e:	d10a      	bne.n	8015696 <_vfiprintf_r+0x156>
 8015680:	7863      	ldrb	r3, [r4, #1]
 8015682:	2b2a      	cmp	r3, #42	@ 0x2a
 8015684:	d132      	bne.n	80156ec <_vfiprintf_r+0x1ac>
 8015686:	9b03      	ldr	r3, [sp, #12]
 8015688:	1d1a      	adds	r2, r3, #4
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	9203      	str	r2, [sp, #12]
 801568e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015692:	3402      	adds	r4, #2
 8015694:	9305      	str	r3, [sp, #20]
 8015696:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801576c <_vfiprintf_r+0x22c>
 801569a:	7821      	ldrb	r1, [r4, #0]
 801569c:	2203      	movs	r2, #3
 801569e:	4650      	mov	r0, sl
 80156a0:	f7ea fdb6 	bl	8000210 <memchr>
 80156a4:	b138      	cbz	r0, 80156b6 <_vfiprintf_r+0x176>
 80156a6:	9b04      	ldr	r3, [sp, #16]
 80156a8:	eba0 000a 	sub.w	r0, r0, sl
 80156ac:	2240      	movs	r2, #64	@ 0x40
 80156ae:	4082      	lsls	r2, r0
 80156b0:	4313      	orrs	r3, r2
 80156b2:	3401      	adds	r4, #1
 80156b4:	9304      	str	r3, [sp, #16]
 80156b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80156ba:	4829      	ldr	r0, [pc, #164]	@ (8015760 <_vfiprintf_r+0x220>)
 80156bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80156c0:	2206      	movs	r2, #6
 80156c2:	f7ea fda5 	bl	8000210 <memchr>
 80156c6:	2800      	cmp	r0, #0
 80156c8:	d03f      	beq.n	801574a <_vfiprintf_r+0x20a>
 80156ca:	4b26      	ldr	r3, [pc, #152]	@ (8015764 <_vfiprintf_r+0x224>)
 80156cc:	bb1b      	cbnz	r3, 8015716 <_vfiprintf_r+0x1d6>
 80156ce:	9b03      	ldr	r3, [sp, #12]
 80156d0:	3307      	adds	r3, #7
 80156d2:	f023 0307 	bic.w	r3, r3, #7
 80156d6:	3308      	adds	r3, #8
 80156d8:	9303      	str	r3, [sp, #12]
 80156da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80156dc:	443b      	add	r3, r7
 80156de:	9309      	str	r3, [sp, #36]	@ 0x24
 80156e0:	e76a      	b.n	80155b8 <_vfiprintf_r+0x78>
 80156e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80156e6:	460c      	mov	r4, r1
 80156e8:	2001      	movs	r0, #1
 80156ea:	e7a8      	b.n	801563e <_vfiprintf_r+0xfe>
 80156ec:	2300      	movs	r3, #0
 80156ee:	3401      	adds	r4, #1
 80156f0:	9305      	str	r3, [sp, #20]
 80156f2:	4619      	mov	r1, r3
 80156f4:	f04f 0c0a 	mov.w	ip, #10
 80156f8:	4620      	mov	r0, r4
 80156fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80156fe:	3a30      	subs	r2, #48	@ 0x30
 8015700:	2a09      	cmp	r2, #9
 8015702:	d903      	bls.n	801570c <_vfiprintf_r+0x1cc>
 8015704:	2b00      	cmp	r3, #0
 8015706:	d0c6      	beq.n	8015696 <_vfiprintf_r+0x156>
 8015708:	9105      	str	r1, [sp, #20]
 801570a:	e7c4      	b.n	8015696 <_vfiprintf_r+0x156>
 801570c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015710:	4604      	mov	r4, r0
 8015712:	2301      	movs	r3, #1
 8015714:	e7f0      	b.n	80156f8 <_vfiprintf_r+0x1b8>
 8015716:	ab03      	add	r3, sp, #12
 8015718:	9300      	str	r3, [sp, #0]
 801571a:	462a      	mov	r2, r5
 801571c:	4b12      	ldr	r3, [pc, #72]	@ (8015768 <_vfiprintf_r+0x228>)
 801571e:	a904      	add	r1, sp, #16
 8015720:	4630      	mov	r0, r6
 8015722:	f3af 8000 	nop.w
 8015726:	4607      	mov	r7, r0
 8015728:	1c78      	adds	r0, r7, #1
 801572a:	d1d6      	bne.n	80156da <_vfiprintf_r+0x19a>
 801572c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801572e:	07d9      	lsls	r1, r3, #31
 8015730:	d405      	bmi.n	801573e <_vfiprintf_r+0x1fe>
 8015732:	89ab      	ldrh	r3, [r5, #12]
 8015734:	059a      	lsls	r2, r3, #22
 8015736:	d402      	bmi.n	801573e <_vfiprintf_r+0x1fe>
 8015738:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801573a:	f7ff fda9 	bl	8015290 <__retarget_lock_release_recursive>
 801573e:	89ab      	ldrh	r3, [r5, #12]
 8015740:	065b      	lsls	r3, r3, #25
 8015742:	f53f af1f 	bmi.w	8015584 <_vfiprintf_r+0x44>
 8015746:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015748:	e71e      	b.n	8015588 <_vfiprintf_r+0x48>
 801574a:	ab03      	add	r3, sp, #12
 801574c:	9300      	str	r3, [sp, #0]
 801574e:	462a      	mov	r2, r5
 8015750:	4b05      	ldr	r3, [pc, #20]	@ (8015768 <_vfiprintf_r+0x228>)
 8015752:	a904      	add	r1, sp, #16
 8015754:	4630      	mov	r0, r6
 8015756:	f000 f879 	bl	801584c <_printf_i>
 801575a:	e7e4      	b.n	8015726 <_vfiprintf_r+0x1e6>
 801575c:	08019571 	.word	0x08019571
 8015760:	0801957b 	.word	0x0801957b
 8015764:	00000000 	.word	0x00000000
 8015768:	0801551b 	.word	0x0801551b
 801576c:	08019577 	.word	0x08019577

08015770 <_printf_common>:
 8015770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015774:	4616      	mov	r6, r2
 8015776:	4698      	mov	r8, r3
 8015778:	688a      	ldr	r2, [r1, #8]
 801577a:	690b      	ldr	r3, [r1, #16]
 801577c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015780:	4293      	cmp	r3, r2
 8015782:	bfb8      	it	lt
 8015784:	4613      	movlt	r3, r2
 8015786:	6033      	str	r3, [r6, #0]
 8015788:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801578c:	4607      	mov	r7, r0
 801578e:	460c      	mov	r4, r1
 8015790:	b10a      	cbz	r2, 8015796 <_printf_common+0x26>
 8015792:	3301      	adds	r3, #1
 8015794:	6033      	str	r3, [r6, #0]
 8015796:	6823      	ldr	r3, [r4, #0]
 8015798:	0699      	lsls	r1, r3, #26
 801579a:	bf42      	ittt	mi
 801579c:	6833      	ldrmi	r3, [r6, #0]
 801579e:	3302      	addmi	r3, #2
 80157a0:	6033      	strmi	r3, [r6, #0]
 80157a2:	6825      	ldr	r5, [r4, #0]
 80157a4:	f015 0506 	ands.w	r5, r5, #6
 80157a8:	d106      	bne.n	80157b8 <_printf_common+0x48>
 80157aa:	f104 0a19 	add.w	sl, r4, #25
 80157ae:	68e3      	ldr	r3, [r4, #12]
 80157b0:	6832      	ldr	r2, [r6, #0]
 80157b2:	1a9b      	subs	r3, r3, r2
 80157b4:	42ab      	cmp	r3, r5
 80157b6:	dc26      	bgt.n	8015806 <_printf_common+0x96>
 80157b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80157bc:	6822      	ldr	r2, [r4, #0]
 80157be:	3b00      	subs	r3, #0
 80157c0:	bf18      	it	ne
 80157c2:	2301      	movne	r3, #1
 80157c4:	0692      	lsls	r2, r2, #26
 80157c6:	d42b      	bmi.n	8015820 <_printf_common+0xb0>
 80157c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80157cc:	4641      	mov	r1, r8
 80157ce:	4638      	mov	r0, r7
 80157d0:	47c8      	blx	r9
 80157d2:	3001      	adds	r0, #1
 80157d4:	d01e      	beq.n	8015814 <_printf_common+0xa4>
 80157d6:	6823      	ldr	r3, [r4, #0]
 80157d8:	6922      	ldr	r2, [r4, #16]
 80157da:	f003 0306 	and.w	r3, r3, #6
 80157de:	2b04      	cmp	r3, #4
 80157e0:	bf02      	ittt	eq
 80157e2:	68e5      	ldreq	r5, [r4, #12]
 80157e4:	6833      	ldreq	r3, [r6, #0]
 80157e6:	1aed      	subeq	r5, r5, r3
 80157e8:	68a3      	ldr	r3, [r4, #8]
 80157ea:	bf0c      	ite	eq
 80157ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80157f0:	2500      	movne	r5, #0
 80157f2:	4293      	cmp	r3, r2
 80157f4:	bfc4      	itt	gt
 80157f6:	1a9b      	subgt	r3, r3, r2
 80157f8:	18ed      	addgt	r5, r5, r3
 80157fa:	2600      	movs	r6, #0
 80157fc:	341a      	adds	r4, #26
 80157fe:	42b5      	cmp	r5, r6
 8015800:	d11a      	bne.n	8015838 <_printf_common+0xc8>
 8015802:	2000      	movs	r0, #0
 8015804:	e008      	b.n	8015818 <_printf_common+0xa8>
 8015806:	2301      	movs	r3, #1
 8015808:	4652      	mov	r2, sl
 801580a:	4641      	mov	r1, r8
 801580c:	4638      	mov	r0, r7
 801580e:	47c8      	blx	r9
 8015810:	3001      	adds	r0, #1
 8015812:	d103      	bne.n	801581c <_printf_common+0xac>
 8015814:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801581c:	3501      	adds	r5, #1
 801581e:	e7c6      	b.n	80157ae <_printf_common+0x3e>
 8015820:	18e1      	adds	r1, r4, r3
 8015822:	1c5a      	adds	r2, r3, #1
 8015824:	2030      	movs	r0, #48	@ 0x30
 8015826:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801582a:	4422      	add	r2, r4
 801582c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015830:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015834:	3302      	adds	r3, #2
 8015836:	e7c7      	b.n	80157c8 <_printf_common+0x58>
 8015838:	2301      	movs	r3, #1
 801583a:	4622      	mov	r2, r4
 801583c:	4641      	mov	r1, r8
 801583e:	4638      	mov	r0, r7
 8015840:	47c8      	blx	r9
 8015842:	3001      	adds	r0, #1
 8015844:	d0e6      	beq.n	8015814 <_printf_common+0xa4>
 8015846:	3601      	adds	r6, #1
 8015848:	e7d9      	b.n	80157fe <_printf_common+0x8e>
	...

0801584c <_printf_i>:
 801584c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015850:	7e0f      	ldrb	r7, [r1, #24]
 8015852:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015854:	2f78      	cmp	r7, #120	@ 0x78
 8015856:	4691      	mov	r9, r2
 8015858:	4680      	mov	r8, r0
 801585a:	460c      	mov	r4, r1
 801585c:	469a      	mov	sl, r3
 801585e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015862:	d807      	bhi.n	8015874 <_printf_i+0x28>
 8015864:	2f62      	cmp	r7, #98	@ 0x62
 8015866:	d80a      	bhi.n	801587e <_printf_i+0x32>
 8015868:	2f00      	cmp	r7, #0
 801586a:	f000 80d1 	beq.w	8015a10 <_printf_i+0x1c4>
 801586e:	2f58      	cmp	r7, #88	@ 0x58
 8015870:	f000 80b8 	beq.w	80159e4 <_printf_i+0x198>
 8015874:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015878:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801587c:	e03a      	b.n	80158f4 <_printf_i+0xa8>
 801587e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015882:	2b15      	cmp	r3, #21
 8015884:	d8f6      	bhi.n	8015874 <_printf_i+0x28>
 8015886:	a101      	add	r1, pc, #4	@ (adr r1, 801588c <_printf_i+0x40>)
 8015888:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801588c:	080158e5 	.word	0x080158e5
 8015890:	080158f9 	.word	0x080158f9
 8015894:	08015875 	.word	0x08015875
 8015898:	08015875 	.word	0x08015875
 801589c:	08015875 	.word	0x08015875
 80158a0:	08015875 	.word	0x08015875
 80158a4:	080158f9 	.word	0x080158f9
 80158a8:	08015875 	.word	0x08015875
 80158ac:	08015875 	.word	0x08015875
 80158b0:	08015875 	.word	0x08015875
 80158b4:	08015875 	.word	0x08015875
 80158b8:	080159f7 	.word	0x080159f7
 80158bc:	08015923 	.word	0x08015923
 80158c0:	080159b1 	.word	0x080159b1
 80158c4:	08015875 	.word	0x08015875
 80158c8:	08015875 	.word	0x08015875
 80158cc:	08015a19 	.word	0x08015a19
 80158d0:	08015875 	.word	0x08015875
 80158d4:	08015923 	.word	0x08015923
 80158d8:	08015875 	.word	0x08015875
 80158dc:	08015875 	.word	0x08015875
 80158e0:	080159b9 	.word	0x080159b9
 80158e4:	6833      	ldr	r3, [r6, #0]
 80158e6:	1d1a      	adds	r2, r3, #4
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	6032      	str	r2, [r6, #0]
 80158ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80158f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80158f4:	2301      	movs	r3, #1
 80158f6:	e09c      	b.n	8015a32 <_printf_i+0x1e6>
 80158f8:	6833      	ldr	r3, [r6, #0]
 80158fa:	6820      	ldr	r0, [r4, #0]
 80158fc:	1d19      	adds	r1, r3, #4
 80158fe:	6031      	str	r1, [r6, #0]
 8015900:	0606      	lsls	r6, r0, #24
 8015902:	d501      	bpl.n	8015908 <_printf_i+0xbc>
 8015904:	681d      	ldr	r5, [r3, #0]
 8015906:	e003      	b.n	8015910 <_printf_i+0xc4>
 8015908:	0645      	lsls	r5, r0, #25
 801590a:	d5fb      	bpl.n	8015904 <_printf_i+0xb8>
 801590c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015910:	2d00      	cmp	r5, #0
 8015912:	da03      	bge.n	801591c <_printf_i+0xd0>
 8015914:	232d      	movs	r3, #45	@ 0x2d
 8015916:	426d      	negs	r5, r5
 8015918:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801591c:	4858      	ldr	r0, [pc, #352]	@ (8015a80 <_printf_i+0x234>)
 801591e:	230a      	movs	r3, #10
 8015920:	e011      	b.n	8015946 <_printf_i+0xfa>
 8015922:	6821      	ldr	r1, [r4, #0]
 8015924:	6833      	ldr	r3, [r6, #0]
 8015926:	0608      	lsls	r0, r1, #24
 8015928:	f853 5b04 	ldr.w	r5, [r3], #4
 801592c:	d402      	bmi.n	8015934 <_printf_i+0xe8>
 801592e:	0649      	lsls	r1, r1, #25
 8015930:	bf48      	it	mi
 8015932:	b2ad      	uxthmi	r5, r5
 8015934:	2f6f      	cmp	r7, #111	@ 0x6f
 8015936:	4852      	ldr	r0, [pc, #328]	@ (8015a80 <_printf_i+0x234>)
 8015938:	6033      	str	r3, [r6, #0]
 801593a:	bf14      	ite	ne
 801593c:	230a      	movne	r3, #10
 801593e:	2308      	moveq	r3, #8
 8015940:	2100      	movs	r1, #0
 8015942:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015946:	6866      	ldr	r6, [r4, #4]
 8015948:	60a6      	str	r6, [r4, #8]
 801594a:	2e00      	cmp	r6, #0
 801594c:	db05      	blt.n	801595a <_printf_i+0x10e>
 801594e:	6821      	ldr	r1, [r4, #0]
 8015950:	432e      	orrs	r6, r5
 8015952:	f021 0104 	bic.w	r1, r1, #4
 8015956:	6021      	str	r1, [r4, #0]
 8015958:	d04b      	beq.n	80159f2 <_printf_i+0x1a6>
 801595a:	4616      	mov	r6, r2
 801595c:	fbb5 f1f3 	udiv	r1, r5, r3
 8015960:	fb03 5711 	mls	r7, r3, r1, r5
 8015964:	5dc7      	ldrb	r7, [r0, r7]
 8015966:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801596a:	462f      	mov	r7, r5
 801596c:	42bb      	cmp	r3, r7
 801596e:	460d      	mov	r5, r1
 8015970:	d9f4      	bls.n	801595c <_printf_i+0x110>
 8015972:	2b08      	cmp	r3, #8
 8015974:	d10b      	bne.n	801598e <_printf_i+0x142>
 8015976:	6823      	ldr	r3, [r4, #0]
 8015978:	07df      	lsls	r7, r3, #31
 801597a:	d508      	bpl.n	801598e <_printf_i+0x142>
 801597c:	6923      	ldr	r3, [r4, #16]
 801597e:	6861      	ldr	r1, [r4, #4]
 8015980:	4299      	cmp	r1, r3
 8015982:	bfde      	ittt	le
 8015984:	2330      	movle	r3, #48	@ 0x30
 8015986:	f806 3c01 	strble.w	r3, [r6, #-1]
 801598a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801598e:	1b92      	subs	r2, r2, r6
 8015990:	6122      	str	r2, [r4, #16]
 8015992:	f8cd a000 	str.w	sl, [sp]
 8015996:	464b      	mov	r3, r9
 8015998:	aa03      	add	r2, sp, #12
 801599a:	4621      	mov	r1, r4
 801599c:	4640      	mov	r0, r8
 801599e:	f7ff fee7 	bl	8015770 <_printf_common>
 80159a2:	3001      	adds	r0, #1
 80159a4:	d14a      	bne.n	8015a3c <_printf_i+0x1f0>
 80159a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80159aa:	b004      	add	sp, #16
 80159ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80159b0:	6823      	ldr	r3, [r4, #0]
 80159b2:	f043 0320 	orr.w	r3, r3, #32
 80159b6:	6023      	str	r3, [r4, #0]
 80159b8:	4832      	ldr	r0, [pc, #200]	@ (8015a84 <_printf_i+0x238>)
 80159ba:	2778      	movs	r7, #120	@ 0x78
 80159bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80159c0:	6823      	ldr	r3, [r4, #0]
 80159c2:	6831      	ldr	r1, [r6, #0]
 80159c4:	061f      	lsls	r7, r3, #24
 80159c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80159ca:	d402      	bmi.n	80159d2 <_printf_i+0x186>
 80159cc:	065f      	lsls	r7, r3, #25
 80159ce:	bf48      	it	mi
 80159d0:	b2ad      	uxthmi	r5, r5
 80159d2:	6031      	str	r1, [r6, #0]
 80159d4:	07d9      	lsls	r1, r3, #31
 80159d6:	bf44      	itt	mi
 80159d8:	f043 0320 	orrmi.w	r3, r3, #32
 80159dc:	6023      	strmi	r3, [r4, #0]
 80159de:	b11d      	cbz	r5, 80159e8 <_printf_i+0x19c>
 80159e0:	2310      	movs	r3, #16
 80159e2:	e7ad      	b.n	8015940 <_printf_i+0xf4>
 80159e4:	4826      	ldr	r0, [pc, #152]	@ (8015a80 <_printf_i+0x234>)
 80159e6:	e7e9      	b.n	80159bc <_printf_i+0x170>
 80159e8:	6823      	ldr	r3, [r4, #0]
 80159ea:	f023 0320 	bic.w	r3, r3, #32
 80159ee:	6023      	str	r3, [r4, #0]
 80159f0:	e7f6      	b.n	80159e0 <_printf_i+0x194>
 80159f2:	4616      	mov	r6, r2
 80159f4:	e7bd      	b.n	8015972 <_printf_i+0x126>
 80159f6:	6833      	ldr	r3, [r6, #0]
 80159f8:	6825      	ldr	r5, [r4, #0]
 80159fa:	6961      	ldr	r1, [r4, #20]
 80159fc:	1d18      	adds	r0, r3, #4
 80159fe:	6030      	str	r0, [r6, #0]
 8015a00:	062e      	lsls	r6, r5, #24
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	d501      	bpl.n	8015a0a <_printf_i+0x1be>
 8015a06:	6019      	str	r1, [r3, #0]
 8015a08:	e002      	b.n	8015a10 <_printf_i+0x1c4>
 8015a0a:	0668      	lsls	r0, r5, #25
 8015a0c:	d5fb      	bpl.n	8015a06 <_printf_i+0x1ba>
 8015a0e:	8019      	strh	r1, [r3, #0]
 8015a10:	2300      	movs	r3, #0
 8015a12:	6123      	str	r3, [r4, #16]
 8015a14:	4616      	mov	r6, r2
 8015a16:	e7bc      	b.n	8015992 <_printf_i+0x146>
 8015a18:	6833      	ldr	r3, [r6, #0]
 8015a1a:	1d1a      	adds	r2, r3, #4
 8015a1c:	6032      	str	r2, [r6, #0]
 8015a1e:	681e      	ldr	r6, [r3, #0]
 8015a20:	6862      	ldr	r2, [r4, #4]
 8015a22:	2100      	movs	r1, #0
 8015a24:	4630      	mov	r0, r6
 8015a26:	f7ea fbf3 	bl	8000210 <memchr>
 8015a2a:	b108      	cbz	r0, 8015a30 <_printf_i+0x1e4>
 8015a2c:	1b80      	subs	r0, r0, r6
 8015a2e:	6060      	str	r0, [r4, #4]
 8015a30:	6863      	ldr	r3, [r4, #4]
 8015a32:	6123      	str	r3, [r4, #16]
 8015a34:	2300      	movs	r3, #0
 8015a36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015a3a:	e7aa      	b.n	8015992 <_printf_i+0x146>
 8015a3c:	6923      	ldr	r3, [r4, #16]
 8015a3e:	4632      	mov	r2, r6
 8015a40:	4649      	mov	r1, r9
 8015a42:	4640      	mov	r0, r8
 8015a44:	47d0      	blx	sl
 8015a46:	3001      	adds	r0, #1
 8015a48:	d0ad      	beq.n	80159a6 <_printf_i+0x15a>
 8015a4a:	6823      	ldr	r3, [r4, #0]
 8015a4c:	079b      	lsls	r3, r3, #30
 8015a4e:	d413      	bmi.n	8015a78 <_printf_i+0x22c>
 8015a50:	68e0      	ldr	r0, [r4, #12]
 8015a52:	9b03      	ldr	r3, [sp, #12]
 8015a54:	4298      	cmp	r0, r3
 8015a56:	bfb8      	it	lt
 8015a58:	4618      	movlt	r0, r3
 8015a5a:	e7a6      	b.n	80159aa <_printf_i+0x15e>
 8015a5c:	2301      	movs	r3, #1
 8015a5e:	4632      	mov	r2, r6
 8015a60:	4649      	mov	r1, r9
 8015a62:	4640      	mov	r0, r8
 8015a64:	47d0      	blx	sl
 8015a66:	3001      	adds	r0, #1
 8015a68:	d09d      	beq.n	80159a6 <_printf_i+0x15a>
 8015a6a:	3501      	adds	r5, #1
 8015a6c:	68e3      	ldr	r3, [r4, #12]
 8015a6e:	9903      	ldr	r1, [sp, #12]
 8015a70:	1a5b      	subs	r3, r3, r1
 8015a72:	42ab      	cmp	r3, r5
 8015a74:	dcf2      	bgt.n	8015a5c <_printf_i+0x210>
 8015a76:	e7eb      	b.n	8015a50 <_printf_i+0x204>
 8015a78:	2500      	movs	r5, #0
 8015a7a:	f104 0619 	add.w	r6, r4, #25
 8015a7e:	e7f5      	b.n	8015a6c <_printf_i+0x220>
 8015a80:	08019582 	.word	0x08019582
 8015a84:	08019593 	.word	0x08019593

08015a88 <__sflush_r>:
 8015a88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a90:	0716      	lsls	r6, r2, #28
 8015a92:	4605      	mov	r5, r0
 8015a94:	460c      	mov	r4, r1
 8015a96:	d454      	bmi.n	8015b42 <__sflush_r+0xba>
 8015a98:	684b      	ldr	r3, [r1, #4]
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	dc02      	bgt.n	8015aa4 <__sflush_r+0x1c>
 8015a9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	dd48      	ble.n	8015b36 <__sflush_r+0xae>
 8015aa4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015aa6:	2e00      	cmp	r6, #0
 8015aa8:	d045      	beq.n	8015b36 <__sflush_r+0xae>
 8015aaa:	2300      	movs	r3, #0
 8015aac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015ab0:	682f      	ldr	r7, [r5, #0]
 8015ab2:	6a21      	ldr	r1, [r4, #32]
 8015ab4:	602b      	str	r3, [r5, #0]
 8015ab6:	d030      	beq.n	8015b1a <__sflush_r+0x92>
 8015ab8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015aba:	89a3      	ldrh	r3, [r4, #12]
 8015abc:	0759      	lsls	r1, r3, #29
 8015abe:	d505      	bpl.n	8015acc <__sflush_r+0x44>
 8015ac0:	6863      	ldr	r3, [r4, #4]
 8015ac2:	1ad2      	subs	r2, r2, r3
 8015ac4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015ac6:	b10b      	cbz	r3, 8015acc <__sflush_r+0x44>
 8015ac8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015aca:	1ad2      	subs	r2, r2, r3
 8015acc:	2300      	movs	r3, #0
 8015ace:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015ad0:	6a21      	ldr	r1, [r4, #32]
 8015ad2:	4628      	mov	r0, r5
 8015ad4:	47b0      	blx	r6
 8015ad6:	1c43      	adds	r3, r0, #1
 8015ad8:	89a3      	ldrh	r3, [r4, #12]
 8015ada:	d106      	bne.n	8015aea <__sflush_r+0x62>
 8015adc:	6829      	ldr	r1, [r5, #0]
 8015ade:	291d      	cmp	r1, #29
 8015ae0:	d82b      	bhi.n	8015b3a <__sflush_r+0xb2>
 8015ae2:	4a2a      	ldr	r2, [pc, #168]	@ (8015b8c <__sflush_r+0x104>)
 8015ae4:	40ca      	lsrs	r2, r1
 8015ae6:	07d6      	lsls	r6, r2, #31
 8015ae8:	d527      	bpl.n	8015b3a <__sflush_r+0xb2>
 8015aea:	2200      	movs	r2, #0
 8015aec:	6062      	str	r2, [r4, #4]
 8015aee:	04d9      	lsls	r1, r3, #19
 8015af0:	6922      	ldr	r2, [r4, #16]
 8015af2:	6022      	str	r2, [r4, #0]
 8015af4:	d504      	bpl.n	8015b00 <__sflush_r+0x78>
 8015af6:	1c42      	adds	r2, r0, #1
 8015af8:	d101      	bne.n	8015afe <__sflush_r+0x76>
 8015afa:	682b      	ldr	r3, [r5, #0]
 8015afc:	b903      	cbnz	r3, 8015b00 <__sflush_r+0x78>
 8015afe:	6560      	str	r0, [r4, #84]	@ 0x54
 8015b00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015b02:	602f      	str	r7, [r5, #0]
 8015b04:	b1b9      	cbz	r1, 8015b36 <__sflush_r+0xae>
 8015b06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015b0a:	4299      	cmp	r1, r3
 8015b0c:	d002      	beq.n	8015b14 <__sflush_r+0x8c>
 8015b0e:	4628      	mov	r0, r5
 8015b10:	f7ff fbec 	bl	80152ec <_free_r>
 8015b14:	2300      	movs	r3, #0
 8015b16:	6363      	str	r3, [r4, #52]	@ 0x34
 8015b18:	e00d      	b.n	8015b36 <__sflush_r+0xae>
 8015b1a:	2301      	movs	r3, #1
 8015b1c:	4628      	mov	r0, r5
 8015b1e:	47b0      	blx	r6
 8015b20:	4602      	mov	r2, r0
 8015b22:	1c50      	adds	r0, r2, #1
 8015b24:	d1c9      	bne.n	8015aba <__sflush_r+0x32>
 8015b26:	682b      	ldr	r3, [r5, #0]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d0c6      	beq.n	8015aba <__sflush_r+0x32>
 8015b2c:	2b1d      	cmp	r3, #29
 8015b2e:	d001      	beq.n	8015b34 <__sflush_r+0xac>
 8015b30:	2b16      	cmp	r3, #22
 8015b32:	d11e      	bne.n	8015b72 <__sflush_r+0xea>
 8015b34:	602f      	str	r7, [r5, #0]
 8015b36:	2000      	movs	r0, #0
 8015b38:	e022      	b.n	8015b80 <__sflush_r+0xf8>
 8015b3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015b3e:	b21b      	sxth	r3, r3
 8015b40:	e01b      	b.n	8015b7a <__sflush_r+0xf2>
 8015b42:	690f      	ldr	r7, [r1, #16]
 8015b44:	2f00      	cmp	r7, #0
 8015b46:	d0f6      	beq.n	8015b36 <__sflush_r+0xae>
 8015b48:	0793      	lsls	r3, r2, #30
 8015b4a:	680e      	ldr	r6, [r1, #0]
 8015b4c:	bf08      	it	eq
 8015b4e:	694b      	ldreq	r3, [r1, #20]
 8015b50:	600f      	str	r7, [r1, #0]
 8015b52:	bf18      	it	ne
 8015b54:	2300      	movne	r3, #0
 8015b56:	eba6 0807 	sub.w	r8, r6, r7
 8015b5a:	608b      	str	r3, [r1, #8]
 8015b5c:	f1b8 0f00 	cmp.w	r8, #0
 8015b60:	dde9      	ble.n	8015b36 <__sflush_r+0xae>
 8015b62:	6a21      	ldr	r1, [r4, #32]
 8015b64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8015b66:	4643      	mov	r3, r8
 8015b68:	463a      	mov	r2, r7
 8015b6a:	4628      	mov	r0, r5
 8015b6c:	47b0      	blx	r6
 8015b6e:	2800      	cmp	r0, #0
 8015b70:	dc08      	bgt.n	8015b84 <__sflush_r+0xfc>
 8015b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015b7a:	81a3      	strh	r3, [r4, #12]
 8015b7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b84:	4407      	add	r7, r0
 8015b86:	eba8 0800 	sub.w	r8, r8, r0
 8015b8a:	e7e7      	b.n	8015b5c <__sflush_r+0xd4>
 8015b8c:	20400001 	.word	0x20400001

08015b90 <_fflush_r>:
 8015b90:	b538      	push	{r3, r4, r5, lr}
 8015b92:	690b      	ldr	r3, [r1, #16]
 8015b94:	4605      	mov	r5, r0
 8015b96:	460c      	mov	r4, r1
 8015b98:	b913      	cbnz	r3, 8015ba0 <_fflush_r+0x10>
 8015b9a:	2500      	movs	r5, #0
 8015b9c:	4628      	mov	r0, r5
 8015b9e:	bd38      	pop	{r3, r4, r5, pc}
 8015ba0:	b118      	cbz	r0, 8015baa <_fflush_r+0x1a>
 8015ba2:	6a03      	ldr	r3, [r0, #32]
 8015ba4:	b90b      	cbnz	r3, 8015baa <_fflush_r+0x1a>
 8015ba6:	f7ff f969 	bl	8014e7c <__sinit>
 8015baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d0f3      	beq.n	8015b9a <_fflush_r+0xa>
 8015bb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015bb4:	07d0      	lsls	r0, r2, #31
 8015bb6:	d404      	bmi.n	8015bc2 <_fflush_r+0x32>
 8015bb8:	0599      	lsls	r1, r3, #22
 8015bba:	d402      	bmi.n	8015bc2 <_fflush_r+0x32>
 8015bbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015bbe:	f7ff fb66 	bl	801528e <__retarget_lock_acquire_recursive>
 8015bc2:	4628      	mov	r0, r5
 8015bc4:	4621      	mov	r1, r4
 8015bc6:	f7ff ff5f 	bl	8015a88 <__sflush_r>
 8015bca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015bcc:	07da      	lsls	r2, r3, #31
 8015bce:	4605      	mov	r5, r0
 8015bd0:	d4e4      	bmi.n	8015b9c <_fflush_r+0xc>
 8015bd2:	89a3      	ldrh	r3, [r4, #12]
 8015bd4:	059b      	lsls	r3, r3, #22
 8015bd6:	d4e1      	bmi.n	8015b9c <_fflush_r+0xc>
 8015bd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015bda:	f7ff fb59 	bl	8015290 <__retarget_lock_release_recursive>
 8015bde:	e7dd      	b.n	8015b9c <_fflush_r+0xc>

08015be0 <fiprintf>:
 8015be0:	b40e      	push	{r1, r2, r3}
 8015be2:	b503      	push	{r0, r1, lr}
 8015be4:	4601      	mov	r1, r0
 8015be6:	ab03      	add	r3, sp, #12
 8015be8:	4805      	ldr	r0, [pc, #20]	@ (8015c00 <fiprintf+0x20>)
 8015bea:	f853 2b04 	ldr.w	r2, [r3], #4
 8015bee:	6800      	ldr	r0, [r0, #0]
 8015bf0:	9301      	str	r3, [sp, #4]
 8015bf2:	f7ff fca5 	bl	8015540 <_vfiprintf_r>
 8015bf6:	b002      	add	sp, #8
 8015bf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8015bfc:	b003      	add	sp, #12
 8015bfe:	4770      	bx	lr
 8015c00:	2000007c 	.word	0x2000007c

08015c04 <__swhatbuf_r>:
 8015c04:	b570      	push	{r4, r5, r6, lr}
 8015c06:	460c      	mov	r4, r1
 8015c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c0c:	2900      	cmp	r1, #0
 8015c0e:	b096      	sub	sp, #88	@ 0x58
 8015c10:	4615      	mov	r5, r2
 8015c12:	461e      	mov	r6, r3
 8015c14:	da0d      	bge.n	8015c32 <__swhatbuf_r+0x2e>
 8015c16:	89a3      	ldrh	r3, [r4, #12]
 8015c18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015c1c:	f04f 0100 	mov.w	r1, #0
 8015c20:	bf14      	ite	ne
 8015c22:	2340      	movne	r3, #64	@ 0x40
 8015c24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015c28:	2000      	movs	r0, #0
 8015c2a:	6031      	str	r1, [r6, #0]
 8015c2c:	602b      	str	r3, [r5, #0]
 8015c2e:	b016      	add	sp, #88	@ 0x58
 8015c30:	bd70      	pop	{r4, r5, r6, pc}
 8015c32:	466a      	mov	r2, sp
 8015c34:	f000 f87c 	bl	8015d30 <_fstat_r>
 8015c38:	2800      	cmp	r0, #0
 8015c3a:	dbec      	blt.n	8015c16 <__swhatbuf_r+0x12>
 8015c3c:	9901      	ldr	r1, [sp, #4]
 8015c3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015c42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015c46:	4259      	negs	r1, r3
 8015c48:	4159      	adcs	r1, r3
 8015c4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015c4e:	e7eb      	b.n	8015c28 <__swhatbuf_r+0x24>

08015c50 <__smakebuf_r>:
 8015c50:	898b      	ldrh	r3, [r1, #12]
 8015c52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015c54:	079d      	lsls	r5, r3, #30
 8015c56:	4606      	mov	r6, r0
 8015c58:	460c      	mov	r4, r1
 8015c5a:	d507      	bpl.n	8015c6c <__smakebuf_r+0x1c>
 8015c5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015c60:	6023      	str	r3, [r4, #0]
 8015c62:	6123      	str	r3, [r4, #16]
 8015c64:	2301      	movs	r3, #1
 8015c66:	6163      	str	r3, [r4, #20]
 8015c68:	b003      	add	sp, #12
 8015c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c6c:	ab01      	add	r3, sp, #4
 8015c6e:	466a      	mov	r2, sp
 8015c70:	f7ff ffc8 	bl	8015c04 <__swhatbuf_r>
 8015c74:	9f00      	ldr	r7, [sp, #0]
 8015c76:	4605      	mov	r5, r0
 8015c78:	4639      	mov	r1, r7
 8015c7a:	4630      	mov	r0, r6
 8015c7c:	f7ff fbaa 	bl	80153d4 <_malloc_r>
 8015c80:	b948      	cbnz	r0, 8015c96 <__smakebuf_r+0x46>
 8015c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015c86:	059a      	lsls	r2, r3, #22
 8015c88:	d4ee      	bmi.n	8015c68 <__smakebuf_r+0x18>
 8015c8a:	f023 0303 	bic.w	r3, r3, #3
 8015c8e:	f043 0302 	orr.w	r3, r3, #2
 8015c92:	81a3      	strh	r3, [r4, #12]
 8015c94:	e7e2      	b.n	8015c5c <__smakebuf_r+0xc>
 8015c96:	89a3      	ldrh	r3, [r4, #12]
 8015c98:	6020      	str	r0, [r4, #0]
 8015c9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015c9e:	81a3      	strh	r3, [r4, #12]
 8015ca0:	9b01      	ldr	r3, [sp, #4]
 8015ca2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015ca6:	b15b      	cbz	r3, 8015cc0 <__smakebuf_r+0x70>
 8015ca8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015cac:	4630      	mov	r0, r6
 8015cae:	f000 f851 	bl	8015d54 <_isatty_r>
 8015cb2:	b128      	cbz	r0, 8015cc0 <__smakebuf_r+0x70>
 8015cb4:	89a3      	ldrh	r3, [r4, #12]
 8015cb6:	f023 0303 	bic.w	r3, r3, #3
 8015cba:	f043 0301 	orr.w	r3, r3, #1
 8015cbe:	81a3      	strh	r3, [r4, #12]
 8015cc0:	89a3      	ldrh	r3, [r4, #12]
 8015cc2:	431d      	orrs	r5, r3
 8015cc4:	81a5      	strh	r5, [r4, #12]
 8015cc6:	e7cf      	b.n	8015c68 <__smakebuf_r+0x18>

08015cc8 <_putc_r>:
 8015cc8:	b570      	push	{r4, r5, r6, lr}
 8015cca:	460d      	mov	r5, r1
 8015ccc:	4614      	mov	r4, r2
 8015cce:	4606      	mov	r6, r0
 8015cd0:	b118      	cbz	r0, 8015cda <_putc_r+0x12>
 8015cd2:	6a03      	ldr	r3, [r0, #32]
 8015cd4:	b90b      	cbnz	r3, 8015cda <_putc_r+0x12>
 8015cd6:	f7ff f8d1 	bl	8014e7c <__sinit>
 8015cda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015cdc:	07d8      	lsls	r0, r3, #31
 8015cde:	d405      	bmi.n	8015cec <_putc_r+0x24>
 8015ce0:	89a3      	ldrh	r3, [r4, #12]
 8015ce2:	0599      	lsls	r1, r3, #22
 8015ce4:	d402      	bmi.n	8015cec <_putc_r+0x24>
 8015ce6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015ce8:	f7ff fad1 	bl	801528e <__retarget_lock_acquire_recursive>
 8015cec:	68a3      	ldr	r3, [r4, #8]
 8015cee:	3b01      	subs	r3, #1
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	60a3      	str	r3, [r4, #8]
 8015cf4:	da05      	bge.n	8015d02 <_putc_r+0x3a>
 8015cf6:	69a2      	ldr	r2, [r4, #24]
 8015cf8:	4293      	cmp	r3, r2
 8015cfa:	db12      	blt.n	8015d22 <_putc_r+0x5a>
 8015cfc:	b2eb      	uxtb	r3, r5
 8015cfe:	2b0a      	cmp	r3, #10
 8015d00:	d00f      	beq.n	8015d22 <_putc_r+0x5a>
 8015d02:	6823      	ldr	r3, [r4, #0]
 8015d04:	1c5a      	adds	r2, r3, #1
 8015d06:	6022      	str	r2, [r4, #0]
 8015d08:	701d      	strb	r5, [r3, #0]
 8015d0a:	b2ed      	uxtb	r5, r5
 8015d0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015d0e:	07da      	lsls	r2, r3, #31
 8015d10:	d405      	bmi.n	8015d1e <_putc_r+0x56>
 8015d12:	89a3      	ldrh	r3, [r4, #12]
 8015d14:	059b      	lsls	r3, r3, #22
 8015d16:	d402      	bmi.n	8015d1e <_putc_r+0x56>
 8015d18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015d1a:	f7ff fab9 	bl	8015290 <__retarget_lock_release_recursive>
 8015d1e:	4628      	mov	r0, r5
 8015d20:	bd70      	pop	{r4, r5, r6, pc}
 8015d22:	4629      	mov	r1, r5
 8015d24:	4622      	mov	r2, r4
 8015d26:	4630      	mov	r0, r6
 8015d28:	f7ff f999 	bl	801505e <__swbuf_r>
 8015d2c:	4605      	mov	r5, r0
 8015d2e:	e7ed      	b.n	8015d0c <_putc_r+0x44>

08015d30 <_fstat_r>:
 8015d30:	b538      	push	{r3, r4, r5, lr}
 8015d32:	4d07      	ldr	r5, [pc, #28]	@ (8015d50 <_fstat_r+0x20>)
 8015d34:	2300      	movs	r3, #0
 8015d36:	4604      	mov	r4, r0
 8015d38:	4608      	mov	r0, r1
 8015d3a:	4611      	mov	r1, r2
 8015d3c:	602b      	str	r3, [r5, #0]
 8015d3e:	f7eb fb77 	bl	8001430 <_fstat>
 8015d42:	1c43      	adds	r3, r0, #1
 8015d44:	d102      	bne.n	8015d4c <_fstat_r+0x1c>
 8015d46:	682b      	ldr	r3, [r5, #0]
 8015d48:	b103      	cbz	r3, 8015d4c <_fstat_r+0x1c>
 8015d4a:	6023      	str	r3, [r4, #0]
 8015d4c:	bd38      	pop	{r3, r4, r5, pc}
 8015d4e:	bf00      	nop
 8015d50:	20008718 	.word	0x20008718

08015d54 <_isatty_r>:
 8015d54:	b538      	push	{r3, r4, r5, lr}
 8015d56:	4d06      	ldr	r5, [pc, #24]	@ (8015d70 <_isatty_r+0x1c>)
 8015d58:	2300      	movs	r3, #0
 8015d5a:	4604      	mov	r4, r0
 8015d5c:	4608      	mov	r0, r1
 8015d5e:	602b      	str	r3, [r5, #0]
 8015d60:	f7eb fb76 	bl	8001450 <_isatty>
 8015d64:	1c43      	adds	r3, r0, #1
 8015d66:	d102      	bne.n	8015d6e <_isatty_r+0x1a>
 8015d68:	682b      	ldr	r3, [r5, #0]
 8015d6a:	b103      	cbz	r3, 8015d6e <_isatty_r+0x1a>
 8015d6c:	6023      	str	r3, [r4, #0]
 8015d6e:	bd38      	pop	{r3, r4, r5, pc}
 8015d70:	20008718 	.word	0x20008718

08015d74 <_sbrk_r>:
 8015d74:	b538      	push	{r3, r4, r5, lr}
 8015d76:	4d06      	ldr	r5, [pc, #24]	@ (8015d90 <_sbrk_r+0x1c>)
 8015d78:	2300      	movs	r3, #0
 8015d7a:	4604      	mov	r4, r0
 8015d7c:	4608      	mov	r0, r1
 8015d7e:	602b      	str	r3, [r5, #0]
 8015d80:	f7eb fb7e 	bl	8001480 <_sbrk>
 8015d84:	1c43      	adds	r3, r0, #1
 8015d86:	d102      	bne.n	8015d8e <_sbrk_r+0x1a>
 8015d88:	682b      	ldr	r3, [r5, #0]
 8015d8a:	b103      	cbz	r3, 8015d8e <_sbrk_r+0x1a>
 8015d8c:	6023      	str	r3, [r4, #0]
 8015d8e:	bd38      	pop	{r3, r4, r5, pc}
 8015d90:	20008718 	.word	0x20008718

08015d94 <abort>:
 8015d94:	b508      	push	{r3, lr}
 8015d96:	2006      	movs	r0, #6
 8015d98:	f000 f82c 	bl	8015df4 <raise>
 8015d9c:	2001      	movs	r0, #1
 8015d9e:	f7eb fb13 	bl	80013c8 <_exit>

08015da2 <_raise_r>:
 8015da2:	291f      	cmp	r1, #31
 8015da4:	b538      	push	{r3, r4, r5, lr}
 8015da6:	4605      	mov	r5, r0
 8015da8:	460c      	mov	r4, r1
 8015daa:	d904      	bls.n	8015db6 <_raise_r+0x14>
 8015dac:	2316      	movs	r3, #22
 8015dae:	6003      	str	r3, [r0, #0]
 8015db0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015db4:	bd38      	pop	{r3, r4, r5, pc}
 8015db6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015db8:	b112      	cbz	r2, 8015dc0 <_raise_r+0x1e>
 8015dba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015dbe:	b94b      	cbnz	r3, 8015dd4 <_raise_r+0x32>
 8015dc0:	4628      	mov	r0, r5
 8015dc2:	f000 f831 	bl	8015e28 <_getpid_r>
 8015dc6:	4622      	mov	r2, r4
 8015dc8:	4601      	mov	r1, r0
 8015dca:	4628      	mov	r0, r5
 8015dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015dd0:	f000 b818 	b.w	8015e04 <_kill_r>
 8015dd4:	2b01      	cmp	r3, #1
 8015dd6:	d00a      	beq.n	8015dee <_raise_r+0x4c>
 8015dd8:	1c59      	adds	r1, r3, #1
 8015dda:	d103      	bne.n	8015de4 <_raise_r+0x42>
 8015ddc:	2316      	movs	r3, #22
 8015dde:	6003      	str	r3, [r0, #0]
 8015de0:	2001      	movs	r0, #1
 8015de2:	e7e7      	b.n	8015db4 <_raise_r+0x12>
 8015de4:	2100      	movs	r1, #0
 8015de6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015dea:	4620      	mov	r0, r4
 8015dec:	4798      	blx	r3
 8015dee:	2000      	movs	r0, #0
 8015df0:	e7e0      	b.n	8015db4 <_raise_r+0x12>
	...

08015df4 <raise>:
 8015df4:	4b02      	ldr	r3, [pc, #8]	@ (8015e00 <raise+0xc>)
 8015df6:	4601      	mov	r1, r0
 8015df8:	6818      	ldr	r0, [r3, #0]
 8015dfa:	f7ff bfd2 	b.w	8015da2 <_raise_r>
 8015dfe:	bf00      	nop
 8015e00:	2000007c 	.word	0x2000007c

08015e04 <_kill_r>:
 8015e04:	b538      	push	{r3, r4, r5, lr}
 8015e06:	4d07      	ldr	r5, [pc, #28]	@ (8015e24 <_kill_r+0x20>)
 8015e08:	2300      	movs	r3, #0
 8015e0a:	4604      	mov	r4, r0
 8015e0c:	4608      	mov	r0, r1
 8015e0e:	4611      	mov	r1, r2
 8015e10:	602b      	str	r3, [r5, #0]
 8015e12:	f7eb fac7 	bl	80013a4 <_kill>
 8015e16:	1c43      	adds	r3, r0, #1
 8015e18:	d102      	bne.n	8015e20 <_kill_r+0x1c>
 8015e1a:	682b      	ldr	r3, [r5, #0]
 8015e1c:	b103      	cbz	r3, 8015e20 <_kill_r+0x1c>
 8015e1e:	6023      	str	r3, [r4, #0]
 8015e20:	bd38      	pop	{r3, r4, r5, pc}
 8015e22:	bf00      	nop
 8015e24:	20008718 	.word	0x20008718

08015e28 <_getpid_r>:
 8015e28:	f7eb bab4 	b.w	8001394 <_getpid>

08015e2c <_init>:
 8015e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e2e:	bf00      	nop
 8015e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e32:	bc08      	pop	{r3}
 8015e34:	469e      	mov	lr, r3
 8015e36:	4770      	bx	lr

08015e38 <_fini>:
 8015e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e3a:	bf00      	nop
 8015e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e3e:	bc08      	pop	{r3}
 8015e40:	469e      	mov	lr, r3
 8015e42:	4770      	bx	lr
